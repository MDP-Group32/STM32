
Moving1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f68  0800c248  0800c248  0000d248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1b0  0800d1b0  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1b0  0800d1b0  0000e1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1b8  0800d1b8  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1b8  0800d1b8  0000e1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d1bc  0800d1bc  0000e1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d1c0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1d8  2**0
                  CONTENTS
 10 .bss          000054dc  200001d8  200001d8  0000f1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200056b4  200056b4  0000f1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018fb9  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037c0  00000000  00000000  000281c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0002b988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a3  00000000  00000000  0002d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004c8d  00000000  00000000  0002e1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019237  00000000  00000000  00032e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d81c6  00000000  00000000  0004c09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124265  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007184  00000000  00000000  001242a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0012b42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c22c 	.word	0x0800c22c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c22c 	.word	0x0800c22c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f001 fdfa 	bl	8002a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f834 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 fb42 	bl	800152c <MX_GPIO_Init>
  MX_TIM8_Init();
 8000ea8:	f000 fa6c 	bl	8001384 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000eac:	f000 f92a 	bl	8001104 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000eb0:	f000 f88a 	bl	8000fc8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000eb4:	f000 fb10 	bl	80014d8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000eb8:	f000 f978 	bl	80011ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ebc:	f000 f9d8 	bl	8001270 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000ec0:	f000 fa2a 	bl	8001318 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000ec4:	f008 fa46 	bl	8009354 <OLED_Init>
  //HAL_UART_Receive_IT(&huart3,aRxBuffer,5);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ec8:	f005 fb20 	bl	800650c <osKernelInitialize>

  /* creation of DCMotor1 */
  //DCMotor1Handle = osThreadNew(motors, NULL, &DCMotor1_attributes);

  /* creation of Encoder */
  EncoderHandle = osThreadNew(encoder, NULL, &Encoder_attributes);
 8000ecc:	4a09      	ldr	r2, [pc, #36]	@ (8000ef4 <main+0x5c>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4809      	ldr	r0, [pc, #36]	@ (8000ef8 <main+0x60>)
 8000ed2:	f005 fb65 	bl	80065a0 <osThreadNew>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a08      	ldr	r2, [pc, #32]	@ (8000efc <main+0x64>)
 8000eda:	6013      	str	r3, [r2, #0]

  /* creation of UART_Thread */
  UART_ThreadHandle = osThreadNew(Uart_Function, NULL, &UART_Thread_attributes);
 8000edc:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <main+0x68>)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4808      	ldr	r0, [pc, #32]	@ (8000f04 <main+0x6c>)
 8000ee2:	f005 fb5d 	bl	80065a0 <osThreadNew>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a07      	ldr	r2, [pc, #28]	@ (8000f08 <main+0x70>)
 8000eea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000eec:	f005 fb32 	bl	8006554 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <main+0x58>
 8000ef4:	0800c378 	.word	0x0800c378
 8000ef8:	0800209d 	.word	0x0800209d
 8000efc:	200003ec 	.word	0x200003ec
 8000f00:	0800c39c 	.word	0x0800c39c
 8000f04:	0800216d 	.word	0x0800216d
 8000f08:	200003f0 	.word	0x200003f0

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	@ 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	2230      	movs	r2, #48	@ 0x30
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f009 f8ab 	bl	800a076 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <SystemClock_Config+0xb4>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f38:	4a21      	ldr	r2, [pc, #132]	@ (8000fc0 <SystemClock_Config+0xb4>)
 8000f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f40:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <SystemClock_Config+0xb4>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <SystemClock_Config+0xb8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc4 <SystemClock_Config+0xb8>)
 8000f56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <SystemClock_Config+0xb8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f70:	2310      	movs	r3, #16
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 f9a1 	bl	80032c4 <HAL_RCC_OscConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f88:	f001 fa18 	bl	80023bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f002 fc04 	bl	80037b4 <HAL_RCC_ClockConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000fb2:	f001 fa03 	bl	80023bc <Error_Handler>
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3750      	adds	r7, #80	@ 0x50
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40007000 	.word	0x40007000

08000fc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b096      	sub	sp, #88	@ 0x58
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]
 8000ff6:	615a      	str	r2, [r3, #20]
 8000ff8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f009 f838 	bl	800a076 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001006:	4b3d      	ldr	r3, [pc, #244]	@ (80010fc <MX_TIM1_Init+0x134>)
 8001008:	4a3d      	ldr	r2, [pc, #244]	@ (8001100 <MX_TIM1_Init+0x138>)
 800100a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 800100c:	4b3b      	ldr	r3, [pc, #236]	@ (80010fc <MX_TIM1_Init+0x134>)
 800100e:	22a0      	movs	r2, #160	@ 0xa0
 8001010:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001012:	4b3a      	ldr	r3, [pc, #232]	@ (80010fc <MX_TIM1_Init+0x134>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001018:	4b38      	ldr	r3, [pc, #224]	@ (80010fc <MX_TIM1_Init+0x134>)
 800101a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800101e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001020:	4b36      	ldr	r3, [pc, #216]	@ (80010fc <MX_TIM1_Init+0x134>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001026:	4b35      	ldr	r3, [pc, #212]	@ (80010fc <MX_TIM1_Init+0x134>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102c:	4b33      	ldr	r3, [pc, #204]	@ (80010fc <MX_TIM1_Init+0x134>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001032:	4832      	ldr	r0, [pc, #200]	@ (80010fc <MX_TIM1_Init+0x134>)
 8001034:	f002 fd9e 	bl	8003b74 <HAL_TIM_Base_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800103e:	f001 f9bd 	bl	80023bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001042:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001046:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001048:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800104c:	4619      	mov	r1, r3
 800104e:	482b      	ldr	r0, [pc, #172]	@ (80010fc <MX_TIM1_Init+0x134>)
 8001050:	f003 fb76 	bl	8004740 <HAL_TIM_ConfigClockSource>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800105a:	f001 f9af 	bl	80023bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800105e:	4827      	ldr	r0, [pc, #156]	@ (80010fc <MX_TIM1_Init+0x134>)
 8001060:	f002 fdd7 	bl	8003c12 <HAL_TIM_PWM_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800106a:	f001 f9a7 	bl	80023bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001076:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800107a:	4619      	mov	r1, r3
 800107c:	481f      	ldr	r0, [pc, #124]	@ (80010fc <MX_TIM1_Init+0x134>)
 800107e:	f004 f8d9 	bl	8005234 <HAL_TIMEx_MasterConfigSynchronization>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001088:	f001 f998 	bl	80023bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800108c:	2360      	movs	r3, #96	@ 0x60
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a8:	220c      	movs	r2, #12
 80010aa:	4619      	mov	r1, r3
 80010ac:	4813      	ldr	r0, [pc, #76]	@ (80010fc <MX_TIM1_Init+0x134>)
 80010ae:	f003 fa85 	bl	80045bc <HAL_TIM_PWM_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80010b8:	f001 f980 	bl	80023bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	4807      	ldr	r0, [pc, #28]	@ (80010fc <MX_TIM1_Init+0x134>)
 80010e0:	f004 f924 	bl	800532c <HAL_TIMEx_ConfigBreakDeadTime>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80010ea:	f001 f967 	bl	80023bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010ee:	4803      	ldr	r0, [pc, #12]	@ (80010fc <MX_TIM1_Init+0x134>)
 80010f0:	f001 fb08 	bl	8002704 <HAL_TIM_MspPostInit>

}
 80010f4:	bf00      	nop
 80010f6:	3758      	adds	r7, #88	@ 0x58
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200001f4 	.word	0x200001f4
 8001100:	40010000 	.word	0x40010000

08001104 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	@ 0x30
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	2224      	movs	r2, #36	@ 0x24
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f008 ffaf 	bl	800a076 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001120:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <MX_TIM2_Init+0xa4>)
 8001122:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001126:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001128:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <MX_TIM2_Init+0xa4>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <MX_TIM2_Init+0xa4>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001134:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <MX_TIM2_Init+0xa4>)
 8001136:	f04f 32ff 	mov.w	r2, #4294967295
 800113a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_TIM2_Init+0xa4>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <MX_TIM2_Init+0xa4>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001148:	2303      	movs	r3, #3
 800114a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001150:	2301      	movs	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001160:	2301      	movs	r3, #1
 8001162:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4619      	mov	r1, r3
 8001172:	480d      	ldr	r0, [pc, #52]	@ (80011a8 <MX_TIM2_Init+0xa4>)
 8001174:	f002 ff62 	bl	800403c <HAL_TIM_Encoder_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800117e:	f001 f91d 	bl	80023bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <MX_TIM2_Init+0xa4>)
 8001190:	f004 f850 	bl	8005234 <HAL_TIMEx_MasterConfigSynchronization>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800119a:	f001 f90f 	bl	80023bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3730      	adds	r7, #48	@ 0x30
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000023c 	.word	0x2000023c

080011ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ce:	4b26      	ldr	r3, [pc, #152]	@ (8001268 <MX_TIM3_Init+0xbc>)
 80011d0:	4a26      	ldr	r2, [pc, #152]	@ (800126c <MX_TIM3_Init+0xc0>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011d4:	4b24      	ldr	r3, [pc, #144]	@ (8001268 <MX_TIM3_Init+0xbc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b23      	ldr	r3, [pc, #140]	@ (8001268 <MX_TIM3_Init+0xbc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011e0:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <MX_TIM3_Init+0xbc>)
 80011e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <MX_TIM3_Init+0xbc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <MX_TIM3_Init+0xbc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011f4:	481c      	ldr	r0, [pc, #112]	@ (8001268 <MX_TIM3_Init+0xbc>)
 80011f6:	f002 fd0c 	bl	8003c12 <HAL_TIM_PWM_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001200:	f001 f8dc 	bl	80023bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	4619      	mov	r1, r3
 8001212:	4815      	ldr	r0, [pc, #84]	@ (8001268 <MX_TIM3_Init+0xbc>)
 8001214:	f004 f80e 	bl	8005234 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800121e:	f001 f8cd 	bl	80023bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001222:	2360      	movs	r3, #96	@ 0x60
 8001224:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	4619      	mov	r1, r3
 8001238:	480b      	ldr	r0, [pc, #44]	@ (8001268 <MX_TIM3_Init+0xbc>)
 800123a:	f003 f9bf 	bl	80045bc <HAL_TIM_PWM_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001244:	f001 f8ba 	bl	80023bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	2204      	movs	r2, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	@ (8001268 <MX_TIM3_Init+0xbc>)
 8001250:	f003 f9b4 	bl	80045bc <HAL_TIM_PWM_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800125a:	f001 f8af 	bl	80023bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	@ 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000284 	.word	0x20000284
 800126c:	40000400 	.word	0x40000400

08001270 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001280:	463b      	mov	r3, r7
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800128c:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <MX_TIM4_Init+0xa0>)
 800128e:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <MX_TIM4_Init+0xa4>)
 8001290:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001292:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <MX_TIM4_Init+0xa0>)
 8001294:	220f      	movs	r2, #15
 8001296:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <MX_TIM4_Init+0xa0>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <MX_TIM4_Init+0xa0>)
 80012a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <MX_TIM4_Init+0xa0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ac:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <MX_TIM4_Init+0xa0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80012b2:	4817      	ldr	r0, [pc, #92]	@ (8001310 <MX_TIM4_Init+0xa0>)
 80012b4:	f002 fdc4 	bl	8003e40 <HAL_TIM_IC_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80012be:	f001 f87d 	bl	80023bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4619      	mov	r1, r3
 80012d0:	480f      	ldr	r0, [pc, #60]	@ (8001310 <MX_TIM4_Init+0xa0>)
 80012d2:	f003 ffaf 	bl	8005234 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80012dc:	f001 f86e 	bl	80023bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80012e0:	230a      	movs	r3, #10
 80012e2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012e4:	2301      	movs	r3, #1
 80012e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	@ (8001310 <MX_TIM4_Init+0xa0>)
 80012f8:	f003 f8c4 	bl	8004484 <HAL_TIM_IC_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001302:	f001 f85b 	bl	80023bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200002cc 	.word	0x200002cc
 8001314:	40000800 	.word	0x40000800

08001318 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131e:	463b      	mov	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <MX_TIM6_Init+0x64>)
 8001328:	4a15      	ldr	r2, [pc, #84]	@ (8001380 <MX_TIM6_Init+0x68>)
 800132a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <MX_TIM6_Init+0x64>)
 800132e:	220f      	movs	r2, #15
 8001330:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b12      	ldr	r3, [pc, #72]	@ (800137c <MX_TIM6_Init+0x64>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001338:	4b10      	ldr	r3, [pc, #64]	@ (800137c <MX_TIM6_Init+0x64>)
 800133a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800133e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001340:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MX_TIM6_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001346:	480d      	ldr	r0, [pc, #52]	@ (800137c <MX_TIM6_Init+0x64>)
 8001348:	f002 fc14 	bl	8003b74 <HAL_TIM_Base_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001352:	f001 f833 	bl	80023bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800135e:	463b      	mov	r3, r7
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	@ (800137c <MX_TIM6_Init+0x64>)
 8001364:	f003 ff66 	bl	8005234 <HAL_TIMEx_MasterConfigSynchronization>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800136e:	f001 f825 	bl	80023bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000314 	.word	0x20000314
 8001380:	40001000 	.word	0x40001000

08001384 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b096      	sub	sp, #88	@ 0x58
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001398:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	615a      	str	r2, [r3, #20]
 80013b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2220      	movs	r2, #32
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f008 fe5a 	bl	800a076 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013c2:	4b43      	ldr	r3, [pc, #268]	@ (80014d0 <MX_TIM8_Init+0x14c>)
 80013c4:	4a43      	ldr	r2, [pc, #268]	@ (80014d4 <MX_TIM8_Init+0x150>)
 80013c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80013c8:	4b41      	ldr	r3, [pc, #260]	@ (80014d0 <MX_TIM8_Init+0x14c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b40      	ldr	r3, [pc, #256]	@ (80014d0 <MX_TIM8_Init+0x14c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80013d4:	4b3e      	ldr	r3, [pc, #248]	@ (80014d0 <MX_TIM8_Init+0x14c>)
 80013d6:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80013da:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b3c      	ldr	r3, [pc, #240]	@ (80014d0 <MX_TIM8_Init+0x14c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013e2:	4b3b      	ldr	r3, [pc, #236]	@ (80014d0 <MX_TIM8_Init+0x14c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b39      	ldr	r3, [pc, #228]	@ (80014d0 <MX_TIM8_Init+0x14c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80013ee:	4838      	ldr	r0, [pc, #224]	@ (80014d0 <MX_TIM8_Init+0x14c>)
 80013f0:	f002 fbc0 	bl	8003b74 <HAL_TIM_Base_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80013fa:	f000 ffdf 	bl	80023bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001402:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001404:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001408:	4619      	mov	r1, r3
 800140a:	4831      	ldr	r0, [pc, #196]	@ (80014d0 <MX_TIM8_Init+0x14c>)
 800140c:	f003 f998 	bl	8004740 <HAL_TIM_ConfigClockSource>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001416:	f000 ffd1 	bl	80023bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800141a:	482d      	ldr	r0, [pc, #180]	@ (80014d0 <MX_TIM8_Init+0x14c>)
 800141c:	f002 fbf9 	bl	8003c12 <HAL_TIM_PWM_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001426:	f000 ffc9 	bl	80023bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001432:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001436:	4619      	mov	r1, r3
 8001438:	4825      	ldr	r0, [pc, #148]	@ (80014d0 <MX_TIM8_Init+0x14c>)
 800143a:	f003 fefb 	bl	8005234 <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001444:	f000 ffba 	bl	80023bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001448:	2360      	movs	r3, #96	@ 0x60
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001454:	2300      	movs	r3, #0
 8001456:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001468:	2200      	movs	r2, #0
 800146a:	4619      	mov	r1, r3
 800146c:	4818      	ldr	r0, [pc, #96]	@ (80014d0 <MX_TIM8_Init+0x14c>)
 800146e:	f003 f8a5 	bl	80045bc <HAL_TIM_PWM_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001478:	f000 ffa0 	bl	80023bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800147c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001480:	2204      	movs	r2, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4812      	ldr	r0, [pc, #72]	@ (80014d0 <MX_TIM8_Init+0x14c>)
 8001486:	f003 f899 	bl	80045bc <HAL_TIM_PWM_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001490:	f000 ff94 	bl	80023bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <MX_TIM8_Init+0x14c>)
 80014b8:	f003 ff38 	bl	800532c <HAL_TIMEx_ConfigBreakDeadTime>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80014c2:	f000 ff7b 	bl	80023bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3758      	adds	r7, #88	@ 0x58
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000035c 	.word	0x2000035c
 80014d4:	40010400 	.word	0x40010400

080014d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014dc:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <MX_USART3_UART_Init+0x4c>)
 80014de:	4a12      	ldr	r2, [pc, #72]	@ (8001528 <MX_USART3_UART_Init+0x50>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <MX_USART3_UART_Init+0x4c>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <MX_USART3_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <MX_USART3_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <MX_USART3_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <MX_USART3_UART_Init+0x4c>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <MX_USART3_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <MX_USART3_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <MX_USART3_UART_Init+0x4c>)
 8001510:	f003 ff72 	bl	80053f8 <HAL_UART_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800151a:	f000 ff4f 	bl	80023bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200003a4 	.word	0x200003a4
 8001528:	40004800 	.word	0x40004800

0800152c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b5a      	ldr	r3, [pc, #360]	@ (80016b0 <MX_GPIO_Init+0x184>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a59      	ldr	r2, [pc, #356]	@ (80016b0 <MX_GPIO_Init+0x184>)
 800154c:	f043 0310 	orr.w	r3, r3, #16
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b57      	ldr	r3, [pc, #348]	@ (80016b0 <MX_GPIO_Init+0x184>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b53      	ldr	r3, [pc, #332]	@ (80016b0 <MX_GPIO_Init+0x184>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a52      	ldr	r2, [pc, #328]	@ (80016b0 <MX_GPIO_Init+0x184>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b50      	ldr	r3, [pc, #320]	@ (80016b0 <MX_GPIO_Init+0x184>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	4b4c      	ldr	r3, [pc, #304]	@ (80016b0 <MX_GPIO_Init+0x184>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a4b      	ldr	r2, [pc, #300]	@ (80016b0 <MX_GPIO_Init+0x184>)
 8001584:	f043 0308 	orr.w	r3, r3, #8
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b49      	ldr	r3, [pc, #292]	@ (80016b0 <MX_GPIO_Init+0x184>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b45      	ldr	r3, [pc, #276]	@ (80016b0 <MX_GPIO_Init+0x184>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a44      	ldr	r2, [pc, #272]	@ (80016b0 <MX_GPIO_Init+0x184>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b42      	ldr	r3, [pc, #264]	@ (80016b0 <MX_GPIO_Init+0x184>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	4b3e      	ldr	r3, [pc, #248]	@ (80016b0 <MX_GPIO_Init+0x184>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a3d      	ldr	r2, [pc, #244]	@ (80016b0 <MX_GPIO_Init+0x184>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b3b      	ldr	r3, [pc, #236]	@ (80016b0 <MX_GPIO_Init+0x184>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80015ce:	2200      	movs	r2, #0
 80015d0:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 80015d4:	4837      	ldr	r0, [pc, #220]	@ (80016b4 <MX_GPIO_Init+0x188>)
 80015d6:	f001 fe33 	bl	8003240 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	213c      	movs	r1, #60	@ 0x3c
 80015de:	4836      	ldr	r0, [pc, #216]	@ (80016b8 <MX_GPIO_Init+0x18c>)
 80015e0:	f001 fe2e 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015ea:	4834      	ldr	r0, [pc, #208]	@ (80016bc <MX_GPIO_Init+0x190>)
 80015ec:	f001 fe28 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80015f0:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 80015f4:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	482a      	ldr	r0, [pc, #168]	@ (80016b4 <MX_GPIO_Init+0x188>)
 800160a:	f001 fc7d 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 800160e:	230c      	movs	r3, #12
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161a:	2302      	movs	r3, #2
 800161c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4824      	ldr	r0, [pc, #144]	@ (80016b8 <MX_GPIO_Init+0x18c>)
 8001626:	f001 fc6f 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 800162a:	2330      	movs	r3, #48	@ 0x30
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	481d      	ldr	r0, [pc, #116]	@ (80016b8 <MX_GPIO_Init+0x18c>)
 8001642:	f001 fc61 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001646:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800164a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4817      	ldr	r0, [pc, #92]	@ (80016bc <MX_GPIO_Init+0x190>)
 8001660:	f001 fc52 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001664:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001676:	2307      	movs	r3, #7
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	480d      	ldr	r0, [pc, #52]	@ (80016b8 <MX_GPIO_Init+0x18c>)
 8001682:	f001 fc41 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ICM_SCL_Pin ICM_SDA_Pin */
  GPIO_InitStruct.Pin = ICM_SCL_Pin|ICM_SDA_Pin;
 8001686:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168c:	2312      	movs	r3, #18
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001698:	2304      	movs	r3, #4
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <MX_GPIO_Init+0x194>)
 80016a4:	f001 fc30 	bl	8002f08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a8:	bf00      	nop
 80016aa:	3728      	adds	r7, #40	@ 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	40020400 	.word	0x40020400

080016c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
    ////OLED_Clear();
    //OLED_ShowString(10, 10, "testing in uart");
    //HAL_UART_Transmit(&huart3, rxBuffer, 1, 1000);
    ////OLED_ShowString(10, 20, rxBuffer);
    ////OLED_Refresh_Gram();
    if(rxBuffer[0]!='#'){
 80016cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001778 <HAL_UART_RxCpltCallback+0xb4>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b23      	cmp	r3, #35	@ 0x23
 80016d2:	d04a      	beq.n	800176a <HAL_UART_RxCpltCallback+0xa6>
    	if(instructionIndex<999){
 80016d4:	4b29      	ldr	r3, [pc, #164]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f240 32e6 	movw	r2, #998	@ 0x3e6
 80016dc:	4293      	cmp	r3, r2
 80016de:	d83c      	bhi.n	800175a <HAL_UART_RxCpltCallback+0x96>
    		instructionBuffer[instructionIndex] = rxBuffer[0];
 80016e0:	4b26      	ldr	r3, [pc, #152]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a24      	ldr	r2, [pc, #144]	@ (8001778 <HAL_UART_RxCpltCallback+0xb4>)
 80016e6:	7811      	ldrb	r1, [r2, #0]
 80016e8:	4a25      	ldr	r2, [pc, #148]	@ (8001780 <HAL_UART_RxCpltCallback+0xbc>)
 80016ea:	54d1      	strb	r1, [r2, r3]
    		instructionBuffer[++instructionIndex] = rxBuffer[1];
 80016ec:	4b23      	ldr	r3, [pc, #140]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	3301      	adds	r3, #1
 80016f2:	4a22      	ldr	r2, [pc, #136]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b21      	ldr	r3, [pc, #132]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001778 <HAL_UART_RxCpltCallback+0xb4>)
 80016fc:	7851      	ldrb	r1, [r2, #1]
 80016fe:	4a20      	ldr	r2, [pc, #128]	@ (8001780 <HAL_UART_RxCpltCallback+0xbc>)
 8001700:	54d1      	strb	r1, [r2, r3]
    		instructionBuffer[++instructionIndex] = rxBuffer[2];
 8001702:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	4a1c      	ldr	r2, [pc, #112]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a19      	ldr	r2, [pc, #100]	@ (8001778 <HAL_UART_RxCpltCallback+0xb4>)
 8001712:	7891      	ldrb	r1, [r2, #2]
 8001714:	4a1a      	ldr	r2, [pc, #104]	@ (8001780 <HAL_UART_RxCpltCallback+0xbc>)
 8001716:	54d1      	strb	r1, [r2, r3]
    		instructionBuffer[++instructionIndex] = rxBuffer[3];
 8001718:	4b18      	ldr	r3, [pc, #96]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	4a17      	ldr	r2, [pc, #92]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b16      	ldr	r3, [pc, #88]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a14      	ldr	r2, [pc, #80]	@ (8001778 <HAL_UART_RxCpltCallback+0xb4>)
 8001728:	78d1      	ldrb	r1, [r2, #3]
 800172a:	4a15      	ldr	r2, [pc, #84]	@ (8001780 <HAL_UART_RxCpltCallback+0xbc>)
 800172c:	54d1      	strb	r1, [r2, r3]
    		instructionBuffer[++instructionIndex] = rxBuffer[4];
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3301      	adds	r3, #1
 8001734:	4a11      	ldr	r2, [pc, #68]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b10      	ldr	r3, [pc, #64]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0e      	ldr	r2, [pc, #56]	@ (8001778 <HAL_UART_RxCpltCallback+0xb4>)
 800173e:	7911      	ldrb	r1, [r2, #4]
 8001740:	4a0f      	ldr	r2, [pc, #60]	@ (8001780 <HAL_UART_RxCpltCallback+0xbc>)
 8001742:	54d1      	strb	r1, [r2, r3]
    		instructionIndex++; //so that index start from 0
 8001744:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	4a0c      	ldr	r2, [pc, #48]	@ (800177c <HAL_UART_RxCpltCallback+0xb8>)
 800174c:	6013      	str	r3, [r2, #0]
    		HAL_UART_Receive_IT(&huart3, rxBuffer, 5);
 800174e:	2205      	movs	r2, #5
 8001750:	4909      	ldr	r1, [pc, #36]	@ (8001778 <HAL_UART_RxCpltCallback+0xb4>)
 8001752:	480c      	ldr	r0, [pc, #48]	@ (8001784 <HAL_UART_RxCpltCallback+0xc0>)
 8001754:	f003 ff2b 	bl	80055ae <HAL_UART_Receive_IT>
    	}
    }
    else{
    	startFlag = 1;
    }
}
 8001758:	e00a      	b.n	8001770 <HAL_UART_RxCpltCallback+0xac>
    		OLED_Clear();
 800175a:	f007 fcd7 	bl	800910c <OLED_Clear>
    		OLED_ShowString(10,30,"bufferOverflow");
 800175e:	4a0a      	ldr	r2, [pc, #40]	@ (8001788 <HAL_UART_RxCpltCallback+0xc4>)
 8001760:	211e      	movs	r1, #30
 8001762:	200a      	movs	r0, #10
 8001764:	f007 fdc4 	bl	80092f0 <OLED_ShowString>
}
 8001768:	e002      	b.n	8001770 <HAL_UART_RxCpltCallback+0xac>
    	startFlag = 1;
 800176a:	4b08      	ldr	r3, [pc, #32]	@ (800178c <HAL_UART_RxCpltCallback+0xc8>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200003f8 	.word	0x200003f8
 800177c:	200007f0 	.word	0x200007f0
 8001780:	20000408 	.word	0x20000408
 8001784:	200003a4 	.word	0x200003a4
 8001788:	0800c274 	.word	0x0800c274
 800178c:	200003f4 	.word	0x200003f4

08001790 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

	static int tc1, tc2, first=0, echo = 0;
	char buf[15];
	if(htim==&htim4){
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a4d      	ldr	r2, [pc, #308]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x140>)
 800179c:	4293      	cmp	r3, r2
 800179e:	f040 808e 	bne.w	80018be <HAL_TIM_IC_CaptureCallback+0x12e>

		if (first == 0){
 80017a2:	4b4c      	ldr	r3, [pc, #304]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d11b      	bne.n	80017e2 <HAL_TIM_IC_CaptureCallback+0x52>
			tc1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017aa:	2100      	movs	r1, #0
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f003 f88f 	bl	80048d0 <HAL_TIM_ReadCapturedValue>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b48      	ldr	r3, [pc, #288]	@ (80018d8 <HAL_TIM_IC_CaptureCallback+0x148>)
 80017b8:	601a      	str	r2, [r3, #0]
			first=1;
 80017ba:	4b46      	ldr	r3, [pc, #280]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6a1a      	ldr	r2, [r3, #32]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 020a 	bic.w	r2, r2, #10
 80017ce:	621a      	str	r2, [r3, #32]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6a1a      	ldr	r2, [r3, #32]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0202 	orr.w	r2, r2, #2
 80017de:	621a      	str	r2, [r3, #32]
			first=0;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
		}
	}
}
 80017e0:	e06d      	b.n	80018be <HAL_TIM_IC_CaptureCallback+0x12e>
		else if (first == 1){
 80017e2:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d169      	bne.n	80018be <HAL_TIM_IC_CaptureCallback+0x12e>
			tc2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017ea:	2100      	movs	r1, #0
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f003 f86f 	bl	80048d0 <HAL_TIM_ReadCapturedValue>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b39      	ldr	r3, [pc, #228]	@ (80018dc <HAL_TIM_IC_CaptureCallback+0x14c>)
 80017f8:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	@ 0x24
			if(tc2 >= tc1){
 8001802:	4b36      	ldr	r3, [pc, #216]	@ (80018dc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b34      	ldr	r3, [pc, #208]	@ (80018d8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	db07      	blt.n	800181e <HAL_TIM_IC_CaptureCallback+0x8e>
				echo = tc2 - tc1;
 800180e:	4b33      	ldr	r3, [pc, #204]	@ (80018dc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b31      	ldr	r3, [pc, #196]	@ (80018d8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	4a31      	ldr	r2, [pc, #196]	@ (80018e0 <HAL_TIM_IC_CaptureCallback+0x150>)
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e009      	b.n	8001832 <HAL_TIM_IC_CaptureCallback+0xa2>
				echo = (0xffff - tc1) + tc2;
 800181e:	4b2e      	ldr	r3, [pc, #184]	@ (80018d8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001826:	33ff      	adds	r3, #255	@ 0xff
 8001828:	4a2c      	ldr	r2, [pc, #176]	@ (80018dc <HAL_TIM_IC_CaptureCallback+0x14c>)
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	4413      	add	r3, r2
 800182e:	4a2c      	ldr	r2, [pc, #176]	@ (80018e0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001830:	6013      	str	r3, [r2, #0]
			sprintf(buf, "Echo = %5dus", echo);
 8001832:	4b2b      	ldr	r3, [pc, #172]	@ (80018e0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	492a      	ldr	r1, [pc, #168]	@ (80018e4 <HAL_TIM_IC_CaptureCallback+0x154>)
 800183c:	4618      	mov	r0, r3
 800183e:	f008 fbb7 	bl	8009fb0 <siprintf>
			OLED_ShowString(10, 40, &buf[0]);
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	461a      	mov	r2, r3
 8001848:	2128      	movs	r1, #40	@ 0x28
 800184a:	200a      	movs	r0, #10
 800184c:	f007 fd50 	bl	80092f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 8001850:	f007 fbda 	bl	8009008 <OLED_Refresh_Gram>
			detectedDistance = echo * (0.0343/2);
 8001854:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe63 	bl	8000524 <__aeabi_i2d>
 800185e:	a31a      	add	r3, pc, #104	@ (adr r3, 80018c8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fec8 	bl	80005f8 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	491e      	ldr	r1, [pc, #120]	@ (80018e8 <HAL_TIM_IC_CaptureCallback+0x158>)
 800186e:	e9c1 2300 	strd	r2, r3, [r1]
			sprintf(buf, "Dist = %5.1fcm", detectedDistance);
 8001872:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f107 0008 	add.w	r0, r7, #8
 800187c:	491b      	ldr	r1, [pc, #108]	@ (80018ec <HAL_TIM_IC_CaptureCallback+0x15c>)
 800187e:	f008 fb97 	bl	8009fb0 <siprintf>
			OLED_ShowString(10, 50, &buf[0]);
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	461a      	mov	r2, r3
 8001888:	2132      	movs	r1, #50	@ 0x32
 800188a:	200a      	movs	r0, #10
 800188c:	f007 fd30 	bl	80092f0 <OLED_ShowString>
			OLED_Refresh_Gram();
 8001890:	f007 fbba 	bl	8009008 <OLED_Refresh_Gram>
			first=0;
 8001894:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a1a      	ldr	r2, [r3, #32]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 020a 	bic.w	r2, r2, #10
 80018a8:	621a      	str	r2, [r3, #32]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6a12      	ldr	r2, [r2, #32]
 80018b4:	621a      	str	r2, [r3, #32]
			HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
 80018b6:	2100      	movs	r1, #0
 80018b8:	4805      	ldr	r0, [pc, #20]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x140>)
 80018ba:	f002 fb11 	bl	8003ee0 <HAL_TIM_IC_Stop_IT>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	04816f00 	.word	0x04816f00
 80018cc:	3f918fc5 	.word	0x3f918fc5
 80018d0:	200002cc 	.word	0x200002cc
 80018d4:	20000800 	.word	0x20000800
 80018d8:	20000804 	.word	0x20000804
 80018dc:	20000808 	.word	0x20000808
 80018e0:	2000080c 	.word	0x2000080c
 80018e4:	0800c284 	.word	0x0800c284
 80018e8:	200007f8 	.word	0x200007f8
 80018ec:	0800c294 	.word	0x0800c294

080018f0 <countTargetTicks>:
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
	__HAL_TIM_SET_COUNTER(&htim6, 0);
	while(__HAL_TIM_GET_COUNTER(&htim6)<=10);
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
}
uint32_t countTargetTicks(int distance){
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

	uint32_t rev,targetTicks;
	float dist, circumference;
	dist = distance;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	ee07 3a90 	vmov	s15, r3
 80018fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001902:	edc7 7a05 	vstr	s15, [r7, #20]
	circumference = PI * WHEEL_DIAMETER_CM ;
 8001906:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <countTargetTicks+0x4c>)
 8001908:	613b      	str	r3, [r7, #16]
	rev = dist/circumference;
 800190a:	edd7 6a05 	vldr	s13, [r7, #20]
 800190e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800191a:	ee17 3a90 	vmov	r3, s15
 800191e:	60fb      	str	r3, [r7, #12]
	targetTicks = rev * TICKS_PER_REV * 4;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f44f 62c3 	mov.w	r2, #1560	@ 0x618
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	60bb      	str	r3, [r7, #8]

	return targetTicks;
 800192c:	68bb      	ldr	r3, [r7, #8]
}
 800192e:	4618      	mov	r0, r3
 8001930:	371c      	adds	r7, #28
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	4196cbdc 	.word	0x4196cbdc

08001940 <forward>:

void forward(int distance){
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	@ 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
//	char buff[9];
//	OLED_Clear();
//	sprintf(buff,"forward %d",distance);
//	OLED_ShowString(10,10,buff);

  	uint32_t pwmVal = 2000;
 8001948:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800194c:	623b      	str	r3, [r7, #32]
  	uint32_t encoderCount = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
  	uint32_t startEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8001952:	4b41      	ldr	r3, [pc, #260]	@ (8001a58 <forward+0x118>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	61fb      	str	r3, [r7, #28]
  	uint32_t currentEncoderCount = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
  	uint32_t targetTicks = (uint32_t)countTargetTicks(distance);;
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffc6 	bl	80018f0 <countTargetTicks>
 8001964:	6178      	str	r0, [r7, #20]

  			//(uint32_t)countTargetTicks(distance);
 	char tbuff[9];
 	sprintf(tbuff,"Ticks = %d",targetTicks);
 8001966:	f107 0308 	add.w	r3, r7, #8
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	493b      	ldr	r1, [pc, #236]	@ (8001a5c <forward+0x11c>)
 800196e:	4618      	mov	r0, r3
 8001970:	f008 fb1e 	bl	8009fb0 <siprintf>
 	OLED_Clear();
 8001974:	f007 fbca 	bl	800910c <OLED_Clear>
 	OLED_ShowString(10,0,tbuff);
 8001978:	f107 0308 	add.w	r3, r7, #8
 800197c:	461a      	mov	r2, r3
 800197e:	2100      	movs	r1, #0
 8001980:	200a      	movs	r0, #10
 8001982:	f007 fcb5 	bl	80092f0 <OLED_ShowString>
 	OLED_Refresh_Gram();
 8001986:	f007 fb3f 	bl	8009008 <OLED_Refresh_Gram>
  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800198a:	2100      	movs	r1, #0
 800198c:	4834      	ldr	r0, [pc, #208]	@ (8001a60 <forward+0x120>)
 800198e:	f002 f98f 	bl	8003cb0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001992:	2104      	movs	r1, #4
 8001994:	4832      	ldr	r0, [pc, #200]	@ (8001a60 <forward+0x120>)
 8001996:	f002 f98b 	bl	8003cb0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800199a:	210c      	movs	r1, #12
 800199c:	4831      	ldr	r0, [pc, #196]	@ (8001a64 <forward+0x124>)
 800199e:	f002 f987 	bl	8003cb0 <HAL_TIM_PWM_Start>
    htim1.Instance->CCR4 = 155;
 80019a2:	4b30      	ldr	r3, [pc, #192]	@ (8001a64 <forward+0x124>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	229b      	movs	r2, #155	@ 0x9b
 80019a8:	641a      	str	r2, [r3, #64]	@ 0x40

  	for(;;){
  	  //Move Forward
  		 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 80019aa:	2201      	movs	r2, #1
 80019ac:	2108      	movs	r1, #8
 80019ae:	482e      	ldr	r0, [pc, #184]	@ (8001a68 <forward+0x128>)
 80019b0:	f001 fc46 	bl	8003240 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2104      	movs	r1, #4
 80019b8:	482b      	ldr	r0, [pc, #172]	@ (8001a68 <forward+0x128>)
 80019ba:	f001 fc41 	bl	8003240 <HAL_GPIO_WritePin>
  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmVal);
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <forward+0x120>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6a3a      	ldr	r2, [r7, #32]
 80019c4:	635a      	str	r2, [r3, #52]	@ 0x34
  		 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2120      	movs	r1, #32
 80019ca:	4827      	ldr	r0, [pc, #156]	@ (8001a68 <forward+0x128>)
 80019cc:	f001 fc38 	bl	8003240 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	2110      	movs	r1, #16
 80019d4:	4824      	ldr	r0, [pc, #144]	@ (8001a68 <forward+0x128>)
 80019d6:	f001 fc33 	bl	8003240 <HAL_GPIO_WritePin>
  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmVal);
 80019da:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <forward+0x120>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6a3a      	ldr	r2, [r7, #32]
 80019e0:	639a      	str	r2, [r3, #56]	@ 0x38
  		osDelay(10);
 80019e2:	200a      	movs	r0, #10
 80019e4:	f004 fe6e 	bl	80066c4 <osDelay>
  		currentEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 80019e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <forward+0x118>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	61bb      	str	r3, [r7, #24]

        // Check if the robot has reached the target distance

          // Calculate total encoder ticks since the motor started moving
          if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80019f0:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <forward+0x118>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	2b10      	cmp	r3, #16
 80019fc:	d104      	bne.n	8001a08 <forward+0xc8>
              encoderCount = (startEncoderCount - currentEncoderCount);
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a06:	e003      	b.n	8001a10 <forward+0xd0>
          } else {
              encoderCount = (currentEncoderCount - startEncoderCount);
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
          }

          if (encoderCount>=targetTicks) {
 8001a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d3c8      	bcc.n	80019aa <forward+0x6a>
              // Stop the motor
              HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	4812      	ldr	r0, [pc, #72]	@ (8001a68 <forward+0x128>)
 8001a1e:	f001 fc0f 	bl	8003240 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2108      	movs	r1, #8
 8001a26:	4810      	ldr	r0, [pc, #64]	@ (8001a68 <forward+0x128>)
 8001a28:	f001 fc0a 	bl	8003240 <HAL_GPIO_WritePin>
              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);  // Stop PWM
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <forward+0x120>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	635a      	str	r2, [r3, #52]	@ 0x34
              HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2120      	movs	r1, #32
 8001a38:	480b      	ldr	r0, [pc, #44]	@ (8001a68 <forward+0x128>)
 8001a3a:	f001 fc01 	bl	8003240 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2110      	movs	r1, #16
 8001a42:	4809      	ldr	r0, [pc, #36]	@ (8001a68 <forward+0x128>)
 8001a44:	f001 fbfc 	bl	8003240 <HAL_GPIO_WritePin>
              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);  // Stop PWM
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <forward+0x120>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	639a      	str	r2, [r3, #56]	@ 0x38
              return;
 8001a50:	bf00      	nop
          }
  	}
}
 8001a52:	3728      	adds	r7, #40	@ 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	2000023c 	.word	0x2000023c
 8001a5c:	0800c2a4 	.word	0x0800c2a4
 8001a60:	2000035c 	.word	0x2000035c
 8001a64:	200001f4 	.word	0x200001f4
 8001a68:	40020000 	.word	0x40020000

08001a6c <backward>:
void backward(int distance){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08e      	sub	sp, #56	@ 0x38
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	char buff[9];
	OLED_Clear();
 8001a74:	f007 fb4a 	bl	800910c <OLED_Clear>
	sprintf(buff,"backward %d",distance);
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4949      	ldr	r1, [pc, #292]	@ (8001ba4 <backward+0x138>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f008 fa95 	bl	8009fb0 <siprintf>
	OLED_ShowString(10,10,buff);
 8001a86:	f107 0318 	add.w	r3, r7, #24
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	210a      	movs	r1, #10
 8001a8e:	200a      	movs	r0, #10
 8001a90:	f007 fc2e 	bl	80092f0 <OLED_ShowString>
  	uint32_t pwmVal = 2000;
 8001a94:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a98:	633b      	str	r3, [r7, #48]	@ 0x30
  	uint32_t encoderCount = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	637b      	str	r3, [r7, #52]	@ 0x34
  	uint32_t startEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8001a9e:	4b42      	ldr	r3, [pc, #264]	@ (8001ba8 <backward+0x13c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  	uint32_t currentEncoderCount = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  	uint32_t targetTicks = (uint32_t)countTargetTicks(distance);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ff20 	bl	80018f0 <countTargetTicks>
 8001ab0:	6278      	str	r0, [r7, #36]	@ 0x24

  			//(uint32_t)countTargetTicks(distance);
 	char tbuff[9];
 	sprintf(tbuff,"Ticks = %d",targetTicks);
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab8:	493c      	ldr	r1, [pc, #240]	@ (8001bac <backward+0x140>)
 8001aba:	4618      	mov	r0, r3
 8001abc:	f008 fa78 	bl	8009fb0 <siprintf>
 	OLED_Clear();
 8001ac0:	f007 fb24 	bl	800910c <OLED_Clear>
 	OLED_ShowString(10,0,tbuff);
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2100      	movs	r1, #0
 8001acc:	200a      	movs	r0, #10
 8001ace:	f007 fc0f 	bl	80092f0 <OLED_ShowString>
 	OLED_Refresh_Gram();
 8001ad2:	f007 fa99 	bl	8009008 <OLED_Refresh_Gram>
  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4835      	ldr	r0, [pc, #212]	@ (8001bb0 <backward+0x144>)
 8001ada:	f002 f8e9 	bl	8003cb0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001ade:	2104      	movs	r1, #4
 8001ae0:	4833      	ldr	r0, [pc, #204]	@ (8001bb0 <backward+0x144>)
 8001ae2:	f002 f8e5 	bl	8003cb0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001ae6:	210c      	movs	r1, #12
 8001ae8:	4832      	ldr	r0, [pc, #200]	@ (8001bb4 <backward+0x148>)
 8001aea:	f002 f8e1 	bl	8003cb0 <HAL_TIM_PWM_Start>
    htim1.Instance->CCR4 = 155;
 8001aee:	4b31      	ldr	r3, [pc, #196]	@ (8001bb4 <backward+0x148>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	229b      	movs	r2, #155	@ 0x9b
 8001af4:	641a      	str	r2, [r3, #64]	@ 0x40
  	for(;;){
  	  //Move Backwards
  		 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2108      	movs	r1, #8
 8001afa:	482f      	ldr	r0, [pc, #188]	@ (8001bb8 <backward+0x14c>)
 8001afc:	f001 fba0 	bl	8003240 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 8001b00:	2201      	movs	r2, #1
 8001b02:	2104      	movs	r1, #4
 8001b04:	482c      	ldr	r0, [pc, #176]	@ (8001bb8 <backward+0x14c>)
 8001b06:	f001 fb9b 	bl	8003240 <HAL_GPIO_WritePin>
  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmVal);
 8001b0a:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <backward+0x144>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b10:	635a      	str	r2, [r3, #52]	@ 0x34
  		 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 8001b12:	2201      	movs	r2, #1
 8001b14:	2120      	movs	r1, #32
 8001b16:	4828      	ldr	r0, [pc, #160]	@ (8001bb8 <backward+0x14c>)
 8001b18:	f001 fb92 	bl	8003240 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2110      	movs	r1, #16
 8001b20:	4825      	ldr	r0, [pc, #148]	@ (8001bb8 <backward+0x14c>)
 8001b22:	f001 fb8d 	bl	8003240 <HAL_GPIO_WritePin>
  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmVal);
 8001b26:	4b22      	ldr	r3, [pc, #136]	@ (8001bb0 <backward+0x144>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b2c:	639a      	str	r2, [r3, #56]	@ 0x38
  		osDelay(10);
 8001b2e:	200a      	movs	r0, #10
 8001b30:	f004 fdc8 	bl	80066c4 <osDelay>
  		currentEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8001b34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba8 <backward+0x13c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3a:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Check if the robot has reached the target distance

          // Calculate total encoder ticks since the motor started moving
          if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <backward+0x13c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b10      	cmp	r3, #16
 8001b48:	d104      	bne.n	8001b54 <backward+0xe8>
              encoderCount = (startEncoderCount - currentEncoderCount);
 8001b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b52:	e003      	b.n	8001b5c <backward+0xf0>
          } else {
              encoderCount = (currentEncoderCount - startEncoderCount);
 8001b54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	637b      	str	r3, [r7, #52]	@ 0x34
          }

          if (encoderCount>=targetTicks) {
 8001b5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d3c8      	bcc.n	8001af6 <backward+0x8a>
              // Stop the motor
              HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2104      	movs	r1, #4
 8001b68:	4813      	ldr	r0, [pc, #76]	@ (8001bb8 <backward+0x14c>)
 8001b6a:	f001 fb69 	bl	8003240 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2108      	movs	r1, #8
 8001b72:	4811      	ldr	r0, [pc, #68]	@ (8001bb8 <backward+0x14c>)
 8001b74:	f001 fb64 	bl	8003240 <HAL_GPIO_WritePin>
              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);  // Stop PWM
 8001b78:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <backward+0x144>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	635a      	str	r2, [r3, #52]	@ 0x34
              HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2120      	movs	r1, #32
 8001b84:	480c      	ldr	r0, [pc, #48]	@ (8001bb8 <backward+0x14c>)
 8001b86:	f001 fb5b 	bl	8003240 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2110      	movs	r1, #16
 8001b8e:	480a      	ldr	r0, [pc, #40]	@ (8001bb8 <backward+0x14c>)
 8001b90:	f001 fb56 	bl	8003240 <HAL_GPIO_WritePin>
              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);  // Stop PWM
 8001b94:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <backward+0x144>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	639a      	str	r2, [r3, #56]	@ 0x38
              return;
 8001b9c:	bf00      	nop
          }
  	}

}
 8001b9e:	3738      	adds	r7, #56	@ 0x38
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	0800c2b0 	.word	0x0800c2b0
 8001ba8:	2000023c 	.word	0x2000023c
 8001bac:	0800c2a4 	.word	0x0800c2a4
 8001bb0:	2000035c 	.word	0x2000035c
 8001bb4:	200001f4 	.word	0x200001f4
 8001bb8:	40020000 	.word	0x40020000

08001bbc <frontRight>:
void frontRight(int distance){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	@ 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	distance = 75; //set as fixed value
 8001bc4:	234b      	movs	r3, #75	@ 0x4b
 8001bc6:	607b      	str	r3, [r7, #4]
  	uint32_t pwmVal = 2000;
 8001bc8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001bcc:	623b      	str	r3, [r7, #32]
  	uint32_t encoderCount = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  	uint32_t startEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8001bd2:	4b43      	ldr	r3, [pc, #268]	@ (8001ce0 <frontRight+0x124>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd8:	61fb      	str	r3, [r7, #28]
  	uint32_t currentEncoderCount = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  	uint32_t targetTicks = (uint32_t)countTargetTicks(distance);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fe86 	bl	80018f0 <countTargetTicks>
 8001be4:	6178      	str	r0, [r7, #20]

  			//(uint32_t)countTargetTicks(distance);
 	char tbuff[9];
 	sprintf(tbuff,"Ticks = %d",targetTicks);
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	493d      	ldr	r1, [pc, #244]	@ (8001ce4 <frontRight+0x128>)
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f008 f9de 	bl	8009fb0 <siprintf>
 	OLED_Clear();
 8001bf4:	f007 fa8a 	bl	800910c <OLED_Clear>
 	OLED_ShowString(10,0,tbuff);
 8001bf8:	f107 0308 	add.w	r3, r7, #8
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2100      	movs	r1, #0
 8001c00:	200a      	movs	r0, #10
 8001c02:	f007 fb75 	bl	80092f0 <OLED_ShowString>
 	OLED_Refresh_Gram();
 8001c06:	f007 f9ff 	bl	8009008 <OLED_Refresh_Gram>
  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4836      	ldr	r0, [pc, #216]	@ (8001ce8 <frontRight+0x12c>)
 8001c0e:	f002 f84f 	bl	8003cb0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001c12:	2104      	movs	r1, #4
 8001c14:	4834      	ldr	r0, [pc, #208]	@ (8001ce8 <frontRight+0x12c>)
 8001c16:	f002 f84b 	bl	8003cb0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001c1a:	210c      	movs	r1, #12
 8001c1c:	4833      	ldr	r0, [pc, #204]	@ (8001cec <frontRight+0x130>)
 8001c1e:	f002 f847 	bl	8003cb0 <HAL_TIM_PWM_Start>
    htim1.Instance->CCR4 = 230;
 8001c22:	4b32      	ldr	r3, [pc, #200]	@ (8001cec <frontRight+0x130>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	22e6      	movs	r2, #230	@ 0xe6
 8001c28:	641a      	str	r2, [r3, #64]	@ 0x40

  	for(;;){
  	  //Move Forward
  		 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2108      	movs	r1, #8
 8001c2e:	4830      	ldr	r0, [pc, #192]	@ (8001cf0 <frontRight+0x134>)
 8001c30:	f001 fb06 	bl	8003240 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2104      	movs	r1, #4
 8001c38:	482d      	ldr	r0, [pc, #180]	@ (8001cf0 <frontRight+0x134>)
 8001c3a:	f001 fb01 	bl	8003240 <HAL_GPIO_WritePin>
  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmVal);
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce8 <frontRight+0x12c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6a3a      	ldr	r2, [r7, #32]
 8001c44:	635a      	str	r2, [r3, #52]	@ 0x34
  		 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2120      	movs	r1, #32
 8001c4a:	4829      	ldr	r0, [pc, #164]	@ (8001cf0 <frontRight+0x134>)
 8001c4c:	f001 faf8 	bl	8003240 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 8001c50:	2201      	movs	r2, #1
 8001c52:	2110      	movs	r1, #16
 8001c54:	4826      	ldr	r0, [pc, #152]	@ (8001cf0 <frontRight+0x134>)
 8001c56:	f001 faf3 	bl	8003240 <HAL_GPIO_WritePin>
  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmVal);
 8001c5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ce8 <frontRight+0x12c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6a3a      	ldr	r2, [r7, #32]
 8001c60:	639a      	str	r2, [r3, #56]	@ 0x38
  		osDelay(10);
 8001c62:	200a      	movs	r0, #10
 8001c64:	f004 fd2e 	bl	80066c4 <osDelay>
  		currentEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8001c68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce0 <frontRight+0x124>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	61bb      	str	r3, [r7, #24]

        // Check if the robot has reached the target distance

          // Calculate total encoder ticks since the motor started moving
          if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8001c70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <frontRight+0x124>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d104      	bne.n	8001c88 <frontRight+0xcc>
              encoderCount = (startEncoderCount - currentEncoderCount);
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c86:	e003      	b.n	8001c90 <frontRight+0xd4>
          } else {
              encoderCount = (currentEncoderCount - startEncoderCount);
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
          }

          if (encoderCount>=targetTicks) {
 8001c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d3c8      	bcc.n	8001c2a <frontRight+0x6e>
              // Stop the motor
        	  htim1.Instance -> CCR4 = 155;
 8001c98:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <frontRight+0x130>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	229b      	movs	r2, #155	@ 0x9b
 8001c9e:	641a      	str	r2, [r3, #64]	@ 0x40
              HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	4812      	ldr	r0, [pc, #72]	@ (8001cf0 <frontRight+0x134>)
 8001ca6:	f001 facb 	bl	8003240 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2108      	movs	r1, #8
 8001cae:	4810      	ldr	r0, [pc, #64]	@ (8001cf0 <frontRight+0x134>)
 8001cb0:	f001 fac6 	bl	8003240 <HAL_GPIO_WritePin>
              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);  // Stop PWM
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <frontRight+0x12c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	635a      	str	r2, [r3, #52]	@ 0x34
              HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2120      	movs	r1, #32
 8001cc0:	480b      	ldr	r0, [pc, #44]	@ (8001cf0 <frontRight+0x134>)
 8001cc2:	f001 fabd 	bl	8003240 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2110      	movs	r1, #16
 8001cca:	4809      	ldr	r0, [pc, #36]	@ (8001cf0 <frontRight+0x134>)
 8001ccc:	f001 fab8 	bl	8003240 <HAL_GPIO_WritePin>
              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);  // Stop PWM
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <frontRight+0x12c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	639a      	str	r2, [r3, #56]	@ 0x38
              return;
 8001cd8:	bf00      	nop
          }
  	}


}
 8001cda:	3728      	adds	r7, #40	@ 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	2000023c 	.word	0x2000023c
 8001ce4:	0800c2a4 	.word	0x0800c2a4
 8001ce8:	2000035c 	.word	0x2000035c
 8001cec:	200001f4 	.word	0x200001f4
 8001cf0:	40020000 	.word	0x40020000

08001cf4 <frontLeft>:
void frontLeft(int distance) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	@ 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	distance = 75; //set as fixed value
 8001cfc:	234b      	movs	r3, #75	@ 0x4b
 8001cfe:	607b      	str	r3, [r7, #4]
  	uint32_t pwmVal = 2000;
 8001d00:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001d04:	623b      	str	r3, [r7, #32]
  	uint32_t encoderCount = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
  	uint32_t startEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8001d0a:	4b43      	ldr	r3, [pc, #268]	@ (8001e18 <frontLeft+0x124>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	61fb      	str	r3, [r7, #28]
  	uint32_t currentEncoderCount = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  	uint32_t targetTicks = (uint32_t)countTargetTicks(distance);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff fdea 	bl	80018f0 <countTargetTicks>
 8001d1c:	6178      	str	r0, [r7, #20]

  			//(uint32_t)countTargetTicks(distance);
 	char tbuff[9];
 	sprintf(tbuff,"Ticks = %d",targetTicks);
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	493d      	ldr	r1, [pc, #244]	@ (8001e1c <frontLeft+0x128>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f008 f942 	bl	8009fb0 <siprintf>
 	OLED_Clear();
 8001d2c:	f007 f9ee 	bl	800910c <OLED_Clear>
 	OLED_ShowString(10,0,tbuff);
 8001d30:	f107 0308 	add.w	r3, r7, #8
 8001d34:	461a      	mov	r2, r3
 8001d36:	2100      	movs	r1, #0
 8001d38:	200a      	movs	r0, #10
 8001d3a:	f007 fad9 	bl	80092f0 <OLED_ShowString>
 	OLED_Refresh_Gram();
 8001d3e:	f007 f963 	bl	8009008 <OLED_Refresh_Gram>
  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001d42:	2100      	movs	r1, #0
 8001d44:	4836      	ldr	r0, [pc, #216]	@ (8001e20 <frontLeft+0x12c>)
 8001d46:	f001 ffb3 	bl	8003cb0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4834      	ldr	r0, [pc, #208]	@ (8001e20 <frontLeft+0x12c>)
 8001d4e:	f001 ffaf 	bl	8003cb0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001d52:	210c      	movs	r1, #12
 8001d54:	4833      	ldr	r0, [pc, #204]	@ (8001e24 <frontLeft+0x130>)
 8001d56:	f001 ffab 	bl	8003cb0 <HAL_TIM_PWM_Start>
    htim1.Instance->CCR4 = 90;
 8001d5a:	4b32      	ldr	r3, [pc, #200]	@ (8001e24 <frontLeft+0x130>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	225a      	movs	r2, #90	@ 0x5a
 8001d60:	641a      	str	r2, [r3, #64]	@ 0x40

  	for(;;){
  	  //Move Forward
  		 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	2108      	movs	r1, #8
 8001d66:	4830      	ldr	r0, [pc, #192]	@ (8001e28 <frontLeft+0x134>)
 8001d68:	f001 fa6a 	bl	8003240 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2104      	movs	r1, #4
 8001d70:	482d      	ldr	r0, [pc, #180]	@ (8001e28 <frontLeft+0x134>)
 8001d72:	f001 fa65 	bl	8003240 <HAL_GPIO_WritePin>
  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmVal);
 8001d76:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <frontLeft+0x12c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6a3a      	ldr	r2, [r7, #32]
 8001d7c:	635a      	str	r2, [r3, #52]	@ 0x34
  		 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2120      	movs	r1, #32
 8001d82:	4829      	ldr	r0, [pc, #164]	@ (8001e28 <frontLeft+0x134>)
 8001d84:	f001 fa5c 	bl	8003240 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	2110      	movs	r1, #16
 8001d8c:	4826      	ldr	r0, [pc, #152]	@ (8001e28 <frontLeft+0x134>)
 8001d8e:	f001 fa57 	bl	8003240 <HAL_GPIO_WritePin>
  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmVal);
 8001d92:	4b23      	ldr	r3, [pc, #140]	@ (8001e20 <frontLeft+0x12c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6a3a      	ldr	r2, [r7, #32]
 8001d98:	639a      	str	r2, [r3, #56]	@ 0x38
  		osDelay(10);
 8001d9a:	200a      	movs	r0, #10
 8001d9c:	f004 fc92 	bl	80066c4 <osDelay>
  		currentEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8001da0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <frontLeft+0x124>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	61bb      	str	r3, [r7, #24]

        // Check if the robot has reached the target distance

          // Calculate total encoder ticks since the motor started moving
          if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8001da8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e18 <frontLeft+0x124>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d104      	bne.n	8001dc0 <frontLeft+0xcc>
              encoderCount = (startEncoderCount - currentEncoderCount);
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dbe:	e003      	b.n	8001dc8 <frontLeft+0xd4>
          } else {
              encoderCount = (currentEncoderCount - startEncoderCount);
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
          }

          if (encoderCount>=targetTicks) {
 8001dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d3c8      	bcc.n	8001d62 <frontLeft+0x6e>
              // Stop the motor
        	  htim1.Instance -> CCR4 = 155;
 8001dd0:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <frontLeft+0x130>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	229b      	movs	r2, #155	@ 0x9b
 8001dd6:	641a      	str	r2, [r3, #64]	@ 0x40
              HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2104      	movs	r1, #4
 8001ddc:	4812      	ldr	r0, [pc, #72]	@ (8001e28 <frontLeft+0x134>)
 8001dde:	f001 fa2f 	bl	8003240 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2108      	movs	r1, #8
 8001de6:	4810      	ldr	r0, [pc, #64]	@ (8001e28 <frontLeft+0x134>)
 8001de8:	f001 fa2a 	bl	8003240 <HAL_GPIO_WritePin>
              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);  // Stop PWM
 8001dec:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <frontLeft+0x12c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2200      	movs	r2, #0
 8001df2:	635a      	str	r2, [r3, #52]	@ 0x34
              HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2120      	movs	r1, #32
 8001df8:	480b      	ldr	r0, [pc, #44]	@ (8001e28 <frontLeft+0x134>)
 8001dfa:	f001 fa21 	bl	8003240 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2110      	movs	r1, #16
 8001e02:	4809      	ldr	r0, [pc, #36]	@ (8001e28 <frontLeft+0x134>)
 8001e04:	f001 fa1c 	bl	8003240 <HAL_GPIO_WritePin>
              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);  // Stop PWM
 8001e08:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <frontLeft+0x12c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	639a      	str	r2, [r3, #56]	@ 0x38
              return;
 8001e10:	bf00      	nop
          }
  	}

}
 8001e12:	3728      	adds	r7, #40	@ 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	2000023c 	.word	0x2000023c
 8001e1c:	0800c2a4 	.word	0x0800c2a4
 8001e20:	2000035c 	.word	0x2000035c
 8001e24:	200001f4 	.word	0x200001f4
 8001e28:	40020000 	.word	0x40020000

08001e2c <backRight>:
void backRight(int distance){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	@ 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	distance = 75; //set as fixed value
 8001e34:	234b      	movs	r3, #75	@ 0x4b
 8001e36:	607b      	str	r3, [r7, #4]
  	uint32_t pwmVal = 2000;
 8001e38:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001e3c:	623b      	str	r3, [r7, #32]
  	uint32_t encoderCount = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24
  	uint32_t startEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8001e42:	4b43      	ldr	r3, [pc, #268]	@ (8001f50 <backRight+0x124>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	61fb      	str	r3, [r7, #28]
  	uint32_t currentEncoderCount = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  	uint32_t targetTicks = (uint32_t)countTargetTicks(distance);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fd4e 	bl	80018f0 <countTargetTicks>
 8001e54:	6178      	str	r0, [r7, #20]

  			//(uint32_t)countTargetTicks(distance);
 	char tbuff[9];
 	sprintf(tbuff,"Ticks = %d",targetTicks);
 8001e56:	f107 0308 	add.w	r3, r7, #8
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	493d      	ldr	r1, [pc, #244]	@ (8001f54 <backRight+0x128>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f008 f8a6 	bl	8009fb0 <siprintf>
 	OLED_Clear();
 8001e64:	f007 f952 	bl	800910c <OLED_Clear>
 	OLED_ShowString(10,0,tbuff);
 8001e68:	f107 0308 	add.w	r3, r7, #8
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2100      	movs	r1, #0
 8001e70:	200a      	movs	r0, #10
 8001e72:	f007 fa3d 	bl	80092f0 <OLED_ShowString>
 	OLED_Refresh_Gram();
 8001e76:	f007 f8c7 	bl	8009008 <OLED_Refresh_Gram>
  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4836      	ldr	r0, [pc, #216]	@ (8001f58 <backRight+0x12c>)
 8001e7e:	f001 ff17 	bl	8003cb0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001e82:	2104      	movs	r1, #4
 8001e84:	4834      	ldr	r0, [pc, #208]	@ (8001f58 <backRight+0x12c>)
 8001e86:	f001 ff13 	bl	8003cb0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001e8a:	210c      	movs	r1, #12
 8001e8c:	4833      	ldr	r0, [pc, #204]	@ (8001f5c <backRight+0x130>)
 8001e8e:	f001 ff0f 	bl	8003cb0 <HAL_TIM_PWM_Start>
    htim1.Instance->CCR4 = 90;
 8001e92:	4b32      	ldr	r3, [pc, #200]	@ (8001f5c <backRight+0x130>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	225a      	movs	r2, #90	@ 0x5a
 8001e98:	641a      	str	r2, [r3, #64]	@ 0x40

  	for(;;){
  	  //Move Backwards
  		 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2108      	movs	r1, #8
 8001e9e:	4830      	ldr	r0, [pc, #192]	@ (8001f60 <backRight+0x134>)
 8001ea0:	f001 f9ce 	bl	8003240 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	482d      	ldr	r0, [pc, #180]	@ (8001f60 <backRight+0x134>)
 8001eaa:	f001 f9c9 	bl	8003240 <HAL_GPIO_WritePin>
  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmVal);
 8001eae:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <backRight+0x12c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6a3a      	ldr	r2, [r7, #32]
 8001eb4:	635a      	str	r2, [r3, #52]	@ 0x34
  		 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2120      	movs	r1, #32
 8001eba:	4829      	ldr	r0, [pc, #164]	@ (8001f60 <backRight+0x134>)
 8001ebc:	f001 f9c0 	bl	8003240 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	4826      	ldr	r0, [pc, #152]	@ (8001f60 <backRight+0x134>)
 8001ec6:	f001 f9bb 	bl	8003240 <HAL_GPIO_WritePin>
  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmVal);
 8001eca:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <backRight+0x12c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6a3a      	ldr	r2, [r7, #32]
 8001ed0:	639a      	str	r2, [r3, #56]	@ 0x38
  		osDelay(10);
 8001ed2:	200a      	movs	r0, #10
 8001ed4:	f004 fbf6 	bl	80066c4 <osDelay>
  		currentEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f50 <backRight+0x124>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ede:	61bb      	str	r3, [r7, #24]

        // Check if the robot has reached the target distance

          // Calculate total encoder ticks since the motor started moving
          if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <backRight+0x124>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d104      	bne.n	8001ef8 <backRight+0xcc>
              encoderCount = (startEncoderCount - currentEncoderCount);
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef6:	e003      	b.n	8001f00 <backRight+0xd4>
          } else {
              encoderCount = (currentEncoderCount - startEncoderCount);
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
          }

          if (encoderCount>=targetTicks) {
 8001f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d3c8      	bcc.n	8001e9a <backRight+0x6e>
        	  htim1.Instance -> CCR4 = 155;
 8001f08:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <backRight+0x130>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	229b      	movs	r2, #155	@ 0x9b
 8001f0e:	641a      	str	r2, [r3, #64]	@ 0x40
              // Stop the motor
              HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2104      	movs	r1, #4
 8001f14:	4812      	ldr	r0, [pc, #72]	@ (8001f60 <backRight+0x134>)
 8001f16:	f001 f993 	bl	8003240 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2108      	movs	r1, #8
 8001f1e:	4810      	ldr	r0, [pc, #64]	@ (8001f60 <backRight+0x134>)
 8001f20:	f001 f98e 	bl	8003240 <HAL_GPIO_WritePin>
              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);  // Stop PWM
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <backRight+0x12c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	635a      	str	r2, [r3, #52]	@ 0x34
              HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2120      	movs	r1, #32
 8001f30:	480b      	ldr	r0, [pc, #44]	@ (8001f60 <backRight+0x134>)
 8001f32:	f001 f985 	bl	8003240 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2110      	movs	r1, #16
 8001f3a:	4809      	ldr	r0, [pc, #36]	@ (8001f60 <backRight+0x134>)
 8001f3c:	f001 f980 	bl	8003240 <HAL_GPIO_WritePin>
              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);  // Stop PWM
 8001f40:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <backRight+0x12c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2200      	movs	r2, #0
 8001f46:	639a      	str	r2, [r3, #56]	@ 0x38
              return;
 8001f48:	bf00      	nop
          }
  	}
}
 8001f4a:	3728      	adds	r7, #40	@ 0x28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	2000023c 	.word	0x2000023c
 8001f54:	0800c2a4 	.word	0x0800c2a4
 8001f58:	2000035c 	.word	0x2000035c
 8001f5c:	200001f4 	.word	0x200001f4
 8001f60:	40020000 	.word	0x40020000

08001f64 <backLeft>:
void backLeft(int distance){
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	@ 0x28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	distance = 75; //set as fixed value
 8001f6c:	234b      	movs	r3, #75	@ 0x4b
 8001f6e:	607b      	str	r3, [r7, #4]
  	uint32_t pwmVal = 2000;
 8001f70:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001f74:	623b      	str	r3, [r7, #32]
  	uint32_t encoderCount = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
  	uint32_t startEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8001f7a:	4b43      	ldr	r3, [pc, #268]	@ (8002088 <backLeft+0x124>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f80:	61fb      	str	r3, [r7, #28]
  	uint32_t currentEncoderCount = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
  	uint32_t targetTicks = (uint32_t)countTargetTicks(distance);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fcb2 	bl	80018f0 <countTargetTicks>
 8001f8c:	6178      	str	r0, [r7, #20]

  			//(uint32_t)countTargetTicks(distance);
 	char tbuff[9];
 	sprintf(tbuff,"Ticks = %d",targetTicks);
 8001f8e:	f107 0308 	add.w	r3, r7, #8
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	493d      	ldr	r1, [pc, #244]	@ (800208c <backLeft+0x128>)
 8001f96:	4618      	mov	r0, r3
 8001f98:	f008 f80a 	bl	8009fb0 <siprintf>
 	OLED_Clear();
 8001f9c:	f007 f8b6 	bl	800910c <OLED_Clear>
 	OLED_ShowString(10,0,tbuff);
 8001fa0:	f107 0308 	add.w	r3, r7, #8
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	200a      	movs	r0, #10
 8001faa:	f007 f9a1 	bl	80092f0 <OLED_ShowString>
 	OLED_Refresh_Gram();
 8001fae:	f007 f82b 	bl	8009008 <OLED_Refresh_Gram>
  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4836      	ldr	r0, [pc, #216]	@ (8002090 <backLeft+0x12c>)
 8001fb6:	f001 fe7b 	bl	8003cb0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001fba:	2104      	movs	r1, #4
 8001fbc:	4834      	ldr	r0, [pc, #208]	@ (8002090 <backLeft+0x12c>)
 8001fbe:	f001 fe77 	bl	8003cb0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001fc2:	210c      	movs	r1, #12
 8001fc4:	4833      	ldr	r0, [pc, #204]	@ (8002094 <backLeft+0x130>)
 8001fc6:	f001 fe73 	bl	8003cb0 <HAL_TIM_PWM_Start>
    htim1.Instance->CCR4 = 230;
 8001fca:	4b32      	ldr	r3, [pc, #200]	@ (8002094 <backLeft+0x130>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	22e6      	movs	r2, #230	@ 0xe6
 8001fd0:	641a      	str	r2, [r3, #64]	@ 0x40

  	for(;;){
  	  //Move Backwards
  		 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2108      	movs	r1, #8
 8001fd6:	4830      	ldr	r0, [pc, #192]	@ (8002098 <backLeft+0x134>)
 8001fd8:	f001 f932 	bl	8003240 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	2104      	movs	r1, #4
 8001fe0:	482d      	ldr	r0, [pc, #180]	@ (8002098 <backLeft+0x134>)
 8001fe2:	f001 f92d 	bl	8003240 <HAL_GPIO_WritePin>
  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmVal);
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8002090 <backLeft+0x12c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6a3a      	ldr	r2, [r7, #32]
 8001fec:	635a      	str	r2, [r3, #52]	@ 0x34
  		 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2120      	movs	r1, #32
 8001ff2:	4829      	ldr	r0, [pc, #164]	@ (8002098 <backLeft+0x134>)
 8001ff4:	f001 f924 	bl	8003240 <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2110      	movs	r1, #16
 8001ffc:	4826      	ldr	r0, [pc, #152]	@ (8002098 <backLeft+0x134>)
 8001ffe:	f001 f91f 	bl	8003240 <HAL_GPIO_WritePin>
  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmVal);
 8002002:	4b23      	ldr	r3, [pc, #140]	@ (8002090 <backLeft+0x12c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6a3a      	ldr	r2, [r7, #32]
 8002008:	639a      	str	r2, [r3, #56]	@ 0x38
  		osDelay(10);
 800200a:	200a      	movs	r0, #10
 800200c:	f004 fb5a 	bl	80066c4 <osDelay>
  		currentEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8002010:	4b1d      	ldr	r3, [pc, #116]	@ (8002088 <backLeft+0x124>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	61bb      	str	r3, [r7, #24]

        // Check if the robot has reached the target distance

          // Calculate total encoder ticks since the motor started moving
          if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8002018:	4b1b      	ldr	r3, [pc, #108]	@ (8002088 <backLeft+0x124>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b10      	cmp	r3, #16
 8002024:	d104      	bne.n	8002030 <backLeft+0xcc>
              encoderCount = (startEncoderCount - currentEncoderCount);
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
 800202e:	e003      	b.n	8002038 <backLeft+0xd4>
          } else {
              encoderCount = (currentEncoderCount - startEncoderCount);
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
          }

          if (encoderCount>=targetTicks) {
 8002038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	429a      	cmp	r2, r3
 800203e:	d3c8      	bcc.n	8001fd2 <backLeft+0x6e>
        	  htim1.Instance -> CCR4 = 155;
 8002040:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <backLeft+0x130>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	229b      	movs	r2, #155	@ 0x9b
 8002046:	641a      	str	r2, [r3, #64]	@ 0x40
              // Stop the motor
              HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002048:	2200      	movs	r2, #0
 800204a:	2104      	movs	r1, #4
 800204c:	4812      	ldr	r0, [pc, #72]	@ (8002098 <backLeft+0x134>)
 800204e:	f001 f8f7 	bl	8003240 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	2108      	movs	r1, #8
 8002056:	4810      	ldr	r0, [pc, #64]	@ (8002098 <backLeft+0x134>)
 8002058:	f001 f8f2 	bl	8003240 <HAL_GPIO_WritePin>
              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);  // Stop PWM
 800205c:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <backLeft+0x12c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2200      	movs	r2, #0
 8002062:	635a      	str	r2, [r3, #52]	@ 0x34
              HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002064:	2200      	movs	r2, #0
 8002066:	2120      	movs	r1, #32
 8002068:	480b      	ldr	r0, [pc, #44]	@ (8002098 <backLeft+0x134>)
 800206a:	f001 f8e9 	bl	8003240 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	2110      	movs	r1, #16
 8002072:	4809      	ldr	r0, [pc, #36]	@ (8002098 <backLeft+0x134>)
 8002074:	f001 f8e4 	bl	8003240 <HAL_GPIO_WritePin>
              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);  // Stop PWM
 8002078:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <backLeft+0x12c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2200      	movs	r2, #0
 800207e:	639a      	str	r2, [r3, #56]	@ 0x38
              return;
 8002080:	bf00      	nop
          }
  	}
}
 8002082:	3728      	adds	r7, #40	@ 0x28
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	2000023c 	.word	0x2000023c
 800208c:	0800c2a4 	.word	0x0800c2a4
 8002090:	2000035c 	.word	0x2000035c
 8002094:	200001f4 	.word	0x200001f4
 8002098:	40020000 	.word	0x40020000

0800209c <encoder>:
* @brief Function implementing the Encoder thread.
* @param argument: Not used
* @retval None
*/
void encoder(void *argument)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08c      	sub	sp, #48	@ 0x30
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80020a4:	213c      	movs	r1, #60	@ 0x3c
 80020a6:	482f      	ldr	r0, [pc, #188]	@ (8002164 <encoder+0xc8>)
 80020a8:	f002 f86e 	bl	8004188 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80020ac:	213c      	movs	r1, #60	@ 0x3c
 80020ae:	482e      	ldr	r0, [pc, #184]	@ (8002168 <encoder+0xcc>)
 80020b0:	f002 f86a 	bl	8004188 <HAL_TIM_Encoder_Start>
  int cnt1, cnt2, diff, dir;
  char buffer[20];
  uint32_t tick;
  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 80020b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002164 <encoder+0xc8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tick = HAL_GetTick();
 80020bc:	f000 fd50 	bl	8002b60 <HAL_GetTick>
 80020c0:	62b8      	str	r0, [r7, #40]	@ 0x28

  for(;;)
  {
	memset(buffer, 0, sizeof buffer);
 80020c2:	f107 0308 	add.w	r3, r7, #8
 80020c6:	2214      	movs	r2, #20
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f007 ffd3 	bl	800a076 <memset>
    if (HAL_GetTick() - tick > 1000L)
 80020d0:	f000 fd46 	bl	8002b60 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020de:	d9f0      	bls.n	80020c2 <encoder+0x26>
    {
      cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 80020e0:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <encoder+0xcc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80020e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002164 <encoder+0xc8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b10      	cmp	r3, #16
 80020f4:	d110      	bne.n	8002118 <encoder+0x7c>
        if (cnt2 < cnt1) {
 80020f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020fa:	429a      	cmp	r2, r3
 80020fc:	da04      	bge.n	8002108 <encoder+0x6c>
          diff = cnt1 - cnt2;
 80020fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	623b      	str	r3, [r7, #32]
 8002106:	e017      	b.n	8002138 <encoder+0x9c>
        } else {
          diff = (65535 - cnt2) + cnt1;
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800210e:	33ff      	adds	r3, #255	@ 0xff
 8002110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002112:	4413      	add	r3, r2
 8002114:	623b      	str	r3, [r7, #32]
 8002116:	e00f      	b.n	8002138 <encoder+0x9c>
        }
      }
      else {
        if (cnt2 > cnt1) {
 8002118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800211a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800211c:	429a      	cmp	r2, r3
 800211e:	dd04      	ble.n	800212a <encoder+0x8e>
          diff = cnt2 - cnt1;
 8002120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	623b      	str	r3, [r7, #32]
 8002128:	e006      	b.n	8002138 <encoder+0x9c>
        } else {
          diff = (65535 - cnt1) + cnt2;
 800212a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800212c:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8002130:	33ff      	adds	r3, #255	@ 0xff
 8002132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002134:	4413      	add	r3, r2
 8002136:	623b      	str	r3, [r7, #32]
      }

      //sprintf(buffer, "Speed:%5d", diff);
      //OLED_ShowString(10, 20, buffer);

      dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8002138:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <encoder+0xc8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b10      	cmp	r3, #16
 8002144:	bf0c      	ite	eq
 8002146:	2301      	moveq	r3, #1
 8002148:	2300      	movne	r3, #0
 800214a:	b2db      	uxtb	r3, r3
 800214c:	61fb      	str	r3, [r7, #28]
      //sprintf(buffer, "Count1:%5d", cnt1);
      //OLED_ShowString(10, 30, buffer);


      // Refresh OLED after displaying
      OLED_Refresh_Gram();
 800214e:	f006 ff5b 	bl	8009008 <OLED_Refresh_Gram>



      cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8002152:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <encoder+0xc8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002158:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tick = HAL_GetTick();
 800215a:	f000 fd01 	bl	8002b60 <HAL_GetTick>
 800215e:	62b8      	str	r0, [r7, #40]	@ 0x28
  {
 8002160:	e7af      	b.n	80020c2 <encoder+0x26>
 8002162:	bf00      	nop
 8002164:	2000023c 	.word	0x2000023c
 8002168:	20000284 	.word	0x20000284

0800216c <Uart_Function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Uart_Function */
void Uart_Function(void *argument)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b090      	sub	sp, #64	@ 0x40
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Uart_Function */
  /* Infinite loop */
	HAL_UART_Receive_IT(&huart3,rxBuffer,5);
 8002174:	2205      	movs	r2, #5
 8002176:	4988      	ldr	r1, [pc, #544]	@ (8002398 <Uart_Function+0x22c>)
 8002178:	4888      	ldr	r0, [pc, #544]	@ (800239c <Uart_Function+0x230>)
 800217a:	f003 fa18 	bl	80055ae <HAL_UART_Receive_IT>
//      //HAL_UART_Receive_IT(&huart3,aRxBuffer,5);
//      OLED_Clear();
//	  OLED_ShowString(10,40,instructionBuffer);
//      OLED_Refresh_Gram();

      if(startFlag) {
 800217e:	4b88      	ldr	r3, [pc, #544]	@ (80023a0 <Uart_Function+0x234>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8100 	beq.w	8002388 <Uart_Function+0x21c>
    	  uint32_t iBufferSize,currentIndex,dirIndex,turnIndex,hunIndex,tensIndex,onesIndex,distance;
    	  int digit;
    	  char num[4];
    	  iBufferSize = instructionIndex + 1;
 8002188:	4b86      	ldr	r3, [pc, #536]	@ (80023a4 <Uart_Function+0x238>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	63bb      	str	r3, [r7, #56]	@ 0x38
    	  currentIndex = 1;
 8002190:	2301      	movs	r3, #1
 8002192:	63fb      	str	r3, [r7, #60]	@ 0x3c
    	  //OLED_ShowString(10,50,"start movement");

    	  while(currentIndex<iBufferSize){
 8002194:	e0e7      	b.n	8002366 <Uart_Function+0x1fa>
    		  dirIndex = currentIndex;
 8002196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002198:	637b      	str	r3, [r7, #52]	@ 0x34
    		  turnIndex = currentIndex + 1;
 800219a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800219c:	3301      	adds	r3, #1
 800219e:	633b      	str	r3, [r7, #48]	@ 0x30
    		  hunIndex = currentIndex + 2;
 80021a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021a2:	3302      	adds	r3, #2
 80021a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    		  tensIndex = currentIndex + 3;
 80021a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021a8:	3303      	adds	r3, #3
 80021aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    		  onesIndex = currentIndex + 4;
 80021ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021ae:	3304      	adds	r3, #4
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
//        	  num[3] = instructionBuffer[onesIndex];
//        	  num[4] ='\0';
//


        	  int length = 3;
 80021b2:	2303      	movs	r3, #3
 80021b4:	623b      	str	r3, [r7, #32]
        	  strncpy(num, instructionBuffer + hunIndex-1, length);
 80021b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b8:	3b01      	subs	r3, #1
 80021ba:	4a7b      	ldr	r2, [pc, #492]	@ (80023a8 <Uart_Function+0x23c>)
 80021bc:	1899      	adds	r1, r3, r2
 80021be:	6a3a      	ldr	r2, [r7, #32]
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4618      	mov	r0, r3
 80021c6:	f007 ff5e 	bl	800a086 <strncpy>
        	  num[length] = '\0'; // Null-terminate the extracted
 80021ca:	f107 0214 	add.w	r2, r7, #20
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	4413      	add	r3, r2
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]

        	  digit = atoi(num);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4618      	mov	r0, r3
 80021dc:	f007 f946 	bl	800946c <atoi>
 80021e0:	61f8      	str	r0, [r7, #28]
        	  distance = (uint32_t)digit;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	61bb      	str	r3, [r7, #24]

        	  char dist[8];
        	  sprintf(dist,"dist = %d",distance);
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	496f      	ldr	r1, [pc, #444]	@ (80023ac <Uart_Function+0x240>)
 80021ee:	4618      	mov	r0, r3
 80021f0:	f007 fede 	bl	8009fb0 <siprintf>
        	  OLED_ShowString(10,30,num);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	461a      	mov	r2, r3
 80021fa:	211e      	movs	r1, #30
 80021fc:	200a      	movs	r0, #10
 80021fe:	f007 f877 	bl	80092f0 <OLED_ShowString>
        	  OLED_ShowString(10,50,dist); //Note index starts from 1
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	461a      	mov	r2, r3
 8002208:	2132      	movs	r1, #50	@ 0x32
 800220a:	200a      	movs	r0, #10
 800220c:	f007 f870 	bl	80092f0 <OLED_ShowString>
        	  osDelay(2000);
 8002210:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002214:	f004 fa56 	bl	80066c4 <osDelay>

        	  char direction[3];
        	  direction[0] = instructionBuffer[dirIndex-1];
 8002218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800221a:	3b01      	subs	r3, #1
 800221c:	4a62      	ldr	r2, [pc, #392]	@ (80023a8 <Uart_Function+0x23c>)
 800221e:	5cd3      	ldrb	r3, [r2, r3]
 8002220:	723b      	strb	r3, [r7, #8]
        	  direction[1] = instructionBuffer[turnIndex-1];
 8002222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002224:	3b01      	subs	r3, #1
 8002226:	4a60      	ldr	r2, [pc, #384]	@ (80023a8 <Uart_Function+0x23c>)
 8002228:	5cd3      	ldrb	r3, [r2, r3]
 800222a:	727b      	strb	r3, [r7, #9]
        	  OLED_Clear();
 800222c:	f006 ff6e 	bl	800910c <OLED_Clear>
        	  OLED_ShowString(10,10,direction);
 8002230:	f107 0308 	add.w	r3, r7, #8
 8002234:	461a      	mov	r2, r3
 8002236:	210a      	movs	r1, #10
 8002238:	200a      	movs	r0, #10
 800223a:	f007 f859 	bl	80092f0 <OLED_ShowString>
        	  osDelay(2000);
 800223e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002242:	f004 fa3f 	bl	80066c4 <osDelay>
        	  if(instructionBuffer[dirIndex-1] =='F'&& instructionBuffer[turnIndex-1]== 'F'){
 8002246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002248:	3b01      	subs	r3, #1
 800224a:	4a57      	ldr	r2, [pc, #348]	@ (80023a8 <Uart_Function+0x23c>)
 800224c:	5cd3      	ldrb	r3, [r2, r3]
 800224e:	2b46      	cmp	r3, #70	@ 0x46
 8002250:	d110      	bne.n	8002274 <Uart_Function+0x108>
 8002252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002254:	3b01      	subs	r3, #1
 8002256:	4a54      	ldr	r2, [pc, #336]	@ (80023a8 <Uart_Function+0x23c>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	2b46      	cmp	r3, #70	@ 0x46
 800225c:	d10a      	bne.n	8002274 <Uart_Function+0x108>
        		  OLED_Clear();
 800225e:	f006 ff55 	bl	800910c <OLED_Clear>
        		  OLED_ShowString(10,10,"Front Movement");
 8002262:	4a53      	ldr	r2, [pc, #332]	@ (80023b0 <Uart_Function+0x244>)
 8002264:	210a      	movs	r1, #10
 8002266:	200a      	movs	r0, #10
 8002268:	f007 f842 	bl	80092f0 <OLED_ShowString>
        		  forward(digit);
 800226c:	69f8      	ldr	r0, [r7, #28]
 800226e:	f7ff fb67 	bl	8001940 <forward>
 8002272:	e075      	b.n	8002360 <Uart_Function+0x1f4>

        	  }
        	  else if(instructionBuffer[dirIndex-1] =='R'&& instructionBuffer[turnIndex-1]== 'R'){
 8002274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002276:	3b01      	subs	r3, #1
 8002278:	4a4b      	ldr	r2, [pc, #300]	@ (80023a8 <Uart_Function+0x23c>)
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	2b52      	cmp	r3, #82	@ 0x52
 800227e:	d109      	bne.n	8002294 <Uart_Function+0x128>
 8002280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002282:	3b01      	subs	r3, #1
 8002284:	4a48      	ldr	r2, [pc, #288]	@ (80023a8 <Uart_Function+0x23c>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	2b52      	cmp	r3, #82	@ 0x52
 800228a:	d103      	bne.n	8002294 <Uart_Function+0x128>
        		  backward(digit);
 800228c:	69f8      	ldr	r0, [r7, #28]
 800228e:	f7ff fbed 	bl	8001a6c <backward>
 8002292:	e065      	b.n	8002360 <Uart_Function+0x1f4>
        	  }
        	  else if(instructionBuffer[dirIndex-1] =='F'&& instructionBuffer[turnIndex-1]== 'R'){
 8002294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002296:	3b01      	subs	r3, #1
 8002298:	4a43      	ldr	r2, [pc, #268]	@ (80023a8 <Uart_Function+0x23c>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	2b46      	cmp	r3, #70	@ 0x46
 800229e:	d109      	bne.n	80022b4 <Uart_Function+0x148>
 80022a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a2:	3b01      	subs	r3, #1
 80022a4:	4a40      	ldr	r2, [pc, #256]	@ (80023a8 <Uart_Function+0x23c>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	2b52      	cmp	r3, #82	@ 0x52
 80022aa:	d103      	bne.n	80022b4 <Uart_Function+0x148>
        		  frontRight(0);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7ff fc85 	bl	8001bbc <frontRight>
 80022b2:	e055      	b.n	8002360 <Uart_Function+0x1f4>
        	  }
        	  else if(instructionBuffer[dirIndex-1] =='F'&& instructionBuffer[turnIndex-1]== 'L'){
 80022b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b6:	3b01      	subs	r3, #1
 80022b8:	4a3b      	ldr	r2, [pc, #236]	@ (80023a8 <Uart_Function+0x23c>)
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	2b46      	cmp	r3, #70	@ 0x46
 80022be:	d109      	bne.n	80022d4 <Uart_Function+0x168>
 80022c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c2:	3b01      	subs	r3, #1
 80022c4:	4a38      	ldr	r2, [pc, #224]	@ (80023a8 <Uart_Function+0x23c>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	2b4c      	cmp	r3, #76	@ 0x4c
 80022ca:	d103      	bne.n	80022d4 <Uart_Function+0x168>
        		  frontLeft(0);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7ff fd11 	bl	8001cf4 <frontLeft>
 80022d2:	e045      	b.n	8002360 <Uart_Function+0x1f4>
        	  }
        	  else if(instructionBuffer[dirIndex-1] =='B'&& instructionBuffer[turnIndex-1]== 'R'){
 80022d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d6:	3b01      	subs	r3, #1
 80022d8:	4a33      	ldr	r2, [pc, #204]	@ (80023a8 <Uart_Function+0x23c>)
 80022da:	5cd3      	ldrb	r3, [r2, r3]
 80022dc:	2b42      	cmp	r3, #66	@ 0x42
 80022de:	d109      	bne.n	80022f4 <Uart_Function+0x188>
 80022e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e2:	3b01      	subs	r3, #1
 80022e4:	4a30      	ldr	r2, [pc, #192]	@ (80023a8 <Uart_Function+0x23c>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	2b52      	cmp	r3, #82	@ 0x52
 80022ea:	d103      	bne.n	80022f4 <Uart_Function+0x188>
          		  backRight(0);
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7ff fd9d 	bl	8001e2c <backRight>
 80022f2:	e035      	b.n	8002360 <Uart_Function+0x1f4>
        	  }
        	  else if(instructionBuffer[dirIndex-1] =='B'&& instructionBuffer[turnIndex-1]== 'L'){
 80022f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f6:	3b01      	subs	r3, #1
 80022f8:	4a2b      	ldr	r2, [pc, #172]	@ (80023a8 <Uart_Function+0x23c>)
 80022fa:	5cd3      	ldrb	r3, [r2, r3]
 80022fc:	2b42      	cmp	r3, #66	@ 0x42
 80022fe:	d109      	bne.n	8002314 <Uart_Function+0x1a8>
 8002300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002302:	3b01      	subs	r3, #1
 8002304:	4a28      	ldr	r2, [pc, #160]	@ (80023a8 <Uart_Function+0x23c>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	2b4c      	cmp	r3, #76	@ 0x4c
 800230a:	d103      	bne.n	8002314 <Uart_Function+0x1a8>
        		  backLeft(0);
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff fe29 	bl	8001f64 <backLeft>
 8002312:	e025      	b.n	8002360 <Uart_Function+0x1f4>
        	  }
        	  else if(instructionBuffer[dirIndex-1] =='S'&& instructionBuffer[turnIndex-1]== 'T'){
 8002314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002316:	3b01      	subs	r3, #1
 8002318:	4a23      	ldr	r2, [pc, #140]	@ (80023a8 <Uart_Function+0x23c>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	2b53      	cmp	r3, #83	@ 0x53
 800231e:	d11f      	bne.n	8002360 <Uart_Function+0x1f4>
 8002320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002322:	3b01      	subs	r3, #1
 8002324:	4a20      	ldr	r2, [pc, #128]	@ (80023a8 <Uart_Function+0x23c>)
 8002326:	5cd3      	ldrb	r3, [r2, r3]
 8002328:	2b54      	cmp	r3, #84	@ 0x54
 800232a:	d119      	bne.n	8002360 <Uart_Function+0x1f4>
        		  //transmit 's' to rpi to confirm we have stopped so it can snap picture
        		  rpiBuffer[0] = 'S';
 800232c:	4b21      	ldr	r3, [pc, #132]	@ (80023b4 <Uart_Function+0x248>)
 800232e:	2253      	movs	r2, #83	@ 0x53
 8002330:	701a      	strb	r2, [r3, #0]
        		  rpiBuffer[1] = 'T';
 8002332:	4b20      	ldr	r3, [pc, #128]	@ (80023b4 <Uart_Function+0x248>)
 8002334:	2254      	movs	r2, #84	@ 0x54
 8002336:	705a      	strb	r2, [r3, #1]
        		  rpiBuffer[2] = '0';
 8002338:	4b1e      	ldr	r3, [pc, #120]	@ (80023b4 <Uart_Function+0x248>)
 800233a:	2230      	movs	r2, #48	@ 0x30
 800233c:	709a      	strb	r2, [r3, #2]
        		  rpiBuffer[3] = '0';
 800233e:	4b1d      	ldr	r3, [pc, #116]	@ (80023b4 <Uart_Function+0x248>)
 8002340:	2230      	movs	r2, #48	@ 0x30
 8002342:	70da      	strb	r2, [r3, #3]
        		  rpiBuffer[4] = '0';
 8002344:	4b1b      	ldr	r3, [pc, #108]	@ (80023b4 <Uart_Function+0x248>)
 8002346:	2230      	movs	r2, #48	@ 0x30
 8002348:	711a      	strb	r2, [r3, #4]
        		  HAL_UART_Transmit(&huart3, rpiBuffer, 5, 1000);
 800234a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800234e:	2205      	movs	r2, #5
 8002350:	4918      	ldr	r1, [pc, #96]	@ (80023b4 <Uart_Function+0x248>)
 8002352:	4812      	ldr	r0, [pc, #72]	@ (800239c <Uart_Function+0x230>)
 8002354:	f003 f8a0 	bl	8005498 <HAL_UART_Transmit>
        		  osDelay(1000);
 8002358:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800235c:	f004 f9b2 	bl	80066c4 <osDelay>
        	  }

    		  currentIndex +=5;
 8002360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002362:	3305      	adds	r3, #5
 8002364:	63fb      	str	r3, [r7, #60]	@ 0x3c
    	  while(currentIndex<iBufferSize){
 8002366:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800236a:	429a      	cmp	r2, r3
 800236c:	f4ff af13 	bcc.w	8002196 <Uart_Function+0x2a>
    	  }
    	  if(currentIndex>=iBufferSize){
 8002370:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002374:	429a      	cmp	r2, r3
 8002376:	d307      	bcc.n	8002388 <Uart_Function+0x21c>
    		  OLED_Clear();
 8002378:	f006 fec8 	bl	800910c <OLED_Clear>
    		  OLED_ShowString(10,10,"exit forloop");
 800237c:	4a0e      	ldr	r2, [pc, #56]	@ (80023b8 <Uart_Function+0x24c>)
 800237e:	210a      	movs	r1, #10
 8002380:	200a      	movs	r0, #10
 8002382:	f006 ffb5 	bl	80092f0 <OLED_ShowString>
//      }

      osDelay(1000);  // Adjust delay as needed
  }
  /* USER CODE END Uart_Function */
}
 8002386:	e004      	b.n	8002392 <Uart_Function+0x226>
      osDelay(1000);  // Adjust delay as needed
 8002388:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800238c:	f004 f99a 	bl	80066c4 <osDelay>
      if(startFlag) {
 8002390:	e6f5      	b.n	800217e <Uart_Function+0x12>
}
 8002392:	3740      	adds	r7, #64	@ 0x40
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200003f8 	.word	0x200003f8
 800239c:	200003a4 	.word	0x200003a4
 80023a0:	200003f4 	.word	0x200003f4
 80023a4:	200007f0 	.word	0x200007f0
 80023a8:	20000408 	.word	0x20000408
 80023ac:	0800c334 	.word	0x0800c334
 80023b0:	0800c340 	.word	0x0800c340
 80023b4:	20000400 	.word	0x20000400
 80023b8:	0800c350 	.word	0x0800c350

080023bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c0:	b672      	cpsid	i
}
 80023c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <Error_Handler+0x8>

080023c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	4b12      	ldr	r3, [pc, #72]	@ (800241c <HAL_MspInit+0x54>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	4a11      	ldr	r2, [pc, #68]	@ (800241c <HAL_MspInit+0x54>)
 80023d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023de:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <HAL_MspInit+0x54>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <HAL_MspInit+0x54>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <HAL_MspInit+0x54>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023fa:	4b08      	ldr	r3, [pc, #32]	@ (800241c <HAL_MspInit+0x54>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	210f      	movs	r1, #15
 800240a:	f06f 0001 	mvn.w	r0, #1
 800240e:	f000 fcb2 	bl	8002d76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800

08002420 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08c      	sub	sp, #48	@ 0x30
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 031c 	add.w	r3, r7, #28
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a2d      	ldr	r2, [pc, #180]	@ (80024f4 <HAL_TIM_Base_MspInit+0xd4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d10e      	bne.n	8002460 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	4b2c      	ldr	r3, [pc, #176]	@ (80024f8 <HAL_TIM_Base_MspInit+0xd8>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	4a2b      	ldr	r2, [pc, #172]	@ (80024f8 <HAL_TIM_Base_MspInit+0xd8>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6453      	str	r3, [r2, #68]	@ 0x44
 8002452:	4b29      	ldr	r3, [pc, #164]	@ (80024f8 <HAL_TIM_Base_MspInit+0xd8>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800245e:	e044      	b.n	80024ea <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a25      	ldr	r2, [pc, #148]	@ (80024fc <HAL_TIM_Base_MspInit+0xdc>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d10e      	bne.n	8002488 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	4b22      	ldr	r3, [pc, #136]	@ (80024f8 <HAL_TIM_Base_MspInit+0xd8>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	4a21      	ldr	r2, [pc, #132]	@ (80024f8 <HAL_TIM_Base_MspInit+0xd8>)
 8002474:	f043 0310 	orr.w	r3, r3, #16
 8002478:	6413      	str	r3, [r2, #64]	@ 0x40
 800247a:	4b1f      	ldr	r3, [pc, #124]	@ (80024f8 <HAL_TIM_Base_MspInit+0xd8>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697b      	ldr	r3, [r7, #20]
}
 8002486:	e030      	b.n	80024ea <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1c      	ldr	r2, [pc, #112]	@ (8002500 <HAL_TIM_Base_MspInit+0xe0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d12b      	bne.n	80024ea <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	4b18      	ldr	r3, [pc, #96]	@ (80024f8 <HAL_TIM_Base_MspInit+0xd8>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249a:	4a17      	ldr	r2, [pc, #92]	@ (80024f8 <HAL_TIM_Base_MspInit+0xd8>)
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <HAL_TIM_Base_MspInit+0xd8>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <HAL_TIM_Base_MspInit+0xd8>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	4a10      	ldr	r2, [pc, #64]	@ (80024f8 <HAL_TIM_Base_MspInit+0xd8>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024be:	4b0e      	ldr	r3, [pc, #56]	@ (80024f8 <HAL_TIM_Base_MspInit+0xd8>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024ca:	23c0      	movs	r3, #192	@ 0xc0
 80024cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80024da:	2303      	movs	r3, #3
 80024dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024de:	f107 031c 	add.w	r3, r7, #28
 80024e2:	4619      	mov	r1, r3
 80024e4:	4807      	ldr	r0, [pc, #28]	@ (8002504 <HAL_TIM_Base_MspInit+0xe4>)
 80024e6:	f000 fd0f 	bl	8002f08 <HAL_GPIO_Init>
}
 80024ea:	bf00      	nop
 80024ec:	3730      	adds	r7, #48	@ 0x30
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40010000 	.word	0x40010000
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40001000 	.word	0x40001000
 8002500:	40010400 	.word	0x40010400
 8002504:	40020800 	.word	0x40020800

08002508 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	@ 0x28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002528:	d14a      	bne.n	80025c0 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	4b26      	ldr	r3, [pc, #152]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	4a25      	ldr	r2, [pc, #148]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6413      	str	r3, [r2, #64]	@ 0x40
 800253a:	4b23      	ldr	r3, [pc, #140]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0xc0>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b1f      	ldr	r3, [pc, #124]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0xc0>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	4a1e      	ldr	r2, [pc, #120]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6313      	str	r3, [r2, #48]	@ 0x30
 8002556:	4b1c      	ldr	r3, [pc, #112]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	4b18      	ldr	r3, [pc, #96]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	4a17      	ldr	r2, [pc, #92]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0xc0>)
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	6313      	str	r3, [r2, #48]	@ 0x30
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800257e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	2302      	movs	r3, #2
 8002586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258c:	2300      	movs	r3, #0
 800258e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002590:	2301      	movs	r3, #1
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	4619      	mov	r1, r3
 800259a:	480c      	ldr	r0, [pc, #48]	@ (80025cc <HAL_TIM_Encoder_MspInit+0xc4>)
 800259c:	f000 fcb4 	bl	8002f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025a0:	2308      	movs	r3, #8
 80025a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025b0:	2301      	movs	r3, #1
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4619      	mov	r1, r3
 80025ba:	4805      	ldr	r0, [pc, #20]	@ (80025d0 <HAL_TIM_Encoder_MspInit+0xc8>)
 80025bc:	f000 fca4 	bl	8002f08 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80025c0:	bf00      	nop
 80025c2:	3728      	adds	r7, #40	@ 0x28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400

080025d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	@ 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM3)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a19      	ldr	r2, [pc, #100]	@ (8002658 <HAL_TIM_PWM_MspInit+0x84>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d12b      	bne.n	800264e <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	4b18      	ldr	r3, [pc, #96]	@ (800265c <HAL_TIM_PWM_MspInit+0x88>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	4a17      	ldr	r2, [pc, #92]	@ (800265c <HAL_TIM_PWM_MspInit+0x88>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	6413      	str	r3, [r2, #64]	@ 0x40
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <HAL_TIM_PWM_MspInit+0x88>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b11      	ldr	r3, [pc, #68]	@ (800265c <HAL_TIM_PWM_MspInit+0x88>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	4a10      	ldr	r2, [pc, #64]	@ (800265c <HAL_TIM_PWM_MspInit+0x88>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6313      	str	r3, [r2, #48]	@ 0x30
 8002622:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <HAL_TIM_PWM_MspInit+0x88>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800262e:	23c0      	movs	r3, #192	@ 0xc0
 8002630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800263e:	2302      	movs	r3, #2
 8002640:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	4619      	mov	r1, r3
 8002648:	4805      	ldr	r0, [pc, #20]	@ (8002660 <HAL_TIM_PWM_MspInit+0x8c>)
 800264a:	f000 fc5d 	bl	8002f08 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800264e:	bf00      	nop
 8002650:	3728      	adds	r7, #40	@ 0x28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40000400 	.word	0x40000400
 800265c:	40023800 	.word	0x40023800
 8002660:	40020000 	.word	0x40020000

08002664 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	@ 0x28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1d      	ldr	r2, [pc, #116]	@ (80026f8 <HAL_TIM_IC_MspInit+0x94>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d134      	bne.n	80026f0 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	4b1c      	ldr	r3, [pc, #112]	@ (80026fc <HAL_TIM_IC_MspInit+0x98>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	4a1b      	ldr	r2, [pc, #108]	@ (80026fc <HAL_TIM_IC_MspInit+0x98>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6413      	str	r3, [r2, #64]	@ 0x40
 8002696:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <HAL_TIM_IC_MspInit+0x98>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <HAL_TIM_IC_MspInit+0x98>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	4a14      	ldr	r2, [pc, #80]	@ (80026fc <HAL_TIM_IC_MspInit+0x98>)
 80026ac:	f043 0308 	orr.w	r3, r3, #8
 80026b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b2:	4b12      	ldr	r3, [pc, #72]	@ (80026fc <HAL_TIM_IC_MspInit+0x98>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 80026be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026d0:	2302      	movs	r3, #2
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	4619      	mov	r1, r3
 80026da:	4809      	ldr	r0, [pc, #36]	@ (8002700 <HAL_TIM_IC_MspInit+0x9c>)
 80026dc:	f000 fc14 	bl	8002f08 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80026e0:	2200      	movs	r2, #0
 80026e2:	2105      	movs	r1, #5
 80026e4:	201e      	movs	r0, #30
 80026e6:	f000 fb46 	bl	8002d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026ea:	201e      	movs	r0, #30
 80026ec:	f000 fb5f 	bl	8002dae <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80026f0:	bf00      	nop
 80026f2:	3728      	adds	r7, #40	@ 0x28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40000800 	.word	0x40000800
 80026fc:	40023800 	.word	0x40023800
 8002700:	40020c00 	.word	0x40020c00

08002704 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a12      	ldr	r2, [pc, #72]	@ (800276c <HAL_TIM_MspPostInit+0x68>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d11e      	bne.n	8002764 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <HAL_TIM_MspPostInit+0x6c>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	4a10      	ldr	r2, [pc, #64]	@ (8002770 <HAL_TIM_MspPostInit+0x6c>)
 8002730:	f043 0310 	orr.w	r3, r3, #16
 8002734:	6313      	str	r3, [r2, #48]	@ 0x30
 8002736:	4b0e      	ldr	r3, [pc, #56]	@ (8002770 <HAL_TIM_MspPostInit+0x6c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002742:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002746:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002754:	2301      	movs	r3, #1
 8002756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002758:	f107 030c 	add.w	r3, r7, #12
 800275c:	4619      	mov	r1, r3
 800275e:	4805      	ldr	r0, [pc, #20]	@ (8002774 <HAL_TIM_MspPostInit+0x70>)
 8002760:	f000 fbd2 	bl	8002f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002764:	bf00      	nop
 8002766:	3720      	adds	r7, #32
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40010000 	.word	0x40010000
 8002770:	40023800 	.word	0x40023800
 8002774:	40021000 	.word	0x40021000

08002778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	@ 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1d      	ldr	r2, [pc, #116]	@ (800280c <HAL_UART_MspInit+0x94>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d134      	bne.n	8002804 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	4b1c      	ldr	r3, [pc, #112]	@ (8002810 <HAL_UART_MspInit+0x98>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002810 <HAL_UART_MspInit+0x98>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027aa:	4b19      	ldr	r3, [pc, #100]	@ (8002810 <HAL_UART_MspInit+0x98>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <HAL_UART_MspInit+0x98>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	4a14      	ldr	r2, [pc, #80]	@ (8002810 <HAL_UART_MspInit+0x98>)
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c6:	4b12      	ldr	r3, [pc, #72]	@ (8002810 <HAL_UART_MspInit+0x98>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	2302      	movs	r3, #2
 80027da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e0:	2303      	movs	r3, #3
 80027e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027e4:	2307      	movs	r3, #7
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	4619      	mov	r1, r3
 80027ee:	4809      	ldr	r0, [pc, #36]	@ (8002814 <HAL_UART_MspInit+0x9c>)
 80027f0:	f000 fb8a 	bl	8002f08 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2105      	movs	r1, #5
 80027f8:	2027      	movs	r0, #39	@ 0x27
 80027fa:	f000 fabc 	bl	8002d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027fe:	2027      	movs	r0, #39	@ 0x27
 8002800:	f000 fad5 	bl	8002dae <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002804:	bf00      	nop
 8002806:	3728      	adds	r7, #40	@ 0x28
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40004800 	.word	0x40004800
 8002810:	40023800 	.word	0x40023800
 8002814:	40020800 	.word	0x40020800

08002818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <NMI_Handler+0x4>

08002820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002824:	bf00      	nop
 8002826:	e7fd      	b.n	8002824 <HardFault_Handler+0x4>

08002828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800282c:	bf00      	nop
 800282e:	e7fd      	b.n	800282c <MemManage_Handler+0x4>

08002830 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002834:	bf00      	nop
 8002836:	e7fd      	b.n	8002834 <BusFault_Handler+0x4>

08002838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800283c:	bf00      	nop
 800283e:	e7fd      	b.n	800283c <UsageFault_Handler+0x4>

08002840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002852:	f000 f971 	bl	8002b38 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002856:	f005 fb5d 	bl	8007f14 <xTaskGetSchedulerState>
 800285a:	4603      	mov	r3, r0
 800285c:	2b01      	cmp	r3, #1
 800285e:	d001      	beq.n	8002864 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002860:	f006 f952 	bl	8008b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}

08002868 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800286c:	4802      	ldr	r0, [pc, #8]	@ (8002878 <TIM4_IRQHandler+0x10>)
 800286e:	f001 fd19 	bl	80042a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200002cc 	.word	0x200002cc

0800287c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002880:	4802      	ldr	r0, [pc, #8]	@ (800288c <USART3_IRQHandler+0x10>)
 8002882:	f002 feb9 	bl	80055f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	200003a4 	.word	0x200003a4

08002890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return 1;
 8002894:	2301      	movs	r3, #1
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <_kill>:

int _kill(int pid, int sig)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028aa:	f007 fc49 	bl	800a140 <__errno>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2216      	movs	r2, #22
 80028b2:	601a      	str	r2, [r3, #0]
  return -1;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <_exit>:

void _exit (int status)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ffe7 	bl	80028a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028d2:	bf00      	nop
 80028d4:	e7fd      	b.n	80028d2 <_exit+0x12>

080028d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	e00a      	b.n	80028fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028e8:	f3af 8000 	nop.w
 80028ec:	4601      	mov	r1, r0
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	60ba      	str	r2, [r7, #8]
 80028f4:	b2ca      	uxtb	r2, r1
 80028f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3301      	adds	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	429a      	cmp	r2, r3
 8002904:	dbf0      	blt.n	80028e8 <_read+0x12>
  }

  return len;
 8002906:	687b      	ldr	r3, [r7, #4]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	e009      	b.n	8002936 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	60ba      	str	r2, [r7, #8]
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3301      	adds	r3, #1
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	429a      	cmp	r2, r3
 800293c:	dbf1      	blt.n	8002922 <_write+0x12>
  }
  return len;
 800293e:	687b      	ldr	r3, [r7, #4]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <_close>:

int _close(int file)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002970:	605a      	str	r2, [r3, #4]
  return 0;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <_isatty>:

int _isatty(int file)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002988:	2301      	movs	r3, #1
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029b8:	4a14      	ldr	r2, [pc, #80]	@ (8002a0c <_sbrk+0x5c>)
 80029ba:	4b15      	ldr	r3, [pc, #84]	@ (8002a10 <_sbrk+0x60>)
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029c4:	4b13      	ldr	r3, [pc, #76]	@ (8002a14 <_sbrk+0x64>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029cc:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <_sbrk+0x64>)
 80029ce:	4a12      	ldr	r2, [pc, #72]	@ (8002a18 <_sbrk+0x68>)
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029d2:	4b10      	ldr	r3, [pc, #64]	@ (8002a14 <_sbrk+0x64>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d207      	bcs.n	80029f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029e0:	f007 fbae 	bl	800a140 <__errno>
 80029e4:	4603      	mov	r3, r0
 80029e6:	220c      	movs	r2, #12
 80029e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295
 80029ee:	e009      	b.n	8002a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f0:	4b08      	ldr	r3, [pc, #32]	@ (8002a14 <_sbrk+0x64>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029f6:	4b07      	ldr	r3, [pc, #28]	@ (8002a14 <_sbrk+0x64>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	4a05      	ldr	r2, [pc, #20]	@ (8002a14 <_sbrk+0x64>)
 8002a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a02:	68fb      	ldr	r3, [r7, #12]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20020000 	.word	0x20020000
 8002a10:	00000400 	.word	0x00000400
 8002a14:	20000810 	.word	0x20000810
 8002a18:	200056b8 	.word	0x200056b8

08002a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a20:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <SystemInit+0x20>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a26:	4a05      	ldr	r2, [pc, #20]	@ (8002a3c <SystemInit+0x20>)
 8002a28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a44:	f7ff ffea 	bl	8002a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a48:	480c      	ldr	r0, [pc, #48]	@ (8002a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a4a:	490d      	ldr	r1, [pc, #52]	@ (8002a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a50:	e002      	b.n	8002a58 <LoopCopyDataInit>

08002a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a56:	3304      	adds	r3, #4

08002a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a5c:	d3f9      	bcc.n	8002a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a60:	4c0a      	ldr	r4, [pc, #40]	@ (8002a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a64:	e001      	b.n	8002a6a <LoopFillZerobss>

08002a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a68:	3204      	adds	r2, #4

08002a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a6c:	d3fb      	bcc.n	8002a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a6e:	f007 fb6d 	bl	800a14c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a72:	f7fe fa11 	bl	8000e98 <main>
  bx  lr    
 8002a76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a80:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002a84:	0800d1c0 	.word	0x0800d1c0
  ldr r2, =_sbss
 8002a88:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002a8c:	200056b4 	.word	0x200056b4

08002a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a90:	e7fe      	b.n	8002a90 <ADC_IRQHandler>
	...

08002a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <HAL_Init+0x40>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad4 <HAL_Init+0x40>)
 8002a9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <HAL_Init+0x40>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad4 <HAL_Init+0x40>)
 8002aaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ab0:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <HAL_Init+0x40>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a07      	ldr	r2, [pc, #28]	@ (8002ad4 <HAL_Init+0x40>)
 8002ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002abc:	2003      	movs	r0, #3
 8002abe:	f000 f94f 	bl	8002d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ac2:	200f      	movs	r0, #15
 8002ac4:	f000 f808 	bl	8002ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ac8:	f7ff fc7e 	bl	80023c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023c00 	.word	0x40023c00

08002ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ae0:	4b12      	ldr	r3, [pc, #72]	@ (8002b2c <HAL_InitTick+0x54>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <HAL_InitTick+0x58>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f967 	bl	8002dca <HAL_SYSTICK_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e00e      	b.n	8002b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b0f      	cmp	r3, #15
 8002b0a:	d80a      	bhi.n	8002b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295
 8002b14:	f000 f92f 	bl	8002d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b18:	4a06      	ldr	r2, [pc, #24]	@ (8002b34 <HAL_InitTick+0x5c>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e000      	b.n	8002b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	20000008 	.word	0x20000008
 8002b34:	20000004 	.word	0x20000004

08002b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <HAL_IncTick+0x20>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <HAL_IncTick+0x24>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	4a04      	ldr	r2, [pc, #16]	@ (8002b5c <HAL_IncTick+0x24>)
 8002b4a:	6013      	str	r3, [r2, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000008 	.word	0x20000008
 8002b5c:	20000814 	.word	0x20000814

08002b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return uwTick;
 8002b64:	4b03      	ldr	r3, [pc, #12]	@ (8002b74 <HAL_GetTick+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000814 	.word	0x20000814

08002b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b80:	f7ff ffee 	bl	8002b60 <HAL_GetTick>
 8002b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d005      	beq.n	8002b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b92:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <HAL_Delay+0x44>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b9e:	bf00      	nop
 8002ba0:	f7ff ffde 	bl	8002b60 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d8f7      	bhi.n	8002ba0 <HAL_Delay+0x28>
  {
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000008 	.word	0x20000008

08002bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf2:	4a04      	ldr	r2, [pc, #16]	@ (8002c04 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	60d3      	str	r3, [r2, #12]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c0c:	4b04      	ldr	r3, [pc, #16]	@ (8002c20 <__NVIC_GetPriorityGrouping+0x18>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	f003 0307 	and.w	r3, r3, #7
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	db0b      	blt.n	8002c4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	4907      	ldr	r1, [pc, #28]	@ (8002c5c <__NVIC_EnableIRQ+0x38>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2001      	movs	r0, #1
 8002c46:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000e100 	.word	0xe000e100

08002c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0a      	blt.n	8002c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	490c      	ldr	r1, [pc, #48]	@ (8002cac <__NVIC_SetPriority+0x4c>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c88:	e00a      	b.n	8002ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4908      	ldr	r1, [pc, #32]	@ (8002cb0 <__NVIC_SetPriority+0x50>)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3b04      	subs	r3, #4
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	761a      	strb	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000e100 	.word	0xe000e100
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	@ 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f1c3 0307 	rsb	r3, r3, #7
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf28      	it	cs
 8002cd2:	2304      	movcs	r3, #4
 8002cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d902      	bls.n	8002ce4 <NVIC_EncodePriority+0x30>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3b03      	subs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <NVIC_EncodePriority+0x32>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	43d9      	mvns	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	4313      	orrs	r3, r2
         );
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3724      	adds	r7, #36	@ 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d2c:	d301      	bcc.n	8002d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e00f      	b.n	8002d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d32:	4a0a      	ldr	r2, [pc, #40]	@ (8002d5c <SysTick_Config+0x40>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3a:	210f      	movs	r1, #15
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	f7ff ff8e 	bl	8002c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d44:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <SysTick_Config+0x40>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4a:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <SysTick_Config+0x40>)
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	e000e010 	.word	0xe000e010

08002d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff29 	bl	8002bc0 <__NVIC_SetPriorityGrouping>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d88:	f7ff ff3e 	bl	8002c08 <__NVIC_GetPriorityGrouping>
 8002d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f7ff ff8e 	bl	8002cb4 <NVIC_EncodePriority>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff5d 	bl	8002c60 <__NVIC_SetPriority>
}
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff31 	bl	8002c24 <__NVIC_EnableIRQ>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff ffa2 	bl	8002d1c <SysTick_Config>
 8002dd8:	4603      	mov	r3, r0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002df0:	f7ff feb6 	bl	8002b60 <HAL_GetTick>
 8002df4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d008      	beq.n	8002e14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2280      	movs	r2, #128	@ 0x80
 8002e06:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e052      	b.n	8002eba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0216 	bic.w	r2, r2, #22
 8002e22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d103      	bne.n	8002e44 <HAL_DMA_Abort+0x62>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0208 	bic.w	r2, r2, #8
 8002e52:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e64:	e013      	b.n	8002e8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e66:	f7ff fe7b 	bl	8002b60 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b05      	cmp	r3, #5
 8002e72:	d90c      	bls.n	8002e8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e015      	b.n	8002eba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e4      	bne.n	8002e66 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea0:	223f      	movs	r2, #63	@ 0x3f
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d004      	beq.n	8002ee0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2280      	movs	r2, #128	@ 0x80
 8002eda:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e00c      	b.n	8002efa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2205      	movs	r2, #5
 8002ee4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	@ 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	e16b      	b.n	80031fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f24:	2201      	movs	r2, #1
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	f040 815a 	bne.w	80031f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d005      	beq.n	8002f5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d130      	bne.n	8002fbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	2203      	movs	r2, #3
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f90:	2201      	movs	r2, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f003 0201 	and.w	r2, r3, #1
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d017      	beq.n	8002ff8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d123      	bne.n	800304c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	08da      	lsrs	r2, r3, #3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3208      	adds	r2, #8
 800300c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	220f      	movs	r2, #15
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	08da      	lsrs	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3208      	adds	r2, #8
 8003046:	69b9      	ldr	r1, [r7, #24]
 8003048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	2203      	movs	r2, #3
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0203 	and.w	r2, r3, #3
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80b4 	beq.w	80031f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	4b60      	ldr	r3, [pc, #384]	@ (8003214 <HAL_GPIO_Init+0x30c>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003096:	4a5f      	ldr	r2, [pc, #380]	@ (8003214 <HAL_GPIO_Init+0x30c>)
 8003098:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800309c:	6453      	str	r3, [r2, #68]	@ 0x44
 800309e:	4b5d      	ldr	r3, [pc, #372]	@ (8003214 <HAL_GPIO_Init+0x30c>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003218 <HAL_GPIO_Init+0x310>)
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	3302      	adds	r3, #2
 80030b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	220f      	movs	r2, #15
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a52      	ldr	r2, [pc, #328]	@ (800321c <HAL_GPIO_Init+0x314>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d02b      	beq.n	800312e <HAL_GPIO_Init+0x226>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a51      	ldr	r2, [pc, #324]	@ (8003220 <HAL_GPIO_Init+0x318>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d025      	beq.n	800312a <HAL_GPIO_Init+0x222>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a50      	ldr	r2, [pc, #320]	@ (8003224 <HAL_GPIO_Init+0x31c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d01f      	beq.n	8003126 <HAL_GPIO_Init+0x21e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4f      	ldr	r2, [pc, #316]	@ (8003228 <HAL_GPIO_Init+0x320>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d019      	beq.n	8003122 <HAL_GPIO_Init+0x21a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4e      	ldr	r2, [pc, #312]	@ (800322c <HAL_GPIO_Init+0x324>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_GPIO_Init+0x216>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003230 <HAL_GPIO_Init+0x328>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00d      	beq.n	800311a <HAL_GPIO_Init+0x212>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a4c      	ldr	r2, [pc, #304]	@ (8003234 <HAL_GPIO_Init+0x32c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d007      	beq.n	8003116 <HAL_GPIO_Init+0x20e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a4b      	ldr	r2, [pc, #300]	@ (8003238 <HAL_GPIO_Init+0x330>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d101      	bne.n	8003112 <HAL_GPIO_Init+0x20a>
 800310e:	2307      	movs	r3, #7
 8003110:	e00e      	b.n	8003130 <HAL_GPIO_Init+0x228>
 8003112:	2308      	movs	r3, #8
 8003114:	e00c      	b.n	8003130 <HAL_GPIO_Init+0x228>
 8003116:	2306      	movs	r3, #6
 8003118:	e00a      	b.n	8003130 <HAL_GPIO_Init+0x228>
 800311a:	2305      	movs	r3, #5
 800311c:	e008      	b.n	8003130 <HAL_GPIO_Init+0x228>
 800311e:	2304      	movs	r3, #4
 8003120:	e006      	b.n	8003130 <HAL_GPIO_Init+0x228>
 8003122:	2303      	movs	r3, #3
 8003124:	e004      	b.n	8003130 <HAL_GPIO_Init+0x228>
 8003126:	2302      	movs	r3, #2
 8003128:	e002      	b.n	8003130 <HAL_GPIO_Init+0x228>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_GPIO_Init+0x228>
 800312e:	2300      	movs	r3, #0
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	f002 0203 	and.w	r2, r2, #3
 8003136:	0092      	lsls	r2, r2, #2
 8003138:	4093      	lsls	r3, r2
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003140:	4935      	ldr	r1, [pc, #212]	@ (8003218 <HAL_GPIO_Init+0x310>)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	3302      	adds	r3, #2
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800314e:	4b3b      	ldr	r3, [pc, #236]	@ (800323c <HAL_GPIO_Init+0x334>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003172:	4a32      	ldr	r2, [pc, #200]	@ (800323c <HAL_GPIO_Init+0x334>)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003178:	4b30      	ldr	r3, [pc, #192]	@ (800323c <HAL_GPIO_Init+0x334>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800319c:	4a27      	ldr	r2, [pc, #156]	@ (800323c <HAL_GPIO_Init+0x334>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031a2:	4b26      	ldr	r3, [pc, #152]	@ (800323c <HAL_GPIO_Init+0x334>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031c6:	4a1d      	ldr	r2, [pc, #116]	@ (800323c <HAL_GPIO_Init+0x334>)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <HAL_GPIO_Init+0x334>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031f0:	4a12      	ldr	r2, [pc, #72]	@ (800323c <HAL_GPIO_Init+0x334>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3301      	adds	r3, #1
 80031fa:	61fb      	str	r3, [r7, #28]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b0f      	cmp	r3, #15
 8003200:	f67f ae90 	bls.w	8002f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3724      	adds	r7, #36	@ 0x24
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	40013800 	.word	0x40013800
 800321c:	40020000 	.word	0x40020000
 8003220:	40020400 	.word	0x40020400
 8003224:	40020800 	.word	0x40020800
 8003228:	40020c00 	.word	0x40020c00
 800322c:	40021000 	.word	0x40021000
 8003230:	40021400 	.word	0x40021400
 8003234:	40021800 	.word	0x40021800
 8003238:	40021c00 	.word	0x40021c00
 800323c:	40013c00 	.word	0x40013c00

08003240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	807b      	strh	r3, [r7, #2]
 800324c:	4613      	mov	r3, r2
 800324e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003250:	787b      	ldrb	r3, [r7, #1]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003256:	887a      	ldrh	r2, [r7, #2]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800325c:	e003      	b.n	8003266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800325e:	887b      	ldrh	r3, [r7, #2]
 8003260:	041a      	lsls	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	619a      	str	r2, [r3, #24]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800327a:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_PWR_EnableBkUpAccess+0x20>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003280:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <HAL_PWR_EnableBkUpAccess+0x24>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003286:	687b      	ldr	r3, [r7, #4]
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	420e0020 	.word	0x420e0020
 8003298:	40007000 	.word	0x40007000

0800329c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80032a2:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <HAL_PWR_DisableBkUpAccess+0x20>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80032a8:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <HAL_PWR_DisableBkUpAccess+0x24>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80032ae:	687b      	ldr	r3, [r7, #4]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	420e0020 	.word	0x420e0020
 80032c0:	40007000 	.word	0x40007000

080032c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e267      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d075      	beq.n	80033ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032e2:	4b88      	ldr	r3, [pc, #544]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d00c      	beq.n	8003308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ee:	4b85      	ldr	r3, [pc, #532]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d112      	bne.n	8003320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032fa:	4b82      	ldr	r3, [pc, #520]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003302:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003306:	d10b      	bne.n	8003320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	4b7e      	ldr	r3, [pc, #504]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d05b      	beq.n	80033cc <HAL_RCC_OscConfig+0x108>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d157      	bne.n	80033cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e242      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003328:	d106      	bne.n	8003338 <HAL_RCC_OscConfig+0x74>
 800332a:	4b76      	ldr	r3, [pc, #472]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a75      	ldr	r2, [pc, #468]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e01d      	b.n	8003374 <HAL_RCC_OscConfig+0xb0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x98>
 8003342:	4b70      	ldr	r3, [pc, #448]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a6f      	ldr	r2, [pc, #444]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 8003348:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b6d      	ldr	r3, [pc, #436]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6c      	ldr	r2, [pc, #432]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0xb0>
 800335c:	4b69      	ldr	r3, [pc, #420]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a68      	ldr	r2, [pc, #416]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 8003362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b66      	ldr	r3, [pc, #408]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a65      	ldr	r2, [pc, #404]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 800336e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7ff fbf0 	bl	8002b60 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003384:	f7ff fbec 	bl	8002b60 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	@ 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e207      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	4b5b      	ldr	r3, [pc, #364]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0xc0>
 80033a2:	e014      	b.n	80033ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7ff fbdc 	bl	8002b60 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ac:	f7ff fbd8 	bl	8002b60 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	@ 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e1f3      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033be:	4b51      	ldr	r3, [pc, #324]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0xe8>
 80033ca:	e000      	b.n	80033ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d063      	beq.n	80034a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033da:	4b4a      	ldr	r3, [pc, #296]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e6:	4b47      	ldr	r3, [pc, #284]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f2:	4b44      	ldr	r3, [pc, #272]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4b41      	ldr	r3, [pc, #260]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x152>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1c7      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b3b      	ldr	r3, [pc, #236]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4937      	ldr	r1, [pc, #220]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	e03a      	b.n	80034a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b34      	ldr	r3, [pc, #208]	@ (8003508 <HAL_RCC_OscConfig+0x244>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7ff fb91 	bl	8002b60 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003442:	f7ff fb8d 	bl	8002b60 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e1a8      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	4b2b      	ldr	r3, [pc, #172]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b28      	ldr	r3, [pc, #160]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4925      	ldr	r1, [pc, #148]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
 8003474:	e015      	b.n	80034a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b24      	ldr	r3, [pc, #144]	@ (8003508 <HAL_RCC_OscConfig+0x244>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7ff fb70 	bl	8002b60 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003484:	f7ff fb6c 	bl	8002b60 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e187      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	4b1b      	ldr	r3, [pc, #108]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d036      	beq.n	800351c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b6:	4b15      	ldr	r3, [pc, #84]	@ (800350c <HAL_RCC_OscConfig+0x248>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7ff fb50 	bl	8002b60 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c4:	f7ff fb4c 	bl	8002b60 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e167      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003504 <HAL_RCC_OscConfig+0x240>)
 80034d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x200>
 80034e2:	e01b      	b.n	800351c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e4:	4b09      	ldr	r3, [pc, #36]	@ (800350c <HAL_RCC_OscConfig+0x248>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ea:	f7ff fb39 	bl	8002b60 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	e00e      	b.n	8003510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f2:	f7ff fb35 	bl	8002b60 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d907      	bls.n	8003510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e150      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
 8003504:	40023800 	.word	0x40023800
 8003508:	42470000 	.word	0x42470000
 800350c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	4b88      	ldr	r3, [pc, #544]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 8003512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1ea      	bne.n	80034f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8097 	beq.w	8003658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352a:	2300      	movs	r3, #0
 800352c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352e:	4b81      	ldr	r3, [pc, #516]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	4b7d      	ldr	r3, [pc, #500]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	4a7c      	ldr	r2, [pc, #496]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003548:	6413      	str	r3, [r2, #64]	@ 0x40
 800354a:	4b7a      	ldr	r3, [pc, #488]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355a:	4b77      	ldr	r3, [pc, #476]	@ (8003738 <HAL_RCC_OscConfig+0x474>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d118      	bne.n	8003598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003566:	4b74      	ldr	r3, [pc, #464]	@ (8003738 <HAL_RCC_OscConfig+0x474>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a73      	ldr	r2, [pc, #460]	@ (8003738 <HAL_RCC_OscConfig+0x474>)
 800356c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7ff faf5 	bl	8002b60 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7ff faf1 	bl	8002b60 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e10c      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	4b6a      	ldr	r3, [pc, #424]	@ (8003738 <HAL_RCC_OscConfig+0x474>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x2ea>
 80035a0:	4b64      	ldr	r3, [pc, #400]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a4:	4a63      	ldr	r2, [pc, #396]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ac:	e01c      	b.n	80035e8 <HAL_RCC_OscConfig+0x324>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b05      	cmp	r3, #5
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x30c>
 80035b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ba:	4a5e      	ldr	r2, [pc, #376]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 80035bc:	f043 0304 	orr.w	r3, r3, #4
 80035c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0x324>
 80035d0:	4b58      	ldr	r3, [pc, #352]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d4:	4a57      	ldr	r2, [pc, #348]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	@ 0x70
 80035dc:	4b55      	ldr	r3, [pc, #340]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e0:	4a54      	ldr	r2, [pc, #336]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 80035e2:	f023 0304 	bic.w	r3, r3, #4
 80035e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7ff fab6 	bl	8002b60 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7ff fab2 	bl	8002b60 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e0cb      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360e:	4b49      	ldr	r3, [pc, #292]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0ee      	beq.n	80035f8 <HAL_RCC_OscConfig+0x334>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361c:	f7ff faa0 	bl	8002b60 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003622:	e00a      	b.n	800363a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7ff fa9c 	bl	8002b60 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e0b5      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363a:	4b3e      	ldr	r3, [pc, #248]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1ee      	bne.n	8003624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364c:	4b39      	ldr	r3, [pc, #228]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	4a38      	ldr	r2, [pc, #224]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 8003652:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003656:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80a1 	beq.w	80037a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003662:	4b34      	ldr	r3, [pc, #208]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b08      	cmp	r3, #8
 800366c:	d05c      	beq.n	8003728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d141      	bne.n	80036fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	4b31      	ldr	r3, [pc, #196]	@ (800373c <HAL_RCC_OscConfig+0x478>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7ff fa70 	bl	8002b60 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003684:	f7ff fa6c 	bl	8002b60 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e087      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	4b27      	ldr	r3, [pc, #156]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	019b      	lsls	r3, r3, #6
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	3b01      	subs	r3, #1
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	491b      	ldr	r1, [pc, #108]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036cc:	4b1b      	ldr	r3, [pc, #108]	@ (800373c <HAL_RCC_OscConfig+0x478>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7ff fa45 	bl	8002b60 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036da:	f7ff fa41 	bl	8002b60 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e05c      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ec:	4b11      	ldr	r3, [pc, #68]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x416>
 80036f8:	e054      	b.n	80037a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b10      	ldr	r3, [pc, #64]	@ (800373c <HAL_RCC_OscConfig+0x478>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7ff fa2e 	bl	8002b60 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003708:	f7ff fa2a 	bl	8002b60 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e045      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	4b06      	ldr	r3, [pc, #24]	@ (8003734 <HAL_RCC_OscConfig+0x470>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x444>
 8003726:	e03d      	b.n	80037a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d107      	bne.n	8003740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e038      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
 8003734:	40023800 	.word	0x40023800
 8003738:	40007000 	.word	0x40007000
 800373c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003740:	4b1b      	ldr	r3, [pc, #108]	@ (80037b0 <HAL_RCC_OscConfig+0x4ec>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d028      	beq.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d121      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d11a      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003770:	4013      	ands	r3, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003778:	4293      	cmp	r3, r2
 800377a:	d111      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	3b01      	subs	r3, #1
 800378a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800

080037b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0cc      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c8:	4b68      	ldr	r3, [pc, #416]	@ (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d90c      	bls.n	80037f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b65      	ldr	r3, [pc, #404]	@ (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b63      	ldr	r3, [pc, #396]	@ (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0b8      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d020      	beq.n	800383e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003808:	4b59      	ldr	r3, [pc, #356]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4a58      	ldr	r2, [pc, #352]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003820:	4b53      	ldr	r3, [pc, #332]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4a52      	ldr	r2, [pc, #328]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800382a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b50      	ldr	r3, [pc, #320]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	494d      	ldr	r1, [pc, #308]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d044      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b47      	ldr	r3, [pc, #284]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d119      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e07f      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d003      	beq.n	8003872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800386e:	2b03      	cmp	r3, #3
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003872:	4b3f      	ldr	r3, [pc, #252]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e06f      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003882:	4b3b      	ldr	r3, [pc, #236]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e067      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003892:	4b37      	ldr	r3, [pc, #220]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f023 0203 	bic.w	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4934      	ldr	r1, [pc, #208]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a4:	f7ff f95c 	bl	8002b60 <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ac:	f7ff f958 	bl	8002b60 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e04f      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 020c 	and.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d1eb      	bne.n	80038ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d4:	4b25      	ldr	r3, [pc, #148]	@ (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d20c      	bcs.n	80038fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b22      	ldr	r3, [pc, #136]	@ (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b20      	ldr	r3, [pc, #128]	@ (800396c <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e032      	b.n	8003962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003908:	4b19      	ldr	r3, [pc, #100]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4916      	ldr	r1, [pc, #88]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003926:	4b12      	ldr	r3, [pc, #72]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	490e      	ldr	r1, [pc, #56]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800393a:	f000 f821 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 800393e:	4602      	mov	r2, r0
 8003940:	4b0b      	ldr	r3, [pc, #44]	@ (8003970 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	490a      	ldr	r1, [pc, #40]	@ (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 800394c:	5ccb      	ldrb	r3, [r1, r3]
 800394e:	fa22 f303 	lsr.w	r3, r2, r3
 8003952:	4a09      	ldr	r2, [pc, #36]	@ (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003956:	4b09      	ldr	r3, [pc, #36]	@ (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff f8bc 	bl	8002ad8 <HAL_InitTick>

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023c00 	.word	0x40023c00
 8003970:	40023800 	.word	0x40023800
 8003974:	0800c3c0 	.word	0x0800c3c0
 8003978:	20000000 	.word	0x20000000
 800397c:	20000004 	.word	0x20000004

08003980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003984:	b090      	sub	sp, #64	@ 0x40
 8003986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	637b      	str	r3, [r7, #52]	@ 0x34
 800398c:	2300      	movs	r3, #0
 800398e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003990:	2300      	movs	r3, #0
 8003992:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003998:	4b59      	ldr	r3, [pc, #356]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x180>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 030c 	and.w	r3, r3, #12
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d00d      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x40>
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	f200 80a1 	bhi.w	8003aec <HAL_RCC_GetSysClockFreq+0x16c>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x34>
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d003      	beq.n	80039ba <HAL_RCC_GetSysClockFreq+0x3a>
 80039b2:	e09b      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039b4:	4b53      	ldr	r3, [pc, #332]	@ (8003b04 <HAL_RCC_GetSysClockFreq+0x184>)
 80039b6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80039b8:	e09b      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ba:	4b53      	ldr	r3, [pc, #332]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x188>)
 80039bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039be:	e098      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x180>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x180>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d028      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x180>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	099b      	lsrs	r3, r3, #6
 80039dc:	2200      	movs	r2, #0
 80039de:	623b      	str	r3, [r7, #32]
 80039e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039e8:	2100      	movs	r1, #0
 80039ea:	4b47      	ldr	r3, [pc, #284]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x188>)
 80039ec:	fb03 f201 	mul.w	r2, r3, r1
 80039f0:	2300      	movs	r3, #0
 80039f2:	fb00 f303 	mul.w	r3, r0, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	4a43      	ldr	r2, [pc, #268]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x188>)
 80039fa:	fba0 1202 	umull	r1, r2, r0, r2
 80039fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a00:	460a      	mov	r2, r1
 8003a02:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a06:	4413      	add	r3, r2
 8003a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	61fa      	str	r2, [r7, #28]
 8003a12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a1a:	f7fd f8c5 	bl	8000ba8 <__aeabi_uldivmod>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4613      	mov	r3, r2
 8003a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a26:	e053      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a28:	4b35      	ldr	r3, [pc, #212]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	099b      	lsrs	r3, r3, #6
 8003a2e:	2200      	movs	r2, #0
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	617a      	str	r2, [r7, #20]
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a3a:	f04f 0b00 	mov.w	fp, #0
 8003a3e:	4652      	mov	r2, sl
 8003a40:	465b      	mov	r3, fp
 8003a42:	f04f 0000 	mov.w	r0, #0
 8003a46:	f04f 0100 	mov.w	r1, #0
 8003a4a:	0159      	lsls	r1, r3, #5
 8003a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a50:	0150      	lsls	r0, r2, #5
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	ebb2 080a 	subs.w	r8, r2, sl
 8003a5a:	eb63 090b 	sbc.w	r9, r3, fp
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a72:	ebb2 0408 	subs.w	r4, r2, r8
 8003a76:	eb63 0509 	sbc.w	r5, r3, r9
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	00eb      	lsls	r3, r5, #3
 8003a84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a88:	00e2      	lsls	r2, r4, #3
 8003a8a:	4614      	mov	r4, r2
 8003a8c:	461d      	mov	r5, r3
 8003a8e:	eb14 030a 	adds.w	r3, r4, sl
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	eb45 030b 	adc.w	r3, r5, fp
 8003a98:	607b      	str	r3, [r7, #4]
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	028b      	lsls	r3, r1, #10
 8003aaa:	4621      	mov	r1, r4
 8003aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	028a      	lsls	r2, r1, #10
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aba:	2200      	movs	r2, #0
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	60fa      	str	r2, [r7, #12]
 8003ac0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ac4:	f7fd f870 	bl	8000ba8 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4613      	mov	r3, r2
 8003ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	0c1b      	lsrs	r3, r3, #16
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	3301      	adds	r3, #1
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003ae0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003aea:	e002      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aec:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <HAL_RCC_GetSysClockFreq+0x184>)
 8003aee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3740      	adds	r7, #64	@ 0x40
 8003af8:	46bd      	mov	sp, r7
 8003afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800
 8003b04:	00f42400 	.word	0x00f42400
 8003b08:	017d7840 	.word	0x017d7840

08003b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b10:	4b03      	ldr	r3, [pc, #12]	@ (8003b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b12:	681b      	ldr	r3, [r3, #0]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000000 	.word	0x20000000

08003b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b28:	f7ff fff0 	bl	8003b0c <HAL_RCC_GetHCLKFreq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	@ (8003b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	0a9b      	lsrs	r3, r3, #10
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4903      	ldr	r1, [pc, #12]	@ (8003b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b3a:	5ccb      	ldrb	r3, [r1, r3]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40023800 	.word	0x40023800
 8003b48:	0800c3d0 	.word	0x0800c3d0

08003b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b50:	f7ff ffdc 	bl	8003b0c <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	0b5b      	lsrs	r3, r3, #13
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4903      	ldr	r1, [pc, #12]	@ (8003b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	0800c3d0 	.word	0x0800c3d0

08003b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e041      	b.n	8003c0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fe fc40 	bl	8002420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f000 fef8 	bl	80049a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e041      	b.n	8003ca8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fe fccb 	bl	80025d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2202      	movs	r2, #2
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f000 fea9 	bl	80049a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d109      	bne.n	8003cd4 <HAL_TIM_PWM_Start+0x24>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	bf14      	ite	ne
 8003ccc:	2301      	movne	r3, #1
 8003cce:	2300      	moveq	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e022      	b.n	8003d1a <HAL_TIM_PWM_Start+0x6a>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d109      	bne.n	8003cee <HAL_TIM_PWM_Start+0x3e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	bf14      	ite	ne
 8003ce6:	2301      	movne	r3, #1
 8003ce8:	2300      	moveq	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	e015      	b.n	8003d1a <HAL_TIM_PWM_Start+0x6a>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d109      	bne.n	8003d08 <HAL_TIM_PWM_Start+0x58>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	bf14      	ite	ne
 8003d00:	2301      	movne	r3, #1
 8003d02:	2300      	moveq	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	e008      	b.n	8003d1a <HAL_TIM_PWM_Start+0x6a>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e07c      	b.n	8003e1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d104      	bne.n	8003d32 <HAL_TIM_PWM_Start+0x82>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d30:	e013      	b.n	8003d5a <HAL_TIM_PWM_Start+0xaa>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d104      	bne.n	8003d42 <HAL_TIM_PWM_Start+0x92>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d40:	e00b      	b.n	8003d5a <HAL_TIM_PWM_Start+0xaa>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d104      	bne.n	8003d52 <HAL_TIM_PWM_Start+0xa2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d50:	e003      	b.n	8003d5a <HAL_TIM_PWM_Start+0xaa>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2202      	movs	r2, #2
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f001 fa40 	bl	80051e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8003e24 <HAL_TIM_PWM_Start+0x174>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_TIM_PWM_Start+0xcc>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a2c      	ldr	r2, [pc, #176]	@ (8003e28 <HAL_TIM_PWM_Start+0x178>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d101      	bne.n	8003d80 <HAL_TIM_PWM_Start+0xd0>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_TIM_PWM_Start+0xd2>
 8003d80:	2300      	movs	r3, #0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d007      	beq.n	8003d96 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a22      	ldr	r2, [pc, #136]	@ (8003e24 <HAL_TIM_PWM_Start+0x174>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d022      	beq.n	8003de6 <HAL_TIM_PWM_Start+0x136>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da8:	d01d      	beq.n	8003de6 <HAL_TIM_PWM_Start+0x136>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1f      	ldr	r2, [pc, #124]	@ (8003e2c <HAL_TIM_PWM_Start+0x17c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d018      	beq.n	8003de6 <HAL_TIM_PWM_Start+0x136>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e30 <HAL_TIM_PWM_Start+0x180>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_TIM_PWM_Start+0x136>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003e34 <HAL_TIM_PWM_Start+0x184>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_TIM_PWM_Start+0x136>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a16      	ldr	r2, [pc, #88]	@ (8003e28 <HAL_TIM_PWM_Start+0x178>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_TIM_PWM_Start+0x136>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a18      	ldr	r2, [pc, #96]	@ (8003e38 <HAL_TIM_PWM_Start+0x188>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_TIM_PWM_Start+0x136>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a16      	ldr	r2, [pc, #88]	@ (8003e3c <HAL_TIM_PWM_Start+0x18c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d111      	bne.n	8003e0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b06      	cmp	r3, #6
 8003df6:	d010      	beq.n	8003e1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e08:	e007      	b.n	8003e1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0201 	orr.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40010000 	.word	0x40010000
 8003e28:	40010400 	.word	0x40010400
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800
 8003e34:	40000c00 	.word	0x40000c00
 8003e38:	40014000 	.word	0x40014000
 8003e3c:	40001800 	.word	0x40001800

08003e40 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e041      	b.n	8003ed6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fe fbfc 	bl	8002664 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4610      	mov	r0, r2
 8003e80:	f000 fd92 	bl	80049a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b0c      	cmp	r3, #12
 8003ef2:	d841      	bhi.n	8003f78 <HAL_TIM_IC_Stop_IT+0x98>
 8003ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8003efc <HAL_TIM_IC_Stop_IT+0x1c>)
 8003ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efa:	bf00      	nop
 8003efc:	08003f31 	.word	0x08003f31
 8003f00:	08003f79 	.word	0x08003f79
 8003f04:	08003f79 	.word	0x08003f79
 8003f08:	08003f79 	.word	0x08003f79
 8003f0c:	08003f43 	.word	0x08003f43
 8003f10:	08003f79 	.word	0x08003f79
 8003f14:	08003f79 	.word	0x08003f79
 8003f18:	08003f79 	.word	0x08003f79
 8003f1c:	08003f55 	.word	0x08003f55
 8003f20:	08003f79 	.word	0x08003f79
 8003f24:	08003f79 	.word	0x08003f79
 8003f28:	08003f79 	.word	0x08003f79
 8003f2c:	08003f67 	.word	0x08003f67
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0202 	bic.w	r2, r2, #2
 8003f3e:	60da      	str	r2, [r3, #12]
      break;
 8003f40:	e01d      	b.n	8003f7e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0204 	bic.w	r2, r2, #4
 8003f50:	60da      	str	r2, [r3, #12]
      break;
 8003f52:	e014      	b.n	8003f7e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0208 	bic.w	r2, r2, #8
 8003f62:	60da      	str	r2, [r3, #12]
      break;
 8003f64:	e00b      	b.n	8003f7e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0210 	bic.w	r2, r2, #16
 8003f74:	60da      	str	r2, [r3, #12]
      break;
 8003f76:	e002      	b.n	8003f7e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d156      	bne.n	8004032 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 f92b 	bl	80051e8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a1a      	ldr	r2, [r3, #32]
 8003f98:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10f      	bne.n	8003fc2 <HAL_TIM_IC_Stop_IT+0xe2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a1a      	ldr	r2, [r3, #32]
 8003fa8:	f240 4344 	movw	r3, #1092	@ 0x444
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d107      	bne.n	8003fc2 <HAL_TIM_IC_Stop_IT+0xe2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d104      	bne.n	8003fd2 <HAL_TIM_IC_Stop_IT+0xf2>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fd0:	e013      	b.n	8003ffa <HAL_TIM_IC_Stop_IT+0x11a>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d104      	bne.n	8003fe2 <HAL_TIM_IC_Stop_IT+0x102>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fe0:	e00b      	b.n	8003ffa <HAL_TIM_IC_Stop_IT+0x11a>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d104      	bne.n	8003ff2 <HAL_TIM_IC_Stop_IT+0x112>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ff0:	e003      	b.n	8003ffa <HAL_TIM_IC_Stop_IT+0x11a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d104      	bne.n	800400a <HAL_TIM_IC_Stop_IT+0x12a>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004008:	e013      	b.n	8004032 <HAL_TIM_IC_Stop_IT+0x152>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b04      	cmp	r3, #4
 800400e:	d104      	bne.n	800401a <HAL_TIM_IC_Stop_IT+0x13a>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004018:	e00b      	b.n	8004032 <HAL_TIM_IC_Stop_IT+0x152>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b08      	cmp	r3, #8
 800401e:	d104      	bne.n	800402a <HAL_TIM_IC_Stop_IT+0x14a>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004028:	e003      	b.n	8004032 <HAL_TIM_IC_Stop_IT+0x152>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8004032:	7bfb      	ldrb	r3, [r7, #15]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e097      	b.n	8004180 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d106      	bne.n	800406a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7fe fa4f 	bl	8002508 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2202      	movs	r2, #2
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004080:	f023 0307 	bic.w	r3, r3, #7
 8004084:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3304      	adds	r3, #4
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f000 fc89 	bl	80049a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040be:	f023 0303 	bic.w	r3, r3, #3
 80040c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	4313      	orrs	r3, r2
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80040dc:	f023 030c 	bic.w	r3, r3, #12
 80040e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	021b      	lsls	r3, r3, #8
 80040f8:	4313      	orrs	r3, r2
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	011a      	lsls	r2, r3, #4
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	031b      	lsls	r3, r3, #12
 800410c:	4313      	orrs	r3, r2
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004122:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	4313      	orrs	r3, r2
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004198:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80041b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d110      	bne.n	80041da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d102      	bne.n	80041c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80041be:	7b7b      	ldrb	r3, [r7, #13]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d001      	beq.n	80041c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e069      	b.n	800429c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041d8:	e031      	b.n	800423e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d110      	bne.n	8004202 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041e0:	7bbb      	ldrb	r3, [r7, #14]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d102      	bne.n	80041ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041e6:	7b3b      	ldrb	r3, [r7, #12]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d001      	beq.n	80041f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e055      	b.n	800429c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004200:	e01d      	b.n	800423e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d108      	bne.n	800421a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004208:	7bbb      	ldrb	r3, [r7, #14]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d105      	bne.n	800421a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800420e:	7b7b      	ldrb	r3, [r7, #13]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d102      	bne.n	800421a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004214:	7b3b      	ldrb	r3, [r7, #12]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d001      	beq.n	800421e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e03e      	b.n	800429c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2202      	movs	r2, #2
 800422a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_TIM_Encoder_Start+0xc4>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b04      	cmp	r3, #4
 8004248:	d008      	beq.n	800425c <HAL_TIM_Encoder_Start+0xd4>
 800424a:	e00f      	b.n	800426c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2201      	movs	r2, #1
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f000 ffc7 	bl	80051e8 <TIM_CCxChannelCmd>
      break;
 800425a:	e016      	b.n	800428a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2201      	movs	r2, #1
 8004262:	2104      	movs	r1, #4
 8004264:	4618      	mov	r0, r3
 8004266:	f000 ffbf 	bl	80051e8 <TIM_CCxChannelCmd>
      break;
 800426a:	e00e      	b.n	800428a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2201      	movs	r2, #1
 8004272:	2100      	movs	r1, #0
 8004274:	4618      	mov	r0, r3
 8004276:	f000 ffb7 	bl	80051e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2201      	movs	r2, #1
 8004280:	2104      	movs	r1, #4
 8004282:	4618      	mov	r0, r3
 8004284:	f000 ffb0 	bl	80051e8 <TIM_CCxChannelCmd>
      break;
 8004288:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0201 	orr.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d020      	beq.n	8004308 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01b      	beq.n	8004308 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0202 	mvn.w	r2, #2
 80042d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd fa4e 	bl	8001790 <HAL_TIM_IC_CaptureCallback>
 80042f4:	e005      	b.n	8004302 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fb38 	bl	800496c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fb3f 	bl	8004980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	d020      	beq.n	8004354 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01b      	beq.n	8004354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0204 	mvn.w	r2, #4
 8004324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2202      	movs	r2, #2
 800432a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fd fa28 	bl	8001790 <HAL_TIM_IC_CaptureCallback>
 8004340:	e005      	b.n	800434e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fb12 	bl	800496c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fb19 	bl	8004980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d020      	beq.n	80043a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01b      	beq.n	80043a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0208 	mvn.w	r2, #8
 8004370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2204      	movs	r2, #4
 8004376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fd fa02 	bl	8001790 <HAL_TIM_IC_CaptureCallback>
 800438c:	e005      	b.n	800439a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 faec 	bl	800496c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 faf3 	bl	8004980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d020      	beq.n	80043ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01b      	beq.n	80043ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0210 	mvn.w	r2, #16
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2208      	movs	r2, #8
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd f9dc 	bl	8001790 <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fac6 	bl	800496c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 facd 	bl	8004980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00c      	beq.n	8004410 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0201 	mvn.w	r2, #1
 8004408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 faa4 	bl	8004958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800442c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 ffd8 	bl	80053e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00c      	beq.n	8004458 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	d007      	beq.n	8004458 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fa9e 	bl	8004994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00c      	beq.n	800447c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f003 0320 	and.w	r3, r3, #32
 8004468:	2b00      	cmp	r3, #0
 800446a:	d007      	beq.n	800447c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0220 	mvn.w	r2, #32
 8004474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 ffaa 	bl	80053d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800447c:	bf00      	nop
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_TIM_IC_ConfigChannel+0x1e>
 800449e:	2302      	movs	r3, #2
 80044a0:	e088      	b.n	80045b4 <HAL_TIM_IC_ConfigChannel+0x130>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d11b      	bne.n	80044e8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80044c0:	f000 fcce 	bl	8004e60 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 020c 	bic.w	r2, r2, #12
 80044d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6999      	ldr	r1, [r3, #24]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	619a      	str	r2, [r3, #24]
 80044e6:	e060      	b.n	80045aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d11c      	bne.n	8004528 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80044fe:	f000 fd52 	bl	8004fa6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004510:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6999      	ldr	r1, [r3, #24]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	021a      	lsls	r2, r3, #8
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	619a      	str	r2, [r3, #24]
 8004526:	e040      	b.n	80045aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b08      	cmp	r3, #8
 800452c:	d11b      	bne.n	8004566 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800453e:	f000 fd9f 	bl	8005080 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 020c 	bic.w	r2, r2, #12
 8004550:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69d9      	ldr	r1, [r3, #28]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	61da      	str	r2, [r3, #28]
 8004564:	e021      	b.n	80045aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b0c      	cmp	r3, #12
 800456a:	d11c      	bne.n	80045a6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800457c:	f000 fdbc 	bl	80050f8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69da      	ldr	r2, [r3, #28]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800458e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69d9      	ldr	r1, [r3, #28]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	021a      	lsls	r2, r3, #8
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	61da      	str	r2, [r3, #28]
 80045a4:	e001      	b.n	80045aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e0ae      	b.n	8004738 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b0c      	cmp	r3, #12
 80045e6:	f200 809f 	bhi.w	8004728 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045ea:	a201      	add	r2, pc, #4	@ (adr r2, 80045f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004625 	.word	0x08004625
 80045f4:	08004729 	.word	0x08004729
 80045f8:	08004729 	.word	0x08004729
 80045fc:	08004729 	.word	0x08004729
 8004600:	08004665 	.word	0x08004665
 8004604:	08004729 	.word	0x08004729
 8004608:	08004729 	.word	0x08004729
 800460c:	08004729 	.word	0x08004729
 8004610:	080046a7 	.word	0x080046a7
 8004614:	08004729 	.word	0x08004729
 8004618:	08004729 	.word	0x08004729
 800461c:	08004729 	.word	0x08004729
 8004620:	080046e7 	.word	0x080046e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fa68 	bl	8004b00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0208 	orr.w	r2, r2, #8
 800463e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0204 	bic.w	r2, r2, #4
 800464e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6999      	ldr	r1, [r3, #24]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	619a      	str	r2, [r3, #24]
      break;
 8004662:	e064      	b.n	800472e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fab8 	bl	8004be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800467e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800468e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6999      	ldr	r1, [r3, #24]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	021a      	lsls	r2, r3, #8
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	619a      	str	r2, [r3, #24]
      break;
 80046a4:	e043      	b.n	800472e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fb0d 	bl	8004ccc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0208 	orr.w	r2, r2, #8
 80046c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0204 	bic.w	r2, r2, #4
 80046d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69d9      	ldr	r1, [r3, #28]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	61da      	str	r2, [r3, #28]
      break;
 80046e4:	e023      	b.n	800472e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fb61 	bl	8004db4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69da      	ldr	r2, [r3, #28]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69da      	ldr	r2, [r3, #28]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69d9      	ldr	r1, [r3, #28]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	021a      	lsls	r2, r3, #8
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	61da      	str	r2, [r3, #28]
      break;
 8004726:	e002      	b.n	800472e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	75fb      	strb	r3, [r7, #23]
      break;
 800472c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004736:	7dfb      	ldrb	r3, [r7, #23]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_TIM_ConfigClockSource+0x1c>
 8004758:	2302      	movs	r3, #2
 800475a:	e0b4      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x186>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800477a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004794:	d03e      	beq.n	8004814 <HAL_TIM_ConfigClockSource+0xd4>
 8004796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800479a:	f200 8087 	bhi.w	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a2:	f000 8086 	beq.w	80048b2 <HAL_TIM_ConfigClockSource+0x172>
 80047a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047aa:	d87f      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047ac:	2b70      	cmp	r3, #112	@ 0x70
 80047ae:	d01a      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0xa6>
 80047b0:	2b70      	cmp	r3, #112	@ 0x70
 80047b2:	d87b      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047b4:	2b60      	cmp	r3, #96	@ 0x60
 80047b6:	d050      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x11a>
 80047b8:	2b60      	cmp	r3, #96	@ 0x60
 80047ba:	d877      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047bc:	2b50      	cmp	r3, #80	@ 0x50
 80047be:	d03c      	beq.n	800483a <HAL_TIM_ConfigClockSource+0xfa>
 80047c0:	2b50      	cmp	r3, #80	@ 0x50
 80047c2:	d873      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047c4:	2b40      	cmp	r3, #64	@ 0x40
 80047c6:	d058      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x13a>
 80047c8:	2b40      	cmp	r3, #64	@ 0x40
 80047ca:	d86f      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047cc:	2b30      	cmp	r3, #48	@ 0x30
 80047ce:	d064      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15a>
 80047d0:	2b30      	cmp	r3, #48	@ 0x30
 80047d2:	d86b      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d060      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15a>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d867      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d05c      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15a>
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d05a      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15a>
 80047e4:	e062      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047f6:	f000 fcd7 	bl	80051a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	609a      	str	r2, [r3, #8]
      break;
 8004812:	e04f      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004824:	f000 fcc0 	bl	80051a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004836:	609a      	str	r2, [r3, #8]
      break;
 8004838:	e03c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004846:	461a      	mov	r2, r3
 8004848:	f000 fb7e 	bl	8004f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2150      	movs	r1, #80	@ 0x50
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fc8d 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004858:	e02c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004866:	461a      	mov	r2, r3
 8004868:	f000 fbda 	bl	8005020 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2160      	movs	r1, #96	@ 0x60
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fc7d 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004878:	e01c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004886:	461a      	mov	r2, r3
 8004888:	f000 fb5e 	bl	8004f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2140      	movs	r1, #64	@ 0x40
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fc6d 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004898:	e00c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f000 fc64 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 80048aa:	e003      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      break;
 80048b0:	e000      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b0c      	cmp	r3, #12
 80048e2:	d831      	bhi.n	8004948 <HAL_TIM_ReadCapturedValue+0x78>
 80048e4:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ea:	bf00      	nop
 80048ec:	08004921 	.word	0x08004921
 80048f0:	08004949 	.word	0x08004949
 80048f4:	08004949 	.word	0x08004949
 80048f8:	08004949 	.word	0x08004949
 80048fc:	0800492b 	.word	0x0800492b
 8004900:	08004949 	.word	0x08004949
 8004904:	08004949 	.word	0x08004949
 8004908:	08004949 	.word	0x08004949
 800490c:	08004935 	.word	0x08004935
 8004910:	08004949 	.word	0x08004949
 8004914:	08004949 	.word	0x08004949
 8004918:	08004949 	.word	0x08004949
 800491c:	0800493f 	.word	0x0800493f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004926:	60fb      	str	r3, [r7, #12]

      break;
 8004928:	e00f      	b.n	800494a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004930:	60fb      	str	r3, [r7, #12]

      break;
 8004932:	e00a      	b.n	800494a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493a:	60fb      	str	r3, [r7, #12]

      break;
 800493c:	e005      	b.n	800494a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	60fb      	str	r3, [r7, #12]

      break;
 8004946:	e000      	b.n	800494a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004948:	bf00      	nop
  }

  return tmpreg;
 800494a:	68fb      	ldr	r3, [r7, #12]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a46      	ldr	r2, [pc, #280]	@ (8004ad4 <TIM_Base_SetConfig+0x12c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d013      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c6:	d00f      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a43      	ldr	r2, [pc, #268]	@ (8004ad8 <TIM_Base_SetConfig+0x130>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00b      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a42      	ldr	r2, [pc, #264]	@ (8004adc <TIM_Base_SetConfig+0x134>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d007      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a41      	ldr	r2, [pc, #260]	@ (8004ae0 <TIM_Base_SetConfig+0x138>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d003      	beq.n	80049e8 <TIM_Base_SetConfig+0x40>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a40      	ldr	r2, [pc, #256]	@ (8004ae4 <TIM_Base_SetConfig+0x13c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d108      	bne.n	80049fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a35      	ldr	r2, [pc, #212]	@ (8004ad4 <TIM_Base_SetConfig+0x12c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d02b      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a08:	d027      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a32      	ldr	r2, [pc, #200]	@ (8004ad8 <TIM_Base_SetConfig+0x130>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d023      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a31      	ldr	r2, [pc, #196]	@ (8004adc <TIM_Base_SetConfig+0x134>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01f      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a30      	ldr	r2, [pc, #192]	@ (8004ae0 <TIM_Base_SetConfig+0x138>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01b      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a2f      	ldr	r2, [pc, #188]	@ (8004ae4 <TIM_Base_SetConfig+0x13c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d017      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae8 <TIM_Base_SetConfig+0x140>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a2d      	ldr	r2, [pc, #180]	@ (8004aec <TIM_Base_SetConfig+0x144>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00f      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8004af0 <TIM_Base_SetConfig+0x148>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00b      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a2b      	ldr	r2, [pc, #172]	@ (8004af4 <TIM_Base_SetConfig+0x14c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d007      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004af8 <TIM_Base_SetConfig+0x150>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_Base_SetConfig+0xb2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a29      	ldr	r2, [pc, #164]	@ (8004afc <TIM_Base_SetConfig+0x154>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d108      	bne.n	8004a6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a10      	ldr	r2, [pc, #64]	@ (8004ad4 <TIM_Base_SetConfig+0x12c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_Base_SetConfig+0xf8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a12      	ldr	r2, [pc, #72]	@ (8004ae4 <TIM_Base_SetConfig+0x13c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d103      	bne.n	8004aa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d105      	bne.n	8004ac6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f023 0201 	bic.w	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	611a      	str	r2, [r3, #16]
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	40000400 	.word	0x40000400
 8004adc:	40000800 	.word	0x40000800
 8004ae0:	40000c00 	.word	0x40000c00
 8004ae4:	40010400 	.word	0x40010400
 8004ae8:	40014000 	.word	0x40014000
 8004aec:	40014400 	.word	0x40014400
 8004af0:	40014800 	.word	0x40014800
 8004af4:	40001800 	.word	0x40001800
 8004af8:	40001c00 	.word	0x40001c00
 8004afc:	40002000 	.word	0x40002000

08004b00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	f023 0201 	bic.w	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0303 	bic.w	r3, r3, #3
 8004b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f023 0302 	bic.w	r3, r3, #2
 8004b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a20      	ldr	r2, [pc, #128]	@ (8004bd8 <TIM_OC1_SetConfig+0xd8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d003      	beq.n	8004b64 <TIM_OC1_SetConfig+0x64>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bdc <TIM_OC1_SetConfig+0xdc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d10c      	bne.n	8004b7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f023 0308 	bic.w	r3, r3, #8
 8004b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f023 0304 	bic.w	r3, r3, #4
 8004b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a15      	ldr	r2, [pc, #84]	@ (8004bd8 <TIM_OC1_SetConfig+0xd8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d003      	beq.n	8004b8e <TIM_OC1_SetConfig+0x8e>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a14      	ldr	r2, [pc, #80]	@ (8004bdc <TIM_OC1_SetConfig+0xdc>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d111      	bne.n	8004bb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	621a      	str	r2, [r3, #32]
}
 8004bcc:	bf00      	nop
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	40010000 	.word	0x40010000
 8004bdc:	40010400 	.word	0x40010400

08004be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f023 0210 	bic.w	r2, r3, #16
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	021b      	lsls	r3, r3, #8
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f023 0320 	bic.w	r3, r3, #32
 8004c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a22      	ldr	r2, [pc, #136]	@ (8004cc4 <TIM_OC2_SetConfig+0xe4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_OC2_SetConfig+0x68>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a21      	ldr	r2, [pc, #132]	@ (8004cc8 <TIM_OC2_SetConfig+0xe8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d10d      	bne.n	8004c64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a17      	ldr	r2, [pc, #92]	@ (8004cc4 <TIM_OC2_SetConfig+0xe4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d003      	beq.n	8004c74 <TIM_OC2_SetConfig+0x94>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a16      	ldr	r2, [pc, #88]	@ (8004cc8 <TIM_OC2_SetConfig+0xe8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d113      	bne.n	8004c9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40010000 	.word	0x40010000
 8004cc8:	40010400 	.word	0x40010400

08004ccc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0303 	bic.w	r3, r3, #3
 8004d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a21      	ldr	r2, [pc, #132]	@ (8004dac <TIM_OC3_SetConfig+0xe0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d003      	beq.n	8004d32 <TIM_OC3_SetConfig+0x66>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a20      	ldr	r2, [pc, #128]	@ (8004db0 <TIM_OC3_SetConfig+0xe4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d10d      	bne.n	8004d4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a16      	ldr	r2, [pc, #88]	@ (8004dac <TIM_OC3_SetConfig+0xe0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d003      	beq.n	8004d5e <TIM_OC3_SetConfig+0x92>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a15      	ldr	r2, [pc, #84]	@ (8004db0 <TIM_OC3_SetConfig+0xe4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d113      	bne.n	8004d86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	621a      	str	r2, [r3, #32]
}
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40010000 	.word	0x40010000
 8004db0:	40010400 	.word	0x40010400

08004db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	021b      	lsls	r3, r3, #8
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	031b      	lsls	r3, r3, #12
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a12      	ldr	r2, [pc, #72]	@ (8004e58 <TIM_OC4_SetConfig+0xa4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_OC4_SetConfig+0x68>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a11      	ldr	r2, [pc, #68]	@ (8004e5c <TIM_OC4_SetConfig+0xa8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d109      	bne.n	8004e30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	019b      	lsls	r3, r3, #6
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	621a      	str	r2, [r3, #32]
}
 8004e4a:	bf00      	nop
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40010000 	.word	0x40010000
 8004e5c:	40010400 	.word	0x40010400

08004e60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f023 0201 	bic.w	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a28      	ldr	r2, [pc, #160]	@ (8004f2c <TIM_TI1_SetConfig+0xcc>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01b      	beq.n	8004ec6 <TIM_TI1_SetConfig+0x66>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e94:	d017      	beq.n	8004ec6 <TIM_TI1_SetConfig+0x66>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4a25      	ldr	r2, [pc, #148]	@ (8004f30 <TIM_TI1_SetConfig+0xd0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d013      	beq.n	8004ec6 <TIM_TI1_SetConfig+0x66>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a24      	ldr	r2, [pc, #144]	@ (8004f34 <TIM_TI1_SetConfig+0xd4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00f      	beq.n	8004ec6 <TIM_TI1_SetConfig+0x66>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4a23      	ldr	r2, [pc, #140]	@ (8004f38 <TIM_TI1_SetConfig+0xd8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00b      	beq.n	8004ec6 <TIM_TI1_SetConfig+0x66>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4a22      	ldr	r2, [pc, #136]	@ (8004f3c <TIM_TI1_SetConfig+0xdc>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d007      	beq.n	8004ec6 <TIM_TI1_SetConfig+0x66>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a21      	ldr	r2, [pc, #132]	@ (8004f40 <TIM_TI1_SetConfig+0xe0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d003      	beq.n	8004ec6 <TIM_TI1_SetConfig+0x66>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4a20      	ldr	r2, [pc, #128]	@ (8004f44 <TIM_TI1_SetConfig+0xe4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d101      	bne.n	8004eca <TIM_TI1_SetConfig+0x6a>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <TIM_TI1_SetConfig+0x6c>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f023 0303 	bic.w	r3, r3, #3
 8004ed6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	e003      	b.n	8004eea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f043 0301 	orr.w	r3, r3, #1
 8004ee8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f023 030a 	bic.w	r3, r3, #10
 8004f04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f003 030a 	and.w	r3, r3, #10
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	621a      	str	r2, [r3, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40000c00 	.word	0x40000c00
 8004f3c:	40010400 	.word	0x40010400
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40001800 	.word	0x40001800

08004f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f023 0201 	bic.w	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f023 030a 	bic.w	r3, r3, #10
 8004f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b087      	sub	sp, #28
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	607a      	str	r2, [r7, #4]
 8004fb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f023 0210 	bic.w	r2, r3, #16
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	031b      	lsls	r3, r3, #12
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	621a      	str	r2, [r3, #32]
}
 8005014:	bf00      	nop
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0210 	bic.w	r2, r3, #16
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800504a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	031b      	lsls	r3, r3, #12
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800505c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	621a      	str	r2, [r3, #32]
}
 8005074:	bf00      	nop
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f023 0303 	bic.w	r3, r3, #3
 80050ac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80050d0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	621a      	str	r2, [r3, #32]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005124:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	021b      	lsls	r3, r3, #8
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005136:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	031b      	lsls	r3, r3, #12
 800513c:	b29b      	uxth	r3, r3
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800514a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	031b      	lsls	r3, r3, #12
 8005150:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005188:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	f043 0307 	orr.w	r3, r3, #7
 8005194:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	609a      	str	r2, [r3, #8]
}
 800519c:	bf00      	nop
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	021a      	lsls	r2, r3, #8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	609a      	str	r2, [r3, #8]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 031f 	and.w	r3, r3, #31
 80051fa:	2201      	movs	r2, #1
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1a      	ldr	r2, [r3, #32]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	43db      	mvns	r3, r3
 800520a:	401a      	ands	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a1a      	ldr	r2, [r3, #32]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f003 031f 	and.w	r3, r3, #31
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	fa01 f303 	lsl.w	r3, r1, r3
 8005220:	431a      	orrs	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	621a      	str	r2, [r3, #32]
}
 8005226:	bf00      	nop
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
	...

08005234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005248:	2302      	movs	r3, #2
 800524a:	e05a      	b.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a21      	ldr	r2, [pc, #132]	@ (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d022      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005298:	d01d      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1d      	ldr	r2, [pc, #116]	@ (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d018      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005318 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d013      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1a      	ldr	r2, [pc, #104]	@ (800531c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00e      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a18      	ldr	r2, [pc, #96]	@ (8005320 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d009      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a17      	ldr	r2, [pc, #92]	@ (8005324 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d004      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a15      	ldr	r2, [pc, #84]	@ (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d10c      	bne.n	80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40010000 	.word	0x40010000
 8005314:	40000400 	.word	0x40000400
 8005318:	40000800 	.word	0x40000800
 800531c:	40000c00 	.word	0x40000c00
 8005320:	40010400 	.word	0x40010400
 8005324:	40014000 	.word	0x40014000
 8005328:	40001800 	.word	0x40001800

0800532c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005344:	2302      	movs	r3, #2
 8005346:	e03d      	b.n	80053c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e042      	b.n	8005490 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fd f9aa 	bl	8002778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2224      	movs	r2, #36	@ 0x24
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800543a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fdbd 	bl	8005fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695a      	ldr	r2, [r3, #20]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	@ 0x28
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	603b      	str	r3, [r7, #0]
 80054a4:	4613      	mov	r3, r2
 80054a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d175      	bne.n	80055a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <HAL_UART_Transmit+0x2c>
 80054be:	88fb      	ldrh	r3, [r7, #6]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e06e      	b.n	80055a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2221      	movs	r2, #33	@ 0x21
 80054d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054d6:	f7fd fb43 	bl	8002b60 <HAL_GetTick>
 80054da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	88fa      	ldrh	r2, [r7, #6]
 80054e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	88fa      	ldrh	r2, [r7, #6]
 80054e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054f0:	d108      	bne.n	8005504 <HAL_UART_Transmit+0x6c>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d104      	bne.n	8005504 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	e003      	b.n	800550c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800550c:	e02e      	b.n	800556c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2200      	movs	r2, #0
 8005516:	2180      	movs	r1, #128	@ 0x80
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 fb1f 	bl	8005b5c <UART_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e03a      	b.n	80055a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10b      	bne.n	800554e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005544:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	3302      	adds	r3, #2
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	e007      	b.n	800555e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	781a      	ldrb	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	3301      	adds	r3, #1
 800555c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1cb      	bne.n	800550e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2200      	movs	r2, #0
 800557e:	2140      	movs	r1, #64	@ 0x40
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 faeb 	bl	8005b5c <UART_WaitOnFlagUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e006      	b.n	80055a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	e000      	b.n	80055a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80055a4:	2302      	movs	r3, #2
  }
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	4613      	mov	r3, r2
 80055ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d112      	bne.n	80055ee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <HAL_UART_Receive_IT+0x26>
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e00b      	b.n	80055f0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	461a      	mov	r2, r3
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 fb12 	bl	8005c0e <UART_Start_Receive_IT>
 80055ea:	4603      	mov	r3, r0
 80055ec:	e000      	b.n	80055f0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80055ee:	2302      	movs	r3, #2
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b0ba      	sub	sp, #232	@ 0xe8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800561e:	2300      	movs	r3, #0
 8005620:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005624:	2300      	movs	r3, #0
 8005626:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800562a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005636:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10f      	bne.n	800565e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <HAL_UART_IRQHandler+0x66>
 800564a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fbf2 	bl	8005e40 <UART_Receive_IT>
      return;
 800565c:	e25b      	b.n	8005b16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800565e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80de 	beq.w	8005824 <HAL_UART_IRQHandler+0x22c>
 8005668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d106      	bne.n	8005682 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005678:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 80d1 	beq.w	8005824 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <HAL_UART_IRQHandler+0xae>
 800568e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569e:	f043 0201 	orr.w	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00b      	beq.n	80056ca <HAL_UART_IRQHandler+0xd2>
 80056b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c2:	f043 0202 	orr.w	r2, r3, #2
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <HAL_UART_IRQHandler+0xf6>
 80056d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d005      	beq.n	80056ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e6:	f043 0204 	orr.w	r2, r3, #4
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d011      	beq.n	800571e <HAL_UART_IRQHandler+0x126>
 80056fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b00      	cmp	r3, #0
 8005704:	d105      	bne.n	8005712 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005716:	f043 0208 	orr.w	r2, r3, #8
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 81f2 	beq.w	8005b0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800572c:	f003 0320 	and.w	r3, r3, #32
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_UART_IRQHandler+0x14e>
 8005734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fb7d 	bl	8005e40 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005750:	2b40      	cmp	r3, #64	@ 0x40
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d103      	bne.n	8005772 <HAL_UART_IRQHandler+0x17a>
 800576a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800576e:	2b00      	cmp	r3, #0
 8005770:	d04f      	beq.n	8005812 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fa85 	bl	8005c82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005782:	2b40      	cmp	r3, #64	@ 0x40
 8005784:	d141      	bne.n	800580a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3314      	adds	r3, #20
 800578c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005794:	e853 3f00 	ldrex	r3, [r3]
 8005798:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800579c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80057a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3314      	adds	r3, #20
 80057ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80057b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80057b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80057be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1d9      	bne.n	8005786 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d013      	beq.n	8005802 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057de:	4a7e      	ldr	r2, [pc, #504]	@ (80059d8 <HAL_UART_IRQHandler+0x3e0>)
 80057e0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fd fb6b 	bl	8002ec2 <HAL_DMA_Abort_IT>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d016      	beq.n	8005820 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057fc:	4610      	mov	r0, r2
 80057fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005800:	e00e      	b.n	8005820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f994 	bl	8005b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005808:	e00a      	b.n	8005820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f990 	bl	8005b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005810:	e006      	b.n	8005820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f98c 	bl	8005b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800581e:	e175      	b.n	8005b0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	bf00      	nop
    return;
 8005822:	e173      	b.n	8005b0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005828:	2b01      	cmp	r3, #1
 800582a:	f040 814f 	bne.w	8005acc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800582e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 8148 	beq.w	8005acc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800583c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 8141 	beq.w	8005acc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800584a:	2300      	movs	r3, #0
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60bb      	str	r3, [r7, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586a:	2b40      	cmp	r3, #64	@ 0x40
 800586c:	f040 80b6 	bne.w	80059dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800587c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8145 	beq.w	8005b10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800588a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800588e:	429a      	cmp	r2, r3
 8005890:	f080 813e 	bcs.w	8005b10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800589a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058a6:	f000 8088 	beq.w	80059ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	330c      	adds	r3, #12
 80058b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80058c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	330c      	adds	r3, #12
 80058d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80058d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1d9      	bne.n	80058aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3314      	adds	r3, #20
 80058fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005906:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005908:	f023 0301 	bic.w	r3, r3, #1
 800590c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3314      	adds	r3, #20
 8005916:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800591a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800591e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005922:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005926:	e841 2300 	strex	r3, r2, [r1]
 800592a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800592c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1e1      	bne.n	80058f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3314      	adds	r3, #20
 8005938:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005944:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005948:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	3314      	adds	r3, #20
 8005952:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005956:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005958:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800595c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005964:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1e3      	bne.n	8005932 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	330c      	adds	r3, #12
 800597e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800598a:	f023 0310 	bic.w	r3, r3, #16
 800598e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	330c      	adds	r3, #12
 8005998:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800599c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800599e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059a4:	e841 2300 	strex	r3, r2, [r1]
 80059a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e3      	bne.n	8005978 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fd fa14 	bl	8002de2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2202      	movs	r2, #2
 80059be:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f8b7 	bl	8005b44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059d6:	e09b      	b.n	8005b10 <HAL_UART_IRQHandler+0x518>
 80059d8:	08005d49 	.word	0x08005d49
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 808e 	beq.w	8005b14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80059f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 8089 	beq.w	8005b14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	330c      	adds	r3, #12
 8005a08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	330c      	adds	r3, #12
 8005a22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a26:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e3      	bne.n	8005a02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3314      	adds	r3, #20
 8005a40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	e853 3f00 	ldrex	r3, [r3]
 8005a48:	623b      	str	r3, [r7, #32]
   return(result);
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	f023 0301 	bic.w	r3, r3, #1
 8005a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3314      	adds	r3, #20
 8005a5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e3      	bne.n	8005a3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	330c      	adds	r3, #12
 8005a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0310 	bic.w	r3, r3, #16
 8005a96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	330c      	adds	r3, #12
 8005aa0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005aa4:	61fa      	str	r2, [r7, #28]
 8005aa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	69b9      	ldr	r1, [r7, #24]
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	e841 2300 	strex	r3, r2, [r1]
 8005ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e3      	bne.n	8005a80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005abe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f83d 	bl	8005b44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005aca:	e023      	b.n	8005b14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d009      	beq.n	8005aec <HAL_UART_IRQHandler+0x4f4>
 8005ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f943 	bl	8005d70 <UART_Transmit_IT>
    return;
 8005aea:	e014      	b.n	8005b16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00e      	beq.n	8005b16 <HAL_UART_IRQHandler+0x51e>
 8005af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f983 	bl	8005e10 <UART_EndTransmit_IT>
    return;
 8005b0a:	e004      	b.n	8005b16 <HAL_UART_IRQHandler+0x51e>
    return;
 8005b0c:	bf00      	nop
 8005b0e:	e002      	b.n	8005b16 <HAL_UART_IRQHandler+0x51e>
      return;
 8005b10:	bf00      	nop
 8005b12:	e000      	b.n	8005b16 <HAL_UART_IRQHandler+0x51e>
      return;
 8005b14:	bf00      	nop
  }
}
 8005b16:	37e8      	adds	r7, #232	@ 0xe8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b6c:	e03b      	b.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b74:	d037      	beq.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b76:	f7fc fff3 	bl	8002b60 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	6a3a      	ldr	r2, [r7, #32]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d302      	bcc.n	8005b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e03a      	b.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d023      	beq.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b80      	cmp	r3, #128	@ 0x80
 8005ba2:	d020      	beq.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b40      	cmp	r3, #64	@ 0x40
 8005ba8:	d01d      	beq.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0308 	and.w	r3, r3, #8
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d116      	bne.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f857 	bl	8005c82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2208      	movs	r2, #8
 8005bd8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e00f      	b.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	bf0c      	ite	eq
 8005bf6:	2301      	moveq	r3, #1
 8005bf8:	2300      	movne	r3, #0
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d0b4      	beq.n	8005b6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	88fa      	ldrh	r2, [r7, #6]
 8005c26:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2222      	movs	r2, #34	@ 0x22
 8005c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d007      	beq.n	8005c54 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c52:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0220 	orr.w	r2, r2, #32
 8005c72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b095      	sub	sp, #84	@ 0x54
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	330c      	adds	r3, #12
 8005c90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	330c      	adds	r3, #12
 8005ca8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005caa:	643a      	str	r2, [r7, #64]	@ 0x40
 8005cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e5      	bne.n	8005c8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3314      	adds	r3, #20
 8005cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f023 0301 	bic.w	r3, r3, #1
 8005cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3314      	adds	r3, #20
 8005cdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e5      	bne.n	8005cbe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d119      	bne.n	8005d2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	330c      	adds	r3, #12
 8005d00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f023 0310 	bic.w	r3, r3, #16
 8005d10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	330c      	adds	r3, #12
 8005d18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d1a:	61ba      	str	r2, [r7, #24]
 8005d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6979      	ldr	r1, [r7, #20]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	613b      	str	r3, [r7, #16]
   return(result);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e5      	bne.n	8005cfa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d3c:	bf00      	nop
 8005d3e:	3754      	adds	r7, #84	@ 0x54
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f7ff fee4 	bl	8005b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d68:	bf00      	nop
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b21      	cmp	r3, #33	@ 0x21
 8005d82:	d13e      	bne.n	8005e02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d8c:	d114      	bne.n	8005db8 <UART_Transmit_IT+0x48>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d110      	bne.n	8005db8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005daa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	1c9a      	adds	r2, r3, #2
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	621a      	str	r2, [r3, #32]
 8005db6:	e008      	b.n	8005dca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	1c59      	adds	r1, r3, #1
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6211      	str	r1, [r2, #32]
 8005dc2:	781a      	ldrb	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10f      	bne.n	8005dfe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005dec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dfc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e000      	b.n	8005e04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e02:	2302      	movs	r3, #2
  }
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e26:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff fe73 	bl	8005b1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08c      	sub	sp, #48	@ 0x30
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b22      	cmp	r3, #34	@ 0x22
 8005e52:	f040 80ae 	bne.w	8005fb2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e5e:	d117      	bne.n	8005e90 <UART_Receive_IT+0x50>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d113      	bne.n	8005e90 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e70:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e88:	1c9a      	adds	r2, r3, #2
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e8e:	e026      	b.n	8005ede <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ea2:	d007      	beq.n	8005eb4 <UART_Receive_IT+0x74>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <UART_Receive_IT+0x82>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d106      	bne.n	8005ec2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	e008      	b.n	8005ed4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	4619      	mov	r1, r3
 8005eec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d15d      	bne.n	8005fae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0220 	bic.w	r2, r2, #32
 8005f00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695a      	ldr	r2, [r3, #20]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0201 	bic.w	r2, r2, #1
 8005f20:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d135      	bne.n	8005fa4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	330c      	adds	r3, #12
 8005f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f023 0310 	bic.w	r3, r3, #16
 8005f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	330c      	adds	r3, #12
 8005f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f5e:	623a      	str	r2, [r7, #32]
 8005f60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	69f9      	ldr	r1, [r7, #28]
 8005f64:	6a3a      	ldr	r2, [r7, #32]
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e5      	bne.n	8005f3e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	d10a      	bne.n	8005f96 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff fdd1 	bl	8005b44 <HAL_UARTEx_RxEventCallback>
 8005fa2:	e002      	b.n	8005faa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7fb fb8d 	bl	80016c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	e002      	b.n	8005fb4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	e000      	b.n	8005fb4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005fb2:	2302      	movs	r3, #2
  }
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3730      	adds	r7, #48	@ 0x30
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fc0:	b0c0      	sub	sp, #256	@ 0x100
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd8:	68d9      	ldr	r1, [r3, #12]
 8005fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	ea40 0301 	orr.w	r3, r0, r1
 8005fe4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006014:	f021 010c 	bic.w	r1, r1, #12
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006022:	430b      	orrs	r3, r1
 8006024:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006036:	6999      	ldr	r1, [r3, #24]
 8006038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	ea40 0301 	orr.w	r3, r0, r1
 8006042:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	4b8f      	ldr	r3, [pc, #572]	@ (8006288 <UART_SetConfig+0x2cc>)
 800604c:	429a      	cmp	r2, r3
 800604e:	d005      	beq.n	800605c <UART_SetConfig+0xa0>
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b8d      	ldr	r3, [pc, #564]	@ (800628c <UART_SetConfig+0x2d0>)
 8006058:	429a      	cmp	r2, r3
 800605a:	d104      	bne.n	8006066 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800605c:	f7fd fd76 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 8006060:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006064:	e003      	b.n	800606e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006066:	f7fd fd5d 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 800606a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800606e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006078:	f040 810c 	bne.w	8006294 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800607c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006080:	2200      	movs	r2, #0
 8006082:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006086:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800608a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800608e:	4622      	mov	r2, r4
 8006090:	462b      	mov	r3, r5
 8006092:	1891      	adds	r1, r2, r2
 8006094:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006096:	415b      	adcs	r3, r3
 8006098:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800609a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800609e:	4621      	mov	r1, r4
 80060a0:	eb12 0801 	adds.w	r8, r2, r1
 80060a4:	4629      	mov	r1, r5
 80060a6:	eb43 0901 	adc.w	r9, r3, r1
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	f04f 0300 	mov.w	r3, #0
 80060b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060be:	4690      	mov	r8, r2
 80060c0:	4699      	mov	r9, r3
 80060c2:	4623      	mov	r3, r4
 80060c4:	eb18 0303 	adds.w	r3, r8, r3
 80060c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060cc:	462b      	mov	r3, r5
 80060ce:	eb49 0303 	adc.w	r3, r9, r3
 80060d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80060e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060ea:	460b      	mov	r3, r1
 80060ec:	18db      	adds	r3, r3, r3
 80060ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80060f0:	4613      	mov	r3, r2
 80060f2:	eb42 0303 	adc.w	r3, r2, r3
 80060f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80060f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80060fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006100:	f7fa fd52 	bl	8000ba8 <__aeabi_uldivmod>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4b61      	ldr	r3, [pc, #388]	@ (8006290 <UART_SetConfig+0x2d4>)
 800610a:	fba3 2302 	umull	r2, r3, r3, r2
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	011c      	lsls	r4, r3, #4
 8006112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006116:	2200      	movs	r2, #0
 8006118:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800611c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006120:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006124:	4642      	mov	r2, r8
 8006126:	464b      	mov	r3, r9
 8006128:	1891      	adds	r1, r2, r2
 800612a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800612c:	415b      	adcs	r3, r3
 800612e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006130:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006134:	4641      	mov	r1, r8
 8006136:	eb12 0a01 	adds.w	sl, r2, r1
 800613a:	4649      	mov	r1, r9
 800613c:	eb43 0b01 	adc.w	fp, r3, r1
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800614c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006154:	4692      	mov	sl, r2
 8006156:	469b      	mov	fp, r3
 8006158:	4643      	mov	r3, r8
 800615a:	eb1a 0303 	adds.w	r3, sl, r3
 800615e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006162:	464b      	mov	r3, r9
 8006164:	eb4b 0303 	adc.w	r3, fp, r3
 8006168:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006178:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800617c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006180:	460b      	mov	r3, r1
 8006182:	18db      	adds	r3, r3, r3
 8006184:	643b      	str	r3, [r7, #64]	@ 0x40
 8006186:	4613      	mov	r3, r2
 8006188:	eb42 0303 	adc.w	r3, r2, r3
 800618c:	647b      	str	r3, [r7, #68]	@ 0x44
 800618e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006192:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006196:	f7fa fd07 	bl	8000ba8 <__aeabi_uldivmod>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4611      	mov	r1, r2
 80061a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006290 <UART_SetConfig+0x2d4>)
 80061a2:	fba3 2301 	umull	r2, r3, r3, r1
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	2264      	movs	r2, #100	@ 0x64
 80061aa:	fb02 f303 	mul.w	r3, r2, r3
 80061ae:	1acb      	subs	r3, r1, r3
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80061b6:	4b36      	ldr	r3, [pc, #216]	@ (8006290 <UART_SetConfig+0x2d4>)
 80061b8:	fba3 2302 	umull	r2, r3, r3, r2
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80061c4:	441c      	add	r4, r3
 80061c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80061d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80061d8:	4642      	mov	r2, r8
 80061da:	464b      	mov	r3, r9
 80061dc:	1891      	adds	r1, r2, r2
 80061de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80061e0:	415b      	adcs	r3, r3
 80061e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80061e8:	4641      	mov	r1, r8
 80061ea:	1851      	adds	r1, r2, r1
 80061ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80061ee:	4649      	mov	r1, r9
 80061f0:	414b      	adcs	r3, r1
 80061f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006200:	4659      	mov	r1, fp
 8006202:	00cb      	lsls	r3, r1, #3
 8006204:	4651      	mov	r1, sl
 8006206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800620a:	4651      	mov	r1, sl
 800620c:	00ca      	lsls	r2, r1, #3
 800620e:	4610      	mov	r0, r2
 8006210:	4619      	mov	r1, r3
 8006212:	4603      	mov	r3, r0
 8006214:	4642      	mov	r2, r8
 8006216:	189b      	adds	r3, r3, r2
 8006218:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800621c:	464b      	mov	r3, r9
 800621e:	460a      	mov	r2, r1
 8006220:	eb42 0303 	adc.w	r3, r2, r3
 8006224:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006234:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006238:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800623c:	460b      	mov	r3, r1
 800623e:	18db      	adds	r3, r3, r3
 8006240:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006242:	4613      	mov	r3, r2
 8006244:	eb42 0303 	adc.w	r3, r2, r3
 8006248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800624a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800624e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006252:	f7fa fca9 	bl	8000ba8 <__aeabi_uldivmod>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4b0d      	ldr	r3, [pc, #52]	@ (8006290 <UART_SetConfig+0x2d4>)
 800625c:	fba3 1302 	umull	r1, r3, r3, r2
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	2164      	movs	r1, #100	@ 0x64
 8006264:	fb01 f303 	mul.w	r3, r1, r3
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	3332      	adds	r3, #50	@ 0x32
 800626e:	4a08      	ldr	r2, [pc, #32]	@ (8006290 <UART_SetConfig+0x2d4>)
 8006270:	fba2 2303 	umull	r2, r3, r2, r3
 8006274:	095b      	lsrs	r3, r3, #5
 8006276:	f003 0207 	and.w	r2, r3, #7
 800627a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4422      	add	r2, r4
 8006282:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006284:	e106      	b.n	8006494 <UART_SetConfig+0x4d8>
 8006286:	bf00      	nop
 8006288:	40011000 	.word	0x40011000
 800628c:	40011400 	.word	0x40011400
 8006290:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006298:	2200      	movs	r2, #0
 800629a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800629e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80062a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80062a6:	4642      	mov	r2, r8
 80062a8:	464b      	mov	r3, r9
 80062aa:	1891      	adds	r1, r2, r2
 80062ac:	6239      	str	r1, [r7, #32]
 80062ae:	415b      	adcs	r3, r3
 80062b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80062b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062b6:	4641      	mov	r1, r8
 80062b8:	1854      	adds	r4, r2, r1
 80062ba:	4649      	mov	r1, r9
 80062bc:	eb43 0501 	adc.w	r5, r3, r1
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	00eb      	lsls	r3, r5, #3
 80062ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ce:	00e2      	lsls	r2, r4, #3
 80062d0:	4614      	mov	r4, r2
 80062d2:	461d      	mov	r5, r3
 80062d4:	4643      	mov	r3, r8
 80062d6:	18e3      	adds	r3, r4, r3
 80062d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062dc:	464b      	mov	r3, r9
 80062de:	eb45 0303 	adc.w	r3, r5, r3
 80062e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	f04f 0300 	mov.w	r3, #0
 80062fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006302:	4629      	mov	r1, r5
 8006304:	008b      	lsls	r3, r1, #2
 8006306:	4621      	mov	r1, r4
 8006308:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800630c:	4621      	mov	r1, r4
 800630e:	008a      	lsls	r2, r1, #2
 8006310:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006314:	f7fa fc48 	bl	8000ba8 <__aeabi_uldivmod>
 8006318:	4602      	mov	r2, r0
 800631a:	460b      	mov	r3, r1
 800631c:	4b60      	ldr	r3, [pc, #384]	@ (80064a0 <UART_SetConfig+0x4e4>)
 800631e:	fba3 2302 	umull	r2, r3, r3, r2
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	011c      	lsls	r4, r3, #4
 8006326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800632a:	2200      	movs	r2, #0
 800632c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006330:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006334:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006338:	4642      	mov	r2, r8
 800633a:	464b      	mov	r3, r9
 800633c:	1891      	adds	r1, r2, r2
 800633e:	61b9      	str	r1, [r7, #24]
 8006340:	415b      	adcs	r3, r3
 8006342:	61fb      	str	r3, [r7, #28]
 8006344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006348:	4641      	mov	r1, r8
 800634a:	1851      	adds	r1, r2, r1
 800634c:	6139      	str	r1, [r7, #16]
 800634e:	4649      	mov	r1, r9
 8006350:	414b      	adcs	r3, r1
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	f04f 0300 	mov.w	r3, #0
 800635c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006360:	4659      	mov	r1, fp
 8006362:	00cb      	lsls	r3, r1, #3
 8006364:	4651      	mov	r1, sl
 8006366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800636a:	4651      	mov	r1, sl
 800636c:	00ca      	lsls	r2, r1, #3
 800636e:	4610      	mov	r0, r2
 8006370:	4619      	mov	r1, r3
 8006372:	4603      	mov	r3, r0
 8006374:	4642      	mov	r2, r8
 8006376:	189b      	adds	r3, r3, r2
 8006378:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800637c:	464b      	mov	r3, r9
 800637e:	460a      	mov	r2, r1
 8006380:	eb42 0303 	adc.w	r3, r2, r3
 8006384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006392:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	f04f 0300 	mov.w	r3, #0
 800639c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80063a0:	4649      	mov	r1, r9
 80063a2:	008b      	lsls	r3, r1, #2
 80063a4:	4641      	mov	r1, r8
 80063a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063aa:	4641      	mov	r1, r8
 80063ac:	008a      	lsls	r2, r1, #2
 80063ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80063b2:	f7fa fbf9 	bl	8000ba8 <__aeabi_uldivmod>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4611      	mov	r1, r2
 80063bc:	4b38      	ldr	r3, [pc, #224]	@ (80064a0 <UART_SetConfig+0x4e4>)
 80063be:	fba3 2301 	umull	r2, r3, r3, r1
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	2264      	movs	r2, #100	@ 0x64
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
 80063ca:	1acb      	subs	r3, r1, r3
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	3332      	adds	r3, #50	@ 0x32
 80063d0:	4a33      	ldr	r2, [pc, #204]	@ (80064a0 <UART_SetConfig+0x4e4>)
 80063d2:	fba2 2303 	umull	r2, r3, r2, r3
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063dc:	441c      	add	r4, r3
 80063de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063e2:	2200      	movs	r2, #0
 80063e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80063e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80063e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80063ec:	4642      	mov	r2, r8
 80063ee:	464b      	mov	r3, r9
 80063f0:	1891      	adds	r1, r2, r2
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	415b      	adcs	r3, r3
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063fc:	4641      	mov	r1, r8
 80063fe:	1851      	adds	r1, r2, r1
 8006400:	6039      	str	r1, [r7, #0]
 8006402:	4649      	mov	r1, r9
 8006404:	414b      	adcs	r3, r1
 8006406:	607b      	str	r3, [r7, #4]
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006414:	4659      	mov	r1, fp
 8006416:	00cb      	lsls	r3, r1, #3
 8006418:	4651      	mov	r1, sl
 800641a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800641e:	4651      	mov	r1, sl
 8006420:	00ca      	lsls	r2, r1, #3
 8006422:	4610      	mov	r0, r2
 8006424:	4619      	mov	r1, r3
 8006426:	4603      	mov	r3, r0
 8006428:	4642      	mov	r2, r8
 800642a:	189b      	adds	r3, r3, r2
 800642c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800642e:	464b      	mov	r3, r9
 8006430:	460a      	mov	r2, r1
 8006432:	eb42 0303 	adc.w	r3, r2, r3
 8006436:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	663b      	str	r3, [r7, #96]	@ 0x60
 8006442:	667a      	str	r2, [r7, #100]	@ 0x64
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006450:	4649      	mov	r1, r9
 8006452:	008b      	lsls	r3, r1, #2
 8006454:	4641      	mov	r1, r8
 8006456:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800645a:	4641      	mov	r1, r8
 800645c:	008a      	lsls	r2, r1, #2
 800645e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006462:	f7fa fba1 	bl	8000ba8 <__aeabi_uldivmod>
 8006466:	4602      	mov	r2, r0
 8006468:	460b      	mov	r3, r1
 800646a:	4b0d      	ldr	r3, [pc, #52]	@ (80064a0 <UART_SetConfig+0x4e4>)
 800646c:	fba3 1302 	umull	r1, r3, r3, r2
 8006470:	095b      	lsrs	r3, r3, #5
 8006472:	2164      	movs	r1, #100	@ 0x64
 8006474:	fb01 f303 	mul.w	r3, r1, r3
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	3332      	adds	r3, #50	@ 0x32
 800647e:	4a08      	ldr	r2, [pc, #32]	@ (80064a0 <UART_SetConfig+0x4e4>)
 8006480:	fba2 2303 	umull	r2, r3, r2, r3
 8006484:	095b      	lsrs	r3, r3, #5
 8006486:	f003 020f 	and.w	r2, r3, #15
 800648a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4422      	add	r2, r4
 8006492:	609a      	str	r2, [r3, #8]
}
 8006494:	bf00      	nop
 8006496:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800649a:	46bd      	mov	sp, r7
 800649c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064a0:	51eb851f 	.word	0x51eb851f

080064a4 <__NVIC_SetPriority>:
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	4603      	mov	r3, r0
 80064ac:	6039      	str	r1, [r7, #0]
 80064ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	db0a      	blt.n	80064ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	490c      	ldr	r1, [pc, #48]	@ (80064f0 <__NVIC_SetPriority+0x4c>)
 80064be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c2:	0112      	lsls	r2, r2, #4
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	440b      	add	r3, r1
 80064c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80064cc:	e00a      	b.n	80064e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	4908      	ldr	r1, [pc, #32]	@ (80064f4 <__NVIC_SetPriority+0x50>)
 80064d4:	79fb      	ldrb	r3, [r7, #7]
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	3b04      	subs	r3, #4
 80064dc:	0112      	lsls	r2, r2, #4
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	440b      	add	r3, r1
 80064e2:	761a      	strb	r2, [r3, #24]
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	e000e100 	.word	0xe000e100
 80064f4:	e000ed00 	.word	0xe000ed00

080064f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80064fc:	2100      	movs	r1, #0
 80064fe:	f06f 0004 	mvn.w	r0, #4
 8006502:	f7ff ffcf 	bl	80064a4 <__NVIC_SetPriority>
#endif
}
 8006506:	bf00      	nop
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006512:	f3ef 8305 	mrs	r3, IPSR
 8006516:	603b      	str	r3, [r7, #0]
  return(result);
 8006518:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800651e:	f06f 0305 	mvn.w	r3, #5
 8006522:	607b      	str	r3, [r7, #4]
 8006524:	e00c      	b.n	8006540 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006526:	4b0a      	ldr	r3, [pc, #40]	@ (8006550 <osKernelInitialize+0x44>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d105      	bne.n	800653a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800652e:	4b08      	ldr	r3, [pc, #32]	@ (8006550 <osKernelInitialize+0x44>)
 8006530:	2201      	movs	r2, #1
 8006532:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006534:	2300      	movs	r3, #0
 8006536:	607b      	str	r3, [r7, #4]
 8006538:	e002      	b.n	8006540 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800653a:	f04f 33ff 	mov.w	r3, #4294967295
 800653e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006540:	687b      	ldr	r3, [r7, #4]
}
 8006542:	4618      	mov	r0, r3
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	20000818 	.word	0x20000818

08006554 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800655a:	f3ef 8305 	mrs	r3, IPSR
 800655e:	603b      	str	r3, [r7, #0]
  return(result);
 8006560:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006566:	f06f 0305 	mvn.w	r3, #5
 800656a:	607b      	str	r3, [r7, #4]
 800656c:	e010      	b.n	8006590 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800656e:	4b0b      	ldr	r3, [pc, #44]	@ (800659c <osKernelStart+0x48>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d109      	bne.n	800658a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006576:	f7ff ffbf 	bl	80064f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800657a:	4b08      	ldr	r3, [pc, #32]	@ (800659c <osKernelStart+0x48>)
 800657c:	2202      	movs	r2, #2
 800657e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006580:	f001 f87a 	bl	8007678 <vTaskStartScheduler>
      stat = osOK;
 8006584:	2300      	movs	r3, #0
 8006586:	607b      	str	r3, [r7, #4]
 8006588:	e002      	b.n	8006590 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800658a:	f04f 33ff 	mov.w	r3, #4294967295
 800658e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006590:	687b      	ldr	r3, [r7, #4]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000818 	.word	0x20000818

080065a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08e      	sub	sp, #56	@ 0x38
 80065a4:	af04      	add	r7, sp, #16
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065ac:	2300      	movs	r3, #0
 80065ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065b0:	f3ef 8305 	mrs	r3, IPSR
 80065b4:	617b      	str	r3, [r7, #20]
  return(result);
 80065b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d17e      	bne.n	80066ba <osThreadNew+0x11a>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d07b      	beq.n	80066ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80065c2:	2380      	movs	r3, #128	@ 0x80
 80065c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80065c6:	2318      	movs	r3, #24
 80065c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80065ce:	f04f 33ff 	mov.w	r3, #4294967295
 80065d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d045      	beq.n	8006666 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <osThreadNew+0x48>
        name = attr->name;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d008      	beq.n	800660e <osThreadNew+0x6e>
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	2b38      	cmp	r3, #56	@ 0x38
 8006600:	d805      	bhi.n	800660e <osThreadNew+0x6e>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <osThreadNew+0x72>
        return (NULL);
 800660e:	2300      	movs	r3, #0
 8006610:	e054      	b.n	80066bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	089b      	lsrs	r3, r3, #2
 8006620:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00e      	beq.n	8006648 <osThreadNew+0xa8>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	2b5b      	cmp	r3, #91	@ 0x5b
 8006630:	d90a      	bls.n	8006648 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006636:	2b00      	cmp	r3, #0
 8006638:	d006      	beq.n	8006648 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <osThreadNew+0xa8>
        mem = 1;
 8006642:	2301      	movs	r3, #1
 8006644:	61bb      	str	r3, [r7, #24]
 8006646:	e010      	b.n	800666a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10c      	bne.n	800666a <osThreadNew+0xca>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d108      	bne.n	800666a <osThreadNew+0xca>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <osThreadNew+0xca>
          mem = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	61bb      	str	r3, [r7, #24]
 8006664:	e001      	b.n	800666a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d110      	bne.n	8006692 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006678:	9202      	str	r2, [sp, #8]
 800667a:	9301      	str	r3, [sp, #4]
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	6a3a      	ldr	r2, [r7, #32]
 8006684:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f000 fe1a 	bl	80072c0 <xTaskCreateStatic>
 800668c:	4603      	mov	r3, r0
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	e013      	b.n	80066ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d110      	bne.n	80066ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	b29a      	uxth	r2, r3
 800669c:	f107 0310 	add.w	r3, r7, #16
 80066a0:	9301      	str	r3, [sp, #4]
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 fe68 	bl	8007380 <xTaskCreate>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d001      	beq.n	80066ba <osThreadNew+0x11a>
            hTask = NULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066ba:	693b      	ldr	r3, [r7, #16]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3728      	adds	r7, #40	@ 0x28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066cc:	f3ef 8305 	mrs	r3, IPSR
 80066d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80066d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <osDelay+0x1c>
    stat = osErrorISR;
 80066d8:	f06f 0305 	mvn.w	r3, #5
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	e007      	b.n	80066f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 ff8e 	bl	800760c <vTaskDelay>
    }
  }

  return (stat);
 80066f0:	68fb      	ldr	r3, [r7, #12]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4a07      	ldr	r2, [pc, #28]	@ (8006728 <vApplicationGetIdleTaskMemory+0x2c>)
 800670c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4a06      	ldr	r2, [pc, #24]	@ (800672c <vApplicationGetIdleTaskMemory+0x30>)
 8006712:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2280      	movs	r2, #128	@ 0x80
 8006718:	601a      	str	r2, [r3, #0]
}
 800671a:	bf00      	nop
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	2000081c 	.word	0x2000081c
 800672c:	20000878 	.word	0x20000878

08006730 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4a07      	ldr	r2, [pc, #28]	@ (800675c <vApplicationGetTimerTaskMemory+0x2c>)
 8006740:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	4a06      	ldr	r2, [pc, #24]	@ (8006760 <vApplicationGetTimerTaskMemory+0x30>)
 8006746:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800674e:	601a      	str	r2, [r3, #0]
}
 8006750:	bf00      	nop
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	20000a78 	.word	0x20000a78
 8006760:	20000ad4 	.word	0x20000ad4

08006764 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f103 0208 	add.w	r2, r3, #8
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f04f 32ff 	mov.w	r2, #4294967295
 800677c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f103 0208 	add.w	r2, r3, #8
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f103 0208 	add.w	r2, r3, #8
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067be:	b480      	push	{r7}
 80067c0:	b085      	sub	sp, #20
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	601a      	str	r2, [r3, #0]
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006806:	b480      	push	{r7}
 8006808:	b085      	sub	sp, #20
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d103      	bne.n	8006826 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	e00c      	b.n	8006840 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3308      	adds	r3, #8
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	e002      	b.n	8006834 <vListInsert+0x2e>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	429a      	cmp	r2, r3
 800683e:	d2f6      	bcs.n	800682e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	601a      	str	r2, [r3, #0]
}
 800686c:	bf00      	nop
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6892      	ldr	r2, [r2, #8]
 800688e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	6852      	ldr	r2, [r2, #4]
 8006898:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d103      	bne.n	80068ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	1e5a      	subs	r2, r3, #1
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10b      	bne.n	80068f8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	e7fd      	b.n	80068f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068f8:	f002 f876 	bl	80089e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006904:	68f9      	ldr	r1, [r7, #12]
 8006906:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006908:	fb01 f303 	mul.w	r3, r1, r3
 800690c:	441a      	add	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006928:	3b01      	subs	r3, #1
 800692a:	68f9      	ldr	r1, [r7, #12]
 800692c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800692e:	fb01 f303 	mul.w	r3, r1, r3
 8006932:	441a      	add	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	22ff      	movs	r2, #255	@ 0xff
 800693c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	22ff      	movs	r2, #255	@ 0xff
 8006944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d114      	bne.n	8006978 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01a      	beq.n	800698c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3310      	adds	r3, #16
 800695a:	4618      	mov	r0, r3
 800695c:	f001 f91a 	bl	8007b94 <xTaskRemoveFromEventList>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d012      	beq.n	800698c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006966:	4b0d      	ldr	r3, [pc, #52]	@ (800699c <xQueueGenericReset+0xd0>)
 8006968:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	e009      	b.n	800698c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3310      	adds	r3, #16
 800697c:	4618      	mov	r0, r3
 800697e:	f7ff fef1 	bl	8006764 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3324      	adds	r3, #36	@ 0x24
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff feec 	bl	8006764 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800698c:	f002 f85e 	bl	8008a4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006990:	2301      	movs	r3, #1
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	e000ed04 	.word	0xe000ed04

080069a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08e      	sub	sp, #56	@ 0x38
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10b      	bne.n	80069cc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069c6:	bf00      	nop
 80069c8:	bf00      	nop
 80069ca:	e7fd      	b.n	80069c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10b      	bne.n	80069ea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	e7fd      	b.n	80069e6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <xQueueGenericCreateStatic+0x56>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <xQueueGenericCreateStatic+0x5a>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e000      	b.n	80069fc <xQueueGenericCreateStatic+0x5c>
 80069fa:	2300      	movs	r3, #0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10b      	bne.n	8006a18 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	623b      	str	r3, [r7, #32]
}
 8006a12:	bf00      	nop
 8006a14:	bf00      	nop
 8006a16:	e7fd      	b.n	8006a14 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d102      	bne.n	8006a24 <xQueueGenericCreateStatic+0x84>
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <xQueueGenericCreateStatic+0x88>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <xQueueGenericCreateStatic+0x8a>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10b      	bne.n	8006a46 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	61fb      	str	r3, [r7, #28]
}
 8006a40:	bf00      	nop
 8006a42:	bf00      	nop
 8006a44:	e7fd      	b.n	8006a42 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a46:	2350      	movs	r3, #80	@ 0x50
 8006a48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b50      	cmp	r3, #80	@ 0x50
 8006a4e:	d00b      	beq.n	8006a68 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	61bb      	str	r3, [r7, #24]
}
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	e7fd      	b.n	8006a64 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00d      	beq.n	8006a90 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a7c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	4613      	mov	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 f805 	bl	8006a9a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3730      	adds	r7, #48	@ 0x30
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
 8006aa6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d103      	bne.n	8006ab6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	e002      	b.n	8006abc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ac8:	2101      	movs	r1, #1
 8006aca:	69b8      	ldr	r0, [r7, #24]
 8006acc:	f7ff fefe 	bl	80068cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	78fa      	ldrb	r2, [r7, #3]
 8006ad4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08e      	sub	sp, #56	@ 0x38
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006aee:	2300      	movs	r3, #0
 8006af0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10b      	bne.n	8006b14 <xQueueGenericSend+0x34>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b0e:	bf00      	nop
 8006b10:	bf00      	nop
 8006b12:	e7fd      	b.n	8006b10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d103      	bne.n	8006b22 <xQueueGenericSend+0x42>
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <xQueueGenericSend+0x46>
 8006b22:	2301      	movs	r3, #1
 8006b24:	e000      	b.n	8006b28 <xQueueGenericSend+0x48>
 8006b26:	2300      	movs	r3, #0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10b      	bne.n	8006b44 <xQueueGenericSend+0x64>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b3e:	bf00      	nop
 8006b40:	bf00      	nop
 8006b42:	e7fd      	b.n	8006b40 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d103      	bne.n	8006b52 <xQueueGenericSend+0x72>
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <xQueueGenericSend+0x76>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <xQueueGenericSend+0x78>
 8006b56:	2300      	movs	r3, #0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10b      	bne.n	8006b74 <xQueueGenericSend+0x94>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	623b      	str	r3, [r7, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	bf00      	nop
 8006b72:	e7fd      	b.n	8006b70 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b74:	f001 f9ce 	bl	8007f14 <xTaskGetSchedulerState>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d102      	bne.n	8006b84 <xQueueGenericSend+0xa4>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <xQueueGenericSend+0xa8>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <xQueueGenericSend+0xaa>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10b      	bne.n	8006ba6 <xQueueGenericSend+0xc6>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	61fb      	str	r3, [r7, #28]
}
 8006ba0:	bf00      	nop
 8006ba2:	bf00      	nop
 8006ba4:	e7fd      	b.n	8006ba2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ba6:	f001 ff1f 	bl	80089e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d302      	bcc.n	8006bbc <xQueueGenericSend+0xdc>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d129      	bne.n	8006c10 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	68b9      	ldr	r1, [r7, #8]
 8006bc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006bc2:	f000 fa0f 	bl	8006fe4 <prvCopyDataToQueue>
 8006bc6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d010      	beq.n	8006bf2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	3324      	adds	r3, #36	@ 0x24
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 ffdd 	bl	8007b94 <xTaskRemoveFromEventList>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d013      	beq.n	8006c08 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006be0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ce0 <xQueueGenericSend+0x200>)
 8006be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	e00a      	b.n	8006c08 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d007      	beq.n	8006c08 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006bf8:	4b39      	ldr	r3, [pc, #228]	@ (8006ce0 <xQueueGenericSend+0x200>)
 8006bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c08:	f001 ff20 	bl	8008a4c <vPortExitCritical>
				return pdPASS;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e063      	b.n	8006cd8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d103      	bne.n	8006c1e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c16:	f001 ff19 	bl	8008a4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e05c      	b.n	8006cd8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d106      	bne.n	8006c32 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c24:	f107 0314 	add.w	r3, r7, #20
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f001 f817 	bl	8007c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c32:	f001 ff0b 	bl	8008a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c36:	f000 fd87 	bl	8007748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c3a:	f001 fed5 	bl	80089e8 <vPortEnterCritical>
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c44:	b25b      	sxtb	r3, r3
 8006c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4a:	d103      	bne.n	8006c54 <xQueueGenericSend+0x174>
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c5a:	b25b      	sxtb	r3, r3
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d103      	bne.n	8006c6a <xQueueGenericSend+0x18a>
 8006c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c6a:	f001 feef 	bl	8008a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c6e:	1d3a      	adds	r2, r7, #4
 8006c70:	f107 0314 	add.w	r3, r7, #20
 8006c74:	4611      	mov	r1, r2
 8006c76:	4618      	mov	r0, r3
 8006c78:	f001 f806 	bl	8007c88 <xTaskCheckForTimeOut>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d124      	bne.n	8006ccc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c84:	f000 faa6 	bl	80071d4 <prvIsQueueFull>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d018      	beq.n	8006cc0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c90:	3310      	adds	r3, #16
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	4611      	mov	r1, r2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 ff2a 	bl	8007af0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c9e:	f000 fa31 	bl	8007104 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ca2:	f000 fd5f 	bl	8007764 <xTaskResumeAll>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f47f af7c 	bne.w	8006ba6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006cae:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce0 <xQueueGenericSend+0x200>)
 8006cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	e772      	b.n	8006ba6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cc2:	f000 fa1f 	bl	8007104 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cc6:	f000 fd4d 	bl	8007764 <xTaskResumeAll>
 8006cca:	e76c      	b.n	8006ba6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cce:	f000 fa19 	bl	8007104 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cd2:	f000 fd47 	bl	8007764 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006cd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3738      	adds	r7, #56	@ 0x38
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	e000ed04 	.word	0xe000ed04

08006ce4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b090      	sub	sp, #64	@ 0x40
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10b      	bne.n	8006d14 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d0e:	bf00      	nop
 8006d10:	bf00      	nop
 8006d12:	e7fd      	b.n	8006d10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d103      	bne.n	8006d22 <xQueueGenericSendFromISR+0x3e>
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <xQueueGenericSendFromISR+0x42>
 8006d22:	2301      	movs	r3, #1
 8006d24:	e000      	b.n	8006d28 <xQueueGenericSendFromISR+0x44>
 8006d26:	2300      	movs	r3, #0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10b      	bne.n	8006d44 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d3e:	bf00      	nop
 8006d40:	bf00      	nop
 8006d42:	e7fd      	b.n	8006d40 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d103      	bne.n	8006d52 <xQueueGenericSendFromISR+0x6e>
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d101      	bne.n	8006d56 <xQueueGenericSendFromISR+0x72>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e000      	b.n	8006d58 <xQueueGenericSendFromISR+0x74>
 8006d56:	2300      	movs	r3, #0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10b      	bne.n	8006d74 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	623b      	str	r3, [r7, #32]
}
 8006d6e:	bf00      	nop
 8006d70:	bf00      	nop
 8006d72:	e7fd      	b.n	8006d70 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d74:	f001 ff18 	bl	8008ba8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d78:	f3ef 8211 	mrs	r2, BASEPRI
 8006d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	61fa      	str	r2, [r7, #28]
 8006d8e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d90:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d92:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d302      	bcc.n	8006da6 <xQueueGenericSendFromISR+0xc2>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d12f      	bne.n	8006e06 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	68b9      	ldr	r1, [r7, #8]
 8006dba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006dbc:	f000 f912 	bl	8006fe4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006dc0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc8:	d112      	bne.n	8006df0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d016      	beq.n	8006e00 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd4:	3324      	adds	r3, #36	@ 0x24
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fedc 	bl	8007b94 <xTaskRemoveFromEventList>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00e      	beq.n	8006e00 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00b      	beq.n	8006e00 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	e007      	b.n	8006e00 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006df0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006df4:	3301      	adds	r3, #1
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	b25a      	sxtb	r2, r3
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006e00:	2301      	movs	r3, #1
 8006e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006e04:	e001      	b.n	8006e0a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e0c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3740      	adds	r7, #64	@ 0x40
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b08c      	sub	sp, #48	@ 0x30
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10b      	bne.n	8006e52 <xQueueReceive+0x32>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	623b      	str	r3, [r7, #32]
}
 8006e4c:	bf00      	nop
 8006e4e:	bf00      	nop
 8006e50:	e7fd      	b.n	8006e4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d103      	bne.n	8006e60 <xQueueReceive+0x40>
 8006e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <xQueueReceive+0x44>
 8006e60:	2301      	movs	r3, #1
 8006e62:	e000      	b.n	8006e66 <xQueueReceive+0x46>
 8006e64:	2300      	movs	r3, #0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10b      	bne.n	8006e82 <xQueueReceive+0x62>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	61fb      	str	r3, [r7, #28]
}
 8006e7c:	bf00      	nop
 8006e7e:	bf00      	nop
 8006e80:	e7fd      	b.n	8006e7e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e82:	f001 f847 	bl	8007f14 <xTaskGetSchedulerState>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d102      	bne.n	8006e92 <xQueueReceive+0x72>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <xQueueReceive+0x76>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <xQueueReceive+0x78>
 8006e96:	2300      	movs	r3, #0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10b      	bne.n	8006eb4 <xQueueReceive+0x94>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	61bb      	str	r3, [r7, #24]
}
 8006eae:	bf00      	nop
 8006eb0:	bf00      	nop
 8006eb2:	e7fd      	b.n	8006eb0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006eb4:	f001 fd98 	bl	80089e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ebc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d01f      	beq.n	8006f04 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ec4:	68b9      	ldr	r1, [r7, #8]
 8006ec6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ec8:	f000 f8f6 	bl	80070b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ece:	1e5a      	subs	r2, r3, #1
 8006ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00f      	beq.n	8006efc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ede:	3310      	adds	r3, #16
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 fe57 	bl	8007b94 <xTaskRemoveFromEventList>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d007      	beq.n	8006efc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006eec:	4b3c      	ldr	r3, [pc, #240]	@ (8006fe0 <xQueueReceive+0x1c0>)
 8006eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006efc:	f001 fda6 	bl	8008a4c <vPortExitCritical>
				return pdPASS;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e069      	b.n	8006fd8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d103      	bne.n	8006f12 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f0a:	f001 fd9f 	bl	8008a4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	e062      	b.n	8006fd8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d106      	bne.n	8006f26 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f18:	f107 0310 	add.w	r3, r7, #16
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 fe9d 	bl	8007c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f22:	2301      	movs	r3, #1
 8006f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f26:	f001 fd91 	bl	8008a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f2a:	f000 fc0d 	bl	8007748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f2e:	f001 fd5b 	bl	80089e8 <vPortEnterCritical>
 8006f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f38:	b25b      	sxtb	r3, r3
 8006f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3e:	d103      	bne.n	8006f48 <xQueueReceive+0x128>
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f4e:	b25b      	sxtb	r3, r3
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f54:	d103      	bne.n	8006f5e <xQueueReceive+0x13e>
 8006f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f5e:	f001 fd75 	bl	8008a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f62:	1d3a      	adds	r2, r7, #4
 8006f64:	f107 0310 	add.w	r3, r7, #16
 8006f68:	4611      	mov	r1, r2
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fe8c 	bl	8007c88 <xTaskCheckForTimeOut>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d123      	bne.n	8006fbe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f78:	f000 f916 	bl	80071a8 <prvIsQueueEmpty>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d017      	beq.n	8006fb2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f84:	3324      	adds	r3, #36	@ 0x24
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	4611      	mov	r1, r2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fdb0 	bl	8007af0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f92:	f000 f8b7 	bl	8007104 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f96:	f000 fbe5 	bl	8007764 <xTaskResumeAll>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d189      	bne.n	8006eb4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe0 <xQueueReceive+0x1c0>)
 8006fa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	e780      	b.n	8006eb4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006fb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fb4:	f000 f8a6 	bl	8007104 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fb8:	f000 fbd4 	bl	8007764 <xTaskResumeAll>
 8006fbc:	e77a      	b.n	8006eb4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006fbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fc0:	f000 f8a0 	bl	8007104 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fc4:	f000 fbce 	bl	8007764 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fca:	f000 f8ed 	bl	80071a8 <prvIsQueueEmpty>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f43f af6f 	beq.w	8006eb4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fd6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3730      	adds	r7, #48	@ 0x30
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	e000ed04 	.word	0xe000ed04

08006fe4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10d      	bne.n	800701e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d14d      	bne.n	80070a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	4618      	mov	r0, r3
 8007010:	f000 ff9e 	bl	8007f50 <xTaskPriorityDisinherit>
 8007014:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	609a      	str	r2, [r3, #8]
 800701c:	e043      	b.n	80070a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d119      	bne.n	8007058 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6858      	ldr	r0, [r3, #4]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702c:	461a      	mov	r2, r3
 800702e:	68b9      	ldr	r1, [r7, #8]
 8007030:	f003 f8b3 	bl	800a19a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703c:	441a      	add	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	429a      	cmp	r2, r3
 800704c:	d32b      	bcc.n	80070a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	605a      	str	r2, [r3, #4]
 8007056:	e026      	b.n	80070a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	68d8      	ldr	r0, [r3, #12]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007060:	461a      	mov	r2, r3
 8007062:	68b9      	ldr	r1, [r7, #8]
 8007064:	f003 f899 	bl	800a19a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007070:	425b      	negs	r3, r3
 8007072:	441a      	add	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d207      	bcs.n	8007094 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800708c:	425b      	negs	r3, r3
 800708e:	441a      	add	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d105      	bne.n	80070a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	3b01      	subs	r3, #1
 80070a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80070ae:	697b      	ldr	r3, [r7, #20]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d018      	beq.n	80070fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d2:	441a      	add	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68da      	ldr	r2, [r3, #12]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d303      	bcc.n	80070ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68d9      	ldr	r1, [r3, #12]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f4:	461a      	mov	r2, r3
 80070f6:	6838      	ldr	r0, [r7, #0]
 80070f8:	f003 f84f 	bl	800a19a <memcpy>
	}
}
 80070fc:	bf00      	nop
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800710c:	f001 fc6c 	bl	80089e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007116:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007118:	e011      	b.n	800713e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711e:	2b00      	cmp	r3, #0
 8007120:	d012      	beq.n	8007148 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	3324      	adds	r3, #36	@ 0x24
 8007126:	4618      	mov	r0, r3
 8007128:	f000 fd34 	bl	8007b94 <xTaskRemoveFromEventList>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007132:	f000 fe0d 	bl	8007d50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	3b01      	subs	r3, #1
 800713a:	b2db      	uxtb	r3, r3
 800713c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800713e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007142:	2b00      	cmp	r3, #0
 8007144:	dce9      	bgt.n	800711a <prvUnlockQueue+0x16>
 8007146:	e000      	b.n	800714a <prvUnlockQueue+0x46>
					break;
 8007148:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	22ff      	movs	r2, #255	@ 0xff
 800714e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007152:	f001 fc7b 	bl	8008a4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007156:	f001 fc47 	bl	80089e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007160:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007162:	e011      	b.n	8007188 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d012      	beq.n	8007192 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3310      	adds	r3, #16
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fd0f 	bl	8007b94 <xTaskRemoveFromEventList>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800717c:	f000 fde8 	bl	8007d50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	3b01      	subs	r3, #1
 8007184:	b2db      	uxtb	r3, r3
 8007186:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007188:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800718c:	2b00      	cmp	r3, #0
 800718e:	dce9      	bgt.n	8007164 <prvUnlockQueue+0x60>
 8007190:	e000      	b.n	8007194 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007192:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	22ff      	movs	r2, #255	@ 0xff
 8007198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800719c:	f001 fc56 	bl	8008a4c <vPortExitCritical>
}
 80071a0:	bf00      	nop
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071b0:	f001 fc1a 	bl	80089e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d102      	bne.n	80071c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071bc:	2301      	movs	r3, #1
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e001      	b.n	80071c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071c2:	2300      	movs	r3, #0
 80071c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071c6:	f001 fc41 	bl	8008a4c <vPortExitCritical>

	return xReturn;
 80071ca:	68fb      	ldr	r3, [r7, #12]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071dc:	f001 fc04 	bl	80089e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d102      	bne.n	80071f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071ec:	2301      	movs	r3, #1
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	e001      	b.n	80071f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071f2:	2300      	movs	r3, #0
 80071f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071f6:	f001 fc29 	bl	8008a4c <vPortExitCritical>

	return xReturn;
 80071fa:	68fb      	ldr	r3, [r7, #12]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	e014      	b.n	800723e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007214:	4a0f      	ldr	r2, [pc, #60]	@ (8007254 <vQueueAddToRegistry+0x50>)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10b      	bne.n	8007238 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007220:	490c      	ldr	r1, [pc, #48]	@ (8007254 <vQueueAddToRegistry+0x50>)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800722a:	4a0a      	ldr	r2, [pc, #40]	@ (8007254 <vQueueAddToRegistry+0x50>)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	4413      	add	r3, r2
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007236:	e006      	b.n	8007246 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	3301      	adds	r3, #1
 800723c:	60fb      	str	r3, [r7, #12]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b07      	cmp	r3, #7
 8007242:	d9e7      	bls.n	8007214 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20000ed4 	.word	0x20000ed4

08007258 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007268:	f001 fbbe 	bl	80089e8 <vPortEnterCritical>
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007272:	b25b      	sxtb	r3, r3
 8007274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007278:	d103      	bne.n	8007282 <vQueueWaitForMessageRestricted+0x2a>
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007288:	b25b      	sxtb	r3, r3
 800728a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728e:	d103      	bne.n	8007298 <vQueueWaitForMessageRestricted+0x40>
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007298:	f001 fbd8 	bl	8008a4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d106      	bne.n	80072b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	3324      	adds	r3, #36	@ 0x24
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 fc45 	bl	8007b3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072b2:	6978      	ldr	r0, [r7, #20]
 80072b4:	f7ff ff26 	bl	8007104 <prvUnlockQueue>
	}
 80072b8:	bf00      	nop
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08e      	sub	sp, #56	@ 0x38
 80072c4:	af04      	add	r7, sp, #16
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10b      	bne.n	80072ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	623b      	str	r3, [r7, #32]
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	e7fd      	b.n	80072e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10b      	bne.n	800730a <xTaskCreateStatic+0x4a>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	61fb      	str	r3, [r7, #28]
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop
 8007308:	e7fd      	b.n	8007306 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800730a:	235c      	movs	r3, #92	@ 0x5c
 800730c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	2b5c      	cmp	r3, #92	@ 0x5c
 8007312:	d00b      	beq.n	800732c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	61bb      	str	r3, [r7, #24]
}
 8007326:	bf00      	nop
 8007328:	bf00      	nop
 800732a:	e7fd      	b.n	8007328 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800732c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800732e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01e      	beq.n	8007372 <xTaskCreateStatic+0xb2>
 8007334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007336:	2b00      	cmp	r3, #0
 8007338:	d01b      	beq.n	8007372 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800733a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007340:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007342:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007346:	2202      	movs	r2, #2
 8007348:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800734c:	2300      	movs	r3, #0
 800734e:	9303      	str	r3, [sp, #12]
 8007350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007352:	9302      	str	r3, [sp, #8]
 8007354:	f107 0314 	add.w	r3, r7, #20
 8007358:	9301      	str	r3, [sp, #4]
 800735a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 f850 	bl	800740a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800736a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800736c:	f000 f8de 	bl	800752c <prvAddNewTaskToReadyList>
 8007370:	e001      	b.n	8007376 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007376:	697b      	ldr	r3, [r7, #20]
	}
 8007378:	4618      	mov	r0, r3
 800737a:	3728      	adds	r7, #40	@ 0x28
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08c      	sub	sp, #48	@ 0x30
 8007384:	af04      	add	r7, sp, #16
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	4613      	mov	r3, r2
 800738e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007390:	88fb      	ldrh	r3, [r7, #6]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4618      	mov	r0, r3
 8007396:	f001 fc49 	bl	8008c2c <pvPortMalloc>
 800739a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00e      	beq.n	80073c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073a2:	205c      	movs	r0, #92	@ 0x5c
 80073a4:	f001 fc42 	bl	8008c2c <pvPortMalloc>
 80073a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80073b6:	e005      	b.n	80073c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073b8:	6978      	ldr	r0, [r7, #20]
 80073ba:	f001 fd05 	bl	8008dc8 <vPortFree>
 80073be:	e001      	b.n	80073c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073c0:	2300      	movs	r3, #0
 80073c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d017      	beq.n	80073fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073d2:	88fa      	ldrh	r2, [r7, #6]
 80073d4:	2300      	movs	r3, #0
 80073d6:	9303      	str	r3, [sp, #12]
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	9302      	str	r3, [sp, #8]
 80073dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073de:	9301      	str	r3, [sp, #4]
 80073e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	68b9      	ldr	r1, [r7, #8]
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 f80e 	bl	800740a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073ee:	69f8      	ldr	r0, [r7, #28]
 80073f0:	f000 f89c 	bl	800752c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073f4:	2301      	movs	r3, #1
 80073f6:	61bb      	str	r3, [r7, #24]
 80073f8:	e002      	b.n	8007400 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073fa:	f04f 33ff 	mov.w	r3, #4294967295
 80073fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007400:	69bb      	ldr	r3, [r7, #24]
	}
 8007402:	4618      	mov	r0, r3
 8007404:	3720      	adds	r7, #32
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b088      	sub	sp, #32
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	607a      	str	r2, [r7, #4]
 8007416:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	461a      	mov	r2, r3
 8007422:	21a5      	movs	r1, #165	@ 0xa5
 8007424:	f002 fe27 	bl	800a076 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007432:	3b01      	subs	r3, #1
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	f023 0307 	bic.w	r3, r3, #7
 8007440:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	f003 0307 	and.w	r3, r3, #7
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00b      	beq.n	8007464 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	617b      	str	r3, [r7, #20]
}
 800745e:	bf00      	nop
 8007460:	bf00      	nop
 8007462:	e7fd      	b.n	8007460 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d01f      	beq.n	80074aa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800746a:	2300      	movs	r3, #0
 800746c:	61fb      	str	r3, [r7, #28]
 800746e:	e012      	b.n	8007496 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	4413      	add	r3, r2
 8007476:	7819      	ldrb	r1, [r3, #0]
 8007478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	4413      	add	r3, r2
 800747e:	3334      	adds	r3, #52	@ 0x34
 8007480:	460a      	mov	r2, r1
 8007482:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	4413      	add	r3, r2
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d006      	beq.n	800749e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	3301      	adds	r3, #1
 8007494:	61fb      	str	r3, [r7, #28]
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	2b0f      	cmp	r3, #15
 800749a:	d9e9      	bls.n	8007470 <prvInitialiseNewTask+0x66>
 800749c:	e000      	b.n	80074a0 <prvInitialiseNewTask+0x96>
			{
				break;
 800749e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074a8:	e003      	b.n	80074b2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b4:	2b37      	cmp	r3, #55	@ 0x37
 80074b6:	d901      	bls.n	80074bc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074b8:	2337      	movs	r3, #55	@ 0x37
 80074ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074c6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ca:	2200      	movs	r2, #0
 80074cc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d0:	3304      	adds	r3, #4
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7ff f966 	bl	80067a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074da:	3318      	adds	r3, #24
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff f961 	bl	80067a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074f6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fa:	2200      	movs	r2, #0
 80074fc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	68f9      	ldr	r1, [r7, #12]
 800750a:	69b8      	ldr	r0, [r7, #24]
 800750c:	f001 f93e 	bl	800878c <pxPortInitialiseStack>
 8007510:	4602      	mov	r2, r0
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800751c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800751e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007522:	bf00      	nop
 8007524:	3720      	adds	r7, #32
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
	...

0800752c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007534:	f001 fa58 	bl	80089e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007538:	4b2d      	ldr	r3, [pc, #180]	@ (80075f0 <prvAddNewTaskToReadyList+0xc4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3301      	adds	r3, #1
 800753e:	4a2c      	ldr	r2, [pc, #176]	@ (80075f0 <prvAddNewTaskToReadyList+0xc4>)
 8007540:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007542:	4b2c      	ldr	r3, [pc, #176]	@ (80075f4 <prvAddNewTaskToReadyList+0xc8>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d109      	bne.n	800755e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800754a:	4a2a      	ldr	r2, [pc, #168]	@ (80075f4 <prvAddNewTaskToReadyList+0xc8>)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007550:	4b27      	ldr	r3, [pc, #156]	@ (80075f0 <prvAddNewTaskToReadyList+0xc4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d110      	bne.n	800757a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007558:	f000 fc1e 	bl	8007d98 <prvInitialiseTaskLists>
 800755c:	e00d      	b.n	800757a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800755e:	4b26      	ldr	r3, [pc, #152]	@ (80075f8 <prvAddNewTaskToReadyList+0xcc>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d109      	bne.n	800757a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007566:	4b23      	ldr	r3, [pc, #140]	@ (80075f4 <prvAddNewTaskToReadyList+0xc8>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007570:	429a      	cmp	r2, r3
 8007572:	d802      	bhi.n	800757a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007574:	4a1f      	ldr	r2, [pc, #124]	@ (80075f4 <prvAddNewTaskToReadyList+0xc8>)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800757a:	4b20      	ldr	r3, [pc, #128]	@ (80075fc <prvAddNewTaskToReadyList+0xd0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3301      	adds	r3, #1
 8007580:	4a1e      	ldr	r2, [pc, #120]	@ (80075fc <prvAddNewTaskToReadyList+0xd0>)
 8007582:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007584:	4b1d      	ldr	r3, [pc, #116]	@ (80075fc <prvAddNewTaskToReadyList+0xd0>)
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007590:	4b1b      	ldr	r3, [pc, #108]	@ (8007600 <prvAddNewTaskToReadyList+0xd4>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	429a      	cmp	r2, r3
 8007596:	d903      	bls.n	80075a0 <prvAddNewTaskToReadyList+0x74>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759c:	4a18      	ldr	r2, [pc, #96]	@ (8007600 <prvAddNewTaskToReadyList+0xd4>)
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a4:	4613      	mov	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4a15      	ldr	r2, [pc, #84]	@ (8007604 <prvAddNewTaskToReadyList+0xd8>)
 80075ae:	441a      	add	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3304      	adds	r3, #4
 80075b4:	4619      	mov	r1, r3
 80075b6:	4610      	mov	r0, r2
 80075b8:	f7ff f901 	bl	80067be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075bc:	f001 fa46 	bl	8008a4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075c0:	4b0d      	ldr	r3, [pc, #52]	@ (80075f8 <prvAddNewTaskToReadyList+0xcc>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00e      	beq.n	80075e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075c8:	4b0a      	ldr	r3, [pc, #40]	@ (80075f4 <prvAddNewTaskToReadyList+0xc8>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d207      	bcs.n	80075e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007608 <prvAddNewTaskToReadyList+0xdc>)
 80075d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	200013e8 	.word	0x200013e8
 80075f4:	20000f14 	.word	0x20000f14
 80075f8:	200013f4 	.word	0x200013f4
 80075fc:	20001404 	.word	0x20001404
 8007600:	200013f0 	.word	0x200013f0
 8007604:	20000f18 	.word	0x20000f18
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d018      	beq.n	8007650 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800761e:	4b14      	ldr	r3, [pc, #80]	@ (8007670 <vTaskDelay+0x64>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00b      	beq.n	800763e <vTaskDelay+0x32>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	60bb      	str	r3, [r7, #8]
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	e7fd      	b.n	800763a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800763e:	f000 f883 	bl	8007748 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007642:	2100      	movs	r1, #0
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fcf3 	bl	8008030 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800764a:	f000 f88b 	bl	8007764 <xTaskResumeAll>
 800764e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d107      	bne.n	8007666 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007656:	4b07      	ldr	r3, [pc, #28]	@ (8007674 <vTaskDelay+0x68>)
 8007658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007666:	bf00      	nop
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20001410 	.word	0x20001410
 8007674:	e000ed04 	.word	0xe000ed04

08007678 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08a      	sub	sp, #40	@ 0x28
 800767c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800767e:	2300      	movs	r3, #0
 8007680:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007682:	2300      	movs	r3, #0
 8007684:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007686:	463a      	mov	r2, r7
 8007688:	1d39      	adds	r1, r7, #4
 800768a:	f107 0308 	add.w	r3, r7, #8
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff f834 	bl	80066fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	9202      	str	r2, [sp, #8]
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	2300      	movs	r3, #0
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	2300      	movs	r3, #0
 80076a4:	460a      	mov	r2, r1
 80076a6:	4922      	ldr	r1, [pc, #136]	@ (8007730 <vTaskStartScheduler+0xb8>)
 80076a8:	4822      	ldr	r0, [pc, #136]	@ (8007734 <vTaskStartScheduler+0xbc>)
 80076aa:	f7ff fe09 	bl	80072c0 <xTaskCreateStatic>
 80076ae:	4603      	mov	r3, r0
 80076b0:	4a21      	ldr	r2, [pc, #132]	@ (8007738 <vTaskStartScheduler+0xc0>)
 80076b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076b4:	4b20      	ldr	r3, [pc, #128]	@ (8007738 <vTaskStartScheduler+0xc0>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076bc:	2301      	movs	r3, #1
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	e001      	b.n	80076c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d102      	bne.n	80076d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076cc:	f000 fd04 	bl	80080d8 <xTimerCreateTimerTask>
 80076d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d116      	bne.n	8007706 <vTaskStartScheduler+0x8e>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	613b      	str	r3, [r7, #16]
}
 80076ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076ec:	4b13      	ldr	r3, [pc, #76]	@ (800773c <vTaskStartScheduler+0xc4>)
 80076ee:	f04f 32ff 	mov.w	r2, #4294967295
 80076f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076f4:	4b12      	ldr	r3, [pc, #72]	@ (8007740 <vTaskStartScheduler+0xc8>)
 80076f6:	2201      	movs	r2, #1
 80076f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076fa:	4b12      	ldr	r3, [pc, #72]	@ (8007744 <vTaskStartScheduler+0xcc>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007700:	f001 f8ce 	bl	80088a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007704:	e00f      	b.n	8007726 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770c:	d10b      	bne.n	8007726 <vTaskStartScheduler+0xae>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	60fb      	str	r3, [r7, #12]
}
 8007720:	bf00      	nop
 8007722:	bf00      	nop
 8007724:	e7fd      	b.n	8007722 <vTaskStartScheduler+0xaa>
}
 8007726:	bf00      	nop
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	0800c360 	.word	0x0800c360
 8007734:	08007d69 	.word	0x08007d69
 8007738:	2000140c 	.word	0x2000140c
 800773c:	20001408 	.word	0x20001408
 8007740:	200013f4 	.word	0x200013f4
 8007744:	200013ec 	.word	0x200013ec

08007748 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800774c:	4b04      	ldr	r3, [pc, #16]	@ (8007760 <vTaskSuspendAll+0x18>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3301      	adds	r3, #1
 8007752:	4a03      	ldr	r2, [pc, #12]	@ (8007760 <vTaskSuspendAll+0x18>)
 8007754:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007756:	bf00      	nop
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	20001410 	.word	0x20001410

08007764 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800776e:	2300      	movs	r3, #0
 8007770:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007772:	4b42      	ldr	r3, [pc, #264]	@ (800787c <xTaskResumeAll+0x118>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10b      	bne.n	8007792 <xTaskResumeAll+0x2e>
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	603b      	str	r3, [r7, #0]
}
 800778c:	bf00      	nop
 800778e:	bf00      	nop
 8007790:	e7fd      	b.n	800778e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007792:	f001 f929 	bl	80089e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007796:	4b39      	ldr	r3, [pc, #228]	@ (800787c <xTaskResumeAll+0x118>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3b01      	subs	r3, #1
 800779c:	4a37      	ldr	r2, [pc, #220]	@ (800787c <xTaskResumeAll+0x118>)
 800779e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077a0:	4b36      	ldr	r3, [pc, #216]	@ (800787c <xTaskResumeAll+0x118>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d162      	bne.n	800786e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077a8:	4b35      	ldr	r3, [pc, #212]	@ (8007880 <xTaskResumeAll+0x11c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d05e      	beq.n	800786e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077b0:	e02f      	b.n	8007812 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077b2:	4b34      	ldr	r3, [pc, #208]	@ (8007884 <xTaskResumeAll+0x120>)
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3318      	adds	r3, #24
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff f85a 	bl	8006878 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3304      	adds	r3, #4
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7ff f855 	bl	8006878 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d2:	4b2d      	ldr	r3, [pc, #180]	@ (8007888 <xTaskResumeAll+0x124>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d903      	bls.n	80077e2 <xTaskResumeAll+0x7e>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077de:	4a2a      	ldr	r2, [pc, #168]	@ (8007888 <xTaskResumeAll+0x124>)
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4a27      	ldr	r2, [pc, #156]	@ (800788c <xTaskResumeAll+0x128>)
 80077f0:	441a      	add	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3304      	adds	r3, #4
 80077f6:	4619      	mov	r1, r3
 80077f8:	4610      	mov	r0, r2
 80077fa:	f7fe ffe0 	bl	80067be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007802:	4b23      	ldr	r3, [pc, #140]	@ (8007890 <xTaskResumeAll+0x12c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007808:	429a      	cmp	r2, r3
 800780a:	d302      	bcc.n	8007812 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800780c:	4b21      	ldr	r3, [pc, #132]	@ (8007894 <xTaskResumeAll+0x130>)
 800780e:	2201      	movs	r2, #1
 8007810:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007812:	4b1c      	ldr	r3, [pc, #112]	@ (8007884 <xTaskResumeAll+0x120>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1cb      	bne.n	80077b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007820:	f000 fb58 	bl	8007ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007824:	4b1c      	ldr	r3, [pc, #112]	@ (8007898 <xTaskResumeAll+0x134>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d010      	beq.n	8007852 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007830:	f000 f846 	bl	80078c0 <xTaskIncrementTick>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800783a:	4b16      	ldr	r3, [pc, #88]	@ (8007894 <xTaskResumeAll+0x130>)
 800783c:	2201      	movs	r2, #1
 800783e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3b01      	subs	r3, #1
 8007844:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1f1      	bne.n	8007830 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800784c:	4b12      	ldr	r3, [pc, #72]	@ (8007898 <xTaskResumeAll+0x134>)
 800784e:	2200      	movs	r2, #0
 8007850:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007852:	4b10      	ldr	r3, [pc, #64]	@ (8007894 <xTaskResumeAll+0x130>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d009      	beq.n	800786e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800785a:	2301      	movs	r3, #1
 800785c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800785e:	4b0f      	ldr	r3, [pc, #60]	@ (800789c <xTaskResumeAll+0x138>)
 8007860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800786e:	f001 f8ed 	bl	8008a4c <vPortExitCritical>

	return xAlreadyYielded;
 8007872:	68bb      	ldr	r3, [r7, #8]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	20001410 	.word	0x20001410
 8007880:	200013e8 	.word	0x200013e8
 8007884:	200013a8 	.word	0x200013a8
 8007888:	200013f0 	.word	0x200013f0
 800788c:	20000f18 	.word	0x20000f18
 8007890:	20000f14 	.word	0x20000f14
 8007894:	200013fc 	.word	0x200013fc
 8007898:	200013f8 	.word	0x200013f8
 800789c:	e000ed04 	.word	0xe000ed04

080078a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078a6:	4b05      	ldr	r3, [pc, #20]	@ (80078bc <xTaskGetTickCount+0x1c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078ac:	687b      	ldr	r3, [r7, #4]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	200013ec 	.word	0x200013ec

080078c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078c6:	2300      	movs	r3, #0
 80078c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ca:	4b4f      	ldr	r3, [pc, #316]	@ (8007a08 <xTaskIncrementTick+0x148>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f040 8090 	bne.w	80079f4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078d4:	4b4d      	ldr	r3, [pc, #308]	@ (8007a0c <xTaskIncrementTick+0x14c>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3301      	adds	r3, #1
 80078da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078dc:	4a4b      	ldr	r2, [pc, #300]	@ (8007a0c <xTaskIncrementTick+0x14c>)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d121      	bne.n	800792c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80078e8:	4b49      	ldr	r3, [pc, #292]	@ (8007a10 <xTaskIncrementTick+0x150>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00b      	beq.n	800790a <xTaskIncrementTick+0x4a>
	__asm volatile
 80078f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	603b      	str	r3, [r7, #0]
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop
 8007908:	e7fd      	b.n	8007906 <xTaskIncrementTick+0x46>
 800790a:	4b41      	ldr	r3, [pc, #260]	@ (8007a10 <xTaskIncrementTick+0x150>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	4b40      	ldr	r3, [pc, #256]	@ (8007a14 <xTaskIncrementTick+0x154>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a3e      	ldr	r2, [pc, #248]	@ (8007a10 <xTaskIncrementTick+0x150>)
 8007916:	6013      	str	r3, [r2, #0]
 8007918:	4a3e      	ldr	r2, [pc, #248]	@ (8007a14 <xTaskIncrementTick+0x154>)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6013      	str	r3, [r2, #0]
 800791e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a18 <xTaskIncrementTick+0x158>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3301      	adds	r3, #1
 8007924:	4a3c      	ldr	r2, [pc, #240]	@ (8007a18 <xTaskIncrementTick+0x158>)
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	f000 fad4 	bl	8007ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800792c:	4b3b      	ldr	r3, [pc, #236]	@ (8007a1c <xTaskIncrementTick+0x15c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	429a      	cmp	r2, r3
 8007934:	d349      	bcc.n	80079ca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007936:	4b36      	ldr	r3, [pc, #216]	@ (8007a10 <xTaskIncrementTick+0x150>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d104      	bne.n	800794a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007940:	4b36      	ldr	r3, [pc, #216]	@ (8007a1c <xTaskIncrementTick+0x15c>)
 8007942:	f04f 32ff 	mov.w	r2, #4294967295
 8007946:	601a      	str	r2, [r3, #0]
					break;
 8007948:	e03f      	b.n	80079ca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800794a:	4b31      	ldr	r3, [pc, #196]	@ (8007a10 <xTaskIncrementTick+0x150>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	429a      	cmp	r2, r3
 8007960:	d203      	bcs.n	800796a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007962:	4a2e      	ldr	r2, [pc, #184]	@ (8007a1c <xTaskIncrementTick+0x15c>)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007968:	e02f      	b.n	80079ca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	3304      	adds	r3, #4
 800796e:	4618      	mov	r0, r3
 8007970:	f7fe ff82 	bl	8006878 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007978:	2b00      	cmp	r3, #0
 800797a:	d004      	beq.n	8007986 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	3318      	adds	r3, #24
 8007980:	4618      	mov	r0, r3
 8007982:	f7fe ff79 	bl	8006878 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800798a:	4b25      	ldr	r3, [pc, #148]	@ (8007a20 <xTaskIncrementTick+0x160>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	429a      	cmp	r2, r3
 8007990:	d903      	bls.n	800799a <xTaskIncrementTick+0xda>
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007996:	4a22      	ldr	r2, [pc, #136]	@ (8007a20 <xTaskIncrementTick+0x160>)
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799e:	4613      	mov	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4a1f      	ldr	r2, [pc, #124]	@ (8007a24 <xTaskIncrementTick+0x164>)
 80079a8:	441a      	add	r2, r3
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4619      	mov	r1, r3
 80079b0:	4610      	mov	r0, r2
 80079b2:	f7fe ff04 	bl	80067be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007a28 <xTaskIncrementTick+0x168>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d3b8      	bcc.n	8007936 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80079c4:	2301      	movs	r3, #1
 80079c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079c8:	e7b5      	b.n	8007936 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079ca:	4b17      	ldr	r3, [pc, #92]	@ (8007a28 <xTaskIncrementTick+0x168>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079d0:	4914      	ldr	r1, [pc, #80]	@ (8007a24 <xTaskIncrementTick+0x164>)
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	440b      	add	r3, r1
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d901      	bls.n	80079e6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80079e2:	2301      	movs	r3, #1
 80079e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079e6:	4b11      	ldr	r3, [pc, #68]	@ (8007a2c <xTaskIncrementTick+0x16c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d007      	beq.n	80079fe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80079ee:	2301      	movs	r3, #1
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	e004      	b.n	80079fe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80079f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007a30 <xTaskIncrementTick+0x170>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3301      	adds	r3, #1
 80079fa:	4a0d      	ldr	r2, [pc, #52]	@ (8007a30 <xTaskIncrementTick+0x170>)
 80079fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80079fe:	697b      	ldr	r3, [r7, #20]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	20001410 	.word	0x20001410
 8007a0c:	200013ec 	.word	0x200013ec
 8007a10:	200013a0 	.word	0x200013a0
 8007a14:	200013a4 	.word	0x200013a4
 8007a18:	20001400 	.word	0x20001400
 8007a1c:	20001408 	.word	0x20001408
 8007a20:	200013f0 	.word	0x200013f0
 8007a24:	20000f18 	.word	0x20000f18
 8007a28:	20000f14 	.word	0x20000f14
 8007a2c:	200013fc 	.word	0x200013fc
 8007a30:	200013f8 	.word	0x200013f8

08007a34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a3a:	4b28      	ldr	r3, [pc, #160]	@ (8007adc <vTaskSwitchContext+0xa8>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a42:	4b27      	ldr	r3, [pc, #156]	@ (8007ae0 <vTaskSwitchContext+0xac>)
 8007a44:	2201      	movs	r2, #1
 8007a46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a48:	e042      	b.n	8007ad0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007a4a:	4b25      	ldr	r3, [pc, #148]	@ (8007ae0 <vTaskSwitchContext+0xac>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a50:	4b24      	ldr	r3, [pc, #144]	@ (8007ae4 <vTaskSwitchContext+0xb0>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	e011      	b.n	8007a7c <vTaskSwitchContext+0x48>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10b      	bne.n	8007a76 <vTaskSwitchContext+0x42>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	607b      	str	r3, [r7, #4]
}
 8007a70:	bf00      	nop
 8007a72:	bf00      	nop
 8007a74:	e7fd      	b.n	8007a72 <vTaskSwitchContext+0x3e>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	491a      	ldr	r1, [pc, #104]	@ (8007ae8 <vTaskSwitchContext+0xb4>)
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4613      	mov	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	440b      	add	r3, r1
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0e3      	beq.n	8007a58 <vTaskSwitchContext+0x24>
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4a13      	ldr	r2, [pc, #76]	@ (8007ae8 <vTaskSwitchContext+0xb4>)
 8007a9c:	4413      	add	r3, r2
 8007a9e:	60bb      	str	r3, [r7, #8]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	605a      	str	r2, [r3, #4]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	3308      	adds	r3, #8
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d104      	bne.n	8007ac0 <vTaskSwitchContext+0x8c>
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	605a      	str	r2, [r3, #4]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	4a09      	ldr	r2, [pc, #36]	@ (8007aec <vTaskSwitchContext+0xb8>)
 8007ac8:	6013      	str	r3, [r2, #0]
 8007aca:	4a06      	ldr	r2, [pc, #24]	@ (8007ae4 <vTaskSwitchContext+0xb0>)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6013      	str	r3, [r2, #0]
}
 8007ad0:	bf00      	nop
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	20001410 	.word	0x20001410
 8007ae0:	200013fc 	.word	0x200013fc
 8007ae4:	200013f0 	.word	0x200013f0
 8007ae8:	20000f18 	.word	0x20000f18
 8007aec:	20000f14 	.word	0x20000f14

08007af0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10b      	bne.n	8007b18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	60fb      	str	r3, [r7, #12]
}
 8007b12:	bf00      	nop
 8007b14:	bf00      	nop
 8007b16:	e7fd      	b.n	8007b14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b18:	4b07      	ldr	r3, [pc, #28]	@ (8007b38 <vTaskPlaceOnEventList+0x48>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3318      	adds	r3, #24
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7fe fe70 	bl	8006806 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b26:	2101      	movs	r1, #1
 8007b28:	6838      	ldr	r0, [r7, #0]
 8007b2a:	f000 fa81 	bl	8008030 <prvAddCurrentTaskToDelayedList>
}
 8007b2e:	bf00      	nop
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20000f14 	.word	0x20000f14

08007b3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10b      	bne.n	8007b66 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	617b      	str	r3, [r7, #20]
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	e7fd      	b.n	8007b62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b66:	4b0a      	ldr	r3, [pc, #40]	@ (8007b90 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3318      	adds	r3, #24
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f7fe fe25 	bl	80067be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b7e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b80:	6879      	ldr	r1, [r7, #4]
 8007b82:	68b8      	ldr	r0, [r7, #8]
 8007b84:	f000 fa54 	bl	8008030 <prvAddCurrentTaskToDelayedList>
	}
 8007b88:	bf00      	nop
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20000f14 	.word	0x20000f14

08007b94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10b      	bne.n	8007bc2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	60fb      	str	r3, [r7, #12]
}
 8007bbc:	bf00      	nop
 8007bbe:	bf00      	nop
 8007bc0:	e7fd      	b.n	8007bbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	3318      	adds	r3, #24
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe fe56 	bl	8006878 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8007c44 <xTaskRemoveFromEventList+0xb0>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d11d      	bne.n	8007c10 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe fe4d 	bl	8006878 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be2:	4b19      	ldr	r3, [pc, #100]	@ (8007c48 <xTaskRemoveFromEventList+0xb4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d903      	bls.n	8007bf2 <xTaskRemoveFromEventList+0x5e>
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bee:	4a16      	ldr	r2, [pc, #88]	@ (8007c48 <xTaskRemoveFromEventList+0xb4>)
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4a13      	ldr	r2, [pc, #76]	@ (8007c4c <xTaskRemoveFromEventList+0xb8>)
 8007c00:	441a      	add	r2, r3
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	3304      	adds	r3, #4
 8007c06:	4619      	mov	r1, r3
 8007c08:	4610      	mov	r0, r2
 8007c0a:	f7fe fdd8 	bl	80067be <vListInsertEnd>
 8007c0e:	e005      	b.n	8007c1c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	3318      	adds	r3, #24
 8007c14:	4619      	mov	r1, r3
 8007c16:	480e      	ldr	r0, [pc, #56]	@ (8007c50 <xTaskRemoveFromEventList+0xbc>)
 8007c18:	f7fe fdd1 	bl	80067be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c20:	4b0c      	ldr	r3, [pc, #48]	@ (8007c54 <xTaskRemoveFromEventList+0xc0>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d905      	bls.n	8007c36 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c58 <xTaskRemoveFromEventList+0xc4>)
 8007c30:	2201      	movs	r2, #1
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	e001      	b.n	8007c3a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007c36:	2300      	movs	r3, #0
 8007c38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c3a:	697b      	ldr	r3, [r7, #20]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	20001410 	.word	0x20001410
 8007c48:	200013f0 	.word	0x200013f0
 8007c4c:	20000f18 	.word	0x20000f18
 8007c50:	200013a8 	.word	0x200013a8
 8007c54:	20000f14 	.word	0x20000f14
 8007c58:	200013fc 	.word	0x200013fc

08007c5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c64:	4b06      	ldr	r3, [pc, #24]	@ (8007c80 <vTaskInternalSetTimeOutState+0x24>)
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c6c:	4b05      	ldr	r3, [pc, #20]	@ (8007c84 <vTaskInternalSetTimeOutState+0x28>)
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	605a      	str	r2, [r3, #4]
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	20001400 	.word	0x20001400
 8007c84:	200013ec 	.word	0x200013ec

08007c88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10b      	bne.n	8007cb0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	613b      	str	r3, [r7, #16]
}
 8007caa:	bf00      	nop
 8007cac:	bf00      	nop
 8007cae:	e7fd      	b.n	8007cac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10b      	bne.n	8007cce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	60fb      	str	r3, [r7, #12]
}
 8007cc8:	bf00      	nop
 8007cca:	bf00      	nop
 8007ccc:	e7fd      	b.n	8007cca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007cce:	f000 fe8b 	bl	80089e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8007d48 <xTaskCheckForTimeOut+0xc0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cea:	d102      	bne.n	8007cf2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61fb      	str	r3, [r7, #28]
 8007cf0:	e023      	b.n	8007d3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	4b15      	ldr	r3, [pc, #84]	@ (8007d4c <xTaskCheckForTimeOut+0xc4>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d007      	beq.n	8007d0e <xTaskCheckForTimeOut+0x86>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d302      	bcc.n	8007d0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	61fb      	str	r3, [r7, #28]
 8007d0c:	e015      	b.n	8007d3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d20b      	bcs.n	8007d30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	1ad2      	subs	r2, r2, r3
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7ff ff99 	bl	8007c5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	61fb      	str	r3, [r7, #28]
 8007d2e:	e004      	b.n	8007d3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2200      	movs	r2, #0
 8007d34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d36:	2301      	movs	r3, #1
 8007d38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d3a:	f000 fe87 	bl	8008a4c <vPortExitCritical>

	return xReturn;
 8007d3e:	69fb      	ldr	r3, [r7, #28]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3720      	adds	r7, #32
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	200013ec 	.word	0x200013ec
 8007d4c:	20001400 	.word	0x20001400

08007d50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d54:	4b03      	ldr	r3, [pc, #12]	@ (8007d64 <vTaskMissedYield+0x14>)
 8007d56:	2201      	movs	r2, #1
 8007d58:	601a      	str	r2, [r3, #0]
}
 8007d5a:	bf00      	nop
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	200013fc 	.word	0x200013fc

08007d68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d70:	f000 f852 	bl	8007e18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d74:	4b06      	ldr	r3, [pc, #24]	@ (8007d90 <prvIdleTask+0x28>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d9f9      	bls.n	8007d70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d7c:	4b05      	ldr	r3, [pc, #20]	@ (8007d94 <prvIdleTask+0x2c>)
 8007d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d8c:	e7f0      	b.n	8007d70 <prvIdleTask+0x8>
 8007d8e:	bf00      	nop
 8007d90:	20000f18 	.word	0x20000f18
 8007d94:	e000ed04 	.word	0xe000ed04

08007d98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d9e:	2300      	movs	r3, #0
 8007da0:	607b      	str	r3, [r7, #4]
 8007da2:	e00c      	b.n	8007dbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	4613      	mov	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4a12      	ldr	r2, [pc, #72]	@ (8007df8 <prvInitialiseTaskLists+0x60>)
 8007db0:	4413      	add	r3, r2
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fe fcd6 	bl	8006764 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	607b      	str	r3, [r7, #4]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2b37      	cmp	r3, #55	@ 0x37
 8007dc2:	d9ef      	bls.n	8007da4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007dc4:	480d      	ldr	r0, [pc, #52]	@ (8007dfc <prvInitialiseTaskLists+0x64>)
 8007dc6:	f7fe fccd 	bl	8006764 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dca:	480d      	ldr	r0, [pc, #52]	@ (8007e00 <prvInitialiseTaskLists+0x68>)
 8007dcc:	f7fe fcca 	bl	8006764 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007dd0:	480c      	ldr	r0, [pc, #48]	@ (8007e04 <prvInitialiseTaskLists+0x6c>)
 8007dd2:	f7fe fcc7 	bl	8006764 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dd6:	480c      	ldr	r0, [pc, #48]	@ (8007e08 <prvInitialiseTaskLists+0x70>)
 8007dd8:	f7fe fcc4 	bl	8006764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ddc:	480b      	ldr	r0, [pc, #44]	@ (8007e0c <prvInitialiseTaskLists+0x74>)
 8007dde:	f7fe fcc1 	bl	8006764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007de2:	4b0b      	ldr	r3, [pc, #44]	@ (8007e10 <prvInitialiseTaskLists+0x78>)
 8007de4:	4a05      	ldr	r2, [pc, #20]	@ (8007dfc <prvInitialiseTaskLists+0x64>)
 8007de6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007de8:	4b0a      	ldr	r3, [pc, #40]	@ (8007e14 <prvInitialiseTaskLists+0x7c>)
 8007dea:	4a05      	ldr	r2, [pc, #20]	@ (8007e00 <prvInitialiseTaskLists+0x68>)
 8007dec:	601a      	str	r2, [r3, #0]
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20000f18 	.word	0x20000f18
 8007dfc:	20001378 	.word	0x20001378
 8007e00:	2000138c 	.word	0x2000138c
 8007e04:	200013a8 	.word	0x200013a8
 8007e08:	200013bc 	.word	0x200013bc
 8007e0c:	200013d4 	.word	0x200013d4
 8007e10:	200013a0 	.word	0x200013a0
 8007e14:	200013a4 	.word	0x200013a4

08007e18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e1e:	e019      	b.n	8007e54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e20:	f000 fde2 	bl	80089e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e24:	4b10      	ldr	r3, [pc, #64]	@ (8007e68 <prvCheckTasksWaitingTermination+0x50>)
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fe fd21 	bl	8006878 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e36:	4b0d      	ldr	r3, [pc, #52]	@ (8007e6c <prvCheckTasksWaitingTermination+0x54>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8007e6c <prvCheckTasksWaitingTermination+0x54>)
 8007e3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e40:	4b0b      	ldr	r3, [pc, #44]	@ (8007e70 <prvCheckTasksWaitingTermination+0x58>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	4a0a      	ldr	r2, [pc, #40]	@ (8007e70 <prvCheckTasksWaitingTermination+0x58>)
 8007e48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e4a:	f000 fdff 	bl	8008a4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f810 	bl	8007e74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e54:	4b06      	ldr	r3, [pc, #24]	@ (8007e70 <prvCheckTasksWaitingTermination+0x58>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e1      	bne.n	8007e20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e5c:	bf00      	nop
 8007e5e:	bf00      	nop
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	200013bc 	.word	0x200013bc
 8007e6c:	200013e8 	.word	0x200013e8
 8007e70:	200013d0 	.word	0x200013d0

08007e74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d108      	bne.n	8007e98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 ff9c 	bl	8008dc8 <vPortFree>
				vPortFree( pxTCB );
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 ff99 	bl	8008dc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e96:	e019      	b.n	8007ecc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d103      	bne.n	8007eaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 ff90 	bl	8008dc8 <vPortFree>
	}
 8007ea8:	e010      	b.n	8007ecc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d00b      	beq.n	8007ecc <prvDeleteTCB+0x58>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	60fb      	str	r3, [r7, #12]
}
 8007ec6:	bf00      	nop
 8007ec8:	bf00      	nop
 8007eca:	e7fd      	b.n	8007ec8 <prvDeleteTCB+0x54>
	}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eda:	4b0c      	ldr	r3, [pc, #48]	@ (8007f0c <prvResetNextTaskUnblockTime+0x38>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d104      	bne.n	8007eee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8007f10 <prvResetNextTaskUnblockTime+0x3c>)
 8007ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007eec:	e008      	b.n	8007f00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eee:	4b07      	ldr	r3, [pc, #28]	@ (8007f0c <prvResetNextTaskUnblockTime+0x38>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	4a04      	ldr	r2, [pc, #16]	@ (8007f10 <prvResetNextTaskUnblockTime+0x3c>)
 8007efe:	6013      	str	r3, [r2, #0]
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	200013a0 	.word	0x200013a0
 8007f10:	20001408 	.word	0x20001408

08007f14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f48 <xTaskGetSchedulerState+0x34>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d102      	bne.n	8007f28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f22:	2301      	movs	r3, #1
 8007f24:	607b      	str	r3, [r7, #4]
 8007f26:	e008      	b.n	8007f3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f28:	4b08      	ldr	r3, [pc, #32]	@ (8007f4c <xTaskGetSchedulerState+0x38>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d102      	bne.n	8007f36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f30:	2302      	movs	r3, #2
 8007f32:	607b      	str	r3, [r7, #4]
 8007f34:	e001      	b.n	8007f3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f36:	2300      	movs	r3, #0
 8007f38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f3a:	687b      	ldr	r3, [r7, #4]
	}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	200013f4 	.word	0x200013f4
 8007f4c:	20001410 	.word	0x20001410

08007f50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d058      	beq.n	8008018 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f66:	4b2f      	ldr	r3, [pc, #188]	@ (8008024 <xTaskPriorityDisinherit+0xd4>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d00b      	beq.n	8007f88 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	60fb      	str	r3, [r7, #12]
}
 8007f82:	bf00      	nop
 8007f84:	bf00      	nop
 8007f86:	e7fd      	b.n	8007f84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10b      	bne.n	8007fa8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	60bb      	str	r3, [r7, #8]
}
 8007fa2:	bf00      	nop
 8007fa4:	bf00      	nop
 8007fa6:	e7fd      	b.n	8007fa4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fac:	1e5a      	subs	r2, r3, #1
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d02c      	beq.n	8008018 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d128      	bne.n	8008018 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	3304      	adds	r3, #4
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe fc54 	bl	8006878 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fdc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8008028 <xTaskPriorityDisinherit+0xd8>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d903      	bls.n	8007ff8 <xTaskPriorityDisinherit+0xa8>
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8008028 <xTaskPriorityDisinherit+0xd8>)
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4a09      	ldr	r2, [pc, #36]	@ (800802c <xTaskPriorityDisinherit+0xdc>)
 8008006:	441a      	add	r2, r3
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	3304      	adds	r3, #4
 800800c:	4619      	mov	r1, r3
 800800e:	4610      	mov	r0, r2
 8008010:	f7fe fbd5 	bl	80067be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008014:	2301      	movs	r3, #1
 8008016:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008018:	697b      	ldr	r3, [r7, #20]
	}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	20000f14 	.word	0x20000f14
 8008028:	200013f0 	.word	0x200013f0
 800802c:	20000f18 	.word	0x20000f18

08008030 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800803a:	4b21      	ldr	r3, [pc, #132]	@ (80080c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008040:	4b20      	ldr	r3, [pc, #128]	@ (80080c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3304      	adds	r3, #4
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe fc16 	bl	8006878 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008052:	d10a      	bne.n	800806a <prvAddCurrentTaskToDelayedList+0x3a>
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d007      	beq.n	800806a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800805a:	4b1a      	ldr	r3, [pc, #104]	@ (80080c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3304      	adds	r3, #4
 8008060:	4619      	mov	r1, r3
 8008062:	4819      	ldr	r0, [pc, #100]	@ (80080c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008064:	f7fe fbab 	bl	80067be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008068:	e026      	b.n	80080b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4413      	add	r3, r2
 8008070:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008072:	4b14      	ldr	r3, [pc, #80]	@ (80080c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	429a      	cmp	r2, r3
 8008080:	d209      	bcs.n	8008096 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008082:	4b12      	ldr	r3, [pc, #72]	@ (80080cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	4b0f      	ldr	r3, [pc, #60]	@ (80080c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3304      	adds	r3, #4
 800808c:	4619      	mov	r1, r3
 800808e:	4610      	mov	r0, r2
 8008090:	f7fe fbb9 	bl	8006806 <vListInsert>
}
 8008094:	e010      	b.n	80080b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008096:	4b0e      	ldr	r3, [pc, #56]	@ (80080d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	4b0a      	ldr	r3, [pc, #40]	@ (80080c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3304      	adds	r3, #4
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f7fe fbaf 	bl	8006806 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080a8:	4b0a      	ldr	r3, [pc, #40]	@ (80080d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d202      	bcs.n	80080b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80080b2:	4a08      	ldr	r2, [pc, #32]	@ (80080d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	6013      	str	r3, [r2, #0]
}
 80080b8:	bf00      	nop
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	200013ec 	.word	0x200013ec
 80080c4:	20000f14 	.word	0x20000f14
 80080c8:	200013d4 	.word	0x200013d4
 80080cc:	200013a4 	.word	0x200013a4
 80080d0:	200013a0 	.word	0x200013a0
 80080d4:	20001408 	.word	0x20001408

080080d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08a      	sub	sp, #40	@ 0x28
 80080dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80080de:	2300      	movs	r3, #0
 80080e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80080e2:	f000 fb13 	bl	800870c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80080e6:	4b1d      	ldr	r3, [pc, #116]	@ (800815c <xTimerCreateTimerTask+0x84>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d021      	beq.n	8008132 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80080f6:	1d3a      	adds	r2, r7, #4
 80080f8:	f107 0108 	add.w	r1, r7, #8
 80080fc:	f107 030c 	add.w	r3, r7, #12
 8008100:	4618      	mov	r0, r3
 8008102:	f7fe fb15 	bl	8006730 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	9202      	str	r2, [sp, #8]
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	2302      	movs	r3, #2
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	2300      	movs	r3, #0
 8008116:	460a      	mov	r2, r1
 8008118:	4911      	ldr	r1, [pc, #68]	@ (8008160 <xTimerCreateTimerTask+0x88>)
 800811a:	4812      	ldr	r0, [pc, #72]	@ (8008164 <xTimerCreateTimerTask+0x8c>)
 800811c:	f7ff f8d0 	bl	80072c0 <xTaskCreateStatic>
 8008120:	4603      	mov	r3, r0
 8008122:	4a11      	ldr	r2, [pc, #68]	@ (8008168 <xTimerCreateTimerTask+0x90>)
 8008124:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008126:	4b10      	ldr	r3, [pc, #64]	@ (8008168 <xTimerCreateTimerTask+0x90>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800812e:	2301      	movs	r3, #1
 8008130:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10b      	bne.n	8008150 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	613b      	str	r3, [r7, #16]
}
 800814a:	bf00      	nop
 800814c:	bf00      	nop
 800814e:	e7fd      	b.n	800814c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008150:	697b      	ldr	r3, [r7, #20]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20001444 	.word	0x20001444
 8008160:	0800c368 	.word	0x0800c368
 8008164:	080082a5 	.word	0x080082a5
 8008168:	20001448 	.word	0x20001448

0800816c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08a      	sub	sp, #40	@ 0x28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800817a:	2300      	movs	r3, #0
 800817c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10b      	bne.n	800819c <xTimerGenericCommand+0x30>
	__asm volatile
 8008184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	623b      	str	r3, [r7, #32]
}
 8008196:	bf00      	nop
 8008198:	bf00      	nop
 800819a:	e7fd      	b.n	8008198 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800819c:	4b19      	ldr	r3, [pc, #100]	@ (8008204 <xTimerGenericCommand+0x98>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d02a      	beq.n	80081fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b05      	cmp	r3, #5
 80081b4:	dc18      	bgt.n	80081e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80081b6:	f7ff fead 	bl	8007f14 <xTaskGetSchedulerState>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d109      	bne.n	80081d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80081c0:	4b10      	ldr	r3, [pc, #64]	@ (8008204 <xTimerGenericCommand+0x98>)
 80081c2:	6818      	ldr	r0, [r3, #0]
 80081c4:	f107 0110 	add.w	r1, r7, #16
 80081c8:	2300      	movs	r3, #0
 80081ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081cc:	f7fe fc88 	bl	8006ae0 <xQueueGenericSend>
 80081d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80081d2:	e012      	b.n	80081fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80081d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008204 <xTimerGenericCommand+0x98>)
 80081d6:	6818      	ldr	r0, [r3, #0]
 80081d8:	f107 0110 	add.w	r1, r7, #16
 80081dc:	2300      	movs	r3, #0
 80081de:	2200      	movs	r2, #0
 80081e0:	f7fe fc7e 	bl	8006ae0 <xQueueGenericSend>
 80081e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80081e6:	e008      	b.n	80081fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80081e8:	4b06      	ldr	r3, [pc, #24]	@ (8008204 <xTimerGenericCommand+0x98>)
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	f107 0110 	add.w	r1, r7, #16
 80081f0:	2300      	movs	r3, #0
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	f7fe fd76 	bl	8006ce4 <xQueueGenericSendFromISR>
 80081f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80081fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3728      	adds	r7, #40	@ 0x28
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	20001444 	.word	0x20001444

08008208 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b088      	sub	sp, #32
 800820c:	af02      	add	r7, sp, #8
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008212:	4b23      	ldr	r3, [pc, #140]	@ (80082a0 <prvProcessExpiredTimer+0x98>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	3304      	adds	r3, #4
 8008220:	4618      	mov	r0, r3
 8008222:	f7fe fb29 	bl	8006878 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800822c:	f003 0304 	and.w	r3, r3, #4
 8008230:	2b00      	cmp	r3, #0
 8008232:	d023      	beq.n	800827c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	699a      	ldr	r2, [r3, #24]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	18d1      	adds	r1, r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	6978      	ldr	r0, [r7, #20]
 8008242:	f000 f8d5 	bl	80083f0 <prvInsertTimerInActiveList>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d020      	beq.n	800828e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800824c:	2300      	movs	r3, #0
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	2300      	movs	r3, #0
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	2100      	movs	r1, #0
 8008256:	6978      	ldr	r0, [r7, #20]
 8008258:	f7ff ff88 	bl	800816c <xTimerGenericCommand>
 800825c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d114      	bne.n	800828e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	60fb      	str	r3, [r7, #12]
}
 8008276:	bf00      	nop
 8008278:	bf00      	nop
 800827a:	e7fd      	b.n	8008278 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008282:	f023 0301 	bic.w	r3, r3, #1
 8008286:	b2da      	uxtb	r2, r3
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	6978      	ldr	r0, [r7, #20]
 8008294:	4798      	blx	r3
}
 8008296:	bf00      	nop
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	2000143c 	.word	0x2000143c

080082a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082ac:	f107 0308 	add.w	r3, r7, #8
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 f859 	bl	8008368 <prvGetNextExpireTime>
 80082b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	4619      	mov	r1, r3
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 f805 	bl	80082cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80082c2:	f000 f8d7 	bl	8008474 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082c6:	bf00      	nop
 80082c8:	e7f0      	b.n	80082ac <prvTimerTask+0x8>
	...

080082cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082d6:	f7ff fa37 	bl	8007748 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082da:	f107 0308 	add.w	r3, r7, #8
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 f866 	bl	80083b0 <prvSampleTimeNow>
 80082e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d130      	bne.n	800834e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <prvProcessTimerOrBlockTask+0x3c>
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d806      	bhi.n	8008308 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80082fa:	f7ff fa33 	bl	8007764 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80082fe:	68f9      	ldr	r1, [r7, #12]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7ff ff81 	bl	8008208 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008306:	e024      	b.n	8008352 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d008      	beq.n	8008320 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800830e:	4b13      	ldr	r3, [pc, #76]	@ (800835c <prvProcessTimerOrBlockTask+0x90>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d101      	bne.n	800831c <prvProcessTimerOrBlockTask+0x50>
 8008318:	2301      	movs	r3, #1
 800831a:	e000      	b.n	800831e <prvProcessTimerOrBlockTask+0x52>
 800831c:	2300      	movs	r3, #0
 800831e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008320:	4b0f      	ldr	r3, [pc, #60]	@ (8008360 <prvProcessTimerOrBlockTask+0x94>)
 8008322:	6818      	ldr	r0, [r3, #0]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	4619      	mov	r1, r3
 800832e:	f7fe ff93 	bl	8007258 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008332:	f7ff fa17 	bl	8007764 <xTaskResumeAll>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10a      	bne.n	8008352 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800833c:	4b09      	ldr	r3, [pc, #36]	@ (8008364 <prvProcessTimerOrBlockTask+0x98>)
 800833e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	f3bf 8f6f 	isb	sy
}
 800834c:	e001      	b.n	8008352 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800834e:	f7ff fa09 	bl	8007764 <xTaskResumeAll>
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20001440 	.word	0x20001440
 8008360:	20001444 	.word	0x20001444
 8008364:	e000ed04 	.word	0xe000ed04

08008368 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008370:	4b0e      	ldr	r3, [pc, #56]	@ (80083ac <prvGetNextExpireTime+0x44>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <prvGetNextExpireTime+0x16>
 800837a:	2201      	movs	r2, #1
 800837c:	e000      	b.n	8008380 <prvGetNextExpireTime+0x18>
 800837e:	2200      	movs	r2, #0
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d105      	bne.n	8008398 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800838c:	4b07      	ldr	r3, [pc, #28]	@ (80083ac <prvGetNextExpireTime+0x44>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	e001      	b.n	800839c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800839c:	68fb      	ldr	r3, [r7, #12]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	2000143c 	.word	0x2000143c

080083b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083b8:	f7ff fa72 	bl	80078a0 <xTaskGetTickCount>
 80083bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80083be:	4b0b      	ldr	r3, [pc, #44]	@ (80083ec <prvSampleTimeNow+0x3c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d205      	bcs.n	80083d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083c8:	f000 f93a 	bl	8008640 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	601a      	str	r2, [r3, #0]
 80083d2:	e002      	b.n	80083da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80083da:	4a04      	ldr	r2, [pc, #16]	@ (80083ec <prvSampleTimeNow+0x3c>)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80083e0:	68fb      	ldr	r3, [r7, #12]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	2000144c 	.word	0x2000144c

080083f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80083fe:	2300      	movs	r3, #0
 8008400:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	429a      	cmp	r2, r3
 8008414:	d812      	bhi.n	800843c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	1ad2      	subs	r2, r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	429a      	cmp	r2, r3
 8008422:	d302      	bcc.n	800842a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008424:	2301      	movs	r3, #1
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	e01b      	b.n	8008462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800842a:	4b10      	ldr	r3, [pc, #64]	@ (800846c <prvInsertTimerInActiveList+0x7c>)
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3304      	adds	r3, #4
 8008432:	4619      	mov	r1, r3
 8008434:	4610      	mov	r0, r2
 8008436:	f7fe f9e6 	bl	8006806 <vListInsert>
 800843a:	e012      	b.n	8008462 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	429a      	cmp	r2, r3
 8008442:	d206      	bcs.n	8008452 <prvInsertTimerInActiveList+0x62>
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	429a      	cmp	r2, r3
 800844a:	d302      	bcc.n	8008452 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800844c:	2301      	movs	r3, #1
 800844e:	617b      	str	r3, [r7, #20]
 8008450:	e007      	b.n	8008462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008452:	4b07      	ldr	r3, [pc, #28]	@ (8008470 <prvInsertTimerInActiveList+0x80>)
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	3304      	adds	r3, #4
 800845a:	4619      	mov	r1, r3
 800845c:	4610      	mov	r0, r2
 800845e:	f7fe f9d2 	bl	8006806 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008462:	697b      	ldr	r3, [r7, #20]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	20001440 	.word	0x20001440
 8008470:	2000143c 	.word	0x2000143c

08008474 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b08e      	sub	sp, #56	@ 0x38
 8008478:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800847a:	e0ce      	b.n	800861a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	da19      	bge.n	80084b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008482:	1d3b      	adds	r3, r7, #4
 8008484:	3304      	adds	r3, #4
 8008486:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10b      	bne.n	80084a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	61fb      	str	r3, [r7, #28]
}
 80084a0:	bf00      	nop
 80084a2:	bf00      	nop
 80084a4:	e7fd      	b.n	80084a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084ac:	6850      	ldr	r0, [r2, #4]
 80084ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084b0:	6892      	ldr	r2, [r2, #8]
 80084b2:	4611      	mov	r1, r2
 80084b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f2c0 80ae 	blt.w	800861a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d004      	beq.n	80084d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084cc:	3304      	adds	r3, #4
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fe f9d2 	bl	8006878 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084d4:	463b      	mov	r3, r7
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7ff ff6a 	bl	80083b0 <prvSampleTimeNow>
 80084dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b09      	cmp	r3, #9
 80084e2:	f200 8097 	bhi.w	8008614 <prvProcessReceivedCommands+0x1a0>
 80084e6:	a201      	add	r2, pc, #4	@ (adr r2, 80084ec <prvProcessReceivedCommands+0x78>)
 80084e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ec:	08008515 	.word	0x08008515
 80084f0:	08008515 	.word	0x08008515
 80084f4:	08008515 	.word	0x08008515
 80084f8:	0800858b 	.word	0x0800858b
 80084fc:	0800859f 	.word	0x0800859f
 8008500:	080085eb 	.word	0x080085eb
 8008504:	08008515 	.word	0x08008515
 8008508:	08008515 	.word	0x08008515
 800850c:	0800858b 	.word	0x0800858b
 8008510:	0800859f 	.word	0x0800859f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008516:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800851a:	f043 0301 	orr.w	r3, r3, #1
 800851e:	b2da      	uxtb	r2, r3
 8008520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008522:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	18d1      	adds	r1, r2, r3
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008534:	f7ff ff5c 	bl	80083f0 <prvInsertTimerInActiveList>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d06c      	beq.n	8008618 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800853e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008544:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008548:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	2b00      	cmp	r3, #0
 8008552:	d061      	beq.n	8008618 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	441a      	add	r2, r3
 800855c:	2300      	movs	r3, #0
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	2300      	movs	r3, #0
 8008562:	2100      	movs	r1, #0
 8008564:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008566:	f7ff fe01 	bl	800816c <xTimerGenericCommand>
 800856a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d152      	bne.n	8008618 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	61bb      	str	r3, [r7, #24]
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop
 8008588:	e7fd      	b.n	8008586 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800858a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008590:	f023 0301 	bic.w	r3, r3, #1
 8008594:	b2da      	uxtb	r2, r3
 8008596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008598:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800859c:	e03d      	b.n	800861a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800859e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085a4:	f043 0301 	orr.w	r3, r3, #1
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10b      	bne.n	80085d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	617b      	str	r3, [r7, #20]
}
 80085d0:	bf00      	nop
 80085d2:	bf00      	nop
 80085d4:	e7fd      	b.n	80085d2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d8:	699a      	ldr	r2, [r3, #24]
 80085da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085dc:	18d1      	adds	r1, r2, r3
 80085de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085e4:	f7ff ff04 	bl	80083f0 <prvInsertTimerInActiveList>
					break;
 80085e8:	e017      	b.n	800861a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80085ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d103      	bne.n	8008600 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80085f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085fa:	f000 fbe5 	bl	8008dc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80085fe:	e00c      	b.n	800861a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008602:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008606:	f023 0301 	bic.w	r3, r3, #1
 800860a:	b2da      	uxtb	r2, r3
 800860c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008612:	e002      	b.n	800861a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008614:	bf00      	nop
 8008616:	e000      	b.n	800861a <prvProcessReceivedCommands+0x1a6>
					break;
 8008618:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800861a:	4b08      	ldr	r3, [pc, #32]	@ (800863c <prvProcessReceivedCommands+0x1c8>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	1d39      	adds	r1, r7, #4
 8008620:	2200      	movs	r2, #0
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe fbfc 	bl	8006e20 <xQueueReceive>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	f47f af26 	bne.w	800847c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	3730      	adds	r7, #48	@ 0x30
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20001444 	.word	0x20001444

08008640 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b088      	sub	sp, #32
 8008644:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008646:	e049      	b.n	80086dc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008648:	4b2e      	ldr	r3, [pc, #184]	@ (8008704 <prvSwitchTimerLists+0xc4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008652:	4b2c      	ldr	r3, [pc, #176]	@ (8008704 <prvSwitchTimerLists+0xc4>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	3304      	adds	r3, #4
 8008660:	4618      	mov	r0, r3
 8008662:	f7fe f909 	bl	8006878 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008674:	f003 0304 	and.w	r3, r3, #4
 8008678:	2b00      	cmp	r3, #0
 800867a:	d02f      	beq.n	80086dc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	4413      	add	r3, r2
 8008684:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	429a      	cmp	r2, r3
 800868c:	d90e      	bls.n	80086ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800869a:	4b1a      	ldr	r3, [pc, #104]	@ (8008704 <prvSwitchTimerLists+0xc4>)
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3304      	adds	r3, #4
 80086a2:	4619      	mov	r1, r3
 80086a4:	4610      	mov	r0, r2
 80086a6:	f7fe f8ae 	bl	8006806 <vListInsert>
 80086aa:	e017      	b.n	80086dc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086ac:	2300      	movs	r3, #0
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	2300      	movs	r3, #0
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	2100      	movs	r1, #0
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f7ff fd58 	bl	800816c <xTimerGenericCommand>
 80086bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10b      	bne.n	80086dc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	603b      	str	r3, [r7, #0]
}
 80086d6:	bf00      	nop
 80086d8:	bf00      	nop
 80086da:	e7fd      	b.n	80086d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086dc:	4b09      	ldr	r3, [pc, #36]	@ (8008704 <prvSwitchTimerLists+0xc4>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1b0      	bne.n	8008648 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80086e6:	4b07      	ldr	r3, [pc, #28]	@ (8008704 <prvSwitchTimerLists+0xc4>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80086ec:	4b06      	ldr	r3, [pc, #24]	@ (8008708 <prvSwitchTimerLists+0xc8>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a04      	ldr	r2, [pc, #16]	@ (8008704 <prvSwitchTimerLists+0xc4>)
 80086f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80086f4:	4a04      	ldr	r2, [pc, #16]	@ (8008708 <prvSwitchTimerLists+0xc8>)
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	6013      	str	r3, [r2, #0]
}
 80086fa:	bf00      	nop
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	2000143c 	.word	0x2000143c
 8008708:	20001440 	.word	0x20001440

0800870c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008712:	f000 f969 	bl	80089e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008716:	4b15      	ldr	r3, [pc, #84]	@ (800876c <prvCheckForValidListAndQueue+0x60>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d120      	bne.n	8008760 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800871e:	4814      	ldr	r0, [pc, #80]	@ (8008770 <prvCheckForValidListAndQueue+0x64>)
 8008720:	f7fe f820 	bl	8006764 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008724:	4813      	ldr	r0, [pc, #76]	@ (8008774 <prvCheckForValidListAndQueue+0x68>)
 8008726:	f7fe f81d 	bl	8006764 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800872a:	4b13      	ldr	r3, [pc, #76]	@ (8008778 <prvCheckForValidListAndQueue+0x6c>)
 800872c:	4a10      	ldr	r2, [pc, #64]	@ (8008770 <prvCheckForValidListAndQueue+0x64>)
 800872e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008730:	4b12      	ldr	r3, [pc, #72]	@ (800877c <prvCheckForValidListAndQueue+0x70>)
 8008732:	4a10      	ldr	r2, [pc, #64]	@ (8008774 <prvCheckForValidListAndQueue+0x68>)
 8008734:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008736:	2300      	movs	r3, #0
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	4b11      	ldr	r3, [pc, #68]	@ (8008780 <prvCheckForValidListAndQueue+0x74>)
 800873c:	4a11      	ldr	r2, [pc, #68]	@ (8008784 <prvCheckForValidListAndQueue+0x78>)
 800873e:	2110      	movs	r1, #16
 8008740:	200a      	movs	r0, #10
 8008742:	f7fe f92d 	bl	80069a0 <xQueueGenericCreateStatic>
 8008746:	4603      	mov	r3, r0
 8008748:	4a08      	ldr	r2, [pc, #32]	@ (800876c <prvCheckForValidListAndQueue+0x60>)
 800874a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800874c:	4b07      	ldr	r3, [pc, #28]	@ (800876c <prvCheckForValidListAndQueue+0x60>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d005      	beq.n	8008760 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008754:	4b05      	ldr	r3, [pc, #20]	@ (800876c <prvCheckForValidListAndQueue+0x60>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	490b      	ldr	r1, [pc, #44]	@ (8008788 <prvCheckForValidListAndQueue+0x7c>)
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe fd52 	bl	8007204 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008760:	f000 f974 	bl	8008a4c <vPortExitCritical>
}
 8008764:	bf00      	nop
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20001444 	.word	0x20001444
 8008770:	20001414 	.word	0x20001414
 8008774:	20001428 	.word	0x20001428
 8008778:	2000143c 	.word	0x2000143c
 800877c:	20001440 	.word	0x20001440
 8008780:	200014f0 	.word	0x200014f0
 8008784:	20001450 	.word	0x20001450
 8008788:	0800c370 	.word	0x0800c370

0800878c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3b04      	subs	r3, #4
 800879c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80087a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3b04      	subs	r3, #4
 80087aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f023 0201 	bic.w	r2, r3, #1
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3b04      	subs	r3, #4
 80087ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087bc:	4a0c      	ldr	r2, [pc, #48]	@ (80087f0 <pxPortInitialiseStack+0x64>)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3b14      	subs	r3, #20
 80087c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3b04      	subs	r3, #4
 80087d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f06f 0202 	mvn.w	r2, #2
 80087da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3b20      	subs	r3, #32
 80087e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087e2:	68fb      	ldr	r3, [r7, #12]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	080087f5 	.word	0x080087f5

080087f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80087fe:	4b13      	ldr	r3, [pc, #76]	@ (800884c <prvTaskExitError+0x58>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008806:	d00b      	beq.n	8008820 <prvTaskExitError+0x2c>
	__asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	60fb      	str	r3, [r7, #12]
}
 800881a:	bf00      	nop
 800881c:	bf00      	nop
 800881e:	e7fd      	b.n	800881c <prvTaskExitError+0x28>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	60bb      	str	r3, [r7, #8]
}
 8008832:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008834:	bf00      	nop
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0fc      	beq.n	8008836 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800883c:	bf00      	nop
 800883e:	bf00      	nop
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	2000000c 	.word	0x2000000c

08008850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008850:	4b07      	ldr	r3, [pc, #28]	@ (8008870 <pxCurrentTCBConst2>)
 8008852:	6819      	ldr	r1, [r3, #0]
 8008854:	6808      	ldr	r0, [r1, #0]
 8008856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885a:	f380 8809 	msr	PSP, r0
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f04f 0000 	mov.w	r0, #0
 8008866:	f380 8811 	msr	BASEPRI, r0
 800886a:	4770      	bx	lr
 800886c:	f3af 8000 	nop.w

08008870 <pxCurrentTCBConst2>:
 8008870:	20000f14 	.word	0x20000f14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop

08008878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008878:	4808      	ldr	r0, [pc, #32]	@ (800889c <prvPortStartFirstTask+0x24>)
 800887a:	6800      	ldr	r0, [r0, #0]
 800887c:	6800      	ldr	r0, [r0, #0]
 800887e:	f380 8808 	msr	MSP, r0
 8008882:	f04f 0000 	mov.w	r0, #0
 8008886:	f380 8814 	msr	CONTROL, r0
 800888a:	b662      	cpsie	i
 800888c:	b661      	cpsie	f
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	df00      	svc	0
 8008898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800889a:	bf00      	nop
 800889c:	e000ed08 	.word	0xe000ed08

080088a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088a6:	4b47      	ldr	r3, [pc, #284]	@ (80089c4 <xPortStartScheduler+0x124>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a47      	ldr	r2, [pc, #284]	@ (80089c8 <xPortStartScheduler+0x128>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d10b      	bne.n	80088c8 <xPortStartScheduler+0x28>
	__asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	613b      	str	r3, [r7, #16]
}
 80088c2:	bf00      	nop
 80088c4:	bf00      	nop
 80088c6:	e7fd      	b.n	80088c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088c8:	4b3e      	ldr	r3, [pc, #248]	@ (80089c4 <xPortStartScheduler+0x124>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a3f      	ldr	r2, [pc, #252]	@ (80089cc <xPortStartScheduler+0x12c>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d10b      	bne.n	80088ea <xPortStartScheduler+0x4a>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	60fb      	str	r3, [r7, #12]
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop
 80088e8:	e7fd      	b.n	80088e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088ea:	4b39      	ldr	r3, [pc, #228]	@ (80089d0 <xPortStartScheduler+0x130>)
 80088ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	22ff      	movs	r2, #255	@ 0xff
 80088fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	b2db      	uxtb	r3, r3
 8008902:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800890c:	b2da      	uxtb	r2, r3
 800890e:	4b31      	ldr	r3, [pc, #196]	@ (80089d4 <xPortStartScheduler+0x134>)
 8008910:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008912:	4b31      	ldr	r3, [pc, #196]	@ (80089d8 <xPortStartScheduler+0x138>)
 8008914:	2207      	movs	r2, #7
 8008916:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008918:	e009      	b.n	800892e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800891a:	4b2f      	ldr	r3, [pc, #188]	@ (80089d8 <xPortStartScheduler+0x138>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	3b01      	subs	r3, #1
 8008920:	4a2d      	ldr	r2, [pc, #180]	@ (80089d8 <xPortStartScheduler+0x138>)
 8008922:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008924:	78fb      	ldrb	r3, [r7, #3]
 8008926:	b2db      	uxtb	r3, r3
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	b2db      	uxtb	r3, r3
 800892c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800892e:	78fb      	ldrb	r3, [r7, #3]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008936:	2b80      	cmp	r3, #128	@ 0x80
 8008938:	d0ef      	beq.n	800891a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800893a:	4b27      	ldr	r3, [pc, #156]	@ (80089d8 <xPortStartScheduler+0x138>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f1c3 0307 	rsb	r3, r3, #7
 8008942:	2b04      	cmp	r3, #4
 8008944:	d00b      	beq.n	800895e <xPortStartScheduler+0xbe>
	__asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	60bb      	str	r3, [r7, #8]
}
 8008958:	bf00      	nop
 800895a:	bf00      	nop
 800895c:	e7fd      	b.n	800895a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800895e:	4b1e      	ldr	r3, [pc, #120]	@ (80089d8 <xPortStartScheduler+0x138>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	021b      	lsls	r3, r3, #8
 8008964:	4a1c      	ldr	r2, [pc, #112]	@ (80089d8 <xPortStartScheduler+0x138>)
 8008966:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008968:	4b1b      	ldr	r3, [pc, #108]	@ (80089d8 <xPortStartScheduler+0x138>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008970:	4a19      	ldr	r2, [pc, #100]	@ (80089d8 <xPortStartScheduler+0x138>)
 8008972:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	b2da      	uxtb	r2, r3
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800897c:	4b17      	ldr	r3, [pc, #92]	@ (80089dc <xPortStartScheduler+0x13c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a16      	ldr	r2, [pc, #88]	@ (80089dc <xPortStartScheduler+0x13c>)
 8008982:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008986:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008988:	4b14      	ldr	r3, [pc, #80]	@ (80089dc <xPortStartScheduler+0x13c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a13      	ldr	r2, [pc, #76]	@ (80089dc <xPortStartScheduler+0x13c>)
 800898e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008992:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008994:	f000 f8da 	bl	8008b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008998:	4b11      	ldr	r3, [pc, #68]	@ (80089e0 <xPortStartScheduler+0x140>)
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800899e:	f000 f8f9 	bl	8008b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089a2:	4b10      	ldr	r3, [pc, #64]	@ (80089e4 <xPortStartScheduler+0x144>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a0f      	ldr	r2, [pc, #60]	@ (80089e4 <xPortStartScheduler+0x144>)
 80089a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80089ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089ae:	f7ff ff63 	bl	8008878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089b2:	f7ff f83f 	bl	8007a34 <vTaskSwitchContext>
	prvTaskExitError();
 80089b6:	f7ff ff1d 	bl	80087f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	e000ed00 	.word	0xe000ed00
 80089c8:	410fc271 	.word	0x410fc271
 80089cc:	410fc270 	.word	0x410fc270
 80089d0:	e000e400 	.word	0xe000e400
 80089d4:	20001540 	.word	0x20001540
 80089d8:	20001544 	.word	0x20001544
 80089dc:	e000ed20 	.word	0xe000ed20
 80089e0:	2000000c 	.word	0x2000000c
 80089e4:	e000ef34 	.word	0xe000ef34

080089e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	607b      	str	r3, [r7, #4]
}
 8008a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a02:	4b10      	ldr	r3, [pc, #64]	@ (8008a44 <vPortEnterCritical+0x5c>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3301      	adds	r3, #1
 8008a08:	4a0e      	ldr	r2, [pc, #56]	@ (8008a44 <vPortEnterCritical+0x5c>)
 8008a0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008a44 <vPortEnterCritical+0x5c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d110      	bne.n	8008a36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a14:	4b0c      	ldr	r3, [pc, #48]	@ (8008a48 <vPortEnterCritical+0x60>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00b      	beq.n	8008a36 <vPortEnterCritical+0x4e>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	603b      	str	r3, [r7, #0]
}
 8008a30:	bf00      	nop
 8008a32:	bf00      	nop
 8008a34:	e7fd      	b.n	8008a32 <vPortEnterCritical+0x4a>
	}
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	2000000c 	.word	0x2000000c
 8008a48:	e000ed04 	.word	0xe000ed04

08008a4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a52:	4b12      	ldr	r3, [pc, #72]	@ (8008a9c <vPortExitCritical+0x50>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10b      	bne.n	8008a72 <vPortExitCritical+0x26>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	607b      	str	r3, [r7, #4]
}
 8008a6c:	bf00      	nop
 8008a6e:	bf00      	nop
 8008a70:	e7fd      	b.n	8008a6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a72:	4b0a      	ldr	r3, [pc, #40]	@ (8008a9c <vPortExitCritical+0x50>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3b01      	subs	r3, #1
 8008a78:	4a08      	ldr	r2, [pc, #32]	@ (8008a9c <vPortExitCritical+0x50>)
 8008a7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a7c:	4b07      	ldr	r3, [pc, #28]	@ (8008a9c <vPortExitCritical+0x50>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d105      	bne.n	8008a90 <vPortExitCritical+0x44>
 8008a84:	2300      	movs	r3, #0
 8008a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	f383 8811 	msr	BASEPRI, r3
}
 8008a8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	2000000c 	.word	0x2000000c

08008aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008aa0:	f3ef 8009 	mrs	r0, PSP
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	4b15      	ldr	r3, [pc, #84]	@ (8008b00 <pxCurrentTCBConst>)
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	f01e 0f10 	tst.w	lr, #16
 8008ab0:	bf08      	it	eq
 8008ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aba:	6010      	str	r0, [r2, #0]
 8008abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ac0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008ac4:	f380 8811 	msr	BASEPRI, r0
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f7fe ffb0 	bl	8007a34 <vTaskSwitchContext>
 8008ad4:	f04f 0000 	mov.w	r0, #0
 8008ad8:	f380 8811 	msr	BASEPRI, r0
 8008adc:	bc09      	pop	{r0, r3}
 8008ade:	6819      	ldr	r1, [r3, #0]
 8008ae0:	6808      	ldr	r0, [r1, #0]
 8008ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae6:	f01e 0f10 	tst.w	lr, #16
 8008aea:	bf08      	it	eq
 8008aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008af0:	f380 8809 	msr	PSP, r0
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	f3af 8000 	nop.w

08008b00 <pxCurrentTCBConst>:
 8008b00:	20000f14 	.word	0x20000f14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop

08008b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	607b      	str	r3, [r7, #4]
}
 8008b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b22:	f7fe fecd 	bl	80078c0 <xTaskIncrementTick>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b2c:	4b06      	ldr	r3, [pc, #24]	@ (8008b48 <xPortSysTickHandler+0x40>)
 8008b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	2300      	movs	r3, #0
 8008b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	f383 8811 	msr	BASEPRI, r3
}
 8008b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	e000ed04 	.word	0xe000ed04

08008b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b50:	4b0b      	ldr	r3, [pc, #44]	@ (8008b80 <vPortSetupTimerInterrupt+0x34>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b56:	4b0b      	ldr	r3, [pc, #44]	@ (8008b84 <vPortSetupTimerInterrupt+0x38>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b88 <vPortSetupTimerInterrupt+0x3c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a0a      	ldr	r2, [pc, #40]	@ (8008b8c <vPortSetupTimerInterrupt+0x40>)
 8008b62:	fba2 2303 	umull	r2, r3, r2, r3
 8008b66:	099b      	lsrs	r3, r3, #6
 8008b68:	4a09      	ldr	r2, [pc, #36]	@ (8008b90 <vPortSetupTimerInterrupt+0x44>)
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b6e:	4b04      	ldr	r3, [pc, #16]	@ (8008b80 <vPortSetupTimerInterrupt+0x34>)
 8008b70:	2207      	movs	r2, #7
 8008b72:	601a      	str	r2, [r3, #0]
}
 8008b74:	bf00      	nop
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	e000e010 	.word	0xe000e010
 8008b84:	e000e018 	.word	0xe000e018
 8008b88:	20000000 	.word	0x20000000
 8008b8c:	10624dd3 	.word	0x10624dd3
 8008b90:	e000e014 	.word	0xe000e014

08008b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008ba4 <vPortEnableVFP+0x10>
 8008b98:	6801      	ldr	r1, [r0, #0]
 8008b9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008b9e:	6001      	str	r1, [r0, #0]
 8008ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ba2:	bf00      	nop
 8008ba4:	e000ed88 	.word	0xe000ed88

08008ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008bae:	f3ef 8305 	mrs	r3, IPSR
 8008bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2b0f      	cmp	r3, #15
 8008bb8:	d915      	bls.n	8008be6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bba:	4a18      	ldr	r2, [pc, #96]	@ (8008c1c <vPortValidateInterruptPriority+0x74>)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008bc4:	4b16      	ldr	r3, [pc, #88]	@ (8008c20 <vPortValidateInterruptPriority+0x78>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	7afa      	ldrb	r2, [r7, #11]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d20b      	bcs.n	8008be6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	607b      	str	r3, [r7, #4]
}
 8008be0:	bf00      	nop
 8008be2:	bf00      	nop
 8008be4:	e7fd      	b.n	8008be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008be6:	4b0f      	ldr	r3, [pc, #60]	@ (8008c24 <vPortValidateInterruptPriority+0x7c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008bee:	4b0e      	ldr	r3, [pc, #56]	@ (8008c28 <vPortValidateInterruptPriority+0x80>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d90b      	bls.n	8008c0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	603b      	str	r3, [r7, #0]
}
 8008c08:	bf00      	nop
 8008c0a:	bf00      	nop
 8008c0c:	e7fd      	b.n	8008c0a <vPortValidateInterruptPriority+0x62>
	}
 8008c0e:	bf00      	nop
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	e000e3f0 	.word	0xe000e3f0
 8008c20:	20001540 	.word	0x20001540
 8008c24:	e000ed0c 	.word	0xe000ed0c
 8008c28:	20001544 	.word	0x20001544

08008c2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b08a      	sub	sp, #40	@ 0x28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c34:	2300      	movs	r3, #0
 8008c36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c38:	f7fe fd86 	bl	8007748 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8008db0 <pvPortMalloc+0x184>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c44:	f000 f924 	bl	8008e90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c48:	4b5a      	ldr	r3, [pc, #360]	@ (8008db4 <pvPortMalloc+0x188>)
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4013      	ands	r3, r2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f040 8095 	bne.w	8008d80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d01e      	beq.n	8008c9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008c5c:	2208      	movs	r2, #8
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4413      	add	r3, r2
 8008c62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d015      	beq.n	8008c9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f023 0307 	bic.w	r3, r3, #7
 8008c74:	3308      	adds	r3, #8
 8008c76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f003 0307 	and.w	r3, r3, #7
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <pvPortMalloc+0x6e>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	617b      	str	r3, [r7, #20]
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop
 8008c98:	e7fd      	b.n	8008c96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d06f      	beq.n	8008d80 <pvPortMalloc+0x154>
 8008ca0:	4b45      	ldr	r3, [pc, #276]	@ (8008db8 <pvPortMalloc+0x18c>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d86a      	bhi.n	8008d80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008caa:	4b44      	ldr	r3, [pc, #272]	@ (8008dbc <pvPortMalloc+0x190>)
 8008cac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008cae:	4b43      	ldr	r3, [pc, #268]	@ (8008dbc <pvPortMalloc+0x190>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cb4:	e004      	b.n	8008cc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d903      	bls.n	8008cd2 <pvPortMalloc+0xa6>
 8008cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1f1      	bne.n	8008cb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008cd2:	4b37      	ldr	r3, [pc, #220]	@ (8008db0 <pvPortMalloc+0x184>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d051      	beq.n	8008d80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2208      	movs	r2, #8
 8008ce2:	4413      	add	r3, r2
 8008ce4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf0:	685a      	ldr	r2, [r3, #4]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	1ad2      	subs	r2, r2, r3
 8008cf6:	2308      	movs	r3, #8
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d920      	bls.n	8008d40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4413      	add	r3, r2
 8008d04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	f003 0307 	and.w	r3, r3, #7
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00b      	beq.n	8008d28 <pvPortMalloc+0xfc>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	613b      	str	r3, [r7, #16]
}
 8008d22:	bf00      	nop
 8008d24:	bf00      	nop
 8008d26:	e7fd      	b.n	8008d24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	1ad2      	subs	r2, r2, r3
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d3a:	69b8      	ldr	r0, [r7, #24]
 8008d3c:	f000 f90a 	bl	8008f54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d40:	4b1d      	ldr	r3, [pc, #116]	@ (8008db8 <pvPortMalloc+0x18c>)
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8008db8 <pvPortMalloc+0x18c>)
 8008d4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8008db8 <pvPortMalloc+0x18c>)
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	4b1b      	ldr	r3, [pc, #108]	@ (8008dc0 <pvPortMalloc+0x194>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d203      	bcs.n	8008d62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d5a:	4b17      	ldr	r3, [pc, #92]	@ (8008db8 <pvPortMalloc+0x18c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a18      	ldr	r2, [pc, #96]	@ (8008dc0 <pvPortMalloc+0x194>)
 8008d60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	4b13      	ldr	r3, [pc, #76]	@ (8008db4 <pvPortMalloc+0x188>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	431a      	orrs	r2, r3
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d72:	2200      	movs	r2, #0
 8008d74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d76:	4b13      	ldr	r3, [pc, #76]	@ (8008dc4 <pvPortMalloc+0x198>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	4a11      	ldr	r2, [pc, #68]	@ (8008dc4 <pvPortMalloc+0x198>)
 8008d7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d80:	f7fe fcf0 	bl	8007764 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	f003 0307 	and.w	r3, r3, #7
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00b      	beq.n	8008da6 <pvPortMalloc+0x17a>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	60fb      	str	r3, [r7, #12]
}
 8008da0:	bf00      	nop
 8008da2:	bf00      	nop
 8008da4:	e7fd      	b.n	8008da2 <pvPortMalloc+0x176>
	return pvReturn;
 8008da6:	69fb      	ldr	r3, [r7, #28]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3728      	adds	r7, #40	@ 0x28
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20005150 	.word	0x20005150
 8008db4:	20005164 	.word	0x20005164
 8008db8:	20005154 	.word	0x20005154
 8008dbc:	20005148 	.word	0x20005148
 8008dc0:	20005158 	.word	0x20005158
 8008dc4:	2000515c 	.word	0x2000515c

08008dc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d04f      	beq.n	8008e7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008dda:	2308      	movs	r3, #8
 8008ddc:	425b      	negs	r3, r3
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	4413      	add	r3, r2
 8008de2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	4b25      	ldr	r3, [pc, #148]	@ (8008e84 <vPortFree+0xbc>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4013      	ands	r3, r2
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10b      	bne.n	8008e0e <vPortFree+0x46>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	60fb      	str	r3, [r7, #12]
}
 8008e08:	bf00      	nop
 8008e0a:	bf00      	nop
 8008e0c:	e7fd      	b.n	8008e0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00b      	beq.n	8008e2e <vPortFree+0x66>
	__asm volatile
 8008e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	60bb      	str	r3, [r7, #8]
}
 8008e28:	bf00      	nop
 8008e2a:	bf00      	nop
 8008e2c:	e7fd      	b.n	8008e2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	4b14      	ldr	r3, [pc, #80]	@ (8008e84 <vPortFree+0xbc>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4013      	ands	r3, r2
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d01e      	beq.n	8008e7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d11a      	bne.n	8008e7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	685a      	ldr	r2, [r3, #4]
 8008e48:	4b0e      	ldr	r3, [pc, #56]	@ (8008e84 <vPortFree+0xbc>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	43db      	mvns	r3, r3
 8008e4e:	401a      	ands	r2, r3
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e54:	f7fe fc78 	bl	8007748 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e88 <vPortFree+0xc0>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4413      	add	r3, r2
 8008e62:	4a09      	ldr	r2, [pc, #36]	@ (8008e88 <vPortFree+0xc0>)
 8008e64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e66:	6938      	ldr	r0, [r7, #16]
 8008e68:	f000 f874 	bl	8008f54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e6c:	4b07      	ldr	r3, [pc, #28]	@ (8008e8c <vPortFree+0xc4>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3301      	adds	r3, #1
 8008e72:	4a06      	ldr	r2, [pc, #24]	@ (8008e8c <vPortFree+0xc4>)
 8008e74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e76:	f7fe fc75 	bl	8007764 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e7a:	bf00      	nop
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20005164 	.word	0x20005164
 8008e88:	20005154 	.word	0x20005154
 8008e8c:	20005160 	.word	0x20005160

08008e90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008e9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e9c:	4b27      	ldr	r3, [pc, #156]	@ (8008f3c <prvHeapInit+0xac>)
 8008e9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f003 0307 	and.w	r3, r3, #7
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00c      	beq.n	8008ec4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3307      	adds	r3, #7
 8008eae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f023 0307 	bic.w	r3, r3, #7
 8008eb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8008f3c <prvHeapInit+0xac>)
 8008ec0:	4413      	add	r3, r2
 8008ec2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f40 <prvHeapInit+0xb0>)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ece:	4b1c      	ldr	r3, [pc, #112]	@ (8008f40 <prvHeapInit+0xb0>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	4413      	add	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008edc:	2208      	movs	r2, #8
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	1a9b      	subs	r3, r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0307 	bic.w	r3, r3, #7
 8008eea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4a15      	ldr	r2, [pc, #84]	@ (8008f44 <prvHeapInit+0xb4>)
 8008ef0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ef2:	4b14      	ldr	r3, [pc, #80]	@ (8008f44 <prvHeapInit+0xb4>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008efa:	4b12      	ldr	r3, [pc, #72]	@ (8008f44 <prvHeapInit+0xb4>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2200      	movs	r2, #0
 8008f00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	1ad2      	subs	r2, r2, r3
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f10:	4b0c      	ldr	r3, [pc, #48]	@ (8008f44 <prvHeapInit+0xb4>)
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8008f48 <prvHeapInit+0xb8>)
 8008f1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	4a09      	ldr	r2, [pc, #36]	@ (8008f4c <prvHeapInit+0xbc>)
 8008f26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f28:	4b09      	ldr	r3, [pc, #36]	@ (8008f50 <prvHeapInit+0xc0>)
 8008f2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008f2e:	601a      	str	r2, [r3, #0]
}
 8008f30:	bf00      	nop
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	20001548 	.word	0x20001548
 8008f40:	20005148 	.word	0x20005148
 8008f44:	20005150 	.word	0x20005150
 8008f48:	20005158 	.word	0x20005158
 8008f4c:	20005154 	.word	0x20005154
 8008f50:	20005164 	.word	0x20005164

08008f54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f5c:	4b28      	ldr	r3, [pc, #160]	@ (8009000 <prvInsertBlockIntoFreeList+0xac>)
 8008f5e:	60fb      	str	r3, [r7, #12]
 8008f60:	e002      	b.n	8008f68 <prvInsertBlockIntoFreeList+0x14>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d8f7      	bhi.n	8008f62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d108      	bne.n	8008f96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	441a      	add	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	441a      	add	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d118      	bne.n	8008fdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	4b15      	ldr	r3, [pc, #84]	@ (8009004 <prvInsertBlockIntoFreeList+0xb0>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d00d      	beq.n	8008fd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	441a      	add	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	601a      	str	r2, [r3, #0]
 8008fd0:	e008      	b.n	8008fe4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8009004 <prvInsertBlockIntoFreeList+0xb0>)
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	e003      	b.n	8008fe4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d002      	beq.n	8008ff2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ff2:	bf00      	nop
 8008ff4:	3714      	adds	r7, #20
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	20005148 	.word	0x20005148
 8009004:	20005150 	.word	0x20005150

08009008 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800900e:	2300      	movs	r3, #0
 8009010:	71fb      	strb	r3, [r7, #7]
 8009012:	e026      	b.n	8009062 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8009014:	79fb      	ldrb	r3, [r7, #7]
 8009016:	3b50      	subs	r3, #80	@ 0x50
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2100      	movs	r1, #0
 800901c:	4618      	mov	r0, r3
 800901e:	f000 f82b 	bl	8009078 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8009022:	2100      	movs	r1, #0
 8009024:	2000      	movs	r0, #0
 8009026:	f000 f827 	bl	8009078 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800902a:	2100      	movs	r1, #0
 800902c:	2010      	movs	r0, #16
 800902e:	f000 f823 	bl	8009078 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8009032:	2300      	movs	r3, #0
 8009034:	71bb      	strb	r3, [r7, #6]
 8009036:	e00d      	b.n	8009054 <OLED_Refresh_Gram+0x4c>
 8009038:	79ba      	ldrb	r2, [r7, #6]
 800903a:	79fb      	ldrb	r3, [r7, #7]
 800903c:	490d      	ldr	r1, [pc, #52]	@ (8009074 <OLED_Refresh_Gram+0x6c>)
 800903e:	00d2      	lsls	r2, r2, #3
 8009040:	440a      	add	r2, r1
 8009042:	4413      	add	r3, r2
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	2101      	movs	r1, #1
 8009048:	4618      	mov	r0, r3
 800904a:	f000 f815 	bl	8009078 <OLED_WR_Byte>
 800904e:	79bb      	ldrb	r3, [r7, #6]
 8009050:	3301      	adds	r3, #1
 8009052:	71bb      	strb	r3, [r7, #6]
 8009054:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009058:	2b00      	cmp	r3, #0
 800905a:	daed      	bge.n	8009038 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	3301      	adds	r3, #1
 8009060:	71fb      	strb	r3, [r7, #7]
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	2b07      	cmp	r3, #7
 8009066:	d9d5      	bls.n	8009014 <OLED_Refresh_Gram+0xc>
	}   
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20005168 	.word	0x20005168

08009078 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	460a      	mov	r2, r1
 8009082:	71fb      	strb	r3, [r7, #7]
 8009084:	4613      	mov	r3, r2
 8009086:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8009088:	79bb      	ldrb	r3, [r7, #6]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d006      	beq.n	800909c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800908e:	2201      	movs	r2, #1
 8009090:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009094:	481c      	ldr	r0, [pc, #112]	@ (8009108 <OLED_WR_Byte+0x90>)
 8009096:	f7fa f8d3 	bl	8003240 <HAL_GPIO_WritePin>
 800909a:	e005      	b.n	80090a8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800909c:	2200      	movs	r2, #0
 800909e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80090a2:	4819      	ldr	r0, [pc, #100]	@ (8009108 <OLED_WR_Byte+0x90>)
 80090a4:	f7fa f8cc 	bl	8003240 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]
 80090ac:	e01e      	b.n	80090ec <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80090ae:	2200      	movs	r2, #0
 80090b0:	2120      	movs	r1, #32
 80090b2:	4815      	ldr	r0, [pc, #84]	@ (8009108 <OLED_WR_Byte+0x90>)
 80090b4:	f7fa f8c4 	bl	8003240 <HAL_GPIO_WritePin>
		if(dat&0x80)
 80090b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	da05      	bge.n	80090cc <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80090c0:	2201      	movs	r2, #1
 80090c2:	2140      	movs	r1, #64	@ 0x40
 80090c4:	4810      	ldr	r0, [pc, #64]	@ (8009108 <OLED_WR_Byte+0x90>)
 80090c6:	f7fa f8bb 	bl	8003240 <HAL_GPIO_WritePin>
 80090ca:	e004      	b.n	80090d6 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80090cc:	2200      	movs	r2, #0
 80090ce:	2140      	movs	r1, #64	@ 0x40
 80090d0:	480d      	ldr	r0, [pc, #52]	@ (8009108 <OLED_WR_Byte+0x90>)
 80090d2:	f7fa f8b5 	bl	8003240 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80090d6:	2201      	movs	r2, #1
 80090d8:	2120      	movs	r1, #32
 80090da:	480b      	ldr	r0, [pc, #44]	@ (8009108 <OLED_WR_Byte+0x90>)
 80090dc:	f7fa f8b0 	bl	8003240 <HAL_GPIO_WritePin>
		dat<<=1;   
 80090e0:	79fb      	ldrb	r3, [r7, #7]
 80090e2:	005b      	lsls	r3, r3, #1
 80090e4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
 80090e8:	3301      	adds	r3, #1
 80090ea:	73fb      	strb	r3, [r7, #15]
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
 80090ee:	2b07      	cmp	r3, #7
 80090f0:	d9dd      	bls.n	80090ae <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80090f2:	2201      	movs	r2, #1
 80090f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80090f8:	4803      	ldr	r0, [pc, #12]	@ (8009108 <OLED_WR_Byte+0x90>)
 80090fa:	f7fa f8a1 	bl	8003240 <HAL_GPIO_WritePin>
} 
 80090fe:	bf00      	nop
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	40021000 	.word	0x40021000

0800910c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8009112:	2300      	movs	r3, #0
 8009114:	71fb      	strb	r3, [r7, #7]
 8009116:	e014      	b.n	8009142 <OLED_Clear+0x36>
 8009118:	2300      	movs	r3, #0
 800911a:	71bb      	strb	r3, [r7, #6]
 800911c:	e00a      	b.n	8009134 <OLED_Clear+0x28>
 800911e:	79ba      	ldrb	r2, [r7, #6]
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	490c      	ldr	r1, [pc, #48]	@ (8009154 <OLED_Clear+0x48>)
 8009124:	00d2      	lsls	r2, r2, #3
 8009126:	440a      	add	r2, r1
 8009128:	4413      	add	r3, r2
 800912a:	2200      	movs	r2, #0
 800912c:	701a      	strb	r2, [r3, #0]
 800912e:	79bb      	ldrb	r3, [r7, #6]
 8009130:	3301      	adds	r3, #1
 8009132:	71bb      	strb	r3, [r7, #6]
 8009134:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009138:	2b00      	cmp	r3, #0
 800913a:	daf0      	bge.n	800911e <OLED_Clear+0x12>
 800913c:	79fb      	ldrb	r3, [r7, #7]
 800913e:	3301      	adds	r3, #1
 8009140:	71fb      	strb	r3, [r7, #7]
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	2b07      	cmp	r3, #7
 8009146:	d9e7      	bls.n	8009118 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8009148:	f7ff ff5e 	bl	8009008 <OLED_Refresh_Gram>
}
 800914c:	bf00      	nop
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	20005168 	.word	0x20005168

08009158 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	4603      	mov	r3, r0
 8009160:	71fb      	strb	r3, [r7, #7]
 8009162:	460b      	mov	r3, r1
 8009164:	71bb      	strb	r3, [r7, #6]
 8009166:	4613      	mov	r3, r2
 8009168:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800916a:	2300      	movs	r3, #0
 800916c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800916e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009172:	2b00      	cmp	r3, #0
 8009174:	db41      	blt.n	80091fa <OLED_DrawPoint+0xa2>
 8009176:	79bb      	ldrb	r3, [r7, #6]
 8009178:	2b3f      	cmp	r3, #63	@ 0x3f
 800917a:	d83e      	bhi.n	80091fa <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800917c:	79bb      	ldrb	r3, [r7, #6]
 800917e:	08db      	lsrs	r3, r3, #3
 8009180:	b2db      	uxtb	r3, r3
 8009182:	f1c3 0307 	rsb	r3, r3, #7
 8009186:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8009188:	79bb      	ldrb	r3, [r7, #6]
 800918a:	f003 0307 	and.w	r3, r3, #7
 800918e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8009190:	7b7b      	ldrb	r3, [r7, #13]
 8009192:	f1c3 0307 	rsb	r3, r3, #7
 8009196:	2201      	movs	r2, #1
 8009198:	fa02 f303 	lsl.w	r3, r2, r3
 800919c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800919e:	797b      	ldrb	r3, [r7, #5]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d012      	beq.n	80091ca <OLED_DrawPoint+0x72>
 80091a4:	79fa      	ldrb	r2, [r7, #7]
 80091a6:	7bbb      	ldrb	r3, [r7, #14]
 80091a8:	4917      	ldr	r1, [pc, #92]	@ (8009208 <OLED_DrawPoint+0xb0>)
 80091aa:	00d2      	lsls	r2, r2, #3
 80091ac:	440a      	add	r2, r1
 80091ae:	4413      	add	r3, r2
 80091b0:	7818      	ldrb	r0, [r3, #0]
 80091b2:	79fa      	ldrb	r2, [r7, #7]
 80091b4:	7bbb      	ldrb	r3, [r7, #14]
 80091b6:	7bf9      	ldrb	r1, [r7, #15]
 80091b8:	4301      	orrs	r1, r0
 80091ba:	b2c8      	uxtb	r0, r1
 80091bc:	4912      	ldr	r1, [pc, #72]	@ (8009208 <OLED_DrawPoint+0xb0>)
 80091be:	00d2      	lsls	r2, r2, #3
 80091c0:	440a      	add	r2, r1
 80091c2:	4413      	add	r3, r2
 80091c4:	4602      	mov	r2, r0
 80091c6:	701a      	strb	r2, [r3, #0]
 80091c8:	e018      	b.n	80091fc <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80091ca:	79fa      	ldrb	r2, [r7, #7]
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
 80091ce:	490e      	ldr	r1, [pc, #56]	@ (8009208 <OLED_DrawPoint+0xb0>)
 80091d0:	00d2      	lsls	r2, r2, #3
 80091d2:	440a      	add	r2, r1
 80091d4:	4413      	add	r3, r2
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	b25a      	sxtb	r2, r3
 80091da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091de:	43db      	mvns	r3, r3
 80091e0:	b25b      	sxtb	r3, r3
 80091e2:	4013      	ands	r3, r2
 80091e4:	b259      	sxtb	r1, r3
 80091e6:	79fa      	ldrb	r2, [r7, #7]
 80091e8:	7bbb      	ldrb	r3, [r7, #14]
 80091ea:	b2c8      	uxtb	r0, r1
 80091ec:	4906      	ldr	r1, [pc, #24]	@ (8009208 <OLED_DrawPoint+0xb0>)
 80091ee:	00d2      	lsls	r2, r2, #3
 80091f0:	440a      	add	r2, r1
 80091f2:	4413      	add	r3, r2
 80091f4:	4602      	mov	r2, r0
 80091f6:	701a      	strb	r2, [r3, #0]
 80091f8:	e000      	b.n	80091fc <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80091fa:	bf00      	nop
}
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	20005168 	.word	0x20005168

0800920c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800920c:	b590      	push	{r4, r7, lr}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	4604      	mov	r4, r0
 8009214:	4608      	mov	r0, r1
 8009216:	4611      	mov	r1, r2
 8009218:	461a      	mov	r2, r3
 800921a:	4623      	mov	r3, r4
 800921c:	71fb      	strb	r3, [r7, #7]
 800921e:	4603      	mov	r3, r0
 8009220:	71bb      	strb	r3, [r7, #6]
 8009222:	460b      	mov	r3, r1
 8009224:	717b      	strb	r3, [r7, #5]
 8009226:	4613      	mov	r3, r2
 8009228:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800922a:	79bb      	ldrb	r3, [r7, #6]
 800922c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800922e:	797b      	ldrb	r3, [r7, #5]
 8009230:	3b20      	subs	r3, #32
 8009232:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8009234:	2300      	movs	r3, #0
 8009236:	73bb      	strb	r3, [r7, #14]
 8009238:	e04d      	b.n	80092d6 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800923a:	793b      	ldrb	r3, [r7, #4]
 800923c:	2b0c      	cmp	r3, #12
 800923e:	d10b      	bne.n	8009258 <OLED_ShowChar+0x4c>
 8009240:	797a      	ldrb	r2, [r7, #5]
 8009242:	7bb9      	ldrb	r1, [r7, #14]
 8009244:	4828      	ldr	r0, [pc, #160]	@ (80092e8 <OLED_ShowChar+0xdc>)
 8009246:	4613      	mov	r3, r2
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	4413      	add	r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	4403      	add	r3, r0
 8009250:	440b      	add	r3, r1
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	73fb      	strb	r3, [r7, #15]
 8009256:	e007      	b.n	8009268 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8009258:	797a      	ldrb	r2, [r7, #5]
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	4923      	ldr	r1, [pc, #140]	@ (80092ec <OLED_ShowChar+0xe0>)
 800925e:	0112      	lsls	r2, r2, #4
 8009260:	440a      	add	r2, r1
 8009262:	4413      	add	r3, r2
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8009268:	2300      	movs	r3, #0
 800926a:	737b      	strb	r3, [r7, #13]
 800926c:	e02d      	b.n	80092ca <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800926e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009272:	2b00      	cmp	r3, #0
 8009274:	da07      	bge.n	8009286 <OLED_ShowChar+0x7a>
 8009276:	f897 2020 	ldrb.w	r2, [r7, #32]
 800927a:	79b9      	ldrb	r1, [r7, #6]
 800927c:	79fb      	ldrb	r3, [r7, #7]
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff ff6a 	bl	8009158 <OLED_DrawPoint>
 8009284:	e00c      	b.n	80092a0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8009286:	f897 3020 	ldrb.w	r3, [r7, #32]
 800928a:	2b00      	cmp	r3, #0
 800928c:	bf0c      	ite	eq
 800928e:	2301      	moveq	r3, #1
 8009290:	2300      	movne	r3, #0
 8009292:	b2db      	uxtb	r3, r3
 8009294:	461a      	mov	r2, r3
 8009296:	79b9      	ldrb	r1, [r7, #6]
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff ff5c 	bl	8009158 <OLED_DrawPoint>
			temp<<=1;
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
 80092a2:	005b      	lsls	r3, r3, #1
 80092a4:	73fb      	strb	r3, [r7, #15]
			y++;
 80092a6:	79bb      	ldrb	r3, [r7, #6]
 80092a8:	3301      	adds	r3, #1
 80092aa:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80092ac:	79ba      	ldrb	r2, [r7, #6]
 80092ae:	7b3b      	ldrb	r3, [r7, #12]
 80092b0:	1ad2      	subs	r2, r2, r3
 80092b2:	793b      	ldrb	r3, [r7, #4]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d105      	bne.n	80092c4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80092b8:	7b3b      	ldrb	r3, [r7, #12]
 80092ba:	71bb      	strb	r3, [r7, #6]
				x++;
 80092bc:	79fb      	ldrb	r3, [r7, #7]
 80092be:	3301      	adds	r3, #1
 80092c0:	71fb      	strb	r3, [r7, #7]
				break;
 80092c2:	e005      	b.n	80092d0 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80092c4:	7b7b      	ldrb	r3, [r7, #13]
 80092c6:	3301      	adds	r3, #1
 80092c8:	737b      	strb	r3, [r7, #13]
 80092ca:	7b7b      	ldrb	r3, [r7, #13]
 80092cc:	2b07      	cmp	r3, #7
 80092ce:	d9ce      	bls.n	800926e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	3301      	adds	r3, #1
 80092d4:	73bb      	strb	r3, [r7, #14]
 80092d6:	7bba      	ldrb	r2, [r7, #14]
 80092d8:	793b      	ldrb	r3, [r7, #4]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d3ad      	bcc.n	800923a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80092de:	bf00      	nop
 80092e0:	bf00      	nop
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd90      	pop	{r4, r7, pc}
 80092e8:	0800c3d8 	.word	0x0800c3d8
 80092ec:	0800c84c 	.word	0x0800c84c

080092f0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af02      	add	r7, sp, #8
 80092f6:	4603      	mov	r3, r0
 80092f8:	603a      	str	r2, [r7, #0]
 80092fa:	71fb      	strb	r3, [r7, #7]
 80092fc:	460b      	mov	r3, r1
 80092fe:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8009300:	e01f      	b.n	8009342 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8009302:	79fb      	ldrb	r3, [r7, #7]
 8009304:	2b7a      	cmp	r3, #122	@ 0x7a
 8009306:	d904      	bls.n	8009312 <OLED_ShowString+0x22>
 8009308:	2300      	movs	r3, #0
 800930a:	71fb      	strb	r3, [r7, #7]
 800930c:	79bb      	ldrb	r3, [r7, #6]
 800930e:	3310      	adds	r3, #16
 8009310:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8009312:	79bb      	ldrb	r3, [r7, #6]
 8009314:	2b3a      	cmp	r3, #58	@ 0x3a
 8009316:	d905      	bls.n	8009324 <OLED_ShowString+0x34>
 8009318:	2300      	movs	r3, #0
 800931a:	71fb      	strb	r3, [r7, #7]
 800931c:	79fb      	ldrb	r3, [r7, #7]
 800931e:	71bb      	strb	r3, [r7, #6]
 8009320:	f7ff fef4 	bl	800910c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	781a      	ldrb	r2, [r3, #0]
 8009328:	79b9      	ldrb	r1, [r7, #6]
 800932a:	79f8      	ldrb	r0, [r7, #7]
 800932c:	2301      	movs	r3, #1
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	230c      	movs	r3, #12
 8009332:	f7ff ff6b 	bl	800920c <OLED_ShowChar>
        x+=8;
 8009336:	79fb      	ldrb	r3, [r7, #7]
 8009338:	3308      	adds	r3, #8
 800933a:	71fb      	strb	r3, [r7, #7]
        p++;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	3301      	adds	r3, #1
 8009340:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1db      	bne.n	8009302 <OLED_ShowString+0x12>
    }  
}	 
 800934a:	bf00      	nop
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <OLED_Init>:

void OLED_Init(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8009358:	f7f9 ff8c 	bl	8003274 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800935c:	4b41      	ldr	r3, [pc, #260]	@ (8009464 <OLED_Init+0x110>)
 800935e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009360:	4a40      	ldr	r2, [pc, #256]	@ (8009464 <OLED_Init+0x110>)
 8009362:	f023 0301 	bic.w	r3, r3, #1
 8009366:	6713      	str	r3, [r2, #112]	@ 0x70
 8009368:	4b3e      	ldr	r3, [pc, #248]	@ (8009464 <OLED_Init+0x110>)
 800936a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800936c:	4a3d      	ldr	r2, [pc, #244]	@ (8009464 <OLED_Init+0x110>)
 800936e:	f023 0304 	bic.w	r3, r3, #4
 8009372:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8009374:	f7f9 ff92 	bl	800329c <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8009378:	2200      	movs	r2, #0
 800937a:	2180      	movs	r1, #128	@ 0x80
 800937c:	483a      	ldr	r0, [pc, #232]	@ (8009468 <OLED_Init+0x114>)
 800937e:	f7f9 ff5f 	bl	8003240 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8009382:	2064      	movs	r0, #100	@ 0x64
 8009384:	f7f9 fbf8 	bl	8002b78 <HAL_Delay>
	OLED_RST_Set();
 8009388:	2201      	movs	r2, #1
 800938a:	2180      	movs	r1, #128	@ 0x80
 800938c:	4836      	ldr	r0, [pc, #216]	@ (8009468 <OLED_Init+0x114>)
 800938e:	f7f9 ff57 	bl	8003240 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8009392:	2100      	movs	r1, #0
 8009394:	20ae      	movs	r0, #174	@ 0xae
 8009396:	f7ff fe6f 	bl	8009078 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800939a:	2100      	movs	r1, #0
 800939c:	20d5      	movs	r0, #213	@ 0xd5
 800939e:	f7ff fe6b 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80093a2:	2100      	movs	r1, #0
 80093a4:	2050      	movs	r0, #80	@ 0x50
 80093a6:	f7ff fe67 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80093aa:	2100      	movs	r1, #0
 80093ac:	20a8      	movs	r0, #168	@ 0xa8
 80093ae:	f7ff fe63 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80093b2:	2100      	movs	r1, #0
 80093b4:	203f      	movs	r0, #63	@ 0x3f
 80093b6:	f7ff fe5f 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80093ba:	2100      	movs	r1, #0
 80093bc:	20d3      	movs	r0, #211	@ 0xd3
 80093be:	f7ff fe5b 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80093c2:	2100      	movs	r1, #0
 80093c4:	2000      	movs	r0, #0
 80093c6:	f7ff fe57 	bl	8009078 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80093ca:	2100      	movs	r1, #0
 80093cc:	2040      	movs	r0, #64	@ 0x40
 80093ce:	f7ff fe53 	bl	8009078 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80093d2:	2100      	movs	r1, #0
 80093d4:	208d      	movs	r0, #141	@ 0x8d
 80093d6:	f7ff fe4f 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80093da:	2100      	movs	r1, #0
 80093dc:	2014      	movs	r0, #20
 80093de:	f7ff fe4b 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80093e2:	2100      	movs	r1, #0
 80093e4:	2020      	movs	r0, #32
 80093e6:	f7ff fe47 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80093ea:	2100      	movs	r1, #0
 80093ec:	2002      	movs	r0, #2
 80093ee:	f7ff fe43 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80093f2:	2100      	movs	r1, #0
 80093f4:	20a1      	movs	r0, #161	@ 0xa1
 80093f6:	f7ff fe3f 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80093fa:	2100      	movs	r1, #0
 80093fc:	20c0      	movs	r0, #192	@ 0xc0
 80093fe:	f7ff fe3b 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8009402:	2100      	movs	r1, #0
 8009404:	20da      	movs	r0, #218	@ 0xda
 8009406:	f7ff fe37 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800940a:	2100      	movs	r1, #0
 800940c:	2012      	movs	r0, #18
 800940e:	f7ff fe33 	bl	8009078 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8009412:	2100      	movs	r1, #0
 8009414:	2081      	movs	r0, #129	@ 0x81
 8009416:	f7ff fe2f 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800941a:	2100      	movs	r1, #0
 800941c:	20ef      	movs	r0, #239	@ 0xef
 800941e:	f7ff fe2b 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8009422:	2100      	movs	r1, #0
 8009424:	20d9      	movs	r0, #217	@ 0xd9
 8009426:	f7ff fe27 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800942a:	2100      	movs	r1, #0
 800942c:	20f1      	movs	r0, #241	@ 0xf1
 800942e:	f7ff fe23 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8009432:	2100      	movs	r1, #0
 8009434:	20db      	movs	r0, #219	@ 0xdb
 8009436:	f7ff fe1f 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800943a:	2100      	movs	r1, #0
 800943c:	2030      	movs	r0, #48	@ 0x30
 800943e:	f7ff fe1b 	bl	8009078 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8009442:	2100      	movs	r1, #0
 8009444:	20a4      	movs	r0, #164	@ 0xa4
 8009446:	f7ff fe17 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800944a:	2100      	movs	r1, #0
 800944c:	20a6      	movs	r0, #166	@ 0xa6
 800944e:	f7ff fe13 	bl	8009078 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8009452:	2100      	movs	r1, #0
 8009454:	20af      	movs	r0, #175	@ 0xaf
 8009456:	f7ff fe0f 	bl	8009078 <OLED_WR_Byte>
	OLED_Clear(); 
 800945a:	f7ff fe57 	bl	800910c <OLED_Clear>
 800945e:	bf00      	nop
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	40023800 	.word	0x40023800
 8009468:	40021000 	.word	0x40021000

0800946c <atoi>:
 800946c:	220a      	movs	r2, #10
 800946e:	2100      	movs	r1, #0
 8009470:	f000 b87a 	b.w	8009568 <strtol>

08009474 <_strtol_l.constprop.0>:
 8009474:	2b24      	cmp	r3, #36	@ 0x24
 8009476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800947a:	4686      	mov	lr, r0
 800947c:	4690      	mov	r8, r2
 800947e:	d801      	bhi.n	8009484 <_strtol_l.constprop.0+0x10>
 8009480:	2b01      	cmp	r3, #1
 8009482:	d106      	bne.n	8009492 <_strtol_l.constprop.0+0x1e>
 8009484:	f000 fe5c 	bl	800a140 <__errno>
 8009488:	2316      	movs	r3, #22
 800948a:	6003      	str	r3, [r0, #0]
 800948c:	2000      	movs	r0, #0
 800948e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009492:	4834      	ldr	r0, [pc, #208]	@ (8009564 <_strtol_l.constprop.0+0xf0>)
 8009494:	460d      	mov	r5, r1
 8009496:	462a      	mov	r2, r5
 8009498:	f815 4b01 	ldrb.w	r4, [r5], #1
 800949c:	5d06      	ldrb	r6, [r0, r4]
 800949e:	f016 0608 	ands.w	r6, r6, #8
 80094a2:	d1f8      	bne.n	8009496 <_strtol_l.constprop.0+0x22>
 80094a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80094a6:	d12d      	bne.n	8009504 <_strtol_l.constprop.0+0x90>
 80094a8:	782c      	ldrb	r4, [r5, #0]
 80094aa:	2601      	movs	r6, #1
 80094ac:	1c95      	adds	r5, r2, #2
 80094ae:	f033 0210 	bics.w	r2, r3, #16
 80094b2:	d109      	bne.n	80094c8 <_strtol_l.constprop.0+0x54>
 80094b4:	2c30      	cmp	r4, #48	@ 0x30
 80094b6:	d12a      	bne.n	800950e <_strtol_l.constprop.0+0x9a>
 80094b8:	782a      	ldrb	r2, [r5, #0]
 80094ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80094be:	2a58      	cmp	r2, #88	@ 0x58
 80094c0:	d125      	bne.n	800950e <_strtol_l.constprop.0+0x9a>
 80094c2:	786c      	ldrb	r4, [r5, #1]
 80094c4:	2310      	movs	r3, #16
 80094c6:	3502      	adds	r5, #2
 80094c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80094cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80094d0:	2200      	movs	r2, #0
 80094d2:	fbbc f9f3 	udiv	r9, ip, r3
 80094d6:	4610      	mov	r0, r2
 80094d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80094dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80094e0:	2f09      	cmp	r7, #9
 80094e2:	d81b      	bhi.n	800951c <_strtol_l.constprop.0+0xa8>
 80094e4:	463c      	mov	r4, r7
 80094e6:	42a3      	cmp	r3, r4
 80094e8:	dd27      	ble.n	800953a <_strtol_l.constprop.0+0xc6>
 80094ea:	1c57      	adds	r7, r2, #1
 80094ec:	d007      	beq.n	80094fe <_strtol_l.constprop.0+0x8a>
 80094ee:	4581      	cmp	r9, r0
 80094f0:	d320      	bcc.n	8009534 <_strtol_l.constprop.0+0xc0>
 80094f2:	d101      	bne.n	80094f8 <_strtol_l.constprop.0+0x84>
 80094f4:	45a2      	cmp	sl, r4
 80094f6:	db1d      	blt.n	8009534 <_strtol_l.constprop.0+0xc0>
 80094f8:	fb00 4003 	mla	r0, r0, r3, r4
 80094fc:	2201      	movs	r2, #1
 80094fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009502:	e7eb      	b.n	80094dc <_strtol_l.constprop.0+0x68>
 8009504:	2c2b      	cmp	r4, #43	@ 0x2b
 8009506:	bf04      	itt	eq
 8009508:	782c      	ldrbeq	r4, [r5, #0]
 800950a:	1c95      	addeq	r5, r2, #2
 800950c:	e7cf      	b.n	80094ae <_strtol_l.constprop.0+0x3a>
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1da      	bne.n	80094c8 <_strtol_l.constprop.0+0x54>
 8009512:	2c30      	cmp	r4, #48	@ 0x30
 8009514:	bf0c      	ite	eq
 8009516:	2308      	moveq	r3, #8
 8009518:	230a      	movne	r3, #10
 800951a:	e7d5      	b.n	80094c8 <_strtol_l.constprop.0+0x54>
 800951c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009520:	2f19      	cmp	r7, #25
 8009522:	d801      	bhi.n	8009528 <_strtol_l.constprop.0+0xb4>
 8009524:	3c37      	subs	r4, #55	@ 0x37
 8009526:	e7de      	b.n	80094e6 <_strtol_l.constprop.0+0x72>
 8009528:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800952c:	2f19      	cmp	r7, #25
 800952e:	d804      	bhi.n	800953a <_strtol_l.constprop.0+0xc6>
 8009530:	3c57      	subs	r4, #87	@ 0x57
 8009532:	e7d8      	b.n	80094e6 <_strtol_l.constprop.0+0x72>
 8009534:	f04f 32ff 	mov.w	r2, #4294967295
 8009538:	e7e1      	b.n	80094fe <_strtol_l.constprop.0+0x8a>
 800953a:	1c53      	adds	r3, r2, #1
 800953c:	d108      	bne.n	8009550 <_strtol_l.constprop.0+0xdc>
 800953e:	2322      	movs	r3, #34	@ 0x22
 8009540:	f8ce 3000 	str.w	r3, [lr]
 8009544:	4660      	mov	r0, ip
 8009546:	f1b8 0f00 	cmp.w	r8, #0
 800954a:	d0a0      	beq.n	800948e <_strtol_l.constprop.0+0x1a>
 800954c:	1e69      	subs	r1, r5, #1
 800954e:	e006      	b.n	800955e <_strtol_l.constprop.0+0xea>
 8009550:	b106      	cbz	r6, 8009554 <_strtol_l.constprop.0+0xe0>
 8009552:	4240      	negs	r0, r0
 8009554:	f1b8 0f00 	cmp.w	r8, #0
 8009558:	d099      	beq.n	800948e <_strtol_l.constprop.0+0x1a>
 800955a:	2a00      	cmp	r2, #0
 800955c:	d1f6      	bne.n	800954c <_strtol_l.constprop.0+0xd8>
 800955e:	f8c8 1000 	str.w	r1, [r8]
 8009562:	e794      	b.n	800948e <_strtol_l.constprop.0+0x1a>
 8009564:	0800ce3d 	.word	0x0800ce3d

08009568 <strtol>:
 8009568:	4613      	mov	r3, r2
 800956a:	460a      	mov	r2, r1
 800956c:	4601      	mov	r1, r0
 800956e:	4802      	ldr	r0, [pc, #8]	@ (8009578 <strtol+0x10>)
 8009570:	6800      	ldr	r0, [r0, #0]
 8009572:	f7ff bf7f 	b.w	8009474 <_strtol_l.constprop.0>
 8009576:	bf00      	nop
 8009578:	2000001c 	.word	0x2000001c

0800957c <__cvt>:
 800957c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009580:	ec57 6b10 	vmov	r6, r7, d0
 8009584:	2f00      	cmp	r7, #0
 8009586:	460c      	mov	r4, r1
 8009588:	4619      	mov	r1, r3
 800958a:	463b      	mov	r3, r7
 800958c:	bfbb      	ittet	lt
 800958e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009592:	461f      	movlt	r7, r3
 8009594:	2300      	movge	r3, #0
 8009596:	232d      	movlt	r3, #45	@ 0x2d
 8009598:	700b      	strb	r3, [r1, #0]
 800959a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800959c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80095a0:	4691      	mov	r9, r2
 80095a2:	f023 0820 	bic.w	r8, r3, #32
 80095a6:	bfbc      	itt	lt
 80095a8:	4632      	movlt	r2, r6
 80095aa:	4616      	movlt	r6, r2
 80095ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80095b0:	d005      	beq.n	80095be <__cvt+0x42>
 80095b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80095b6:	d100      	bne.n	80095ba <__cvt+0x3e>
 80095b8:	3401      	adds	r4, #1
 80095ba:	2102      	movs	r1, #2
 80095bc:	e000      	b.n	80095c0 <__cvt+0x44>
 80095be:	2103      	movs	r1, #3
 80095c0:	ab03      	add	r3, sp, #12
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	ab02      	add	r3, sp, #8
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	ec47 6b10 	vmov	d0, r6, r7
 80095cc:	4653      	mov	r3, sl
 80095ce:	4622      	mov	r2, r4
 80095d0:	f000 fe7a 	bl	800a2c8 <_dtoa_r>
 80095d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80095d8:	4605      	mov	r5, r0
 80095da:	d119      	bne.n	8009610 <__cvt+0x94>
 80095dc:	f019 0f01 	tst.w	r9, #1
 80095e0:	d00e      	beq.n	8009600 <__cvt+0x84>
 80095e2:	eb00 0904 	add.w	r9, r0, r4
 80095e6:	2200      	movs	r2, #0
 80095e8:	2300      	movs	r3, #0
 80095ea:	4630      	mov	r0, r6
 80095ec:	4639      	mov	r1, r7
 80095ee:	f7f7 fa6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80095f2:	b108      	cbz	r0, 80095f8 <__cvt+0x7c>
 80095f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80095f8:	2230      	movs	r2, #48	@ 0x30
 80095fa:	9b03      	ldr	r3, [sp, #12]
 80095fc:	454b      	cmp	r3, r9
 80095fe:	d31e      	bcc.n	800963e <__cvt+0xc2>
 8009600:	9b03      	ldr	r3, [sp, #12]
 8009602:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009604:	1b5b      	subs	r3, r3, r5
 8009606:	4628      	mov	r0, r5
 8009608:	6013      	str	r3, [r2, #0]
 800960a:	b004      	add	sp, #16
 800960c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009610:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009614:	eb00 0904 	add.w	r9, r0, r4
 8009618:	d1e5      	bne.n	80095e6 <__cvt+0x6a>
 800961a:	7803      	ldrb	r3, [r0, #0]
 800961c:	2b30      	cmp	r3, #48	@ 0x30
 800961e:	d10a      	bne.n	8009636 <__cvt+0xba>
 8009620:	2200      	movs	r2, #0
 8009622:	2300      	movs	r3, #0
 8009624:	4630      	mov	r0, r6
 8009626:	4639      	mov	r1, r7
 8009628:	f7f7 fa4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800962c:	b918      	cbnz	r0, 8009636 <__cvt+0xba>
 800962e:	f1c4 0401 	rsb	r4, r4, #1
 8009632:	f8ca 4000 	str.w	r4, [sl]
 8009636:	f8da 3000 	ldr.w	r3, [sl]
 800963a:	4499      	add	r9, r3
 800963c:	e7d3      	b.n	80095e6 <__cvt+0x6a>
 800963e:	1c59      	adds	r1, r3, #1
 8009640:	9103      	str	r1, [sp, #12]
 8009642:	701a      	strb	r2, [r3, #0]
 8009644:	e7d9      	b.n	80095fa <__cvt+0x7e>

08009646 <__exponent>:
 8009646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009648:	2900      	cmp	r1, #0
 800964a:	bfba      	itte	lt
 800964c:	4249      	neglt	r1, r1
 800964e:	232d      	movlt	r3, #45	@ 0x2d
 8009650:	232b      	movge	r3, #43	@ 0x2b
 8009652:	2909      	cmp	r1, #9
 8009654:	7002      	strb	r2, [r0, #0]
 8009656:	7043      	strb	r3, [r0, #1]
 8009658:	dd29      	ble.n	80096ae <__exponent+0x68>
 800965a:	f10d 0307 	add.w	r3, sp, #7
 800965e:	461d      	mov	r5, r3
 8009660:	270a      	movs	r7, #10
 8009662:	461a      	mov	r2, r3
 8009664:	fbb1 f6f7 	udiv	r6, r1, r7
 8009668:	fb07 1416 	mls	r4, r7, r6, r1
 800966c:	3430      	adds	r4, #48	@ 0x30
 800966e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009672:	460c      	mov	r4, r1
 8009674:	2c63      	cmp	r4, #99	@ 0x63
 8009676:	f103 33ff 	add.w	r3, r3, #4294967295
 800967a:	4631      	mov	r1, r6
 800967c:	dcf1      	bgt.n	8009662 <__exponent+0x1c>
 800967e:	3130      	adds	r1, #48	@ 0x30
 8009680:	1e94      	subs	r4, r2, #2
 8009682:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009686:	1c41      	adds	r1, r0, #1
 8009688:	4623      	mov	r3, r4
 800968a:	42ab      	cmp	r3, r5
 800968c:	d30a      	bcc.n	80096a4 <__exponent+0x5e>
 800968e:	f10d 0309 	add.w	r3, sp, #9
 8009692:	1a9b      	subs	r3, r3, r2
 8009694:	42ac      	cmp	r4, r5
 8009696:	bf88      	it	hi
 8009698:	2300      	movhi	r3, #0
 800969a:	3302      	adds	r3, #2
 800969c:	4403      	add	r3, r0
 800969e:	1a18      	subs	r0, r3, r0
 80096a0:	b003      	add	sp, #12
 80096a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80096a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80096ac:	e7ed      	b.n	800968a <__exponent+0x44>
 80096ae:	2330      	movs	r3, #48	@ 0x30
 80096b0:	3130      	adds	r1, #48	@ 0x30
 80096b2:	7083      	strb	r3, [r0, #2]
 80096b4:	70c1      	strb	r1, [r0, #3]
 80096b6:	1d03      	adds	r3, r0, #4
 80096b8:	e7f1      	b.n	800969e <__exponent+0x58>
	...

080096bc <_printf_float>:
 80096bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c0:	b08d      	sub	sp, #52	@ 0x34
 80096c2:	460c      	mov	r4, r1
 80096c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80096c8:	4616      	mov	r6, r2
 80096ca:	461f      	mov	r7, r3
 80096cc:	4605      	mov	r5, r0
 80096ce:	f000 fced 	bl	800a0ac <_localeconv_r>
 80096d2:	6803      	ldr	r3, [r0, #0]
 80096d4:	9304      	str	r3, [sp, #16]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7f6 fdca 	bl	8000270 <strlen>
 80096dc:	2300      	movs	r3, #0
 80096de:	930a      	str	r3, [sp, #40]	@ 0x28
 80096e0:	f8d8 3000 	ldr.w	r3, [r8]
 80096e4:	9005      	str	r0, [sp, #20]
 80096e6:	3307      	adds	r3, #7
 80096e8:	f023 0307 	bic.w	r3, r3, #7
 80096ec:	f103 0208 	add.w	r2, r3, #8
 80096f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80096f4:	f8d4 b000 	ldr.w	fp, [r4]
 80096f8:	f8c8 2000 	str.w	r2, [r8]
 80096fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009700:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009704:	9307      	str	r3, [sp, #28]
 8009706:	f8cd 8018 	str.w	r8, [sp, #24]
 800970a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800970e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009712:	4b9c      	ldr	r3, [pc, #624]	@ (8009984 <_printf_float+0x2c8>)
 8009714:	f04f 32ff 	mov.w	r2, #4294967295
 8009718:	f7f7 fa08 	bl	8000b2c <__aeabi_dcmpun>
 800971c:	bb70      	cbnz	r0, 800977c <_printf_float+0xc0>
 800971e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009722:	4b98      	ldr	r3, [pc, #608]	@ (8009984 <_printf_float+0x2c8>)
 8009724:	f04f 32ff 	mov.w	r2, #4294967295
 8009728:	f7f7 f9e2 	bl	8000af0 <__aeabi_dcmple>
 800972c:	bb30      	cbnz	r0, 800977c <_printf_float+0xc0>
 800972e:	2200      	movs	r2, #0
 8009730:	2300      	movs	r3, #0
 8009732:	4640      	mov	r0, r8
 8009734:	4649      	mov	r1, r9
 8009736:	f7f7 f9d1 	bl	8000adc <__aeabi_dcmplt>
 800973a:	b110      	cbz	r0, 8009742 <_printf_float+0x86>
 800973c:	232d      	movs	r3, #45	@ 0x2d
 800973e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009742:	4a91      	ldr	r2, [pc, #580]	@ (8009988 <_printf_float+0x2cc>)
 8009744:	4b91      	ldr	r3, [pc, #580]	@ (800998c <_printf_float+0x2d0>)
 8009746:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800974a:	bf94      	ite	ls
 800974c:	4690      	movls	r8, r2
 800974e:	4698      	movhi	r8, r3
 8009750:	2303      	movs	r3, #3
 8009752:	6123      	str	r3, [r4, #16]
 8009754:	f02b 0304 	bic.w	r3, fp, #4
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	f04f 0900 	mov.w	r9, #0
 800975e:	9700      	str	r7, [sp, #0]
 8009760:	4633      	mov	r3, r6
 8009762:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009764:	4621      	mov	r1, r4
 8009766:	4628      	mov	r0, r5
 8009768:	f000 f9d2 	bl	8009b10 <_printf_common>
 800976c:	3001      	adds	r0, #1
 800976e:	f040 808d 	bne.w	800988c <_printf_float+0x1d0>
 8009772:	f04f 30ff 	mov.w	r0, #4294967295
 8009776:	b00d      	add	sp, #52	@ 0x34
 8009778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977c:	4642      	mov	r2, r8
 800977e:	464b      	mov	r3, r9
 8009780:	4640      	mov	r0, r8
 8009782:	4649      	mov	r1, r9
 8009784:	f7f7 f9d2 	bl	8000b2c <__aeabi_dcmpun>
 8009788:	b140      	cbz	r0, 800979c <_printf_float+0xe0>
 800978a:	464b      	mov	r3, r9
 800978c:	2b00      	cmp	r3, #0
 800978e:	bfbc      	itt	lt
 8009790:	232d      	movlt	r3, #45	@ 0x2d
 8009792:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009796:	4a7e      	ldr	r2, [pc, #504]	@ (8009990 <_printf_float+0x2d4>)
 8009798:	4b7e      	ldr	r3, [pc, #504]	@ (8009994 <_printf_float+0x2d8>)
 800979a:	e7d4      	b.n	8009746 <_printf_float+0x8a>
 800979c:	6863      	ldr	r3, [r4, #4]
 800979e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80097a2:	9206      	str	r2, [sp, #24]
 80097a4:	1c5a      	adds	r2, r3, #1
 80097a6:	d13b      	bne.n	8009820 <_printf_float+0x164>
 80097a8:	2306      	movs	r3, #6
 80097aa:	6063      	str	r3, [r4, #4]
 80097ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80097b0:	2300      	movs	r3, #0
 80097b2:	6022      	str	r2, [r4, #0]
 80097b4:	9303      	str	r3, [sp, #12]
 80097b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80097b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80097bc:	ab09      	add	r3, sp, #36	@ 0x24
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	6861      	ldr	r1, [r4, #4]
 80097c2:	ec49 8b10 	vmov	d0, r8, r9
 80097c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80097ca:	4628      	mov	r0, r5
 80097cc:	f7ff fed6 	bl	800957c <__cvt>
 80097d0:	9b06      	ldr	r3, [sp, #24]
 80097d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097d4:	2b47      	cmp	r3, #71	@ 0x47
 80097d6:	4680      	mov	r8, r0
 80097d8:	d129      	bne.n	800982e <_printf_float+0x172>
 80097da:	1cc8      	adds	r0, r1, #3
 80097dc:	db02      	blt.n	80097e4 <_printf_float+0x128>
 80097de:	6863      	ldr	r3, [r4, #4]
 80097e0:	4299      	cmp	r1, r3
 80097e2:	dd41      	ble.n	8009868 <_printf_float+0x1ac>
 80097e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80097e8:	fa5f fa8a 	uxtb.w	sl, sl
 80097ec:	3901      	subs	r1, #1
 80097ee:	4652      	mov	r2, sl
 80097f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80097f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80097f6:	f7ff ff26 	bl	8009646 <__exponent>
 80097fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097fc:	1813      	adds	r3, r2, r0
 80097fe:	2a01      	cmp	r2, #1
 8009800:	4681      	mov	r9, r0
 8009802:	6123      	str	r3, [r4, #16]
 8009804:	dc02      	bgt.n	800980c <_printf_float+0x150>
 8009806:	6822      	ldr	r2, [r4, #0]
 8009808:	07d2      	lsls	r2, r2, #31
 800980a:	d501      	bpl.n	8009810 <_printf_float+0x154>
 800980c:	3301      	adds	r3, #1
 800980e:	6123      	str	r3, [r4, #16]
 8009810:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009814:	2b00      	cmp	r3, #0
 8009816:	d0a2      	beq.n	800975e <_printf_float+0xa2>
 8009818:	232d      	movs	r3, #45	@ 0x2d
 800981a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800981e:	e79e      	b.n	800975e <_printf_float+0xa2>
 8009820:	9a06      	ldr	r2, [sp, #24]
 8009822:	2a47      	cmp	r2, #71	@ 0x47
 8009824:	d1c2      	bne.n	80097ac <_printf_float+0xf0>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1c0      	bne.n	80097ac <_printf_float+0xf0>
 800982a:	2301      	movs	r3, #1
 800982c:	e7bd      	b.n	80097aa <_printf_float+0xee>
 800982e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009832:	d9db      	bls.n	80097ec <_printf_float+0x130>
 8009834:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009838:	d118      	bne.n	800986c <_printf_float+0x1b0>
 800983a:	2900      	cmp	r1, #0
 800983c:	6863      	ldr	r3, [r4, #4]
 800983e:	dd0b      	ble.n	8009858 <_printf_float+0x19c>
 8009840:	6121      	str	r1, [r4, #16]
 8009842:	b913      	cbnz	r3, 800984a <_printf_float+0x18e>
 8009844:	6822      	ldr	r2, [r4, #0]
 8009846:	07d0      	lsls	r0, r2, #31
 8009848:	d502      	bpl.n	8009850 <_printf_float+0x194>
 800984a:	3301      	adds	r3, #1
 800984c:	440b      	add	r3, r1
 800984e:	6123      	str	r3, [r4, #16]
 8009850:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009852:	f04f 0900 	mov.w	r9, #0
 8009856:	e7db      	b.n	8009810 <_printf_float+0x154>
 8009858:	b913      	cbnz	r3, 8009860 <_printf_float+0x1a4>
 800985a:	6822      	ldr	r2, [r4, #0]
 800985c:	07d2      	lsls	r2, r2, #31
 800985e:	d501      	bpl.n	8009864 <_printf_float+0x1a8>
 8009860:	3302      	adds	r3, #2
 8009862:	e7f4      	b.n	800984e <_printf_float+0x192>
 8009864:	2301      	movs	r3, #1
 8009866:	e7f2      	b.n	800984e <_printf_float+0x192>
 8009868:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800986c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800986e:	4299      	cmp	r1, r3
 8009870:	db05      	blt.n	800987e <_printf_float+0x1c2>
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	6121      	str	r1, [r4, #16]
 8009876:	07d8      	lsls	r0, r3, #31
 8009878:	d5ea      	bpl.n	8009850 <_printf_float+0x194>
 800987a:	1c4b      	adds	r3, r1, #1
 800987c:	e7e7      	b.n	800984e <_printf_float+0x192>
 800987e:	2900      	cmp	r1, #0
 8009880:	bfd4      	ite	le
 8009882:	f1c1 0202 	rsble	r2, r1, #2
 8009886:	2201      	movgt	r2, #1
 8009888:	4413      	add	r3, r2
 800988a:	e7e0      	b.n	800984e <_printf_float+0x192>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	055a      	lsls	r2, r3, #21
 8009890:	d407      	bmi.n	80098a2 <_printf_float+0x1e6>
 8009892:	6923      	ldr	r3, [r4, #16]
 8009894:	4642      	mov	r2, r8
 8009896:	4631      	mov	r1, r6
 8009898:	4628      	mov	r0, r5
 800989a:	47b8      	blx	r7
 800989c:	3001      	adds	r0, #1
 800989e:	d12b      	bne.n	80098f8 <_printf_float+0x23c>
 80098a0:	e767      	b.n	8009772 <_printf_float+0xb6>
 80098a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80098a6:	f240 80dd 	bls.w	8009a64 <_printf_float+0x3a8>
 80098aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80098ae:	2200      	movs	r2, #0
 80098b0:	2300      	movs	r3, #0
 80098b2:	f7f7 f909 	bl	8000ac8 <__aeabi_dcmpeq>
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d033      	beq.n	8009922 <_printf_float+0x266>
 80098ba:	4a37      	ldr	r2, [pc, #220]	@ (8009998 <_printf_float+0x2dc>)
 80098bc:	2301      	movs	r3, #1
 80098be:	4631      	mov	r1, r6
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b8      	blx	r7
 80098c4:	3001      	adds	r0, #1
 80098c6:	f43f af54 	beq.w	8009772 <_printf_float+0xb6>
 80098ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80098ce:	4543      	cmp	r3, r8
 80098d0:	db02      	blt.n	80098d8 <_printf_float+0x21c>
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	07d8      	lsls	r0, r3, #31
 80098d6:	d50f      	bpl.n	80098f8 <_printf_float+0x23c>
 80098d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098dc:	4631      	mov	r1, r6
 80098de:	4628      	mov	r0, r5
 80098e0:	47b8      	blx	r7
 80098e2:	3001      	adds	r0, #1
 80098e4:	f43f af45 	beq.w	8009772 <_printf_float+0xb6>
 80098e8:	f04f 0900 	mov.w	r9, #0
 80098ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80098f0:	f104 0a1a 	add.w	sl, r4, #26
 80098f4:	45c8      	cmp	r8, r9
 80098f6:	dc09      	bgt.n	800990c <_printf_float+0x250>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	079b      	lsls	r3, r3, #30
 80098fc:	f100 8103 	bmi.w	8009b06 <_printf_float+0x44a>
 8009900:	68e0      	ldr	r0, [r4, #12]
 8009902:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009904:	4298      	cmp	r0, r3
 8009906:	bfb8      	it	lt
 8009908:	4618      	movlt	r0, r3
 800990a:	e734      	b.n	8009776 <_printf_float+0xba>
 800990c:	2301      	movs	r3, #1
 800990e:	4652      	mov	r2, sl
 8009910:	4631      	mov	r1, r6
 8009912:	4628      	mov	r0, r5
 8009914:	47b8      	blx	r7
 8009916:	3001      	adds	r0, #1
 8009918:	f43f af2b 	beq.w	8009772 <_printf_float+0xb6>
 800991c:	f109 0901 	add.w	r9, r9, #1
 8009920:	e7e8      	b.n	80098f4 <_printf_float+0x238>
 8009922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009924:	2b00      	cmp	r3, #0
 8009926:	dc39      	bgt.n	800999c <_printf_float+0x2e0>
 8009928:	4a1b      	ldr	r2, [pc, #108]	@ (8009998 <_printf_float+0x2dc>)
 800992a:	2301      	movs	r3, #1
 800992c:	4631      	mov	r1, r6
 800992e:	4628      	mov	r0, r5
 8009930:	47b8      	blx	r7
 8009932:	3001      	adds	r0, #1
 8009934:	f43f af1d 	beq.w	8009772 <_printf_float+0xb6>
 8009938:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800993c:	ea59 0303 	orrs.w	r3, r9, r3
 8009940:	d102      	bne.n	8009948 <_printf_float+0x28c>
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	07d9      	lsls	r1, r3, #31
 8009946:	d5d7      	bpl.n	80098f8 <_printf_float+0x23c>
 8009948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800994c:	4631      	mov	r1, r6
 800994e:	4628      	mov	r0, r5
 8009950:	47b8      	blx	r7
 8009952:	3001      	adds	r0, #1
 8009954:	f43f af0d 	beq.w	8009772 <_printf_float+0xb6>
 8009958:	f04f 0a00 	mov.w	sl, #0
 800995c:	f104 0b1a 	add.w	fp, r4, #26
 8009960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009962:	425b      	negs	r3, r3
 8009964:	4553      	cmp	r3, sl
 8009966:	dc01      	bgt.n	800996c <_printf_float+0x2b0>
 8009968:	464b      	mov	r3, r9
 800996a:	e793      	b.n	8009894 <_printf_float+0x1d8>
 800996c:	2301      	movs	r3, #1
 800996e:	465a      	mov	r2, fp
 8009970:	4631      	mov	r1, r6
 8009972:	4628      	mov	r0, r5
 8009974:	47b8      	blx	r7
 8009976:	3001      	adds	r0, #1
 8009978:	f43f aefb 	beq.w	8009772 <_printf_float+0xb6>
 800997c:	f10a 0a01 	add.w	sl, sl, #1
 8009980:	e7ee      	b.n	8009960 <_printf_float+0x2a4>
 8009982:	bf00      	nop
 8009984:	7fefffff 	.word	0x7fefffff
 8009988:	0800cf3d 	.word	0x0800cf3d
 800998c:	0800cf41 	.word	0x0800cf41
 8009990:	0800cf45 	.word	0x0800cf45
 8009994:	0800cf49 	.word	0x0800cf49
 8009998:	0800cf4d 	.word	0x0800cf4d
 800999c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800999e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80099a2:	4553      	cmp	r3, sl
 80099a4:	bfa8      	it	ge
 80099a6:	4653      	movge	r3, sl
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	4699      	mov	r9, r3
 80099ac:	dc36      	bgt.n	8009a1c <_printf_float+0x360>
 80099ae:	f04f 0b00 	mov.w	fp, #0
 80099b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099b6:	f104 021a 	add.w	r2, r4, #26
 80099ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099bc:	9306      	str	r3, [sp, #24]
 80099be:	eba3 0309 	sub.w	r3, r3, r9
 80099c2:	455b      	cmp	r3, fp
 80099c4:	dc31      	bgt.n	8009a2a <_printf_float+0x36e>
 80099c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c8:	459a      	cmp	sl, r3
 80099ca:	dc3a      	bgt.n	8009a42 <_printf_float+0x386>
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	07da      	lsls	r2, r3, #31
 80099d0:	d437      	bmi.n	8009a42 <_printf_float+0x386>
 80099d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d4:	ebaa 0903 	sub.w	r9, sl, r3
 80099d8:	9b06      	ldr	r3, [sp, #24]
 80099da:	ebaa 0303 	sub.w	r3, sl, r3
 80099de:	4599      	cmp	r9, r3
 80099e0:	bfa8      	it	ge
 80099e2:	4699      	movge	r9, r3
 80099e4:	f1b9 0f00 	cmp.w	r9, #0
 80099e8:	dc33      	bgt.n	8009a52 <_printf_float+0x396>
 80099ea:	f04f 0800 	mov.w	r8, #0
 80099ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099f2:	f104 0b1a 	add.w	fp, r4, #26
 80099f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f8:	ebaa 0303 	sub.w	r3, sl, r3
 80099fc:	eba3 0309 	sub.w	r3, r3, r9
 8009a00:	4543      	cmp	r3, r8
 8009a02:	f77f af79 	ble.w	80098f8 <_printf_float+0x23c>
 8009a06:	2301      	movs	r3, #1
 8009a08:	465a      	mov	r2, fp
 8009a0a:	4631      	mov	r1, r6
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	47b8      	blx	r7
 8009a10:	3001      	adds	r0, #1
 8009a12:	f43f aeae 	beq.w	8009772 <_printf_float+0xb6>
 8009a16:	f108 0801 	add.w	r8, r8, #1
 8009a1a:	e7ec      	b.n	80099f6 <_printf_float+0x33a>
 8009a1c:	4642      	mov	r2, r8
 8009a1e:	4631      	mov	r1, r6
 8009a20:	4628      	mov	r0, r5
 8009a22:	47b8      	blx	r7
 8009a24:	3001      	adds	r0, #1
 8009a26:	d1c2      	bne.n	80099ae <_printf_float+0x2f2>
 8009a28:	e6a3      	b.n	8009772 <_printf_float+0xb6>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	4628      	mov	r0, r5
 8009a30:	9206      	str	r2, [sp, #24]
 8009a32:	47b8      	blx	r7
 8009a34:	3001      	adds	r0, #1
 8009a36:	f43f ae9c 	beq.w	8009772 <_printf_float+0xb6>
 8009a3a:	9a06      	ldr	r2, [sp, #24]
 8009a3c:	f10b 0b01 	add.w	fp, fp, #1
 8009a40:	e7bb      	b.n	80099ba <_printf_float+0x2fe>
 8009a42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a46:	4631      	mov	r1, r6
 8009a48:	4628      	mov	r0, r5
 8009a4a:	47b8      	blx	r7
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	d1c0      	bne.n	80099d2 <_printf_float+0x316>
 8009a50:	e68f      	b.n	8009772 <_printf_float+0xb6>
 8009a52:	9a06      	ldr	r2, [sp, #24]
 8009a54:	464b      	mov	r3, r9
 8009a56:	4442      	add	r2, r8
 8009a58:	4631      	mov	r1, r6
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	47b8      	blx	r7
 8009a5e:	3001      	adds	r0, #1
 8009a60:	d1c3      	bne.n	80099ea <_printf_float+0x32e>
 8009a62:	e686      	b.n	8009772 <_printf_float+0xb6>
 8009a64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009a68:	f1ba 0f01 	cmp.w	sl, #1
 8009a6c:	dc01      	bgt.n	8009a72 <_printf_float+0x3b6>
 8009a6e:	07db      	lsls	r3, r3, #31
 8009a70:	d536      	bpl.n	8009ae0 <_printf_float+0x424>
 8009a72:	2301      	movs	r3, #1
 8009a74:	4642      	mov	r2, r8
 8009a76:	4631      	mov	r1, r6
 8009a78:	4628      	mov	r0, r5
 8009a7a:	47b8      	blx	r7
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	f43f ae78 	beq.w	8009772 <_printf_float+0xb6>
 8009a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a86:	4631      	mov	r1, r6
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b8      	blx	r7
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	f43f ae70 	beq.w	8009772 <_printf_float+0xb6>
 8009a92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a96:	2200      	movs	r2, #0
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a9e:	f7f7 f813 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aa2:	b9c0      	cbnz	r0, 8009ad6 <_printf_float+0x41a>
 8009aa4:	4653      	mov	r3, sl
 8009aa6:	f108 0201 	add.w	r2, r8, #1
 8009aaa:	4631      	mov	r1, r6
 8009aac:	4628      	mov	r0, r5
 8009aae:	47b8      	blx	r7
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	d10c      	bne.n	8009ace <_printf_float+0x412>
 8009ab4:	e65d      	b.n	8009772 <_printf_float+0xb6>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	465a      	mov	r2, fp
 8009aba:	4631      	mov	r1, r6
 8009abc:	4628      	mov	r0, r5
 8009abe:	47b8      	blx	r7
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	f43f ae56 	beq.w	8009772 <_printf_float+0xb6>
 8009ac6:	f108 0801 	add.w	r8, r8, #1
 8009aca:	45d0      	cmp	r8, sl
 8009acc:	dbf3      	blt.n	8009ab6 <_printf_float+0x3fa>
 8009ace:	464b      	mov	r3, r9
 8009ad0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009ad4:	e6df      	b.n	8009896 <_printf_float+0x1da>
 8009ad6:	f04f 0800 	mov.w	r8, #0
 8009ada:	f104 0b1a 	add.w	fp, r4, #26
 8009ade:	e7f4      	b.n	8009aca <_printf_float+0x40e>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	4642      	mov	r2, r8
 8009ae4:	e7e1      	b.n	8009aaa <_printf_float+0x3ee>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	464a      	mov	r2, r9
 8009aea:	4631      	mov	r1, r6
 8009aec:	4628      	mov	r0, r5
 8009aee:	47b8      	blx	r7
 8009af0:	3001      	adds	r0, #1
 8009af2:	f43f ae3e 	beq.w	8009772 <_printf_float+0xb6>
 8009af6:	f108 0801 	add.w	r8, r8, #1
 8009afa:	68e3      	ldr	r3, [r4, #12]
 8009afc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009afe:	1a5b      	subs	r3, r3, r1
 8009b00:	4543      	cmp	r3, r8
 8009b02:	dcf0      	bgt.n	8009ae6 <_printf_float+0x42a>
 8009b04:	e6fc      	b.n	8009900 <_printf_float+0x244>
 8009b06:	f04f 0800 	mov.w	r8, #0
 8009b0a:	f104 0919 	add.w	r9, r4, #25
 8009b0e:	e7f4      	b.n	8009afa <_printf_float+0x43e>

08009b10 <_printf_common>:
 8009b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b14:	4616      	mov	r6, r2
 8009b16:	4698      	mov	r8, r3
 8009b18:	688a      	ldr	r2, [r1, #8]
 8009b1a:	690b      	ldr	r3, [r1, #16]
 8009b1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b20:	4293      	cmp	r3, r2
 8009b22:	bfb8      	it	lt
 8009b24:	4613      	movlt	r3, r2
 8009b26:	6033      	str	r3, [r6, #0]
 8009b28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b2c:	4607      	mov	r7, r0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	b10a      	cbz	r2, 8009b36 <_printf_common+0x26>
 8009b32:	3301      	adds	r3, #1
 8009b34:	6033      	str	r3, [r6, #0]
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	0699      	lsls	r1, r3, #26
 8009b3a:	bf42      	ittt	mi
 8009b3c:	6833      	ldrmi	r3, [r6, #0]
 8009b3e:	3302      	addmi	r3, #2
 8009b40:	6033      	strmi	r3, [r6, #0]
 8009b42:	6825      	ldr	r5, [r4, #0]
 8009b44:	f015 0506 	ands.w	r5, r5, #6
 8009b48:	d106      	bne.n	8009b58 <_printf_common+0x48>
 8009b4a:	f104 0a19 	add.w	sl, r4, #25
 8009b4e:	68e3      	ldr	r3, [r4, #12]
 8009b50:	6832      	ldr	r2, [r6, #0]
 8009b52:	1a9b      	subs	r3, r3, r2
 8009b54:	42ab      	cmp	r3, r5
 8009b56:	dc26      	bgt.n	8009ba6 <_printf_common+0x96>
 8009b58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b5c:	6822      	ldr	r2, [r4, #0]
 8009b5e:	3b00      	subs	r3, #0
 8009b60:	bf18      	it	ne
 8009b62:	2301      	movne	r3, #1
 8009b64:	0692      	lsls	r2, r2, #26
 8009b66:	d42b      	bmi.n	8009bc0 <_printf_common+0xb0>
 8009b68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b6c:	4641      	mov	r1, r8
 8009b6e:	4638      	mov	r0, r7
 8009b70:	47c8      	blx	r9
 8009b72:	3001      	adds	r0, #1
 8009b74:	d01e      	beq.n	8009bb4 <_printf_common+0xa4>
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	6922      	ldr	r2, [r4, #16]
 8009b7a:	f003 0306 	and.w	r3, r3, #6
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	bf02      	ittt	eq
 8009b82:	68e5      	ldreq	r5, [r4, #12]
 8009b84:	6833      	ldreq	r3, [r6, #0]
 8009b86:	1aed      	subeq	r5, r5, r3
 8009b88:	68a3      	ldr	r3, [r4, #8]
 8009b8a:	bf0c      	ite	eq
 8009b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b90:	2500      	movne	r5, #0
 8009b92:	4293      	cmp	r3, r2
 8009b94:	bfc4      	itt	gt
 8009b96:	1a9b      	subgt	r3, r3, r2
 8009b98:	18ed      	addgt	r5, r5, r3
 8009b9a:	2600      	movs	r6, #0
 8009b9c:	341a      	adds	r4, #26
 8009b9e:	42b5      	cmp	r5, r6
 8009ba0:	d11a      	bne.n	8009bd8 <_printf_common+0xc8>
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	e008      	b.n	8009bb8 <_printf_common+0xa8>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4652      	mov	r2, sl
 8009baa:	4641      	mov	r1, r8
 8009bac:	4638      	mov	r0, r7
 8009bae:	47c8      	blx	r9
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	d103      	bne.n	8009bbc <_printf_common+0xac>
 8009bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bbc:	3501      	adds	r5, #1
 8009bbe:	e7c6      	b.n	8009b4e <_printf_common+0x3e>
 8009bc0:	18e1      	adds	r1, r4, r3
 8009bc2:	1c5a      	adds	r2, r3, #1
 8009bc4:	2030      	movs	r0, #48	@ 0x30
 8009bc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009bca:	4422      	add	r2, r4
 8009bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009bd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009bd4:	3302      	adds	r3, #2
 8009bd6:	e7c7      	b.n	8009b68 <_printf_common+0x58>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	4622      	mov	r2, r4
 8009bdc:	4641      	mov	r1, r8
 8009bde:	4638      	mov	r0, r7
 8009be0:	47c8      	blx	r9
 8009be2:	3001      	adds	r0, #1
 8009be4:	d0e6      	beq.n	8009bb4 <_printf_common+0xa4>
 8009be6:	3601      	adds	r6, #1
 8009be8:	e7d9      	b.n	8009b9e <_printf_common+0x8e>
	...

08009bec <_printf_i>:
 8009bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf0:	7e0f      	ldrb	r7, [r1, #24]
 8009bf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009bf4:	2f78      	cmp	r7, #120	@ 0x78
 8009bf6:	4691      	mov	r9, r2
 8009bf8:	4680      	mov	r8, r0
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	469a      	mov	sl, r3
 8009bfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c02:	d807      	bhi.n	8009c14 <_printf_i+0x28>
 8009c04:	2f62      	cmp	r7, #98	@ 0x62
 8009c06:	d80a      	bhi.n	8009c1e <_printf_i+0x32>
 8009c08:	2f00      	cmp	r7, #0
 8009c0a:	f000 80d2 	beq.w	8009db2 <_printf_i+0x1c6>
 8009c0e:	2f58      	cmp	r7, #88	@ 0x58
 8009c10:	f000 80b9 	beq.w	8009d86 <_printf_i+0x19a>
 8009c14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c1c:	e03a      	b.n	8009c94 <_printf_i+0xa8>
 8009c1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c22:	2b15      	cmp	r3, #21
 8009c24:	d8f6      	bhi.n	8009c14 <_printf_i+0x28>
 8009c26:	a101      	add	r1, pc, #4	@ (adr r1, 8009c2c <_printf_i+0x40>)
 8009c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c2c:	08009c85 	.word	0x08009c85
 8009c30:	08009c99 	.word	0x08009c99
 8009c34:	08009c15 	.word	0x08009c15
 8009c38:	08009c15 	.word	0x08009c15
 8009c3c:	08009c15 	.word	0x08009c15
 8009c40:	08009c15 	.word	0x08009c15
 8009c44:	08009c99 	.word	0x08009c99
 8009c48:	08009c15 	.word	0x08009c15
 8009c4c:	08009c15 	.word	0x08009c15
 8009c50:	08009c15 	.word	0x08009c15
 8009c54:	08009c15 	.word	0x08009c15
 8009c58:	08009d99 	.word	0x08009d99
 8009c5c:	08009cc3 	.word	0x08009cc3
 8009c60:	08009d53 	.word	0x08009d53
 8009c64:	08009c15 	.word	0x08009c15
 8009c68:	08009c15 	.word	0x08009c15
 8009c6c:	08009dbb 	.word	0x08009dbb
 8009c70:	08009c15 	.word	0x08009c15
 8009c74:	08009cc3 	.word	0x08009cc3
 8009c78:	08009c15 	.word	0x08009c15
 8009c7c:	08009c15 	.word	0x08009c15
 8009c80:	08009d5b 	.word	0x08009d5b
 8009c84:	6833      	ldr	r3, [r6, #0]
 8009c86:	1d1a      	adds	r2, r3, #4
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6032      	str	r2, [r6, #0]
 8009c8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c94:	2301      	movs	r3, #1
 8009c96:	e09d      	b.n	8009dd4 <_printf_i+0x1e8>
 8009c98:	6833      	ldr	r3, [r6, #0]
 8009c9a:	6820      	ldr	r0, [r4, #0]
 8009c9c:	1d19      	adds	r1, r3, #4
 8009c9e:	6031      	str	r1, [r6, #0]
 8009ca0:	0606      	lsls	r6, r0, #24
 8009ca2:	d501      	bpl.n	8009ca8 <_printf_i+0xbc>
 8009ca4:	681d      	ldr	r5, [r3, #0]
 8009ca6:	e003      	b.n	8009cb0 <_printf_i+0xc4>
 8009ca8:	0645      	lsls	r5, r0, #25
 8009caa:	d5fb      	bpl.n	8009ca4 <_printf_i+0xb8>
 8009cac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009cb0:	2d00      	cmp	r5, #0
 8009cb2:	da03      	bge.n	8009cbc <_printf_i+0xd0>
 8009cb4:	232d      	movs	r3, #45	@ 0x2d
 8009cb6:	426d      	negs	r5, r5
 8009cb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cbc:	4859      	ldr	r0, [pc, #356]	@ (8009e24 <_printf_i+0x238>)
 8009cbe:	230a      	movs	r3, #10
 8009cc0:	e011      	b.n	8009ce6 <_printf_i+0xfa>
 8009cc2:	6821      	ldr	r1, [r4, #0]
 8009cc4:	6833      	ldr	r3, [r6, #0]
 8009cc6:	0608      	lsls	r0, r1, #24
 8009cc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ccc:	d402      	bmi.n	8009cd4 <_printf_i+0xe8>
 8009cce:	0649      	lsls	r1, r1, #25
 8009cd0:	bf48      	it	mi
 8009cd2:	b2ad      	uxthmi	r5, r5
 8009cd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8009cd6:	4853      	ldr	r0, [pc, #332]	@ (8009e24 <_printf_i+0x238>)
 8009cd8:	6033      	str	r3, [r6, #0]
 8009cda:	bf14      	ite	ne
 8009cdc:	230a      	movne	r3, #10
 8009cde:	2308      	moveq	r3, #8
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ce6:	6866      	ldr	r6, [r4, #4]
 8009ce8:	60a6      	str	r6, [r4, #8]
 8009cea:	2e00      	cmp	r6, #0
 8009cec:	bfa2      	ittt	ge
 8009cee:	6821      	ldrge	r1, [r4, #0]
 8009cf0:	f021 0104 	bicge.w	r1, r1, #4
 8009cf4:	6021      	strge	r1, [r4, #0]
 8009cf6:	b90d      	cbnz	r5, 8009cfc <_printf_i+0x110>
 8009cf8:	2e00      	cmp	r6, #0
 8009cfa:	d04b      	beq.n	8009d94 <_printf_i+0x1a8>
 8009cfc:	4616      	mov	r6, r2
 8009cfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d02:	fb03 5711 	mls	r7, r3, r1, r5
 8009d06:	5dc7      	ldrb	r7, [r0, r7]
 8009d08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d0c:	462f      	mov	r7, r5
 8009d0e:	42bb      	cmp	r3, r7
 8009d10:	460d      	mov	r5, r1
 8009d12:	d9f4      	bls.n	8009cfe <_printf_i+0x112>
 8009d14:	2b08      	cmp	r3, #8
 8009d16:	d10b      	bne.n	8009d30 <_printf_i+0x144>
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	07df      	lsls	r7, r3, #31
 8009d1c:	d508      	bpl.n	8009d30 <_printf_i+0x144>
 8009d1e:	6923      	ldr	r3, [r4, #16]
 8009d20:	6861      	ldr	r1, [r4, #4]
 8009d22:	4299      	cmp	r1, r3
 8009d24:	bfde      	ittt	le
 8009d26:	2330      	movle	r3, #48	@ 0x30
 8009d28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d30:	1b92      	subs	r2, r2, r6
 8009d32:	6122      	str	r2, [r4, #16]
 8009d34:	f8cd a000 	str.w	sl, [sp]
 8009d38:	464b      	mov	r3, r9
 8009d3a:	aa03      	add	r2, sp, #12
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	4640      	mov	r0, r8
 8009d40:	f7ff fee6 	bl	8009b10 <_printf_common>
 8009d44:	3001      	adds	r0, #1
 8009d46:	d14a      	bne.n	8009dde <_printf_i+0x1f2>
 8009d48:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4c:	b004      	add	sp, #16
 8009d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	f043 0320 	orr.w	r3, r3, #32
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	4833      	ldr	r0, [pc, #204]	@ (8009e28 <_printf_i+0x23c>)
 8009d5c:	2778      	movs	r7, #120	@ 0x78
 8009d5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	6831      	ldr	r1, [r6, #0]
 8009d66:	061f      	lsls	r7, r3, #24
 8009d68:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d6c:	d402      	bmi.n	8009d74 <_printf_i+0x188>
 8009d6e:	065f      	lsls	r7, r3, #25
 8009d70:	bf48      	it	mi
 8009d72:	b2ad      	uxthmi	r5, r5
 8009d74:	6031      	str	r1, [r6, #0]
 8009d76:	07d9      	lsls	r1, r3, #31
 8009d78:	bf44      	itt	mi
 8009d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8009d7e:	6023      	strmi	r3, [r4, #0]
 8009d80:	b11d      	cbz	r5, 8009d8a <_printf_i+0x19e>
 8009d82:	2310      	movs	r3, #16
 8009d84:	e7ac      	b.n	8009ce0 <_printf_i+0xf4>
 8009d86:	4827      	ldr	r0, [pc, #156]	@ (8009e24 <_printf_i+0x238>)
 8009d88:	e7e9      	b.n	8009d5e <_printf_i+0x172>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	f023 0320 	bic.w	r3, r3, #32
 8009d90:	6023      	str	r3, [r4, #0]
 8009d92:	e7f6      	b.n	8009d82 <_printf_i+0x196>
 8009d94:	4616      	mov	r6, r2
 8009d96:	e7bd      	b.n	8009d14 <_printf_i+0x128>
 8009d98:	6833      	ldr	r3, [r6, #0]
 8009d9a:	6825      	ldr	r5, [r4, #0]
 8009d9c:	6961      	ldr	r1, [r4, #20]
 8009d9e:	1d18      	adds	r0, r3, #4
 8009da0:	6030      	str	r0, [r6, #0]
 8009da2:	062e      	lsls	r6, r5, #24
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	d501      	bpl.n	8009dac <_printf_i+0x1c0>
 8009da8:	6019      	str	r1, [r3, #0]
 8009daa:	e002      	b.n	8009db2 <_printf_i+0x1c6>
 8009dac:	0668      	lsls	r0, r5, #25
 8009dae:	d5fb      	bpl.n	8009da8 <_printf_i+0x1bc>
 8009db0:	8019      	strh	r1, [r3, #0]
 8009db2:	2300      	movs	r3, #0
 8009db4:	6123      	str	r3, [r4, #16]
 8009db6:	4616      	mov	r6, r2
 8009db8:	e7bc      	b.n	8009d34 <_printf_i+0x148>
 8009dba:	6833      	ldr	r3, [r6, #0]
 8009dbc:	1d1a      	adds	r2, r3, #4
 8009dbe:	6032      	str	r2, [r6, #0]
 8009dc0:	681e      	ldr	r6, [r3, #0]
 8009dc2:	6862      	ldr	r2, [r4, #4]
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f7f6 fa02 	bl	80001d0 <memchr>
 8009dcc:	b108      	cbz	r0, 8009dd2 <_printf_i+0x1e6>
 8009dce:	1b80      	subs	r0, r0, r6
 8009dd0:	6060      	str	r0, [r4, #4]
 8009dd2:	6863      	ldr	r3, [r4, #4]
 8009dd4:	6123      	str	r3, [r4, #16]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ddc:	e7aa      	b.n	8009d34 <_printf_i+0x148>
 8009dde:	6923      	ldr	r3, [r4, #16]
 8009de0:	4632      	mov	r2, r6
 8009de2:	4649      	mov	r1, r9
 8009de4:	4640      	mov	r0, r8
 8009de6:	47d0      	blx	sl
 8009de8:	3001      	adds	r0, #1
 8009dea:	d0ad      	beq.n	8009d48 <_printf_i+0x15c>
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	079b      	lsls	r3, r3, #30
 8009df0:	d413      	bmi.n	8009e1a <_printf_i+0x22e>
 8009df2:	68e0      	ldr	r0, [r4, #12]
 8009df4:	9b03      	ldr	r3, [sp, #12]
 8009df6:	4298      	cmp	r0, r3
 8009df8:	bfb8      	it	lt
 8009dfa:	4618      	movlt	r0, r3
 8009dfc:	e7a6      	b.n	8009d4c <_printf_i+0x160>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	4632      	mov	r2, r6
 8009e02:	4649      	mov	r1, r9
 8009e04:	4640      	mov	r0, r8
 8009e06:	47d0      	blx	sl
 8009e08:	3001      	adds	r0, #1
 8009e0a:	d09d      	beq.n	8009d48 <_printf_i+0x15c>
 8009e0c:	3501      	adds	r5, #1
 8009e0e:	68e3      	ldr	r3, [r4, #12]
 8009e10:	9903      	ldr	r1, [sp, #12]
 8009e12:	1a5b      	subs	r3, r3, r1
 8009e14:	42ab      	cmp	r3, r5
 8009e16:	dcf2      	bgt.n	8009dfe <_printf_i+0x212>
 8009e18:	e7eb      	b.n	8009df2 <_printf_i+0x206>
 8009e1a:	2500      	movs	r5, #0
 8009e1c:	f104 0619 	add.w	r6, r4, #25
 8009e20:	e7f5      	b.n	8009e0e <_printf_i+0x222>
 8009e22:	bf00      	nop
 8009e24:	0800cf4f 	.word	0x0800cf4f
 8009e28:	0800cf60 	.word	0x0800cf60

08009e2c <std>:
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	b510      	push	{r4, lr}
 8009e30:	4604      	mov	r4, r0
 8009e32:	e9c0 3300 	strd	r3, r3, [r0]
 8009e36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e3a:	6083      	str	r3, [r0, #8]
 8009e3c:	8181      	strh	r1, [r0, #12]
 8009e3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009e40:	81c2      	strh	r2, [r0, #14]
 8009e42:	6183      	str	r3, [r0, #24]
 8009e44:	4619      	mov	r1, r3
 8009e46:	2208      	movs	r2, #8
 8009e48:	305c      	adds	r0, #92	@ 0x5c
 8009e4a:	f000 f914 	bl	800a076 <memset>
 8009e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e84 <std+0x58>)
 8009e50:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e52:	4b0d      	ldr	r3, [pc, #52]	@ (8009e88 <std+0x5c>)
 8009e54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e56:	4b0d      	ldr	r3, [pc, #52]	@ (8009e8c <std+0x60>)
 8009e58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e90 <std+0x64>)
 8009e5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e94 <std+0x68>)
 8009e60:	6224      	str	r4, [r4, #32]
 8009e62:	429c      	cmp	r4, r3
 8009e64:	d006      	beq.n	8009e74 <std+0x48>
 8009e66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009e6a:	4294      	cmp	r4, r2
 8009e6c:	d002      	beq.n	8009e74 <std+0x48>
 8009e6e:	33d0      	adds	r3, #208	@ 0xd0
 8009e70:	429c      	cmp	r4, r3
 8009e72:	d105      	bne.n	8009e80 <std+0x54>
 8009e74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e7c:	f000 b98a 	b.w	800a194 <__retarget_lock_init_recursive>
 8009e80:	bd10      	pop	{r4, pc}
 8009e82:	bf00      	nop
 8009e84:	08009ff1 	.word	0x08009ff1
 8009e88:	0800a013 	.word	0x0800a013
 8009e8c:	0800a04b 	.word	0x0800a04b
 8009e90:	0800a06f 	.word	0x0800a06f
 8009e94:	20005568 	.word	0x20005568

08009e98 <stdio_exit_handler>:
 8009e98:	4a02      	ldr	r2, [pc, #8]	@ (8009ea4 <stdio_exit_handler+0xc>)
 8009e9a:	4903      	ldr	r1, [pc, #12]	@ (8009ea8 <stdio_exit_handler+0x10>)
 8009e9c:	4803      	ldr	r0, [pc, #12]	@ (8009eac <stdio_exit_handler+0x14>)
 8009e9e:	f000 b869 	b.w	8009f74 <_fwalk_sglue>
 8009ea2:	bf00      	nop
 8009ea4:	20000010 	.word	0x20000010
 8009ea8:	0800bb0d 	.word	0x0800bb0d
 8009eac:	20000020 	.word	0x20000020

08009eb0 <cleanup_stdio>:
 8009eb0:	6841      	ldr	r1, [r0, #4]
 8009eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ee4 <cleanup_stdio+0x34>)
 8009eb4:	4299      	cmp	r1, r3
 8009eb6:	b510      	push	{r4, lr}
 8009eb8:	4604      	mov	r4, r0
 8009eba:	d001      	beq.n	8009ec0 <cleanup_stdio+0x10>
 8009ebc:	f001 fe26 	bl	800bb0c <_fflush_r>
 8009ec0:	68a1      	ldr	r1, [r4, #8]
 8009ec2:	4b09      	ldr	r3, [pc, #36]	@ (8009ee8 <cleanup_stdio+0x38>)
 8009ec4:	4299      	cmp	r1, r3
 8009ec6:	d002      	beq.n	8009ece <cleanup_stdio+0x1e>
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f001 fe1f 	bl	800bb0c <_fflush_r>
 8009ece:	68e1      	ldr	r1, [r4, #12]
 8009ed0:	4b06      	ldr	r3, [pc, #24]	@ (8009eec <cleanup_stdio+0x3c>)
 8009ed2:	4299      	cmp	r1, r3
 8009ed4:	d004      	beq.n	8009ee0 <cleanup_stdio+0x30>
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009edc:	f001 be16 	b.w	800bb0c <_fflush_r>
 8009ee0:	bd10      	pop	{r4, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20005568 	.word	0x20005568
 8009ee8:	200055d0 	.word	0x200055d0
 8009eec:	20005638 	.word	0x20005638

08009ef0 <global_stdio_init.part.0>:
 8009ef0:	b510      	push	{r4, lr}
 8009ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8009f20 <global_stdio_init.part.0+0x30>)
 8009ef4:	4c0b      	ldr	r4, [pc, #44]	@ (8009f24 <global_stdio_init.part.0+0x34>)
 8009ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8009f28 <global_stdio_init.part.0+0x38>)
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	4620      	mov	r0, r4
 8009efc:	2200      	movs	r2, #0
 8009efe:	2104      	movs	r1, #4
 8009f00:	f7ff ff94 	bl	8009e2c <std>
 8009f04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009f08:	2201      	movs	r2, #1
 8009f0a:	2109      	movs	r1, #9
 8009f0c:	f7ff ff8e 	bl	8009e2c <std>
 8009f10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009f14:	2202      	movs	r2, #2
 8009f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f1a:	2112      	movs	r1, #18
 8009f1c:	f7ff bf86 	b.w	8009e2c <std>
 8009f20:	200056a0 	.word	0x200056a0
 8009f24:	20005568 	.word	0x20005568
 8009f28:	08009e99 	.word	0x08009e99

08009f2c <__sfp_lock_acquire>:
 8009f2c:	4801      	ldr	r0, [pc, #4]	@ (8009f34 <__sfp_lock_acquire+0x8>)
 8009f2e:	f000 b932 	b.w	800a196 <__retarget_lock_acquire_recursive>
 8009f32:	bf00      	nop
 8009f34:	200056a9 	.word	0x200056a9

08009f38 <__sfp_lock_release>:
 8009f38:	4801      	ldr	r0, [pc, #4]	@ (8009f40 <__sfp_lock_release+0x8>)
 8009f3a:	f000 b92d 	b.w	800a198 <__retarget_lock_release_recursive>
 8009f3e:	bf00      	nop
 8009f40:	200056a9 	.word	0x200056a9

08009f44 <__sinit>:
 8009f44:	b510      	push	{r4, lr}
 8009f46:	4604      	mov	r4, r0
 8009f48:	f7ff fff0 	bl	8009f2c <__sfp_lock_acquire>
 8009f4c:	6a23      	ldr	r3, [r4, #32]
 8009f4e:	b11b      	cbz	r3, 8009f58 <__sinit+0x14>
 8009f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f54:	f7ff bff0 	b.w	8009f38 <__sfp_lock_release>
 8009f58:	4b04      	ldr	r3, [pc, #16]	@ (8009f6c <__sinit+0x28>)
 8009f5a:	6223      	str	r3, [r4, #32]
 8009f5c:	4b04      	ldr	r3, [pc, #16]	@ (8009f70 <__sinit+0x2c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1f5      	bne.n	8009f50 <__sinit+0xc>
 8009f64:	f7ff ffc4 	bl	8009ef0 <global_stdio_init.part.0>
 8009f68:	e7f2      	b.n	8009f50 <__sinit+0xc>
 8009f6a:	bf00      	nop
 8009f6c:	08009eb1 	.word	0x08009eb1
 8009f70:	200056a0 	.word	0x200056a0

08009f74 <_fwalk_sglue>:
 8009f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f78:	4607      	mov	r7, r0
 8009f7a:	4688      	mov	r8, r1
 8009f7c:	4614      	mov	r4, r2
 8009f7e:	2600      	movs	r6, #0
 8009f80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f84:	f1b9 0901 	subs.w	r9, r9, #1
 8009f88:	d505      	bpl.n	8009f96 <_fwalk_sglue+0x22>
 8009f8a:	6824      	ldr	r4, [r4, #0]
 8009f8c:	2c00      	cmp	r4, #0
 8009f8e:	d1f7      	bne.n	8009f80 <_fwalk_sglue+0xc>
 8009f90:	4630      	mov	r0, r6
 8009f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f96:	89ab      	ldrh	r3, [r5, #12]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d907      	bls.n	8009fac <_fwalk_sglue+0x38>
 8009f9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	d003      	beq.n	8009fac <_fwalk_sglue+0x38>
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	47c0      	blx	r8
 8009faa:	4306      	orrs	r6, r0
 8009fac:	3568      	adds	r5, #104	@ 0x68
 8009fae:	e7e9      	b.n	8009f84 <_fwalk_sglue+0x10>

08009fb0 <siprintf>:
 8009fb0:	b40e      	push	{r1, r2, r3}
 8009fb2:	b500      	push	{lr}
 8009fb4:	b09c      	sub	sp, #112	@ 0x70
 8009fb6:	ab1d      	add	r3, sp, #116	@ 0x74
 8009fb8:	9002      	str	r0, [sp, #8]
 8009fba:	9006      	str	r0, [sp, #24]
 8009fbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009fc0:	4809      	ldr	r0, [pc, #36]	@ (8009fe8 <siprintf+0x38>)
 8009fc2:	9107      	str	r1, [sp, #28]
 8009fc4:	9104      	str	r1, [sp, #16]
 8009fc6:	4909      	ldr	r1, [pc, #36]	@ (8009fec <siprintf+0x3c>)
 8009fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fcc:	9105      	str	r1, [sp, #20]
 8009fce:	6800      	ldr	r0, [r0, #0]
 8009fd0:	9301      	str	r3, [sp, #4]
 8009fd2:	a902      	add	r1, sp, #8
 8009fd4:	f001 fc1a 	bl	800b80c <_svfiprintf_r>
 8009fd8:	9b02      	ldr	r3, [sp, #8]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	701a      	strb	r2, [r3, #0]
 8009fde:	b01c      	add	sp, #112	@ 0x70
 8009fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fe4:	b003      	add	sp, #12
 8009fe6:	4770      	bx	lr
 8009fe8:	2000001c 	.word	0x2000001c
 8009fec:	ffff0208 	.word	0xffff0208

08009ff0 <__sread>:
 8009ff0:	b510      	push	{r4, lr}
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff8:	f000 f87e 	bl	800a0f8 <_read_r>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	bfab      	itete	ge
 800a000:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a002:	89a3      	ldrhlt	r3, [r4, #12]
 800a004:	181b      	addge	r3, r3, r0
 800a006:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a00a:	bfac      	ite	ge
 800a00c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a00e:	81a3      	strhlt	r3, [r4, #12]
 800a010:	bd10      	pop	{r4, pc}

0800a012 <__swrite>:
 800a012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a016:	461f      	mov	r7, r3
 800a018:	898b      	ldrh	r3, [r1, #12]
 800a01a:	05db      	lsls	r3, r3, #23
 800a01c:	4605      	mov	r5, r0
 800a01e:	460c      	mov	r4, r1
 800a020:	4616      	mov	r6, r2
 800a022:	d505      	bpl.n	800a030 <__swrite+0x1e>
 800a024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a028:	2302      	movs	r3, #2
 800a02a:	2200      	movs	r2, #0
 800a02c:	f000 f852 	bl	800a0d4 <_lseek_r>
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a036:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a03a:	81a3      	strh	r3, [r4, #12]
 800a03c:	4632      	mov	r2, r6
 800a03e:	463b      	mov	r3, r7
 800a040:	4628      	mov	r0, r5
 800a042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a046:	f000 b869 	b.w	800a11c <_write_r>

0800a04a <__sseek>:
 800a04a:	b510      	push	{r4, lr}
 800a04c:	460c      	mov	r4, r1
 800a04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a052:	f000 f83f 	bl	800a0d4 <_lseek_r>
 800a056:	1c43      	adds	r3, r0, #1
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	bf15      	itete	ne
 800a05c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a05e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a062:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a066:	81a3      	strheq	r3, [r4, #12]
 800a068:	bf18      	it	ne
 800a06a:	81a3      	strhne	r3, [r4, #12]
 800a06c:	bd10      	pop	{r4, pc}

0800a06e <__sclose>:
 800a06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a072:	f000 b81f 	b.w	800a0b4 <_close_r>

0800a076 <memset>:
 800a076:	4402      	add	r2, r0
 800a078:	4603      	mov	r3, r0
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d100      	bne.n	800a080 <memset+0xa>
 800a07e:	4770      	bx	lr
 800a080:	f803 1b01 	strb.w	r1, [r3], #1
 800a084:	e7f9      	b.n	800a07a <memset+0x4>

0800a086 <strncpy>:
 800a086:	b510      	push	{r4, lr}
 800a088:	3901      	subs	r1, #1
 800a08a:	4603      	mov	r3, r0
 800a08c:	b132      	cbz	r2, 800a09c <strncpy+0x16>
 800a08e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a092:	f803 4b01 	strb.w	r4, [r3], #1
 800a096:	3a01      	subs	r2, #1
 800a098:	2c00      	cmp	r4, #0
 800a09a:	d1f7      	bne.n	800a08c <strncpy+0x6>
 800a09c:	441a      	add	r2, r3
 800a09e:	2100      	movs	r1, #0
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d100      	bne.n	800a0a6 <strncpy+0x20>
 800a0a4:	bd10      	pop	{r4, pc}
 800a0a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a0aa:	e7f9      	b.n	800a0a0 <strncpy+0x1a>

0800a0ac <_localeconv_r>:
 800a0ac:	4800      	ldr	r0, [pc, #0]	@ (800a0b0 <_localeconv_r+0x4>)
 800a0ae:	4770      	bx	lr
 800a0b0:	2000015c 	.word	0x2000015c

0800a0b4 <_close_r>:
 800a0b4:	b538      	push	{r3, r4, r5, lr}
 800a0b6:	4d06      	ldr	r5, [pc, #24]	@ (800a0d0 <_close_r+0x1c>)
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	4608      	mov	r0, r1
 800a0be:	602b      	str	r3, [r5, #0]
 800a0c0:	f7f8 fc42 	bl	8002948 <_close>
 800a0c4:	1c43      	adds	r3, r0, #1
 800a0c6:	d102      	bne.n	800a0ce <_close_r+0x1a>
 800a0c8:	682b      	ldr	r3, [r5, #0]
 800a0ca:	b103      	cbz	r3, 800a0ce <_close_r+0x1a>
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	bd38      	pop	{r3, r4, r5, pc}
 800a0d0:	200056a4 	.word	0x200056a4

0800a0d4 <_lseek_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4d07      	ldr	r5, [pc, #28]	@ (800a0f4 <_lseek_r+0x20>)
 800a0d8:	4604      	mov	r4, r0
 800a0da:	4608      	mov	r0, r1
 800a0dc:	4611      	mov	r1, r2
 800a0de:	2200      	movs	r2, #0
 800a0e0:	602a      	str	r2, [r5, #0]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	f7f8 fc57 	bl	8002996 <_lseek>
 800a0e8:	1c43      	adds	r3, r0, #1
 800a0ea:	d102      	bne.n	800a0f2 <_lseek_r+0x1e>
 800a0ec:	682b      	ldr	r3, [r5, #0]
 800a0ee:	b103      	cbz	r3, 800a0f2 <_lseek_r+0x1e>
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}
 800a0f4:	200056a4 	.word	0x200056a4

0800a0f8 <_read_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4d07      	ldr	r5, [pc, #28]	@ (800a118 <_read_r+0x20>)
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	4608      	mov	r0, r1
 800a100:	4611      	mov	r1, r2
 800a102:	2200      	movs	r2, #0
 800a104:	602a      	str	r2, [r5, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	f7f8 fbe5 	bl	80028d6 <_read>
 800a10c:	1c43      	adds	r3, r0, #1
 800a10e:	d102      	bne.n	800a116 <_read_r+0x1e>
 800a110:	682b      	ldr	r3, [r5, #0]
 800a112:	b103      	cbz	r3, 800a116 <_read_r+0x1e>
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	200056a4 	.word	0x200056a4

0800a11c <_write_r>:
 800a11c:	b538      	push	{r3, r4, r5, lr}
 800a11e:	4d07      	ldr	r5, [pc, #28]	@ (800a13c <_write_r+0x20>)
 800a120:	4604      	mov	r4, r0
 800a122:	4608      	mov	r0, r1
 800a124:	4611      	mov	r1, r2
 800a126:	2200      	movs	r2, #0
 800a128:	602a      	str	r2, [r5, #0]
 800a12a:	461a      	mov	r2, r3
 800a12c:	f7f8 fbf0 	bl	8002910 <_write>
 800a130:	1c43      	adds	r3, r0, #1
 800a132:	d102      	bne.n	800a13a <_write_r+0x1e>
 800a134:	682b      	ldr	r3, [r5, #0]
 800a136:	b103      	cbz	r3, 800a13a <_write_r+0x1e>
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	200056a4 	.word	0x200056a4

0800a140 <__errno>:
 800a140:	4b01      	ldr	r3, [pc, #4]	@ (800a148 <__errno+0x8>)
 800a142:	6818      	ldr	r0, [r3, #0]
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	2000001c 	.word	0x2000001c

0800a14c <__libc_init_array>:
 800a14c:	b570      	push	{r4, r5, r6, lr}
 800a14e:	4d0d      	ldr	r5, [pc, #52]	@ (800a184 <__libc_init_array+0x38>)
 800a150:	4c0d      	ldr	r4, [pc, #52]	@ (800a188 <__libc_init_array+0x3c>)
 800a152:	1b64      	subs	r4, r4, r5
 800a154:	10a4      	asrs	r4, r4, #2
 800a156:	2600      	movs	r6, #0
 800a158:	42a6      	cmp	r6, r4
 800a15a:	d109      	bne.n	800a170 <__libc_init_array+0x24>
 800a15c:	4d0b      	ldr	r5, [pc, #44]	@ (800a18c <__libc_init_array+0x40>)
 800a15e:	4c0c      	ldr	r4, [pc, #48]	@ (800a190 <__libc_init_array+0x44>)
 800a160:	f002 f864 	bl	800c22c <_init>
 800a164:	1b64      	subs	r4, r4, r5
 800a166:	10a4      	asrs	r4, r4, #2
 800a168:	2600      	movs	r6, #0
 800a16a:	42a6      	cmp	r6, r4
 800a16c:	d105      	bne.n	800a17a <__libc_init_array+0x2e>
 800a16e:	bd70      	pop	{r4, r5, r6, pc}
 800a170:	f855 3b04 	ldr.w	r3, [r5], #4
 800a174:	4798      	blx	r3
 800a176:	3601      	adds	r6, #1
 800a178:	e7ee      	b.n	800a158 <__libc_init_array+0xc>
 800a17a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a17e:	4798      	blx	r3
 800a180:	3601      	adds	r6, #1
 800a182:	e7f2      	b.n	800a16a <__libc_init_array+0x1e>
 800a184:	0800d1b8 	.word	0x0800d1b8
 800a188:	0800d1b8 	.word	0x0800d1b8
 800a18c:	0800d1b8 	.word	0x0800d1b8
 800a190:	0800d1bc 	.word	0x0800d1bc

0800a194 <__retarget_lock_init_recursive>:
 800a194:	4770      	bx	lr

0800a196 <__retarget_lock_acquire_recursive>:
 800a196:	4770      	bx	lr

0800a198 <__retarget_lock_release_recursive>:
 800a198:	4770      	bx	lr

0800a19a <memcpy>:
 800a19a:	440a      	add	r2, r1
 800a19c:	4291      	cmp	r1, r2
 800a19e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1a2:	d100      	bne.n	800a1a6 <memcpy+0xc>
 800a1a4:	4770      	bx	lr
 800a1a6:	b510      	push	{r4, lr}
 800a1a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1b0:	4291      	cmp	r1, r2
 800a1b2:	d1f9      	bne.n	800a1a8 <memcpy+0xe>
 800a1b4:	bd10      	pop	{r4, pc}

0800a1b6 <quorem>:
 800a1b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ba:	6903      	ldr	r3, [r0, #16]
 800a1bc:	690c      	ldr	r4, [r1, #16]
 800a1be:	42a3      	cmp	r3, r4
 800a1c0:	4607      	mov	r7, r0
 800a1c2:	db7e      	blt.n	800a2c2 <quorem+0x10c>
 800a1c4:	3c01      	subs	r4, #1
 800a1c6:	f101 0814 	add.w	r8, r1, #20
 800a1ca:	00a3      	lsls	r3, r4, #2
 800a1cc:	f100 0514 	add.w	r5, r0, #20
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1d6:	9301      	str	r3, [sp, #4]
 800a1d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1e8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1ec:	d32e      	bcc.n	800a24c <quorem+0x96>
 800a1ee:	f04f 0a00 	mov.w	sl, #0
 800a1f2:	46c4      	mov	ip, r8
 800a1f4:	46ae      	mov	lr, r5
 800a1f6:	46d3      	mov	fp, sl
 800a1f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1fc:	b298      	uxth	r0, r3
 800a1fe:	fb06 a000 	mla	r0, r6, r0, sl
 800a202:	0c02      	lsrs	r2, r0, #16
 800a204:	0c1b      	lsrs	r3, r3, #16
 800a206:	fb06 2303 	mla	r3, r6, r3, r2
 800a20a:	f8de 2000 	ldr.w	r2, [lr]
 800a20e:	b280      	uxth	r0, r0
 800a210:	b292      	uxth	r2, r2
 800a212:	1a12      	subs	r2, r2, r0
 800a214:	445a      	add	r2, fp
 800a216:	f8de 0000 	ldr.w	r0, [lr]
 800a21a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a21e:	b29b      	uxth	r3, r3
 800a220:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a224:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a228:	b292      	uxth	r2, r2
 800a22a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a22e:	45e1      	cmp	r9, ip
 800a230:	f84e 2b04 	str.w	r2, [lr], #4
 800a234:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a238:	d2de      	bcs.n	800a1f8 <quorem+0x42>
 800a23a:	9b00      	ldr	r3, [sp, #0]
 800a23c:	58eb      	ldr	r3, [r5, r3]
 800a23e:	b92b      	cbnz	r3, 800a24c <quorem+0x96>
 800a240:	9b01      	ldr	r3, [sp, #4]
 800a242:	3b04      	subs	r3, #4
 800a244:	429d      	cmp	r5, r3
 800a246:	461a      	mov	r2, r3
 800a248:	d32f      	bcc.n	800a2aa <quorem+0xf4>
 800a24a:	613c      	str	r4, [r7, #16]
 800a24c:	4638      	mov	r0, r7
 800a24e:	f001 f979 	bl	800b544 <__mcmp>
 800a252:	2800      	cmp	r0, #0
 800a254:	db25      	blt.n	800a2a2 <quorem+0xec>
 800a256:	4629      	mov	r1, r5
 800a258:	2000      	movs	r0, #0
 800a25a:	f858 2b04 	ldr.w	r2, [r8], #4
 800a25e:	f8d1 c000 	ldr.w	ip, [r1]
 800a262:	fa1f fe82 	uxth.w	lr, r2
 800a266:	fa1f f38c 	uxth.w	r3, ip
 800a26a:	eba3 030e 	sub.w	r3, r3, lr
 800a26e:	4403      	add	r3, r0
 800a270:	0c12      	lsrs	r2, r2, #16
 800a272:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a276:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a280:	45c1      	cmp	r9, r8
 800a282:	f841 3b04 	str.w	r3, [r1], #4
 800a286:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a28a:	d2e6      	bcs.n	800a25a <quorem+0xa4>
 800a28c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a290:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a294:	b922      	cbnz	r2, 800a2a0 <quorem+0xea>
 800a296:	3b04      	subs	r3, #4
 800a298:	429d      	cmp	r5, r3
 800a29a:	461a      	mov	r2, r3
 800a29c:	d30b      	bcc.n	800a2b6 <quorem+0x100>
 800a29e:	613c      	str	r4, [r7, #16]
 800a2a0:	3601      	adds	r6, #1
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	b003      	add	sp, #12
 800a2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2aa:	6812      	ldr	r2, [r2, #0]
 800a2ac:	3b04      	subs	r3, #4
 800a2ae:	2a00      	cmp	r2, #0
 800a2b0:	d1cb      	bne.n	800a24a <quorem+0x94>
 800a2b2:	3c01      	subs	r4, #1
 800a2b4:	e7c6      	b.n	800a244 <quorem+0x8e>
 800a2b6:	6812      	ldr	r2, [r2, #0]
 800a2b8:	3b04      	subs	r3, #4
 800a2ba:	2a00      	cmp	r2, #0
 800a2bc:	d1ef      	bne.n	800a29e <quorem+0xe8>
 800a2be:	3c01      	subs	r4, #1
 800a2c0:	e7ea      	b.n	800a298 <quorem+0xe2>
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	e7ee      	b.n	800a2a4 <quorem+0xee>
	...

0800a2c8 <_dtoa_r>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	69c7      	ldr	r7, [r0, #28]
 800a2ce:	b099      	sub	sp, #100	@ 0x64
 800a2d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a2d4:	ec55 4b10 	vmov	r4, r5, d0
 800a2d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a2da:	9109      	str	r1, [sp, #36]	@ 0x24
 800a2dc:	4683      	mov	fp, r0
 800a2de:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a2e2:	b97f      	cbnz	r7, 800a304 <_dtoa_r+0x3c>
 800a2e4:	2010      	movs	r0, #16
 800a2e6:	f000 fdfd 	bl	800aee4 <malloc>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	f8cb 001c 	str.w	r0, [fp, #28]
 800a2f0:	b920      	cbnz	r0, 800a2fc <_dtoa_r+0x34>
 800a2f2:	4ba7      	ldr	r3, [pc, #668]	@ (800a590 <_dtoa_r+0x2c8>)
 800a2f4:	21ef      	movs	r1, #239	@ 0xef
 800a2f6:	48a7      	ldr	r0, [pc, #668]	@ (800a594 <_dtoa_r+0x2cc>)
 800a2f8:	f001 fc5a 	bl	800bbb0 <__assert_func>
 800a2fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a300:	6007      	str	r7, [r0, #0]
 800a302:	60c7      	str	r7, [r0, #12]
 800a304:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a308:	6819      	ldr	r1, [r3, #0]
 800a30a:	b159      	cbz	r1, 800a324 <_dtoa_r+0x5c>
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	604a      	str	r2, [r1, #4]
 800a310:	2301      	movs	r3, #1
 800a312:	4093      	lsls	r3, r2
 800a314:	608b      	str	r3, [r1, #8]
 800a316:	4658      	mov	r0, fp
 800a318:	f000 feda 	bl	800b0d0 <_Bfree>
 800a31c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a320:	2200      	movs	r2, #0
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	1e2b      	subs	r3, r5, #0
 800a326:	bfb9      	ittee	lt
 800a328:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a32c:	9303      	strlt	r3, [sp, #12]
 800a32e:	2300      	movge	r3, #0
 800a330:	6033      	strge	r3, [r6, #0]
 800a332:	9f03      	ldr	r7, [sp, #12]
 800a334:	4b98      	ldr	r3, [pc, #608]	@ (800a598 <_dtoa_r+0x2d0>)
 800a336:	bfbc      	itt	lt
 800a338:	2201      	movlt	r2, #1
 800a33a:	6032      	strlt	r2, [r6, #0]
 800a33c:	43bb      	bics	r3, r7
 800a33e:	d112      	bne.n	800a366 <_dtoa_r+0x9e>
 800a340:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a342:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a34c:	4323      	orrs	r3, r4
 800a34e:	f000 854d 	beq.w	800adec <_dtoa_r+0xb24>
 800a352:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a354:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a5ac <_dtoa_r+0x2e4>
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f000 854f 	beq.w	800adfc <_dtoa_r+0xb34>
 800a35e:	f10a 0303 	add.w	r3, sl, #3
 800a362:	f000 bd49 	b.w	800adf8 <_dtoa_r+0xb30>
 800a366:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a36a:	2200      	movs	r2, #0
 800a36c:	ec51 0b17 	vmov	r0, r1, d7
 800a370:	2300      	movs	r3, #0
 800a372:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a376:	f7f6 fba7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a37a:	4680      	mov	r8, r0
 800a37c:	b158      	cbz	r0, 800a396 <_dtoa_r+0xce>
 800a37e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a380:	2301      	movs	r3, #1
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a386:	b113      	cbz	r3, 800a38e <_dtoa_r+0xc6>
 800a388:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a38a:	4b84      	ldr	r3, [pc, #528]	@ (800a59c <_dtoa_r+0x2d4>)
 800a38c:	6013      	str	r3, [r2, #0]
 800a38e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a5b0 <_dtoa_r+0x2e8>
 800a392:	f000 bd33 	b.w	800adfc <_dtoa_r+0xb34>
 800a396:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a39a:	aa16      	add	r2, sp, #88	@ 0x58
 800a39c:	a917      	add	r1, sp, #92	@ 0x5c
 800a39e:	4658      	mov	r0, fp
 800a3a0:	f001 f980 	bl	800b6a4 <__d2b>
 800a3a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a3a8:	4681      	mov	r9, r0
 800a3aa:	2e00      	cmp	r6, #0
 800a3ac:	d077      	beq.n	800a49e <_dtoa_r+0x1d6>
 800a3ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a3b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a3c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a3c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	4b74      	ldr	r3, [pc, #464]	@ (800a5a0 <_dtoa_r+0x2d8>)
 800a3ce:	f7f5 ff5b 	bl	8000288 <__aeabi_dsub>
 800a3d2:	a369      	add	r3, pc, #420	@ (adr r3, 800a578 <_dtoa_r+0x2b0>)
 800a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d8:	f7f6 f90e 	bl	80005f8 <__aeabi_dmul>
 800a3dc:	a368      	add	r3, pc, #416	@ (adr r3, 800a580 <_dtoa_r+0x2b8>)
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	f7f5 ff53 	bl	800028c <__adddf3>
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	460d      	mov	r5, r1
 800a3ec:	f7f6 f89a 	bl	8000524 <__aeabi_i2d>
 800a3f0:	a365      	add	r3, pc, #404	@ (adr r3, 800a588 <_dtoa_r+0x2c0>)
 800a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f6:	f7f6 f8ff 	bl	80005f8 <__aeabi_dmul>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	4620      	mov	r0, r4
 800a400:	4629      	mov	r1, r5
 800a402:	f7f5 ff43 	bl	800028c <__adddf3>
 800a406:	4604      	mov	r4, r0
 800a408:	460d      	mov	r5, r1
 800a40a:	f7f6 fba5 	bl	8000b58 <__aeabi_d2iz>
 800a40e:	2200      	movs	r2, #0
 800a410:	4607      	mov	r7, r0
 800a412:	2300      	movs	r3, #0
 800a414:	4620      	mov	r0, r4
 800a416:	4629      	mov	r1, r5
 800a418:	f7f6 fb60 	bl	8000adc <__aeabi_dcmplt>
 800a41c:	b140      	cbz	r0, 800a430 <_dtoa_r+0x168>
 800a41e:	4638      	mov	r0, r7
 800a420:	f7f6 f880 	bl	8000524 <__aeabi_i2d>
 800a424:	4622      	mov	r2, r4
 800a426:	462b      	mov	r3, r5
 800a428:	f7f6 fb4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a42c:	b900      	cbnz	r0, 800a430 <_dtoa_r+0x168>
 800a42e:	3f01      	subs	r7, #1
 800a430:	2f16      	cmp	r7, #22
 800a432:	d851      	bhi.n	800a4d8 <_dtoa_r+0x210>
 800a434:	4b5b      	ldr	r3, [pc, #364]	@ (800a5a4 <_dtoa_r+0x2dc>)
 800a436:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a442:	f7f6 fb4b 	bl	8000adc <__aeabi_dcmplt>
 800a446:	2800      	cmp	r0, #0
 800a448:	d048      	beq.n	800a4dc <_dtoa_r+0x214>
 800a44a:	3f01      	subs	r7, #1
 800a44c:	2300      	movs	r3, #0
 800a44e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a450:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a452:	1b9b      	subs	r3, r3, r6
 800a454:	1e5a      	subs	r2, r3, #1
 800a456:	bf44      	itt	mi
 800a458:	f1c3 0801 	rsbmi	r8, r3, #1
 800a45c:	2300      	movmi	r3, #0
 800a45e:	9208      	str	r2, [sp, #32]
 800a460:	bf54      	ite	pl
 800a462:	f04f 0800 	movpl.w	r8, #0
 800a466:	9308      	strmi	r3, [sp, #32]
 800a468:	2f00      	cmp	r7, #0
 800a46a:	db39      	blt.n	800a4e0 <_dtoa_r+0x218>
 800a46c:	9b08      	ldr	r3, [sp, #32]
 800a46e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a470:	443b      	add	r3, r7
 800a472:	9308      	str	r3, [sp, #32]
 800a474:	2300      	movs	r3, #0
 800a476:	930a      	str	r3, [sp, #40]	@ 0x28
 800a478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a47a:	2b09      	cmp	r3, #9
 800a47c:	d864      	bhi.n	800a548 <_dtoa_r+0x280>
 800a47e:	2b05      	cmp	r3, #5
 800a480:	bfc4      	itt	gt
 800a482:	3b04      	subgt	r3, #4
 800a484:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a488:	f1a3 0302 	sub.w	r3, r3, #2
 800a48c:	bfcc      	ite	gt
 800a48e:	2400      	movgt	r4, #0
 800a490:	2401      	movle	r4, #1
 800a492:	2b03      	cmp	r3, #3
 800a494:	d863      	bhi.n	800a55e <_dtoa_r+0x296>
 800a496:	e8df f003 	tbb	[pc, r3]
 800a49a:	372a      	.short	0x372a
 800a49c:	5535      	.short	0x5535
 800a49e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a4a2:	441e      	add	r6, r3
 800a4a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a4a8:	2b20      	cmp	r3, #32
 800a4aa:	bfc1      	itttt	gt
 800a4ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a4b0:	409f      	lslgt	r7, r3
 800a4b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a4b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a4ba:	bfd6      	itet	le
 800a4bc:	f1c3 0320 	rsble	r3, r3, #32
 800a4c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a4c4:	fa04 f003 	lslle.w	r0, r4, r3
 800a4c8:	f7f6 f81c 	bl	8000504 <__aeabi_ui2d>
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a4d2:	3e01      	subs	r6, #1
 800a4d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a4d6:	e777      	b.n	800a3c8 <_dtoa_r+0x100>
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e7b8      	b.n	800a44e <_dtoa_r+0x186>
 800a4dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800a4de:	e7b7      	b.n	800a450 <_dtoa_r+0x188>
 800a4e0:	427b      	negs	r3, r7
 800a4e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	eba8 0807 	sub.w	r8, r8, r7
 800a4ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4ec:	e7c4      	b.n	800a478 <_dtoa_r+0x1b0>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	dc35      	bgt.n	800a564 <_dtoa_r+0x29c>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	9300      	str	r3, [sp, #0]
 800a4fc:	9307      	str	r3, [sp, #28]
 800a4fe:	461a      	mov	r2, r3
 800a500:	920e      	str	r2, [sp, #56]	@ 0x38
 800a502:	e00b      	b.n	800a51c <_dtoa_r+0x254>
 800a504:	2301      	movs	r3, #1
 800a506:	e7f3      	b.n	800a4f0 <_dtoa_r+0x228>
 800a508:	2300      	movs	r3, #0
 800a50a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a50c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a50e:	18fb      	adds	r3, r7, r3
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	3301      	adds	r3, #1
 800a514:	2b01      	cmp	r3, #1
 800a516:	9307      	str	r3, [sp, #28]
 800a518:	bfb8      	it	lt
 800a51a:	2301      	movlt	r3, #1
 800a51c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a520:	2100      	movs	r1, #0
 800a522:	2204      	movs	r2, #4
 800a524:	f102 0514 	add.w	r5, r2, #20
 800a528:	429d      	cmp	r5, r3
 800a52a:	d91f      	bls.n	800a56c <_dtoa_r+0x2a4>
 800a52c:	6041      	str	r1, [r0, #4]
 800a52e:	4658      	mov	r0, fp
 800a530:	f000 fd8e 	bl	800b050 <_Balloc>
 800a534:	4682      	mov	sl, r0
 800a536:	2800      	cmp	r0, #0
 800a538:	d13c      	bne.n	800a5b4 <_dtoa_r+0x2ec>
 800a53a:	4b1b      	ldr	r3, [pc, #108]	@ (800a5a8 <_dtoa_r+0x2e0>)
 800a53c:	4602      	mov	r2, r0
 800a53e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a542:	e6d8      	b.n	800a2f6 <_dtoa_r+0x2e>
 800a544:	2301      	movs	r3, #1
 800a546:	e7e0      	b.n	800a50a <_dtoa_r+0x242>
 800a548:	2401      	movs	r4, #1
 800a54a:	2300      	movs	r3, #0
 800a54c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a54e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a550:	f04f 33ff 	mov.w	r3, #4294967295
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	9307      	str	r3, [sp, #28]
 800a558:	2200      	movs	r2, #0
 800a55a:	2312      	movs	r3, #18
 800a55c:	e7d0      	b.n	800a500 <_dtoa_r+0x238>
 800a55e:	2301      	movs	r3, #1
 800a560:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a562:	e7f5      	b.n	800a550 <_dtoa_r+0x288>
 800a564:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	9307      	str	r3, [sp, #28]
 800a56a:	e7d7      	b.n	800a51c <_dtoa_r+0x254>
 800a56c:	3101      	adds	r1, #1
 800a56e:	0052      	lsls	r2, r2, #1
 800a570:	e7d8      	b.n	800a524 <_dtoa_r+0x25c>
 800a572:	bf00      	nop
 800a574:	f3af 8000 	nop.w
 800a578:	636f4361 	.word	0x636f4361
 800a57c:	3fd287a7 	.word	0x3fd287a7
 800a580:	8b60c8b3 	.word	0x8b60c8b3
 800a584:	3fc68a28 	.word	0x3fc68a28
 800a588:	509f79fb 	.word	0x509f79fb
 800a58c:	3fd34413 	.word	0x3fd34413
 800a590:	0800cf7e 	.word	0x0800cf7e
 800a594:	0800cf95 	.word	0x0800cf95
 800a598:	7ff00000 	.word	0x7ff00000
 800a59c:	0800cf4e 	.word	0x0800cf4e
 800a5a0:	3ff80000 	.word	0x3ff80000
 800a5a4:	0800d090 	.word	0x0800d090
 800a5a8:	0800cfed 	.word	0x0800cfed
 800a5ac:	0800cf7a 	.word	0x0800cf7a
 800a5b0:	0800cf4d 	.word	0x0800cf4d
 800a5b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a5b8:	6018      	str	r0, [r3, #0]
 800a5ba:	9b07      	ldr	r3, [sp, #28]
 800a5bc:	2b0e      	cmp	r3, #14
 800a5be:	f200 80a4 	bhi.w	800a70a <_dtoa_r+0x442>
 800a5c2:	2c00      	cmp	r4, #0
 800a5c4:	f000 80a1 	beq.w	800a70a <_dtoa_r+0x442>
 800a5c8:	2f00      	cmp	r7, #0
 800a5ca:	dd33      	ble.n	800a634 <_dtoa_r+0x36c>
 800a5cc:	4bad      	ldr	r3, [pc, #692]	@ (800a884 <_dtoa_r+0x5bc>)
 800a5ce:	f007 020f 	and.w	r2, r7, #15
 800a5d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5d6:	ed93 7b00 	vldr	d7, [r3]
 800a5da:	05f8      	lsls	r0, r7, #23
 800a5dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a5e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a5e4:	d516      	bpl.n	800a614 <_dtoa_r+0x34c>
 800a5e6:	4ba8      	ldr	r3, [pc, #672]	@ (800a888 <_dtoa_r+0x5c0>)
 800a5e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5f0:	f7f6 f92c 	bl	800084c <__aeabi_ddiv>
 800a5f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5f8:	f004 040f 	and.w	r4, r4, #15
 800a5fc:	2603      	movs	r6, #3
 800a5fe:	4da2      	ldr	r5, [pc, #648]	@ (800a888 <_dtoa_r+0x5c0>)
 800a600:	b954      	cbnz	r4, 800a618 <_dtoa_r+0x350>
 800a602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a60a:	f7f6 f91f 	bl	800084c <__aeabi_ddiv>
 800a60e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a612:	e028      	b.n	800a666 <_dtoa_r+0x39e>
 800a614:	2602      	movs	r6, #2
 800a616:	e7f2      	b.n	800a5fe <_dtoa_r+0x336>
 800a618:	07e1      	lsls	r1, r4, #31
 800a61a:	d508      	bpl.n	800a62e <_dtoa_r+0x366>
 800a61c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a620:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a624:	f7f5 ffe8 	bl	80005f8 <__aeabi_dmul>
 800a628:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a62c:	3601      	adds	r6, #1
 800a62e:	1064      	asrs	r4, r4, #1
 800a630:	3508      	adds	r5, #8
 800a632:	e7e5      	b.n	800a600 <_dtoa_r+0x338>
 800a634:	f000 80d2 	beq.w	800a7dc <_dtoa_r+0x514>
 800a638:	427c      	negs	r4, r7
 800a63a:	4b92      	ldr	r3, [pc, #584]	@ (800a884 <_dtoa_r+0x5bc>)
 800a63c:	4d92      	ldr	r5, [pc, #584]	@ (800a888 <_dtoa_r+0x5c0>)
 800a63e:	f004 020f 	and.w	r2, r4, #15
 800a642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a64e:	f7f5 ffd3 	bl	80005f8 <__aeabi_dmul>
 800a652:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a656:	1124      	asrs	r4, r4, #4
 800a658:	2300      	movs	r3, #0
 800a65a:	2602      	movs	r6, #2
 800a65c:	2c00      	cmp	r4, #0
 800a65e:	f040 80b2 	bne.w	800a7c6 <_dtoa_r+0x4fe>
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1d3      	bne.n	800a60e <_dtoa_r+0x346>
 800a666:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a668:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f000 80b7 	beq.w	800a7e0 <_dtoa_r+0x518>
 800a672:	4b86      	ldr	r3, [pc, #536]	@ (800a88c <_dtoa_r+0x5c4>)
 800a674:	2200      	movs	r2, #0
 800a676:	4620      	mov	r0, r4
 800a678:	4629      	mov	r1, r5
 800a67a:	f7f6 fa2f 	bl	8000adc <__aeabi_dcmplt>
 800a67e:	2800      	cmp	r0, #0
 800a680:	f000 80ae 	beq.w	800a7e0 <_dtoa_r+0x518>
 800a684:	9b07      	ldr	r3, [sp, #28]
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 80aa 	beq.w	800a7e0 <_dtoa_r+0x518>
 800a68c:	9b00      	ldr	r3, [sp, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	dd37      	ble.n	800a702 <_dtoa_r+0x43a>
 800a692:	1e7b      	subs	r3, r7, #1
 800a694:	9304      	str	r3, [sp, #16]
 800a696:	4620      	mov	r0, r4
 800a698:	4b7d      	ldr	r3, [pc, #500]	@ (800a890 <_dtoa_r+0x5c8>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	4629      	mov	r1, r5
 800a69e:	f7f5 ffab 	bl	80005f8 <__aeabi_dmul>
 800a6a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6a6:	9c00      	ldr	r4, [sp, #0]
 800a6a8:	3601      	adds	r6, #1
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f7f5 ff3a 	bl	8000524 <__aeabi_i2d>
 800a6b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6b4:	f7f5 ffa0 	bl	80005f8 <__aeabi_dmul>
 800a6b8:	4b76      	ldr	r3, [pc, #472]	@ (800a894 <_dtoa_r+0x5cc>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f7f5 fde6 	bl	800028c <__adddf3>
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a6c6:	2c00      	cmp	r4, #0
 800a6c8:	f040 808d 	bne.w	800a7e6 <_dtoa_r+0x51e>
 800a6cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6d0:	4b71      	ldr	r3, [pc, #452]	@ (800a898 <_dtoa_r+0x5d0>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f7f5 fdd8 	bl	8000288 <__aeabi_dsub>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6e0:	462a      	mov	r2, r5
 800a6e2:	4633      	mov	r3, r6
 800a6e4:	f7f6 fa18 	bl	8000b18 <__aeabi_dcmpgt>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	f040 828b 	bne.w	800ac04 <_dtoa_r+0x93c>
 800a6ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6f2:	462a      	mov	r2, r5
 800a6f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a6f8:	f7f6 f9f0 	bl	8000adc <__aeabi_dcmplt>
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	f040 8128 	bne.w	800a952 <_dtoa_r+0x68a>
 800a702:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a706:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a70a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f2c0 815a 	blt.w	800a9c6 <_dtoa_r+0x6fe>
 800a712:	2f0e      	cmp	r7, #14
 800a714:	f300 8157 	bgt.w	800a9c6 <_dtoa_r+0x6fe>
 800a718:	4b5a      	ldr	r3, [pc, #360]	@ (800a884 <_dtoa_r+0x5bc>)
 800a71a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a71e:	ed93 7b00 	vldr	d7, [r3]
 800a722:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a724:	2b00      	cmp	r3, #0
 800a726:	ed8d 7b00 	vstr	d7, [sp]
 800a72a:	da03      	bge.n	800a734 <_dtoa_r+0x46c>
 800a72c:	9b07      	ldr	r3, [sp, #28]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f340 8101 	ble.w	800a936 <_dtoa_r+0x66e>
 800a734:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a738:	4656      	mov	r6, sl
 800a73a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a73e:	4620      	mov	r0, r4
 800a740:	4629      	mov	r1, r5
 800a742:	f7f6 f883 	bl	800084c <__aeabi_ddiv>
 800a746:	f7f6 fa07 	bl	8000b58 <__aeabi_d2iz>
 800a74a:	4680      	mov	r8, r0
 800a74c:	f7f5 feea 	bl	8000524 <__aeabi_i2d>
 800a750:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a754:	f7f5 ff50 	bl	80005f8 <__aeabi_dmul>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4620      	mov	r0, r4
 800a75e:	4629      	mov	r1, r5
 800a760:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a764:	f7f5 fd90 	bl	8000288 <__aeabi_dsub>
 800a768:	f806 4b01 	strb.w	r4, [r6], #1
 800a76c:	9d07      	ldr	r5, [sp, #28]
 800a76e:	eba6 040a 	sub.w	r4, r6, sl
 800a772:	42a5      	cmp	r5, r4
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	f040 8117 	bne.w	800a9aa <_dtoa_r+0x6e2>
 800a77c:	f7f5 fd86 	bl	800028c <__adddf3>
 800a780:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a784:	4604      	mov	r4, r0
 800a786:	460d      	mov	r5, r1
 800a788:	f7f6 f9c6 	bl	8000b18 <__aeabi_dcmpgt>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	f040 80f9 	bne.w	800a984 <_dtoa_r+0x6bc>
 800a792:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a796:	4620      	mov	r0, r4
 800a798:	4629      	mov	r1, r5
 800a79a:	f7f6 f995 	bl	8000ac8 <__aeabi_dcmpeq>
 800a79e:	b118      	cbz	r0, 800a7a8 <_dtoa_r+0x4e0>
 800a7a0:	f018 0f01 	tst.w	r8, #1
 800a7a4:	f040 80ee 	bne.w	800a984 <_dtoa_r+0x6bc>
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	4658      	mov	r0, fp
 800a7ac:	f000 fc90 	bl	800b0d0 <_Bfree>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	7033      	strb	r3, [r6, #0]
 800a7b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a7b6:	3701      	adds	r7, #1
 800a7b8:	601f      	str	r7, [r3, #0]
 800a7ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f000 831d 	beq.w	800adfc <_dtoa_r+0xb34>
 800a7c2:	601e      	str	r6, [r3, #0]
 800a7c4:	e31a      	b.n	800adfc <_dtoa_r+0xb34>
 800a7c6:	07e2      	lsls	r2, r4, #31
 800a7c8:	d505      	bpl.n	800a7d6 <_dtoa_r+0x50e>
 800a7ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a7ce:	f7f5 ff13 	bl	80005f8 <__aeabi_dmul>
 800a7d2:	3601      	adds	r6, #1
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	1064      	asrs	r4, r4, #1
 800a7d8:	3508      	adds	r5, #8
 800a7da:	e73f      	b.n	800a65c <_dtoa_r+0x394>
 800a7dc:	2602      	movs	r6, #2
 800a7de:	e742      	b.n	800a666 <_dtoa_r+0x39e>
 800a7e0:	9c07      	ldr	r4, [sp, #28]
 800a7e2:	9704      	str	r7, [sp, #16]
 800a7e4:	e761      	b.n	800a6aa <_dtoa_r+0x3e2>
 800a7e6:	4b27      	ldr	r3, [pc, #156]	@ (800a884 <_dtoa_r+0x5bc>)
 800a7e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7f2:	4454      	add	r4, sl
 800a7f4:	2900      	cmp	r1, #0
 800a7f6:	d053      	beq.n	800a8a0 <_dtoa_r+0x5d8>
 800a7f8:	4928      	ldr	r1, [pc, #160]	@ (800a89c <_dtoa_r+0x5d4>)
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	f7f6 f826 	bl	800084c <__aeabi_ddiv>
 800a800:	4633      	mov	r3, r6
 800a802:	462a      	mov	r2, r5
 800a804:	f7f5 fd40 	bl	8000288 <__aeabi_dsub>
 800a808:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a80c:	4656      	mov	r6, sl
 800a80e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a812:	f7f6 f9a1 	bl	8000b58 <__aeabi_d2iz>
 800a816:	4605      	mov	r5, r0
 800a818:	f7f5 fe84 	bl	8000524 <__aeabi_i2d>
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a824:	f7f5 fd30 	bl	8000288 <__aeabi_dsub>
 800a828:	3530      	adds	r5, #48	@ 0x30
 800a82a:	4602      	mov	r2, r0
 800a82c:	460b      	mov	r3, r1
 800a82e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a832:	f806 5b01 	strb.w	r5, [r6], #1
 800a836:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a83a:	f7f6 f94f 	bl	8000adc <__aeabi_dcmplt>
 800a83e:	2800      	cmp	r0, #0
 800a840:	d171      	bne.n	800a926 <_dtoa_r+0x65e>
 800a842:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a846:	4911      	ldr	r1, [pc, #68]	@ (800a88c <_dtoa_r+0x5c4>)
 800a848:	2000      	movs	r0, #0
 800a84a:	f7f5 fd1d 	bl	8000288 <__aeabi_dsub>
 800a84e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a852:	f7f6 f943 	bl	8000adc <__aeabi_dcmplt>
 800a856:	2800      	cmp	r0, #0
 800a858:	f040 8095 	bne.w	800a986 <_dtoa_r+0x6be>
 800a85c:	42a6      	cmp	r6, r4
 800a85e:	f43f af50 	beq.w	800a702 <_dtoa_r+0x43a>
 800a862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a866:	4b0a      	ldr	r3, [pc, #40]	@ (800a890 <_dtoa_r+0x5c8>)
 800a868:	2200      	movs	r2, #0
 800a86a:	f7f5 fec5 	bl	80005f8 <__aeabi_dmul>
 800a86e:	4b08      	ldr	r3, [pc, #32]	@ (800a890 <_dtoa_r+0x5c8>)
 800a870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a874:	2200      	movs	r2, #0
 800a876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a87a:	f7f5 febd 	bl	80005f8 <__aeabi_dmul>
 800a87e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a882:	e7c4      	b.n	800a80e <_dtoa_r+0x546>
 800a884:	0800d090 	.word	0x0800d090
 800a888:	0800d068 	.word	0x0800d068
 800a88c:	3ff00000 	.word	0x3ff00000
 800a890:	40240000 	.word	0x40240000
 800a894:	401c0000 	.word	0x401c0000
 800a898:	40140000 	.word	0x40140000
 800a89c:	3fe00000 	.word	0x3fe00000
 800a8a0:	4631      	mov	r1, r6
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	f7f5 fea8 	bl	80005f8 <__aeabi_dmul>
 800a8a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a8ac:	9415      	str	r4, [sp, #84]	@ 0x54
 800a8ae:	4656      	mov	r6, sl
 800a8b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8b4:	f7f6 f950 	bl	8000b58 <__aeabi_d2iz>
 800a8b8:	4605      	mov	r5, r0
 800a8ba:	f7f5 fe33 	bl	8000524 <__aeabi_i2d>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8c6:	f7f5 fcdf 	bl	8000288 <__aeabi_dsub>
 800a8ca:	3530      	adds	r5, #48	@ 0x30
 800a8cc:	f806 5b01 	strb.w	r5, [r6], #1
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	42a6      	cmp	r6, r4
 800a8d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8da:	f04f 0200 	mov.w	r2, #0
 800a8de:	d124      	bne.n	800a92a <_dtoa_r+0x662>
 800a8e0:	4bac      	ldr	r3, [pc, #688]	@ (800ab94 <_dtoa_r+0x8cc>)
 800a8e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a8e6:	f7f5 fcd1 	bl	800028c <__adddf3>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8f2:	f7f6 f911 	bl	8000b18 <__aeabi_dcmpgt>
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d145      	bne.n	800a986 <_dtoa_r+0x6be>
 800a8fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a8fe:	49a5      	ldr	r1, [pc, #660]	@ (800ab94 <_dtoa_r+0x8cc>)
 800a900:	2000      	movs	r0, #0
 800a902:	f7f5 fcc1 	bl	8000288 <__aeabi_dsub>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a90e:	f7f6 f8e5 	bl	8000adc <__aeabi_dcmplt>
 800a912:	2800      	cmp	r0, #0
 800a914:	f43f aef5 	beq.w	800a702 <_dtoa_r+0x43a>
 800a918:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a91a:	1e73      	subs	r3, r6, #1
 800a91c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a91e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a922:	2b30      	cmp	r3, #48	@ 0x30
 800a924:	d0f8      	beq.n	800a918 <_dtoa_r+0x650>
 800a926:	9f04      	ldr	r7, [sp, #16]
 800a928:	e73e      	b.n	800a7a8 <_dtoa_r+0x4e0>
 800a92a:	4b9b      	ldr	r3, [pc, #620]	@ (800ab98 <_dtoa_r+0x8d0>)
 800a92c:	f7f5 fe64 	bl	80005f8 <__aeabi_dmul>
 800a930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a934:	e7bc      	b.n	800a8b0 <_dtoa_r+0x5e8>
 800a936:	d10c      	bne.n	800a952 <_dtoa_r+0x68a>
 800a938:	4b98      	ldr	r3, [pc, #608]	@ (800ab9c <_dtoa_r+0x8d4>)
 800a93a:	2200      	movs	r2, #0
 800a93c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a940:	f7f5 fe5a 	bl	80005f8 <__aeabi_dmul>
 800a944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a948:	f7f6 f8dc 	bl	8000b04 <__aeabi_dcmpge>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	f000 8157 	beq.w	800ac00 <_dtoa_r+0x938>
 800a952:	2400      	movs	r4, #0
 800a954:	4625      	mov	r5, r4
 800a956:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a958:	43db      	mvns	r3, r3
 800a95a:	9304      	str	r3, [sp, #16]
 800a95c:	4656      	mov	r6, sl
 800a95e:	2700      	movs	r7, #0
 800a960:	4621      	mov	r1, r4
 800a962:	4658      	mov	r0, fp
 800a964:	f000 fbb4 	bl	800b0d0 <_Bfree>
 800a968:	2d00      	cmp	r5, #0
 800a96a:	d0dc      	beq.n	800a926 <_dtoa_r+0x65e>
 800a96c:	b12f      	cbz	r7, 800a97a <_dtoa_r+0x6b2>
 800a96e:	42af      	cmp	r7, r5
 800a970:	d003      	beq.n	800a97a <_dtoa_r+0x6b2>
 800a972:	4639      	mov	r1, r7
 800a974:	4658      	mov	r0, fp
 800a976:	f000 fbab 	bl	800b0d0 <_Bfree>
 800a97a:	4629      	mov	r1, r5
 800a97c:	4658      	mov	r0, fp
 800a97e:	f000 fba7 	bl	800b0d0 <_Bfree>
 800a982:	e7d0      	b.n	800a926 <_dtoa_r+0x65e>
 800a984:	9704      	str	r7, [sp, #16]
 800a986:	4633      	mov	r3, r6
 800a988:	461e      	mov	r6, r3
 800a98a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a98e:	2a39      	cmp	r2, #57	@ 0x39
 800a990:	d107      	bne.n	800a9a2 <_dtoa_r+0x6da>
 800a992:	459a      	cmp	sl, r3
 800a994:	d1f8      	bne.n	800a988 <_dtoa_r+0x6c0>
 800a996:	9a04      	ldr	r2, [sp, #16]
 800a998:	3201      	adds	r2, #1
 800a99a:	9204      	str	r2, [sp, #16]
 800a99c:	2230      	movs	r2, #48	@ 0x30
 800a99e:	f88a 2000 	strb.w	r2, [sl]
 800a9a2:	781a      	ldrb	r2, [r3, #0]
 800a9a4:	3201      	adds	r2, #1
 800a9a6:	701a      	strb	r2, [r3, #0]
 800a9a8:	e7bd      	b.n	800a926 <_dtoa_r+0x65e>
 800a9aa:	4b7b      	ldr	r3, [pc, #492]	@ (800ab98 <_dtoa_r+0x8d0>)
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f7f5 fe23 	bl	80005f8 <__aeabi_dmul>
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	460d      	mov	r5, r1
 800a9ba:	f7f6 f885 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	f43f aebb 	beq.w	800a73a <_dtoa_r+0x472>
 800a9c4:	e6f0      	b.n	800a7a8 <_dtoa_r+0x4e0>
 800a9c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a9c8:	2a00      	cmp	r2, #0
 800a9ca:	f000 80db 	beq.w	800ab84 <_dtoa_r+0x8bc>
 800a9ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9d0:	2a01      	cmp	r2, #1
 800a9d2:	f300 80bf 	bgt.w	800ab54 <_dtoa_r+0x88c>
 800a9d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a9d8:	2a00      	cmp	r2, #0
 800a9da:	f000 80b7 	beq.w	800ab4c <_dtoa_r+0x884>
 800a9de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a9e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a9e4:	4646      	mov	r6, r8
 800a9e6:	9a08      	ldr	r2, [sp, #32]
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	441a      	add	r2, r3
 800a9ec:	4658      	mov	r0, fp
 800a9ee:	4498      	add	r8, r3
 800a9f0:	9208      	str	r2, [sp, #32]
 800a9f2:	f000 fc21 	bl	800b238 <__i2b>
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	b15e      	cbz	r6, 800aa12 <_dtoa_r+0x74a>
 800a9fa:	9b08      	ldr	r3, [sp, #32]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	dd08      	ble.n	800aa12 <_dtoa_r+0x74a>
 800aa00:	42b3      	cmp	r3, r6
 800aa02:	9a08      	ldr	r2, [sp, #32]
 800aa04:	bfa8      	it	ge
 800aa06:	4633      	movge	r3, r6
 800aa08:	eba8 0803 	sub.w	r8, r8, r3
 800aa0c:	1af6      	subs	r6, r6, r3
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	9308      	str	r3, [sp, #32]
 800aa12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa14:	b1f3      	cbz	r3, 800aa54 <_dtoa_r+0x78c>
 800aa16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 80b7 	beq.w	800ab8c <_dtoa_r+0x8c4>
 800aa1e:	b18c      	cbz	r4, 800aa44 <_dtoa_r+0x77c>
 800aa20:	4629      	mov	r1, r5
 800aa22:	4622      	mov	r2, r4
 800aa24:	4658      	mov	r0, fp
 800aa26:	f000 fcc7 	bl	800b3b8 <__pow5mult>
 800aa2a:	464a      	mov	r2, r9
 800aa2c:	4601      	mov	r1, r0
 800aa2e:	4605      	mov	r5, r0
 800aa30:	4658      	mov	r0, fp
 800aa32:	f000 fc17 	bl	800b264 <__multiply>
 800aa36:	4649      	mov	r1, r9
 800aa38:	9004      	str	r0, [sp, #16]
 800aa3a:	4658      	mov	r0, fp
 800aa3c:	f000 fb48 	bl	800b0d0 <_Bfree>
 800aa40:	9b04      	ldr	r3, [sp, #16]
 800aa42:	4699      	mov	r9, r3
 800aa44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa46:	1b1a      	subs	r2, r3, r4
 800aa48:	d004      	beq.n	800aa54 <_dtoa_r+0x78c>
 800aa4a:	4649      	mov	r1, r9
 800aa4c:	4658      	mov	r0, fp
 800aa4e:	f000 fcb3 	bl	800b3b8 <__pow5mult>
 800aa52:	4681      	mov	r9, r0
 800aa54:	2101      	movs	r1, #1
 800aa56:	4658      	mov	r0, fp
 800aa58:	f000 fbee 	bl	800b238 <__i2b>
 800aa5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa5e:	4604      	mov	r4, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f000 81cf 	beq.w	800ae04 <_dtoa_r+0xb3c>
 800aa66:	461a      	mov	r2, r3
 800aa68:	4601      	mov	r1, r0
 800aa6a:	4658      	mov	r0, fp
 800aa6c:	f000 fca4 	bl	800b3b8 <__pow5mult>
 800aa70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	4604      	mov	r4, r0
 800aa76:	f300 8095 	bgt.w	800aba4 <_dtoa_r+0x8dc>
 800aa7a:	9b02      	ldr	r3, [sp, #8]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f040 8087 	bne.w	800ab90 <_dtoa_r+0x8c8>
 800aa82:	9b03      	ldr	r3, [sp, #12]
 800aa84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f040 8089 	bne.w	800aba0 <_dtoa_r+0x8d8>
 800aa8e:	9b03      	ldr	r3, [sp, #12]
 800aa90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa94:	0d1b      	lsrs	r3, r3, #20
 800aa96:	051b      	lsls	r3, r3, #20
 800aa98:	b12b      	cbz	r3, 800aaa6 <_dtoa_r+0x7de>
 800aa9a:	9b08      	ldr	r3, [sp, #32]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	9308      	str	r3, [sp, #32]
 800aaa0:	f108 0801 	add.w	r8, r8, #1
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aaa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f000 81b0 	beq.w	800ae10 <_dtoa_r+0xb48>
 800aab0:	6923      	ldr	r3, [r4, #16]
 800aab2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aab6:	6918      	ldr	r0, [r3, #16]
 800aab8:	f000 fb72 	bl	800b1a0 <__hi0bits>
 800aabc:	f1c0 0020 	rsb	r0, r0, #32
 800aac0:	9b08      	ldr	r3, [sp, #32]
 800aac2:	4418      	add	r0, r3
 800aac4:	f010 001f 	ands.w	r0, r0, #31
 800aac8:	d077      	beq.n	800abba <_dtoa_r+0x8f2>
 800aaca:	f1c0 0320 	rsb	r3, r0, #32
 800aace:	2b04      	cmp	r3, #4
 800aad0:	dd6b      	ble.n	800abaa <_dtoa_r+0x8e2>
 800aad2:	9b08      	ldr	r3, [sp, #32]
 800aad4:	f1c0 001c 	rsb	r0, r0, #28
 800aad8:	4403      	add	r3, r0
 800aada:	4480      	add	r8, r0
 800aadc:	4406      	add	r6, r0
 800aade:	9308      	str	r3, [sp, #32]
 800aae0:	f1b8 0f00 	cmp.w	r8, #0
 800aae4:	dd05      	ble.n	800aaf2 <_dtoa_r+0x82a>
 800aae6:	4649      	mov	r1, r9
 800aae8:	4642      	mov	r2, r8
 800aaea:	4658      	mov	r0, fp
 800aaec:	f000 fcbe 	bl	800b46c <__lshift>
 800aaf0:	4681      	mov	r9, r0
 800aaf2:	9b08      	ldr	r3, [sp, #32]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	dd05      	ble.n	800ab04 <_dtoa_r+0x83c>
 800aaf8:	4621      	mov	r1, r4
 800aafa:	461a      	mov	r2, r3
 800aafc:	4658      	mov	r0, fp
 800aafe:	f000 fcb5 	bl	800b46c <__lshift>
 800ab02:	4604      	mov	r4, r0
 800ab04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d059      	beq.n	800abbe <_dtoa_r+0x8f6>
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	4648      	mov	r0, r9
 800ab0e:	f000 fd19 	bl	800b544 <__mcmp>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	da53      	bge.n	800abbe <_dtoa_r+0x8f6>
 800ab16:	1e7b      	subs	r3, r7, #1
 800ab18:	9304      	str	r3, [sp, #16]
 800ab1a:	4649      	mov	r1, r9
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	220a      	movs	r2, #10
 800ab20:	4658      	mov	r0, fp
 800ab22:	f000 faf7 	bl	800b114 <__multadd>
 800ab26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab28:	4681      	mov	r9, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 8172 	beq.w	800ae14 <_dtoa_r+0xb4c>
 800ab30:	2300      	movs	r3, #0
 800ab32:	4629      	mov	r1, r5
 800ab34:	220a      	movs	r2, #10
 800ab36:	4658      	mov	r0, fp
 800ab38:	f000 faec 	bl	800b114 <__multadd>
 800ab3c:	9b00      	ldr	r3, [sp, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	4605      	mov	r5, r0
 800ab42:	dc67      	bgt.n	800ac14 <_dtoa_r+0x94c>
 800ab44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	dc41      	bgt.n	800abce <_dtoa_r+0x906>
 800ab4a:	e063      	b.n	800ac14 <_dtoa_r+0x94c>
 800ab4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ab52:	e746      	b.n	800a9e2 <_dtoa_r+0x71a>
 800ab54:	9b07      	ldr	r3, [sp, #28]
 800ab56:	1e5c      	subs	r4, r3, #1
 800ab58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab5a:	42a3      	cmp	r3, r4
 800ab5c:	bfbf      	itttt	lt
 800ab5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ab60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ab62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ab64:	1ae3      	sublt	r3, r4, r3
 800ab66:	bfb4      	ite	lt
 800ab68:	18d2      	addlt	r2, r2, r3
 800ab6a:	1b1c      	subge	r4, r3, r4
 800ab6c:	9b07      	ldr	r3, [sp, #28]
 800ab6e:	bfbc      	itt	lt
 800ab70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ab72:	2400      	movlt	r4, #0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	bfb5      	itete	lt
 800ab78:	eba8 0603 	sublt.w	r6, r8, r3
 800ab7c:	9b07      	ldrge	r3, [sp, #28]
 800ab7e:	2300      	movlt	r3, #0
 800ab80:	4646      	movge	r6, r8
 800ab82:	e730      	b.n	800a9e6 <_dtoa_r+0x71e>
 800ab84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ab88:	4646      	mov	r6, r8
 800ab8a:	e735      	b.n	800a9f8 <_dtoa_r+0x730>
 800ab8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab8e:	e75c      	b.n	800aa4a <_dtoa_r+0x782>
 800ab90:	2300      	movs	r3, #0
 800ab92:	e788      	b.n	800aaa6 <_dtoa_r+0x7de>
 800ab94:	3fe00000 	.word	0x3fe00000
 800ab98:	40240000 	.word	0x40240000
 800ab9c:	40140000 	.word	0x40140000
 800aba0:	9b02      	ldr	r3, [sp, #8]
 800aba2:	e780      	b.n	800aaa6 <_dtoa_r+0x7de>
 800aba4:	2300      	movs	r3, #0
 800aba6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aba8:	e782      	b.n	800aab0 <_dtoa_r+0x7e8>
 800abaa:	d099      	beq.n	800aae0 <_dtoa_r+0x818>
 800abac:	9a08      	ldr	r2, [sp, #32]
 800abae:	331c      	adds	r3, #28
 800abb0:	441a      	add	r2, r3
 800abb2:	4498      	add	r8, r3
 800abb4:	441e      	add	r6, r3
 800abb6:	9208      	str	r2, [sp, #32]
 800abb8:	e792      	b.n	800aae0 <_dtoa_r+0x818>
 800abba:	4603      	mov	r3, r0
 800abbc:	e7f6      	b.n	800abac <_dtoa_r+0x8e4>
 800abbe:	9b07      	ldr	r3, [sp, #28]
 800abc0:	9704      	str	r7, [sp, #16]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	dc20      	bgt.n	800ac08 <_dtoa_r+0x940>
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abca:	2b02      	cmp	r3, #2
 800abcc:	dd1e      	ble.n	800ac0c <_dtoa_r+0x944>
 800abce:	9b00      	ldr	r3, [sp, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f47f aec0 	bne.w	800a956 <_dtoa_r+0x68e>
 800abd6:	4621      	mov	r1, r4
 800abd8:	2205      	movs	r2, #5
 800abda:	4658      	mov	r0, fp
 800abdc:	f000 fa9a 	bl	800b114 <__multadd>
 800abe0:	4601      	mov	r1, r0
 800abe2:	4604      	mov	r4, r0
 800abe4:	4648      	mov	r0, r9
 800abe6:	f000 fcad 	bl	800b544 <__mcmp>
 800abea:	2800      	cmp	r0, #0
 800abec:	f77f aeb3 	ble.w	800a956 <_dtoa_r+0x68e>
 800abf0:	4656      	mov	r6, sl
 800abf2:	2331      	movs	r3, #49	@ 0x31
 800abf4:	f806 3b01 	strb.w	r3, [r6], #1
 800abf8:	9b04      	ldr	r3, [sp, #16]
 800abfa:	3301      	adds	r3, #1
 800abfc:	9304      	str	r3, [sp, #16]
 800abfe:	e6ae      	b.n	800a95e <_dtoa_r+0x696>
 800ac00:	9c07      	ldr	r4, [sp, #28]
 800ac02:	9704      	str	r7, [sp, #16]
 800ac04:	4625      	mov	r5, r4
 800ac06:	e7f3      	b.n	800abf0 <_dtoa_r+0x928>
 800ac08:	9b07      	ldr	r3, [sp, #28]
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f000 8104 	beq.w	800ae1c <_dtoa_r+0xb54>
 800ac14:	2e00      	cmp	r6, #0
 800ac16:	dd05      	ble.n	800ac24 <_dtoa_r+0x95c>
 800ac18:	4629      	mov	r1, r5
 800ac1a:	4632      	mov	r2, r6
 800ac1c:	4658      	mov	r0, fp
 800ac1e:	f000 fc25 	bl	800b46c <__lshift>
 800ac22:	4605      	mov	r5, r0
 800ac24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d05a      	beq.n	800ace0 <_dtoa_r+0xa18>
 800ac2a:	6869      	ldr	r1, [r5, #4]
 800ac2c:	4658      	mov	r0, fp
 800ac2e:	f000 fa0f 	bl	800b050 <_Balloc>
 800ac32:	4606      	mov	r6, r0
 800ac34:	b928      	cbnz	r0, 800ac42 <_dtoa_r+0x97a>
 800ac36:	4b84      	ldr	r3, [pc, #528]	@ (800ae48 <_dtoa_r+0xb80>)
 800ac38:	4602      	mov	r2, r0
 800ac3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ac3e:	f7ff bb5a 	b.w	800a2f6 <_dtoa_r+0x2e>
 800ac42:	692a      	ldr	r2, [r5, #16]
 800ac44:	3202      	adds	r2, #2
 800ac46:	0092      	lsls	r2, r2, #2
 800ac48:	f105 010c 	add.w	r1, r5, #12
 800ac4c:	300c      	adds	r0, #12
 800ac4e:	f7ff faa4 	bl	800a19a <memcpy>
 800ac52:	2201      	movs	r2, #1
 800ac54:	4631      	mov	r1, r6
 800ac56:	4658      	mov	r0, fp
 800ac58:	f000 fc08 	bl	800b46c <__lshift>
 800ac5c:	f10a 0301 	add.w	r3, sl, #1
 800ac60:	9307      	str	r3, [sp, #28]
 800ac62:	9b00      	ldr	r3, [sp, #0]
 800ac64:	4453      	add	r3, sl
 800ac66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac68:	9b02      	ldr	r3, [sp, #8]
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	462f      	mov	r7, r5
 800ac70:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac72:	4605      	mov	r5, r0
 800ac74:	9b07      	ldr	r3, [sp, #28]
 800ac76:	4621      	mov	r1, r4
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	4648      	mov	r0, r9
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	f7ff fa9a 	bl	800a1b6 <quorem>
 800ac82:	4639      	mov	r1, r7
 800ac84:	9002      	str	r0, [sp, #8]
 800ac86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac8a:	4648      	mov	r0, r9
 800ac8c:	f000 fc5a 	bl	800b544 <__mcmp>
 800ac90:	462a      	mov	r2, r5
 800ac92:	9008      	str	r0, [sp, #32]
 800ac94:	4621      	mov	r1, r4
 800ac96:	4658      	mov	r0, fp
 800ac98:	f000 fc70 	bl	800b57c <__mdiff>
 800ac9c:	68c2      	ldr	r2, [r0, #12]
 800ac9e:	4606      	mov	r6, r0
 800aca0:	bb02      	cbnz	r2, 800ace4 <_dtoa_r+0xa1c>
 800aca2:	4601      	mov	r1, r0
 800aca4:	4648      	mov	r0, r9
 800aca6:	f000 fc4d 	bl	800b544 <__mcmp>
 800acaa:	4602      	mov	r2, r0
 800acac:	4631      	mov	r1, r6
 800acae:	4658      	mov	r0, fp
 800acb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800acb2:	f000 fa0d 	bl	800b0d0 <_Bfree>
 800acb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acba:	9e07      	ldr	r6, [sp, #28]
 800acbc:	ea43 0102 	orr.w	r1, r3, r2
 800acc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acc2:	4319      	orrs	r1, r3
 800acc4:	d110      	bne.n	800ace8 <_dtoa_r+0xa20>
 800acc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800acca:	d029      	beq.n	800ad20 <_dtoa_r+0xa58>
 800accc:	9b08      	ldr	r3, [sp, #32]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	dd02      	ble.n	800acd8 <_dtoa_r+0xa10>
 800acd2:	9b02      	ldr	r3, [sp, #8]
 800acd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800acd8:	9b00      	ldr	r3, [sp, #0]
 800acda:	f883 8000 	strb.w	r8, [r3]
 800acde:	e63f      	b.n	800a960 <_dtoa_r+0x698>
 800ace0:	4628      	mov	r0, r5
 800ace2:	e7bb      	b.n	800ac5c <_dtoa_r+0x994>
 800ace4:	2201      	movs	r2, #1
 800ace6:	e7e1      	b.n	800acac <_dtoa_r+0x9e4>
 800ace8:	9b08      	ldr	r3, [sp, #32]
 800acea:	2b00      	cmp	r3, #0
 800acec:	db04      	blt.n	800acf8 <_dtoa_r+0xa30>
 800acee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800acf0:	430b      	orrs	r3, r1
 800acf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800acf4:	430b      	orrs	r3, r1
 800acf6:	d120      	bne.n	800ad3a <_dtoa_r+0xa72>
 800acf8:	2a00      	cmp	r2, #0
 800acfa:	dded      	ble.n	800acd8 <_dtoa_r+0xa10>
 800acfc:	4649      	mov	r1, r9
 800acfe:	2201      	movs	r2, #1
 800ad00:	4658      	mov	r0, fp
 800ad02:	f000 fbb3 	bl	800b46c <__lshift>
 800ad06:	4621      	mov	r1, r4
 800ad08:	4681      	mov	r9, r0
 800ad0a:	f000 fc1b 	bl	800b544 <__mcmp>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	dc03      	bgt.n	800ad1a <_dtoa_r+0xa52>
 800ad12:	d1e1      	bne.n	800acd8 <_dtoa_r+0xa10>
 800ad14:	f018 0f01 	tst.w	r8, #1
 800ad18:	d0de      	beq.n	800acd8 <_dtoa_r+0xa10>
 800ad1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ad1e:	d1d8      	bne.n	800acd2 <_dtoa_r+0xa0a>
 800ad20:	9a00      	ldr	r2, [sp, #0]
 800ad22:	2339      	movs	r3, #57	@ 0x39
 800ad24:	7013      	strb	r3, [r2, #0]
 800ad26:	4633      	mov	r3, r6
 800ad28:	461e      	mov	r6, r3
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ad30:	2a39      	cmp	r2, #57	@ 0x39
 800ad32:	d052      	beq.n	800adda <_dtoa_r+0xb12>
 800ad34:	3201      	adds	r2, #1
 800ad36:	701a      	strb	r2, [r3, #0]
 800ad38:	e612      	b.n	800a960 <_dtoa_r+0x698>
 800ad3a:	2a00      	cmp	r2, #0
 800ad3c:	dd07      	ble.n	800ad4e <_dtoa_r+0xa86>
 800ad3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ad42:	d0ed      	beq.n	800ad20 <_dtoa_r+0xa58>
 800ad44:	9a00      	ldr	r2, [sp, #0]
 800ad46:	f108 0301 	add.w	r3, r8, #1
 800ad4a:	7013      	strb	r3, [r2, #0]
 800ad4c:	e608      	b.n	800a960 <_dtoa_r+0x698>
 800ad4e:	9b07      	ldr	r3, [sp, #28]
 800ad50:	9a07      	ldr	r2, [sp, #28]
 800ad52:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ad56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d028      	beq.n	800adae <_dtoa_r+0xae6>
 800ad5c:	4649      	mov	r1, r9
 800ad5e:	2300      	movs	r3, #0
 800ad60:	220a      	movs	r2, #10
 800ad62:	4658      	mov	r0, fp
 800ad64:	f000 f9d6 	bl	800b114 <__multadd>
 800ad68:	42af      	cmp	r7, r5
 800ad6a:	4681      	mov	r9, r0
 800ad6c:	f04f 0300 	mov.w	r3, #0
 800ad70:	f04f 020a 	mov.w	r2, #10
 800ad74:	4639      	mov	r1, r7
 800ad76:	4658      	mov	r0, fp
 800ad78:	d107      	bne.n	800ad8a <_dtoa_r+0xac2>
 800ad7a:	f000 f9cb 	bl	800b114 <__multadd>
 800ad7e:	4607      	mov	r7, r0
 800ad80:	4605      	mov	r5, r0
 800ad82:	9b07      	ldr	r3, [sp, #28]
 800ad84:	3301      	adds	r3, #1
 800ad86:	9307      	str	r3, [sp, #28]
 800ad88:	e774      	b.n	800ac74 <_dtoa_r+0x9ac>
 800ad8a:	f000 f9c3 	bl	800b114 <__multadd>
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4607      	mov	r7, r0
 800ad92:	2300      	movs	r3, #0
 800ad94:	220a      	movs	r2, #10
 800ad96:	4658      	mov	r0, fp
 800ad98:	f000 f9bc 	bl	800b114 <__multadd>
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	e7f0      	b.n	800ad82 <_dtoa_r+0xaba>
 800ada0:	9b00      	ldr	r3, [sp, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	bfcc      	ite	gt
 800ada6:	461e      	movgt	r6, r3
 800ada8:	2601      	movle	r6, #1
 800adaa:	4456      	add	r6, sl
 800adac:	2700      	movs	r7, #0
 800adae:	4649      	mov	r1, r9
 800adb0:	2201      	movs	r2, #1
 800adb2:	4658      	mov	r0, fp
 800adb4:	f000 fb5a 	bl	800b46c <__lshift>
 800adb8:	4621      	mov	r1, r4
 800adba:	4681      	mov	r9, r0
 800adbc:	f000 fbc2 	bl	800b544 <__mcmp>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	dcb0      	bgt.n	800ad26 <_dtoa_r+0xa5e>
 800adc4:	d102      	bne.n	800adcc <_dtoa_r+0xb04>
 800adc6:	f018 0f01 	tst.w	r8, #1
 800adca:	d1ac      	bne.n	800ad26 <_dtoa_r+0xa5e>
 800adcc:	4633      	mov	r3, r6
 800adce:	461e      	mov	r6, r3
 800add0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800add4:	2a30      	cmp	r2, #48	@ 0x30
 800add6:	d0fa      	beq.n	800adce <_dtoa_r+0xb06>
 800add8:	e5c2      	b.n	800a960 <_dtoa_r+0x698>
 800adda:	459a      	cmp	sl, r3
 800addc:	d1a4      	bne.n	800ad28 <_dtoa_r+0xa60>
 800adde:	9b04      	ldr	r3, [sp, #16]
 800ade0:	3301      	adds	r3, #1
 800ade2:	9304      	str	r3, [sp, #16]
 800ade4:	2331      	movs	r3, #49	@ 0x31
 800ade6:	f88a 3000 	strb.w	r3, [sl]
 800adea:	e5b9      	b.n	800a960 <_dtoa_r+0x698>
 800adec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800adee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ae4c <_dtoa_r+0xb84>
 800adf2:	b11b      	cbz	r3, 800adfc <_dtoa_r+0xb34>
 800adf4:	f10a 0308 	add.w	r3, sl, #8
 800adf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800adfa:	6013      	str	r3, [r2, #0]
 800adfc:	4650      	mov	r0, sl
 800adfe:	b019      	add	sp, #100	@ 0x64
 800ae00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	f77f ae37 	ble.w	800aa7a <_dtoa_r+0x7b2>
 800ae0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae10:	2001      	movs	r0, #1
 800ae12:	e655      	b.n	800aac0 <_dtoa_r+0x7f8>
 800ae14:	9b00      	ldr	r3, [sp, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f77f aed6 	ble.w	800abc8 <_dtoa_r+0x900>
 800ae1c:	4656      	mov	r6, sl
 800ae1e:	4621      	mov	r1, r4
 800ae20:	4648      	mov	r0, r9
 800ae22:	f7ff f9c8 	bl	800a1b6 <quorem>
 800ae26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ae2a:	f806 8b01 	strb.w	r8, [r6], #1
 800ae2e:	9b00      	ldr	r3, [sp, #0]
 800ae30:	eba6 020a 	sub.w	r2, r6, sl
 800ae34:	4293      	cmp	r3, r2
 800ae36:	ddb3      	ble.n	800ada0 <_dtoa_r+0xad8>
 800ae38:	4649      	mov	r1, r9
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	220a      	movs	r2, #10
 800ae3e:	4658      	mov	r0, fp
 800ae40:	f000 f968 	bl	800b114 <__multadd>
 800ae44:	4681      	mov	r9, r0
 800ae46:	e7ea      	b.n	800ae1e <_dtoa_r+0xb56>
 800ae48:	0800cfed 	.word	0x0800cfed
 800ae4c:	0800cf71 	.word	0x0800cf71

0800ae50 <_free_r>:
 800ae50:	b538      	push	{r3, r4, r5, lr}
 800ae52:	4605      	mov	r5, r0
 800ae54:	2900      	cmp	r1, #0
 800ae56:	d041      	beq.n	800aedc <_free_r+0x8c>
 800ae58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae5c:	1f0c      	subs	r4, r1, #4
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	bfb8      	it	lt
 800ae62:	18e4      	addlt	r4, r4, r3
 800ae64:	f000 f8e8 	bl	800b038 <__malloc_lock>
 800ae68:	4a1d      	ldr	r2, [pc, #116]	@ (800aee0 <_free_r+0x90>)
 800ae6a:	6813      	ldr	r3, [r2, #0]
 800ae6c:	b933      	cbnz	r3, 800ae7c <_free_r+0x2c>
 800ae6e:	6063      	str	r3, [r4, #4]
 800ae70:	6014      	str	r4, [r2, #0]
 800ae72:	4628      	mov	r0, r5
 800ae74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae78:	f000 b8e4 	b.w	800b044 <__malloc_unlock>
 800ae7c:	42a3      	cmp	r3, r4
 800ae7e:	d908      	bls.n	800ae92 <_free_r+0x42>
 800ae80:	6820      	ldr	r0, [r4, #0]
 800ae82:	1821      	adds	r1, r4, r0
 800ae84:	428b      	cmp	r3, r1
 800ae86:	bf01      	itttt	eq
 800ae88:	6819      	ldreq	r1, [r3, #0]
 800ae8a:	685b      	ldreq	r3, [r3, #4]
 800ae8c:	1809      	addeq	r1, r1, r0
 800ae8e:	6021      	streq	r1, [r4, #0]
 800ae90:	e7ed      	b.n	800ae6e <_free_r+0x1e>
 800ae92:	461a      	mov	r2, r3
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	b10b      	cbz	r3, 800ae9c <_free_r+0x4c>
 800ae98:	42a3      	cmp	r3, r4
 800ae9a:	d9fa      	bls.n	800ae92 <_free_r+0x42>
 800ae9c:	6811      	ldr	r1, [r2, #0]
 800ae9e:	1850      	adds	r0, r2, r1
 800aea0:	42a0      	cmp	r0, r4
 800aea2:	d10b      	bne.n	800aebc <_free_r+0x6c>
 800aea4:	6820      	ldr	r0, [r4, #0]
 800aea6:	4401      	add	r1, r0
 800aea8:	1850      	adds	r0, r2, r1
 800aeaa:	4283      	cmp	r3, r0
 800aeac:	6011      	str	r1, [r2, #0]
 800aeae:	d1e0      	bne.n	800ae72 <_free_r+0x22>
 800aeb0:	6818      	ldr	r0, [r3, #0]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	6053      	str	r3, [r2, #4]
 800aeb6:	4408      	add	r0, r1
 800aeb8:	6010      	str	r0, [r2, #0]
 800aeba:	e7da      	b.n	800ae72 <_free_r+0x22>
 800aebc:	d902      	bls.n	800aec4 <_free_r+0x74>
 800aebe:	230c      	movs	r3, #12
 800aec0:	602b      	str	r3, [r5, #0]
 800aec2:	e7d6      	b.n	800ae72 <_free_r+0x22>
 800aec4:	6820      	ldr	r0, [r4, #0]
 800aec6:	1821      	adds	r1, r4, r0
 800aec8:	428b      	cmp	r3, r1
 800aeca:	bf04      	itt	eq
 800aecc:	6819      	ldreq	r1, [r3, #0]
 800aece:	685b      	ldreq	r3, [r3, #4]
 800aed0:	6063      	str	r3, [r4, #4]
 800aed2:	bf04      	itt	eq
 800aed4:	1809      	addeq	r1, r1, r0
 800aed6:	6021      	streq	r1, [r4, #0]
 800aed8:	6054      	str	r4, [r2, #4]
 800aeda:	e7ca      	b.n	800ae72 <_free_r+0x22>
 800aedc:	bd38      	pop	{r3, r4, r5, pc}
 800aede:	bf00      	nop
 800aee0:	200056b0 	.word	0x200056b0

0800aee4 <malloc>:
 800aee4:	4b02      	ldr	r3, [pc, #8]	@ (800aef0 <malloc+0xc>)
 800aee6:	4601      	mov	r1, r0
 800aee8:	6818      	ldr	r0, [r3, #0]
 800aeea:	f000 b825 	b.w	800af38 <_malloc_r>
 800aeee:	bf00      	nop
 800aef0:	2000001c 	.word	0x2000001c

0800aef4 <sbrk_aligned>:
 800aef4:	b570      	push	{r4, r5, r6, lr}
 800aef6:	4e0f      	ldr	r6, [pc, #60]	@ (800af34 <sbrk_aligned+0x40>)
 800aef8:	460c      	mov	r4, r1
 800aefa:	6831      	ldr	r1, [r6, #0]
 800aefc:	4605      	mov	r5, r0
 800aefe:	b911      	cbnz	r1, 800af06 <sbrk_aligned+0x12>
 800af00:	f000 fe46 	bl	800bb90 <_sbrk_r>
 800af04:	6030      	str	r0, [r6, #0]
 800af06:	4621      	mov	r1, r4
 800af08:	4628      	mov	r0, r5
 800af0a:	f000 fe41 	bl	800bb90 <_sbrk_r>
 800af0e:	1c43      	adds	r3, r0, #1
 800af10:	d103      	bne.n	800af1a <sbrk_aligned+0x26>
 800af12:	f04f 34ff 	mov.w	r4, #4294967295
 800af16:	4620      	mov	r0, r4
 800af18:	bd70      	pop	{r4, r5, r6, pc}
 800af1a:	1cc4      	adds	r4, r0, #3
 800af1c:	f024 0403 	bic.w	r4, r4, #3
 800af20:	42a0      	cmp	r0, r4
 800af22:	d0f8      	beq.n	800af16 <sbrk_aligned+0x22>
 800af24:	1a21      	subs	r1, r4, r0
 800af26:	4628      	mov	r0, r5
 800af28:	f000 fe32 	bl	800bb90 <_sbrk_r>
 800af2c:	3001      	adds	r0, #1
 800af2e:	d1f2      	bne.n	800af16 <sbrk_aligned+0x22>
 800af30:	e7ef      	b.n	800af12 <sbrk_aligned+0x1e>
 800af32:	bf00      	nop
 800af34:	200056ac 	.word	0x200056ac

0800af38 <_malloc_r>:
 800af38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af3c:	1ccd      	adds	r5, r1, #3
 800af3e:	f025 0503 	bic.w	r5, r5, #3
 800af42:	3508      	adds	r5, #8
 800af44:	2d0c      	cmp	r5, #12
 800af46:	bf38      	it	cc
 800af48:	250c      	movcc	r5, #12
 800af4a:	2d00      	cmp	r5, #0
 800af4c:	4606      	mov	r6, r0
 800af4e:	db01      	blt.n	800af54 <_malloc_r+0x1c>
 800af50:	42a9      	cmp	r1, r5
 800af52:	d904      	bls.n	800af5e <_malloc_r+0x26>
 800af54:	230c      	movs	r3, #12
 800af56:	6033      	str	r3, [r6, #0]
 800af58:	2000      	movs	r0, #0
 800af5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b034 <_malloc_r+0xfc>
 800af62:	f000 f869 	bl	800b038 <__malloc_lock>
 800af66:	f8d8 3000 	ldr.w	r3, [r8]
 800af6a:	461c      	mov	r4, r3
 800af6c:	bb44      	cbnz	r4, 800afc0 <_malloc_r+0x88>
 800af6e:	4629      	mov	r1, r5
 800af70:	4630      	mov	r0, r6
 800af72:	f7ff ffbf 	bl	800aef4 <sbrk_aligned>
 800af76:	1c43      	adds	r3, r0, #1
 800af78:	4604      	mov	r4, r0
 800af7a:	d158      	bne.n	800b02e <_malloc_r+0xf6>
 800af7c:	f8d8 4000 	ldr.w	r4, [r8]
 800af80:	4627      	mov	r7, r4
 800af82:	2f00      	cmp	r7, #0
 800af84:	d143      	bne.n	800b00e <_malloc_r+0xd6>
 800af86:	2c00      	cmp	r4, #0
 800af88:	d04b      	beq.n	800b022 <_malloc_r+0xea>
 800af8a:	6823      	ldr	r3, [r4, #0]
 800af8c:	4639      	mov	r1, r7
 800af8e:	4630      	mov	r0, r6
 800af90:	eb04 0903 	add.w	r9, r4, r3
 800af94:	f000 fdfc 	bl	800bb90 <_sbrk_r>
 800af98:	4581      	cmp	r9, r0
 800af9a:	d142      	bne.n	800b022 <_malloc_r+0xea>
 800af9c:	6821      	ldr	r1, [r4, #0]
 800af9e:	1a6d      	subs	r5, r5, r1
 800afa0:	4629      	mov	r1, r5
 800afa2:	4630      	mov	r0, r6
 800afa4:	f7ff ffa6 	bl	800aef4 <sbrk_aligned>
 800afa8:	3001      	adds	r0, #1
 800afaa:	d03a      	beq.n	800b022 <_malloc_r+0xea>
 800afac:	6823      	ldr	r3, [r4, #0]
 800afae:	442b      	add	r3, r5
 800afb0:	6023      	str	r3, [r4, #0]
 800afb2:	f8d8 3000 	ldr.w	r3, [r8]
 800afb6:	685a      	ldr	r2, [r3, #4]
 800afb8:	bb62      	cbnz	r2, 800b014 <_malloc_r+0xdc>
 800afba:	f8c8 7000 	str.w	r7, [r8]
 800afbe:	e00f      	b.n	800afe0 <_malloc_r+0xa8>
 800afc0:	6822      	ldr	r2, [r4, #0]
 800afc2:	1b52      	subs	r2, r2, r5
 800afc4:	d420      	bmi.n	800b008 <_malloc_r+0xd0>
 800afc6:	2a0b      	cmp	r2, #11
 800afc8:	d917      	bls.n	800affa <_malloc_r+0xc2>
 800afca:	1961      	adds	r1, r4, r5
 800afcc:	42a3      	cmp	r3, r4
 800afce:	6025      	str	r5, [r4, #0]
 800afd0:	bf18      	it	ne
 800afd2:	6059      	strne	r1, [r3, #4]
 800afd4:	6863      	ldr	r3, [r4, #4]
 800afd6:	bf08      	it	eq
 800afd8:	f8c8 1000 	streq.w	r1, [r8]
 800afdc:	5162      	str	r2, [r4, r5]
 800afde:	604b      	str	r3, [r1, #4]
 800afe0:	4630      	mov	r0, r6
 800afe2:	f000 f82f 	bl	800b044 <__malloc_unlock>
 800afe6:	f104 000b 	add.w	r0, r4, #11
 800afea:	1d23      	adds	r3, r4, #4
 800afec:	f020 0007 	bic.w	r0, r0, #7
 800aff0:	1ac2      	subs	r2, r0, r3
 800aff2:	bf1c      	itt	ne
 800aff4:	1a1b      	subne	r3, r3, r0
 800aff6:	50a3      	strne	r3, [r4, r2]
 800aff8:	e7af      	b.n	800af5a <_malloc_r+0x22>
 800affa:	6862      	ldr	r2, [r4, #4]
 800affc:	42a3      	cmp	r3, r4
 800affe:	bf0c      	ite	eq
 800b000:	f8c8 2000 	streq.w	r2, [r8]
 800b004:	605a      	strne	r2, [r3, #4]
 800b006:	e7eb      	b.n	800afe0 <_malloc_r+0xa8>
 800b008:	4623      	mov	r3, r4
 800b00a:	6864      	ldr	r4, [r4, #4]
 800b00c:	e7ae      	b.n	800af6c <_malloc_r+0x34>
 800b00e:	463c      	mov	r4, r7
 800b010:	687f      	ldr	r7, [r7, #4]
 800b012:	e7b6      	b.n	800af82 <_malloc_r+0x4a>
 800b014:	461a      	mov	r2, r3
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	42a3      	cmp	r3, r4
 800b01a:	d1fb      	bne.n	800b014 <_malloc_r+0xdc>
 800b01c:	2300      	movs	r3, #0
 800b01e:	6053      	str	r3, [r2, #4]
 800b020:	e7de      	b.n	800afe0 <_malloc_r+0xa8>
 800b022:	230c      	movs	r3, #12
 800b024:	6033      	str	r3, [r6, #0]
 800b026:	4630      	mov	r0, r6
 800b028:	f000 f80c 	bl	800b044 <__malloc_unlock>
 800b02c:	e794      	b.n	800af58 <_malloc_r+0x20>
 800b02e:	6005      	str	r5, [r0, #0]
 800b030:	e7d6      	b.n	800afe0 <_malloc_r+0xa8>
 800b032:	bf00      	nop
 800b034:	200056b0 	.word	0x200056b0

0800b038 <__malloc_lock>:
 800b038:	4801      	ldr	r0, [pc, #4]	@ (800b040 <__malloc_lock+0x8>)
 800b03a:	f7ff b8ac 	b.w	800a196 <__retarget_lock_acquire_recursive>
 800b03e:	bf00      	nop
 800b040:	200056a8 	.word	0x200056a8

0800b044 <__malloc_unlock>:
 800b044:	4801      	ldr	r0, [pc, #4]	@ (800b04c <__malloc_unlock+0x8>)
 800b046:	f7ff b8a7 	b.w	800a198 <__retarget_lock_release_recursive>
 800b04a:	bf00      	nop
 800b04c:	200056a8 	.word	0x200056a8

0800b050 <_Balloc>:
 800b050:	b570      	push	{r4, r5, r6, lr}
 800b052:	69c6      	ldr	r6, [r0, #28]
 800b054:	4604      	mov	r4, r0
 800b056:	460d      	mov	r5, r1
 800b058:	b976      	cbnz	r6, 800b078 <_Balloc+0x28>
 800b05a:	2010      	movs	r0, #16
 800b05c:	f7ff ff42 	bl	800aee4 <malloc>
 800b060:	4602      	mov	r2, r0
 800b062:	61e0      	str	r0, [r4, #28]
 800b064:	b920      	cbnz	r0, 800b070 <_Balloc+0x20>
 800b066:	4b18      	ldr	r3, [pc, #96]	@ (800b0c8 <_Balloc+0x78>)
 800b068:	4818      	ldr	r0, [pc, #96]	@ (800b0cc <_Balloc+0x7c>)
 800b06a:	216b      	movs	r1, #107	@ 0x6b
 800b06c:	f000 fda0 	bl	800bbb0 <__assert_func>
 800b070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b074:	6006      	str	r6, [r0, #0]
 800b076:	60c6      	str	r6, [r0, #12]
 800b078:	69e6      	ldr	r6, [r4, #28]
 800b07a:	68f3      	ldr	r3, [r6, #12]
 800b07c:	b183      	cbz	r3, 800b0a0 <_Balloc+0x50>
 800b07e:	69e3      	ldr	r3, [r4, #28]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b086:	b9b8      	cbnz	r0, 800b0b8 <_Balloc+0x68>
 800b088:	2101      	movs	r1, #1
 800b08a:	fa01 f605 	lsl.w	r6, r1, r5
 800b08e:	1d72      	adds	r2, r6, #5
 800b090:	0092      	lsls	r2, r2, #2
 800b092:	4620      	mov	r0, r4
 800b094:	f000 fdaa 	bl	800bbec <_calloc_r>
 800b098:	b160      	cbz	r0, 800b0b4 <_Balloc+0x64>
 800b09a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b09e:	e00e      	b.n	800b0be <_Balloc+0x6e>
 800b0a0:	2221      	movs	r2, #33	@ 0x21
 800b0a2:	2104      	movs	r1, #4
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f000 fda1 	bl	800bbec <_calloc_r>
 800b0aa:	69e3      	ldr	r3, [r4, #28]
 800b0ac:	60f0      	str	r0, [r6, #12]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1e4      	bne.n	800b07e <_Balloc+0x2e>
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	bd70      	pop	{r4, r5, r6, pc}
 800b0b8:	6802      	ldr	r2, [r0, #0]
 800b0ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0be:	2300      	movs	r3, #0
 800b0c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0c4:	e7f7      	b.n	800b0b6 <_Balloc+0x66>
 800b0c6:	bf00      	nop
 800b0c8:	0800cf7e 	.word	0x0800cf7e
 800b0cc:	0800cffe 	.word	0x0800cffe

0800b0d0 <_Bfree>:
 800b0d0:	b570      	push	{r4, r5, r6, lr}
 800b0d2:	69c6      	ldr	r6, [r0, #28]
 800b0d4:	4605      	mov	r5, r0
 800b0d6:	460c      	mov	r4, r1
 800b0d8:	b976      	cbnz	r6, 800b0f8 <_Bfree+0x28>
 800b0da:	2010      	movs	r0, #16
 800b0dc:	f7ff ff02 	bl	800aee4 <malloc>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	61e8      	str	r0, [r5, #28]
 800b0e4:	b920      	cbnz	r0, 800b0f0 <_Bfree+0x20>
 800b0e6:	4b09      	ldr	r3, [pc, #36]	@ (800b10c <_Bfree+0x3c>)
 800b0e8:	4809      	ldr	r0, [pc, #36]	@ (800b110 <_Bfree+0x40>)
 800b0ea:	218f      	movs	r1, #143	@ 0x8f
 800b0ec:	f000 fd60 	bl	800bbb0 <__assert_func>
 800b0f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0f4:	6006      	str	r6, [r0, #0]
 800b0f6:	60c6      	str	r6, [r0, #12]
 800b0f8:	b13c      	cbz	r4, 800b10a <_Bfree+0x3a>
 800b0fa:	69eb      	ldr	r3, [r5, #28]
 800b0fc:	6862      	ldr	r2, [r4, #4]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b104:	6021      	str	r1, [r4, #0]
 800b106:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b10a:	bd70      	pop	{r4, r5, r6, pc}
 800b10c:	0800cf7e 	.word	0x0800cf7e
 800b110:	0800cffe 	.word	0x0800cffe

0800b114 <__multadd>:
 800b114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b118:	690d      	ldr	r5, [r1, #16]
 800b11a:	4607      	mov	r7, r0
 800b11c:	460c      	mov	r4, r1
 800b11e:	461e      	mov	r6, r3
 800b120:	f101 0c14 	add.w	ip, r1, #20
 800b124:	2000      	movs	r0, #0
 800b126:	f8dc 3000 	ldr.w	r3, [ip]
 800b12a:	b299      	uxth	r1, r3
 800b12c:	fb02 6101 	mla	r1, r2, r1, r6
 800b130:	0c1e      	lsrs	r6, r3, #16
 800b132:	0c0b      	lsrs	r3, r1, #16
 800b134:	fb02 3306 	mla	r3, r2, r6, r3
 800b138:	b289      	uxth	r1, r1
 800b13a:	3001      	adds	r0, #1
 800b13c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b140:	4285      	cmp	r5, r0
 800b142:	f84c 1b04 	str.w	r1, [ip], #4
 800b146:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b14a:	dcec      	bgt.n	800b126 <__multadd+0x12>
 800b14c:	b30e      	cbz	r6, 800b192 <__multadd+0x7e>
 800b14e:	68a3      	ldr	r3, [r4, #8]
 800b150:	42ab      	cmp	r3, r5
 800b152:	dc19      	bgt.n	800b188 <__multadd+0x74>
 800b154:	6861      	ldr	r1, [r4, #4]
 800b156:	4638      	mov	r0, r7
 800b158:	3101      	adds	r1, #1
 800b15a:	f7ff ff79 	bl	800b050 <_Balloc>
 800b15e:	4680      	mov	r8, r0
 800b160:	b928      	cbnz	r0, 800b16e <__multadd+0x5a>
 800b162:	4602      	mov	r2, r0
 800b164:	4b0c      	ldr	r3, [pc, #48]	@ (800b198 <__multadd+0x84>)
 800b166:	480d      	ldr	r0, [pc, #52]	@ (800b19c <__multadd+0x88>)
 800b168:	21ba      	movs	r1, #186	@ 0xba
 800b16a:	f000 fd21 	bl	800bbb0 <__assert_func>
 800b16e:	6922      	ldr	r2, [r4, #16]
 800b170:	3202      	adds	r2, #2
 800b172:	f104 010c 	add.w	r1, r4, #12
 800b176:	0092      	lsls	r2, r2, #2
 800b178:	300c      	adds	r0, #12
 800b17a:	f7ff f80e 	bl	800a19a <memcpy>
 800b17e:	4621      	mov	r1, r4
 800b180:	4638      	mov	r0, r7
 800b182:	f7ff ffa5 	bl	800b0d0 <_Bfree>
 800b186:	4644      	mov	r4, r8
 800b188:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b18c:	3501      	adds	r5, #1
 800b18e:	615e      	str	r6, [r3, #20]
 800b190:	6125      	str	r5, [r4, #16]
 800b192:	4620      	mov	r0, r4
 800b194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b198:	0800cfed 	.word	0x0800cfed
 800b19c:	0800cffe 	.word	0x0800cffe

0800b1a0 <__hi0bits>:
 800b1a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	bf36      	itet	cc
 800b1a8:	0403      	lslcc	r3, r0, #16
 800b1aa:	2000      	movcs	r0, #0
 800b1ac:	2010      	movcc	r0, #16
 800b1ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b1b2:	bf3c      	itt	cc
 800b1b4:	021b      	lslcc	r3, r3, #8
 800b1b6:	3008      	addcc	r0, #8
 800b1b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1bc:	bf3c      	itt	cc
 800b1be:	011b      	lslcc	r3, r3, #4
 800b1c0:	3004      	addcc	r0, #4
 800b1c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1c6:	bf3c      	itt	cc
 800b1c8:	009b      	lslcc	r3, r3, #2
 800b1ca:	3002      	addcc	r0, #2
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	db05      	blt.n	800b1dc <__hi0bits+0x3c>
 800b1d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b1d4:	f100 0001 	add.w	r0, r0, #1
 800b1d8:	bf08      	it	eq
 800b1da:	2020      	moveq	r0, #32
 800b1dc:	4770      	bx	lr

0800b1de <__lo0bits>:
 800b1de:	6803      	ldr	r3, [r0, #0]
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	f013 0007 	ands.w	r0, r3, #7
 800b1e6:	d00b      	beq.n	800b200 <__lo0bits+0x22>
 800b1e8:	07d9      	lsls	r1, r3, #31
 800b1ea:	d421      	bmi.n	800b230 <__lo0bits+0x52>
 800b1ec:	0798      	lsls	r0, r3, #30
 800b1ee:	bf49      	itett	mi
 800b1f0:	085b      	lsrmi	r3, r3, #1
 800b1f2:	089b      	lsrpl	r3, r3, #2
 800b1f4:	2001      	movmi	r0, #1
 800b1f6:	6013      	strmi	r3, [r2, #0]
 800b1f8:	bf5c      	itt	pl
 800b1fa:	6013      	strpl	r3, [r2, #0]
 800b1fc:	2002      	movpl	r0, #2
 800b1fe:	4770      	bx	lr
 800b200:	b299      	uxth	r1, r3
 800b202:	b909      	cbnz	r1, 800b208 <__lo0bits+0x2a>
 800b204:	0c1b      	lsrs	r3, r3, #16
 800b206:	2010      	movs	r0, #16
 800b208:	b2d9      	uxtb	r1, r3
 800b20a:	b909      	cbnz	r1, 800b210 <__lo0bits+0x32>
 800b20c:	3008      	adds	r0, #8
 800b20e:	0a1b      	lsrs	r3, r3, #8
 800b210:	0719      	lsls	r1, r3, #28
 800b212:	bf04      	itt	eq
 800b214:	091b      	lsreq	r3, r3, #4
 800b216:	3004      	addeq	r0, #4
 800b218:	0799      	lsls	r1, r3, #30
 800b21a:	bf04      	itt	eq
 800b21c:	089b      	lsreq	r3, r3, #2
 800b21e:	3002      	addeq	r0, #2
 800b220:	07d9      	lsls	r1, r3, #31
 800b222:	d403      	bmi.n	800b22c <__lo0bits+0x4e>
 800b224:	085b      	lsrs	r3, r3, #1
 800b226:	f100 0001 	add.w	r0, r0, #1
 800b22a:	d003      	beq.n	800b234 <__lo0bits+0x56>
 800b22c:	6013      	str	r3, [r2, #0]
 800b22e:	4770      	bx	lr
 800b230:	2000      	movs	r0, #0
 800b232:	4770      	bx	lr
 800b234:	2020      	movs	r0, #32
 800b236:	4770      	bx	lr

0800b238 <__i2b>:
 800b238:	b510      	push	{r4, lr}
 800b23a:	460c      	mov	r4, r1
 800b23c:	2101      	movs	r1, #1
 800b23e:	f7ff ff07 	bl	800b050 <_Balloc>
 800b242:	4602      	mov	r2, r0
 800b244:	b928      	cbnz	r0, 800b252 <__i2b+0x1a>
 800b246:	4b05      	ldr	r3, [pc, #20]	@ (800b25c <__i2b+0x24>)
 800b248:	4805      	ldr	r0, [pc, #20]	@ (800b260 <__i2b+0x28>)
 800b24a:	f240 1145 	movw	r1, #325	@ 0x145
 800b24e:	f000 fcaf 	bl	800bbb0 <__assert_func>
 800b252:	2301      	movs	r3, #1
 800b254:	6144      	str	r4, [r0, #20]
 800b256:	6103      	str	r3, [r0, #16]
 800b258:	bd10      	pop	{r4, pc}
 800b25a:	bf00      	nop
 800b25c:	0800cfed 	.word	0x0800cfed
 800b260:	0800cffe 	.word	0x0800cffe

0800b264 <__multiply>:
 800b264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b268:	4614      	mov	r4, r2
 800b26a:	690a      	ldr	r2, [r1, #16]
 800b26c:	6923      	ldr	r3, [r4, #16]
 800b26e:	429a      	cmp	r2, r3
 800b270:	bfa8      	it	ge
 800b272:	4623      	movge	r3, r4
 800b274:	460f      	mov	r7, r1
 800b276:	bfa4      	itt	ge
 800b278:	460c      	movge	r4, r1
 800b27a:	461f      	movge	r7, r3
 800b27c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b280:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b284:	68a3      	ldr	r3, [r4, #8]
 800b286:	6861      	ldr	r1, [r4, #4]
 800b288:	eb0a 0609 	add.w	r6, sl, r9
 800b28c:	42b3      	cmp	r3, r6
 800b28e:	b085      	sub	sp, #20
 800b290:	bfb8      	it	lt
 800b292:	3101      	addlt	r1, #1
 800b294:	f7ff fedc 	bl	800b050 <_Balloc>
 800b298:	b930      	cbnz	r0, 800b2a8 <__multiply+0x44>
 800b29a:	4602      	mov	r2, r0
 800b29c:	4b44      	ldr	r3, [pc, #272]	@ (800b3b0 <__multiply+0x14c>)
 800b29e:	4845      	ldr	r0, [pc, #276]	@ (800b3b4 <__multiply+0x150>)
 800b2a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b2a4:	f000 fc84 	bl	800bbb0 <__assert_func>
 800b2a8:	f100 0514 	add.w	r5, r0, #20
 800b2ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b2b0:	462b      	mov	r3, r5
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	4543      	cmp	r3, r8
 800b2b6:	d321      	bcc.n	800b2fc <__multiply+0x98>
 800b2b8:	f107 0114 	add.w	r1, r7, #20
 800b2bc:	f104 0214 	add.w	r2, r4, #20
 800b2c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b2c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b2c8:	9302      	str	r3, [sp, #8]
 800b2ca:	1b13      	subs	r3, r2, r4
 800b2cc:	3b15      	subs	r3, #21
 800b2ce:	f023 0303 	bic.w	r3, r3, #3
 800b2d2:	3304      	adds	r3, #4
 800b2d4:	f104 0715 	add.w	r7, r4, #21
 800b2d8:	42ba      	cmp	r2, r7
 800b2da:	bf38      	it	cc
 800b2dc:	2304      	movcc	r3, #4
 800b2de:	9301      	str	r3, [sp, #4]
 800b2e0:	9b02      	ldr	r3, [sp, #8]
 800b2e2:	9103      	str	r1, [sp, #12]
 800b2e4:	428b      	cmp	r3, r1
 800b2e6:	d80c      	bhi.n	800b302 <__multiply+0x9e>
 800b2e8:	2e00      	cmp	r6, #0
 800b2ea:	dd03      	ble.n	800b2f4 <__multiply+0x90>
 800b2ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d05b      	beq.n	800b3ac <__multiply+0x148>
 800b2f4:	6106      	str	r6, [r0, #16]
 800b2f6:	b005      	add	sp, #20
 800b2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fc:	f843 2b04 	str.w	r2, [r3], #4
 800b300:	e7d8      	b.n	800b2b4 <__multiply+0x50>
 800b302:	f8b1 a000 	ldrh.w	sl, [r1]
 800b306:	f1ba 0f00 	cmp.w	sl, #0
 800b30a:	d024      	beq.n	800b356 <__multiply+0xf2>
 800b30c:	f104 0e14 	add.w	lr, r4, #20
 800b310:	46a9      	mov	r9, r5
 800b312:	f04f 0c00 	mov.w	ip, #0
 800b316:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b31a:	f8d9 3000 	ldr.w	r3, [r9]
 800b31e:	fa1f fb87 	uxth.w	fp, r7
 800b322:	b29b      	uxth	r3, r3
 800b324:	fb0a 330b 	mla	r3, sl, fp, r3
 800b328:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b32c:	f8d9 7000 	ldr.w	r7, [r9]
 800b330:	4463      	add	r3, ip
 800b332:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b336:	fb0a c70b 	mla	r7, sl, fp, ip
 800b33a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b33e:	b29b      	uxth	r3, r3
 800b340:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b344:	4572      	cmp	r2, lr
 800b346:	f849 3b04 	str.w	r3, [r9], #4
 800b34a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b34e:	d8e2      	bhi.n	800b316 <__multiply+0xb2>
 800b350:	9b01      	ldr	r3, [sp, #4]
 800b352:	f845 c003 	str.w	ip, [r5, r3]
 800b356:	9b03      	ldr	r3, [sp, #12]
 800b358:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b35c:	3104      	adds	r1, #4
 800b35e:	f1b9 0f00 	cmp.w	r9, #0
 800b362:	d021      	beq.n	800b3a8 <__multiply+0x144>
 800b364:	682b      	ldr	r3, [r5, #0]
 800b366:	f104 0c14 	add.w	ip, r4, #20
 800b36a:	46ae      	mov	lr, r5
 800b36c:	f04f 0a00 	mov.w	sl, #0
 800b370:	f8bc b000 	ldrh.w	fp, [ip]
 800b374:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b378:	fb09 770b 	mla	r7, r9, fp, r7
 800b37c:	4457      	add	r7, sl
 800b37e:	b29b      	uxth	r3, r3
 800b380:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b384:	f84e 3b04 	str.w	r3, [lr], #4
 800b388:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b38c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b390:	f8be 3000 	ldrh.w	r3, [lr]
 800b394:	fb09 330a 	mla	r3, r9, sl, r3
 800b398:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b39c:	4562      	cmp	r2, ip
 800b39e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3a2:	d8e5      	bhi.n	800b370 <__multiply+0x10c>
 800b3a4:	9f01      	ldr	r7, [sp, #4]
 800b3a6:	51eb      	str	r3, [r5, r7]
 800b3a8:	3504      	adds	r5, #4
 800b3aa:	e799      	b.n	800b2e0 <__multiply+0x7c>
 800b3ac:	3e01      	subs	r6, #1
 800b3ae:	e79b      	b.n	800b2e8 <__multiply+0x84>
 800b3b0:	0800cfed 	.word	0x0800cfed
 800b3b4:	0800cffe 	.word	0x0800cffe

0800b3b8 <__pow5mult>:
 800b3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3bc:	4615      	mov	r5, r2
 800b3be:	f012 0203 	ands.w	r2, r2, #3
 800b3c2:	4607      	mov	r7, r0
 800b3c4:	460e      	mov	r6, r1
 800b3c6:	d007      	beq.n	800b3d8 <__pow5mult+0x20>
 800b3c8:	4c25      	ldr	r4, [pc, #148]	@ (800b460 <__pow5mult+0xa8>)
 800b3ca:	3a01      	subs	r2, #1
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3d2:	f7ff fe9f 	bl	800b114 <__multadd>
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	10ad      	asrs	r5, r5, #2
 800b3da:	d03d      	beq.n	800b458 <__pow5mult+0xa0>
 800b3dc:	69fc      	ldr	r4, [r7, #28]
 800b3de:	b97c      	cbnz	r4, 800b400 <__pow5mult+0x48>
 800b3e0:	2010      	movs	r0, #16
 800b3e2:	f7ff fd7f 	bl	800aee4 <malloc>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	61f8      	str	r0, [r7, #28]
 800b3ea:	b928      	cbnz	r0, 800b3f8 <__pow5mult+0x40>
 800b3ec:	4b1d      	ldr	r3, [pc, #116]	@ (800b464 <__pow5mult+0xac>)
 800b3ee:	481e      	ldr	r0, [pc, #120]	@ (800b468 <__pow5mult+0xb0>)
 800b3f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b3f4:	f000 fbdc 	bl	800bbb0 <__assert_func>
 800b3f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3fc:	6004      	str	r4, [r0, #0]
 800b3fe:	60c4      	str	r4, [r0, #12]
 800b400:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b404:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b408:	b94c      	cbnz	r4, 800b41e <__pow5mult+0x66>
 800b40a:	f240 2171 	movw	r1, #625	@ 0x271
 800b40e:	4638      	mov	r0, r7
 800b410:	f7ff ff12 	bl	800b238 <__i2b>
 800b414:	2300      	movs	r3, #0
 800b416:	f8c8 0008 	str.w	r0, [r8, #8]
 800b41a:	4604      	mov	r4, r0
 800b41c:	6003      	str	r3, [r0, #0]
 800b41e:	f04f 0900 	mov.w	r9, #0
 800b422:	07eb      	lsls	r3, r5, #31
 800b424:	d50a      	bpl.n	800b43c <__pow5mult+0x84>
 800b426:	4631      	mov	r1, r6
 800b428:	4622      	mov	r2, r4
 800b42a:	4638      	mov	r0, r7
 800b42c:	f7ff ff1a 	bl	800b264 <__multiply>
 800b430:	4631      	mov	r1, r6
 800b432:	4680      	mov	r8, r0
 800b434:	4638      	mov	r0, r7
 800b436:	f7ff fe4b 	bl	800b0d0 <_Bfree>
 800b43a:	4646      	mov	r6, r8
 800b43c:	106d      	asrs	r5, r5, #1
 800b43e:	d00b      	beq.n	800b458 <__pow5mult+0xa0>
 800b440:	6820      	ldr	r0, [r4, #0]
 800b442:	b938      	cbnz	r0, 800b454 <__pow5mult+0x9c>
 800b444:	4622      	mov	r2, r4
 800b446:	4621      	mov	r1, r4
 800b448:	4638      	mov	r0, r7
 800b44a:	f7ff ff0b 	bl	800b264 <__multiply>
 800b44e:	6020      	str	r0, [r4, #0]
 800b450:	f8c0 9000 	str.w	r9, [r0]
 800b454:	4604      	mov	r4, r0
 800b456:	e7e4      	b.n	800b422 <__pow5mult+0x6a>
 800b458:	4630      	mov	r0, r6
 800b45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b45e:	bf00      	nop
 800b460:	0800d058 	.word	0x0800d058
 800b464:	0800cf7e 	.word	0x0800cf7e
 800b468:	0800cffe 	.word	0x0800cffe

0800b46c <__lshift>:
 800b46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b470:	460c      	mov	r4, r1
 800b472:	6849      	ldr	r1, [r1, #4]
 800b474:	6923      	ldr	r3, [r4, #16]
 800b476:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b47a:	68a3      	ldr	r3, [r4, #8]
 800b47c:	4607      	mov	r7, r0
 800b47e:	4691      	mov	r9, r2
 800b480:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b484:	f108 0601 	add.w	r6, r8, #1
 800b488:	42b3      	cmp	r3, r6
 800b48a:	db0b      	blt.n	800b4a4 <__lshift+0x38>
 800b48c:	4638      	mov	r0, r7
 800b48e:	f7ff fddf 	bl	800b050 <_Balloc>
 800b492:	4605      	mov	r5, r0
 800b494:	b948      	cbnz	r0, 800b4aa <__lshift+0x3e>
 800b496:	4602      	mov	r2, r0
 800b498:	4b28      	ldr	r3, [pc, #160]	@ (800b53c <__lshift+0xd0>)
 800b49a:	4829      	ldr	r0, [pc, #164]	@ (800b540 <__lshift+0xd4>)
 800b49c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b4a0:	f000 fb86 	bl	800bbb0 <__assert_func>
 800b4a4:	3101      	adds	r1, #1
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	e7ee      	b.n	800b488 <__lshift+0x1c>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f100 0114 	add.w	r1, r0, #20
 800b4b0:	f100 0210 	add.w	r2, r0, #16
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	4553      	cmp	r3, sl
 800b4b8:	db33      	blt.n	800b522 <__lshift+0xb6>
 800b4ba:	6920      	ldr	r0, [r4, #16]
 800b4bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4c0:	f104 0314 	add.w	r3, r4, #20
 800b4c4:	f019 091f 	ands.w	r9, r9, #31
 800b4c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4d0:	d02b      	beq.n	800b52a <__lshift+0xbe>
 800b4d2:	f1c9 0e20 	rsb	lr, r9, #32
 800b4d6:	468a      	mov	sl, r1
 800b4d8:	2200      	movs	r2, #0
 800b4da:	6818      	ldr	r0, [r3, #0]
 800b4dc:	fa00 f009 	lsl.w	r0, r0, r9
 800b4e0:	4310      	orrs	r0, r2
 800b4e2:	f84a 0b04 	str.w	r0, [sl], #4
 800b4e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ea:	459c      	cmp	ip, r3
 800b4ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4f0:	d8f3      	bhi.n	800b4da <__lshift+0x6e>
 800b4f2:	ebac 0304 	sub.w	r3, ip, r4
 800b4f6:	3b15      	subs	r3, #21
 800b4f8:	f023 0303 	bic.w	r3, r3, #3
 800b4fc:	3304      	adds	r3, #4
 800b4fe:	f104 0015 	add.w	r0, r4, #21
 800b502:	4584      	cmp	ip, r0
 800b504:	bf38      	it	cc
 800b506:	2304      	movcc	r3, #4
 800b508:	50ca      	str	r2, [r1, r3]
 800b50a:	b10a      	cbz	r2, 800b510 <__lshift+0xa4>
 800b50c:	f108 0602 	add.w	r6, r8, #2
 800b510:	3e01      	subs	r6, #1
 800b512:	4638      	mov	r0, r7
 800b514:	612e      	str	r6, [r5, #16]
 800b516:	4621      	mov	r1, r4
 800b518:	f7ff fdda 	bl	800b0d0 <_Bfree>
 800b51c:	4628      	mov	r0, r5
 800b51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b522:	f842 0f04 	str.w	r0, [r2, #4]!
 800b526:	3301      	adds	r3, #1
 800b528:	e7c5      	b.n	800b4b6 <__lshift+0x4a>
 800b52a:	3904      	subs	r1, #4
 800b52c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b530:	f841 2f04 	str.w	r2, [r1, #4]!
 800b534:	459c      	cmp	ip, r3
 800b536:	d8f9      	bhi.n	800b52c <__lshift+0xc0>
 800b538:	e7ea      	b.n	800b510 <__lshift+0xa4>
 800b53a:	bf00      	nop
 800b53c:	0800cfed 	.word	0x0800cfed
 800b540:	0800cffe 	.word	0x0800cffe

0800b544 <__mcmp>:
 800b544:	690a      	ldr	r2, [r1, #16]
 800b546:	4603      	mov	r3, r0
 800b548:	6900      	ldr	r0, [r0, #16]
 800b54a:	1a80      	subs	r0, r0, r2
 800b54c:	b530      	push	{r4, r5, lr}
 800b54e:	d10e      	bne.n	800b56e <__mcmp+0x2a>
 800b550:	3314      	adds	r3, #20
 800b552:	3114      	adds	r1, #20
 800b554:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b558:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b55c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b560:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b564:	4295      	cmp	r5, r2
 800b566:	d003      	beq.n	800b570 <__mcmp+0x2c>
 800b568:	d205      	bcs.n	800b576 <__mcmp+0x32>
 800b56a:	f04f 30ff 	mov.w	r0, #4294967295
 800b56e:	bd30      	pop	{r4, r5, pc}
 800b570:	42a3      	cmp	r3, r4
 800b572:	d3f3      	bcc.n	800b55c <__mcmp+0x18>
 800b574:	e7fb      	b.n	800b56e <__mcmp+0x2a>
 800b576:	2001      	movs	r0, #1
 800b578:	e7f9      	b.n	800b56e <__mcmp+0x2a>
	...

0800b57c <__mdiff>:
 800b57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b580:	4689      	mov	r9, r1
 800b582:	4606      	mov	r6, r0
 800b584:	4611      	mov	r1, r2
 800b586:	4648      	mov	r0, r9
 800b588:	4614      	mov	r4, r2
 800b58a:	f7ff ffdb 	bl	800b544 <__mcmp>
 800b58e:	1e05      	subs	r5, r0, #0
 800b590:	d112      	bne.n	800b5b8 <__mdiff+0x3c>
 800b592:	4629      	mov	r1, r5
 800b594:	4630      	mov	r0, r6
 800b596:	f7ff fd5b 	bl	800b050 <_Balloc>
 800b59a:	4602      	mov	r2, r0
 800b59c:	b928      	cbnz	r0, 800b5aa <__mdiff+0x2e>
 800b59e:	4b3f      	ldr	r3, [pc, #252]	@ (800b69c <__mdiff+0x120>)
 800b5a0:	f240 2137 	movw	r1, #567	@ 0x237
 800b5a4:	483e      	ldr	r0, [pc, #248]	@ (800b6a0 <__mdiff+0x124>)
 800b5a6:	f000 fb03 	bl	800bbb0 <__assert_func>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5b0:	4610      	mov	r0, r2
 800b5b2:	b003      	add	sp, #12
 800b5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b8:	bfbc      	itt	lt
 800b5ba:	464b      	movlt	r3, r9
 800b5bc:	46a1      	movlt	r9, r4
 800b5be:	4630      	mov	r0, r6
 800b5c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b5c4:	bfba      	itte	lt
 800b5c6:	461c      	movlt	r4, r3
 800b5c8:	2501      	movlt	r5, #1
 800b5ca:	2500      	movge	r5, #0
 800b5cc:	f7ff fd40 	bl	800b050 <_Balloc>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	b918      	cbnz	r0, 800b5dc <__mdiff+0x60>
 800b5d4:	4b31      	ldr	r3, [pc, #196]	@ (800b69c <__mdiff+0x120>)
 800b5d6:	f240 2145 	movw	r1, #581	@ 0x245
 800b5da:	e7e3      	b.n	800b5a4 <__mdiff+0x28>
 800b5dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b5e0:	6926      	ldr	r6, [r4, #16]
 800b5e2:	60c5      	str	r5, [r0, #12]
 800b5e4:	f109 0310 	add.w	r3, r9, #16
 800b5e8:	f109 0514 	add.w	r5, r9, #20
 800b5ec:	f104 0e14 	add.w	lr, r4, #20
 800b5f0:	f100 0b14 	add.w	fp, r0, #20
 800b5f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b5f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b5fc:	9301      	str	r3, [sp, #4]
 800b5fe:	46d9      	mov	r9, fp
 800b600:	f04f 0c00 	mov.w	ip, #0
 800b604:	9b01      	ldr	r3, [sp, #4]
 800b606:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b60a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b60e:	9301      	str	r3, [sp, #4]
 800b610:	fa1f f38a 	uxth.w	r3, sl
 800b614:	4619      	mov	r1, r3
 800b616:	b283      	uxth	r3, r0
 800b618:	1acb      	subs	r3, r1, r3
 800b61a:	0c00      	lsrs	r0, r0, #16
 800b61c:	4463      	add	r3, ip
 800b61e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b622:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b626:	b29b      	uxth	r3, r3
 800b628:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b62c:	4576      	cmp	r6, lr
 800b62e:	f849 3b04 	str.w	r3, [r9], #4
 800b632:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b636:	d8e5      	bhi.n	800b604 <__mdiff+0x88>
 800b638:	1b33      	subs	r3, r6, r4
 800b63a:	3b15      	subs	r3, #21
 800b63c:	f023 0303 	bic.w	r3, r3, #3
 800b640:	3415      	adds	r4, #21
 800b642:	3304      	adds	r3, #4
 800b644:	42a6      	cmp	r6, r4
 800b646:	bf38      	it	cc
 800b648:	2304      	movcc	r3, #4
 800b64a:	441d      	add	r5, r3
 800b64c:	445b      	add	r3, fp
 800b64e:	461e      	mov	r6, r3
 800b650:	462c      	mov	r4, r5
 800b652:	4544      	cmp	r4, r8
 800b654:	d30e      	bcc.n	800b674 <__mdiff+0xf8>
 800b656:	f108 0103 	add.w	r1, r8, #3
 800b65a:	1b49      	subs	r1, r1, r5
 800b65c:	f021 0103 	bic.w	r1, r1, #3
 800b660:	3d03      	subs	r5, #3
 800b662:	45a8      	cmp	r8, r5
 800b664:	bf38      	it	cc
 800b666:	2100      	movcc	r1, #0
 800b668:	440b      	add	r3, r1
 800b66a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b66e:	b191      	cbz	r1, 800b696 <__mdiff+0x11a>
 800b670:	6117      	str	r7, [r2, #16]
 800b672:	e79d      	b.n	800b5b0 <__mdiff+0x34>
 800b674:	f854 1b04 	ldr.w	r1, [r4], #4
 800b678:	46e6      	mov	lr, ip
 800b67a:	0c08      	lsrs	r0, r1, #16
 800b67c:	fa1c fc81 	uxtah	ip, ip, r1
 800b680:	4471      	add	r1, lr
 800b682:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b686:	b289      	uxth	r1, r1
 800b688:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b68c:	f846 1b04 	str.w	r1, [r6], #4
 800b690:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b694:	e7dd      	b.n	800b652 <__mdiff+0xd6>
 800b696:	3f01      	subs	r7, #1
 800b698:	e7e7      	b.n	800b66a <__mdiff+0xee>
 800b69a:	bf00      	nop
 800b69c:	0800cfed 	.word	0x0800cfed
 800b6a0:	0800cffe 	.word	0x0800cffe

0800b6a4 <__d2b>:
 800b6a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6a8:	460f      	mov	r7, r1
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	ec59 8b10 	vmov	r8, r9, d0
 800b6b0:	4616      	mov	r6, r2
 800b6b2:	f7ff fccd 	bl	800b050 <_Balloc>
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	b930      	cbnz	r0, 800b6c8 <__d2b+0x24>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	4b23      	ldr	r3, [pc, #140]	@ (800b74c <__d2b+0xa8>)
 800b6be:	4824      	ldr	r0, [pc, #144]	@ (800b750 <__d2b+0xac>)
 800b6c0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b6c4:	f000 fa74 	bl	800bbb0 <__assert_func>
 800b6c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b6cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6d0:	b10d      	cbz	r5, 800b6d6 <__d2b+0x32>
 800b6d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6d6:	9301      	str	r3, [sp, #4]
 800b6d8:	f1b8 0300 	subs.w	r3, r8, #0
 800b6dc:	d023      	beq.n	800b726 <__d2b+0x82>
 800b6de:	4668      	mov	r0, sp
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	f7ff fd7c 	bl	800b1de <__lo0bits>
 800b6e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6ea:	b1d0      	cbz	r0, 800b722 <__d2b+0x7e>
 800b6ec:	f1c0 0320 	rsb	r3, r0, #32
 800b6f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6f4:	430b      	orrs	r3, r1
 800b6f6:	40c2      	lsrs	r2, r0
 800b6f8:	6163      	str	r3, [r4, #20]
 800b6fa:	9201      	str	r2, [sp, #4]
 800b6fc:	9b01      	ldr	r3, [sp, #4]
 800b6fe:	61a3      	str	r3, [r4, #24]
 800b700:	2b00      	cmp	r3, #0
 800b702:	bf0c      	ite	eq
 800b704:	2201      	moveq	r2, #1
 800b706:	2202      	movne	r2, #2
 800b708:	6122      	str	r2, [r4, #16]
 800b70a:	b1a5      	cbz	r5, 800b736 <__d2b+0x92>
 800b70c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b710:	4405      	add	r5, r0
 800b712:	603d      	str	r5, [r7, #0]
 800b714:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b718:	6030      	str	r0, [r6, #0]
 800b71a:	4620      	mov	r0, r4
 800b71c:	b003      	add	sp, #12
 800b71e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b722:	6161      	str	r1, [r4, #20]
 800b724:	e7ea      	b.n	800b6fc <__d2b+0x58>
 800b726:	a801      	add	r0, sp, #4
 800b728:	f7ff fd59 	bl	800b1de <__lo0bits>
 800b72c:	9b01      	ldr	r3, [sp, #4]
 800b72e:	6163      	str	r3, [r4, #20]
 800b730:	3020      	adds	r0, #32
 800b732:	2201      	movs	r2, #1
 800b734:	e7e8      	b.n	800b708 <__d2b+0x64>
 800b736:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b73a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b73e:	6038      	str	r0, [r7, #0]
 800b740:	6918      	ldr	r0, [r3, #16]
 800b742:	f7ff fd2d 	bl	800b1a0 <__hi0bits>
 800b746:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b74a:	e7e5      	b.n	800b718 <__d2b+0x74>
 800b74c:	0800cfed 	.word	0x0800cfed
 800b750:	0800cffe 	.word	0x0800cffe

0800b754 <__ssputs_r>:
 800b754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b758:	688e      	ldr	r6, [r1, #8]
 800b75a:	461f      	mov	r7, r3
 800b75c:	42be      	cmp	r6, r7
 800b75e:	680b      	ldr	r3, [r1, #0]
 800b760:	4682      	mov	sl, r0
 800b762:	460c      	mov	r4, r1
 800b764:	4690      	mov	r8, r2
 800b766:	d82d      	bhi.n	800b7c4 <__ssputs_r+0x70>
 800b768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b76c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b770:	d026      	beq.n	800b7c0 <__ssputs_r+0x6c>
 800b772:	6965      	ldr	r5, [r4, #20]
 800b774:	6909      	ldr	r1, [r1, #16]
 800b776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b77a:	eba3 0901 	sub.w	r9, r3, r1
 800b77e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b782:	1c7b      	adds	r3, r7, #1
 800b784:	444b      	add	r3, r9
 800b786:	106d      	asrs	r5, r5, #1
 800b788:	429d      	cmp	r5, r3
 800b78a:	bf38      	it	cc
 800b78c:	461d      	movcc	r5, r3
 800b78e:	0553      	lsls	r3, r2, #21
 800b790:	d527      	bpl.n	800b7e2 <__ssputs_r+0x8e>
 800b792:	4629      	mov	r1, r5
 800b794:	f7ff fbd0 	bl	800af38 <_malloc_r>
 800b798:	4606      	mov	r6, r0
 800b79a:	b360      	cbz	r0, 800b7f6 <__ssputs_r+0xa2>
 800b79c:	6921      	ldr	r1, [r4, #16]
 800b79e:	464a      	mov	r2, r9
 800b7a0:	f7fe fcfb 	bl	800a19a <memcpy>
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b7aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ae:	81a3      	strh	r3, [r4, #12]
 800b7b0:	6126      	str	r6, [r4, #16]
 800b7b2:	6165      	str	r5, [r4, #20]
 800b7b4:	444e      	add	r6, r9
 800b7b6:	eba5 0509 	sub.w	r5, r5, r9
 800b7ba:	6026      	str	r6, [r4, #0]
 800b7bc:	60a5      	str	r5, [r4, #8]
 800b7be:	463e      	mov	r6, r7
 800b7c0:	42be      	cmp	r6, r7
 800b7c2:	d900      	bls.n	800b7c6 <__ssputs_r+0x72>
 800b7c4:	463e      	mov	r6, r7
 800b7c6:	6820      	ldr	r0, [r4, #0]
 800b7c8:	4632      	mov	r2, r6
 800b7ca:	4641      	mov	r1, r8
 800b7cc:	f000 f9c6 	bl	800bb5c <memmove>
 800b7d0:	68a3      	ldr	r3, [r4, #8]
 800b7d2:	1b9b      	subs	r3, r3, r6
 800b7d4:	60a3      	str	r3, [r4, #8]
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	4433      	add	r3, r6
 800b7da:	6023      	str	r3, [r4, #0]
 800b7dc:	2000      	movs	r0, #0
 800b7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e2:	462a      	mov	r2, r5
 800b7e4:	f000 fa28 	bl	800bc38 <_realloc_r>
 800b7e8:	4606      	mov	r6, r0
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d1e0      	bne.n	800b7b0 <__ssputs_r+0x5c>
 800b7ee:	6921      	ldr	r1, [r4, #16]
 800b7f0:	4650      	mov	r0, sl
 800b7f2:	f7ff fb2d 	bl	800ae50 <_free_r>
 800b7f6:	230c      	movs	r3, #12
 800b7f8:	f8ca 3000 	str.w	r3, [sl]
 800b7fc:	89a3      	ldrh	r3, [r4, #12]
 800b7fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b802:	81a3      	strh	r3, [r4, #12]
 800b804:	f04f 30ff 	mov.w	r0, #4294967295
 800b808:	e7e9      	b.n	800b7de <__ssputs_r+0x8a>
	...

0800b80c <_svfiprintf_r>:
 800b80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b810:	4698      	mov	r8, r3
 800b812:	898b      	ldrh	r3, [r1, #12]
 800b814:	061b      	lsls	r3, r3, #24
 800b816:	b09d      	sub	sp, #116	@ 0x74
 800b818:	4607      	mov	r7, r0
 800b81a:	460d      	mov	r5, r1
 800b81c:	4614      	mov	r4, r2
 800b81e:	d510      	bpl.n	800b842 <_svfiprintf_r+0x36>
 800b820:	690b      	ldr	r3, [r1, #16]
 800b822:	b973      	cbnz	r3, 800b842 <_svfiprintf_r+0x36>
 800b824:	2140      	movs	r1, #64	@ 0x40
 800b826:	f7ff fb87 	bl	800af38 <_malloc_r>
 800b82a:	6028      	str	r0, [r5, #0]
 800b82c:	6128      	str	r0, [r5, #16]
 800b82e:	b930      	cbnz	r0, 800b83e <_svfiprintf_r+0x32>
 800b830:	230c      	movs	r3, #12
 800b832:	603b      	str	r3, [r7, #0]
 800b834:	f04f 30ff 	mov.w	r0, #4294967295
 800b838:	b01d      	add	sp, #116	@ 0x74
 800b83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83e:	2340      	movs	r3, #64	@ 0x40
 800b840:	616b      	str	r3, [r5, #20]
 800b842:	2300      	movs	r3, #0
 800b844:	9309      	str	r3, [sp, #36]	@ 0x24
 800b846:	2320      	movs	r3, #32
 800b848:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b84c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b850:	2330      	movs	r3, #48	@ 0x30
 800b852:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b9f0 <_svfiprintf_r+0x1e4>
 800b856:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b85a:	f04f 0901 	mov.w	r9, #1
 800b85e:	4623      	mov	r3, r4
 800b860:	469a      	mov	sl, r3
 800b862:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b866:	b10a      	cbz	r2, 800b86c <_svfiprintf_r+0x60>
 800b868:	2a25      	cmp	r2, #37	@ 0x25
 800b86a:	d1f9      	bne.n	800b860 <_svfiprintf_r+0x54>
 800b86c:	ebba 0b04 	subs.w	fp, sl, r4
 800b870:	d00b      	beq.n	800b88a <_svfiprintf_r+0x7e>
 800b872:	465b      	mov	r3, fp
 800b874:	4622      	mov	r2, r4
 800b876:	4629      	mov	r1, r5
 800b878:	4638      	mov	r0, r7
 800b87a:	f7ff ff6b 	bl	800b754 <__ssputs_r>
 800b87e:	3001      	adds	r0, #1
 800b880:	f000 80a7 	beq.w	800b9d2 <_svfiprintf_r+0x1c6>
 800b884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b886:	445a      	add	r2, fp
 800b888:	9209      	str	r2, [sp, #36]	@ 0x24
 800b88a:	f89a 3000 	ldrb.w	r3, [sl]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	f000 809f 	beq.w	800b9d2 <_svfiprintf_r+0x1c6>
 800b894:	2300      	movs	r3, #0
 800b896:	f04f 32ff 	mov.w	r2, #4294967295
 800b89a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b89e:	f10a 0a01 	add.w	sl, sl, #1
 800b8a2:	9304      	str	r3, [sp, #16]
 800b8a4:	9307      	str	r3, [sp, #28]
 800b8a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8ac:	4654      	mov	r4, sl
 800b8ae:	2205      	movs	r2, #5
 800b8b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8b4:	484e      	ldr	r0, [pc, #312]	@ (800b9f0 <_svfiprintf_r+0x1e4>)
 800b8b6:	f7f4 fc8b 	bl	80001d0 <memchr>
 800b8ba:	9a04      	ldr	r2, [sp, #16]
 800b8bc:	b9d8      	cbnz	r0, 800b8f6 <_svfiprintf_r+0xea>
 800b8be:	06d0      	lsls	r0, r2, #27
 800b8c0:	bf44      	itt	mi
 800b8c2:	2320      	movmi	r3, #32
 800b8c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8c8:	0711      	lsls	r1, r2, #28
 800b8ca:	bf44      	itt	mi
 800b8cc:	232b      	movmi	r3, #43	@ 0x2b
 800b8ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8d8:	d015      	beq.n	800b906 <_svfiprintf_r+0xfa>
 800b8da:	9a07      	ldr	r2, [sp, #28]
 800b8dc:	4654      	mov	r4, sl
 800b8de:	2000      	movs	r0, #0
 800b8e0:	f04f 0c0a 	mov.w	ip, #10
 800b8e4:	4621      	mov	r1, r4
 800b8e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ea:	3b30      	subs	r3, #48	@ 0x30
 800b8ec:	2b09      	cmp	r3, #9
 800b8ee:	d94b      	bls.n	800b988 <_svfiprintf_r+0x17c>
 800b8f0:	b1b0      	cbz	r0, 800b920 <_svfiprintf_r+0x114>
 800b8f2:	9207      	str	r2, [sp, #28]
 800b8f4:	e014      	b.n	800b920 <_svfiprintf_r+0x114>
 800b8f6:	eba0 0308 	sub.w	r3, r0, r8
 800b8fa:	fa09 f303 	lsl.w	r3, r9, r3
 800b8fe:	4313      	orrs	r3, r2
 800b900:	9304      	str	r3, [sp, #16]
 800b902:	46a2      	mov	sl, r4
 800b904:	e7d2      	b.n	800b8ac <_svfiprintf_r+0xa0>
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	1d19      	adds	r1, r3, #4
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	9103      	str	r1, [sp, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	bfbb      	ittet	lt
 800b912:	425b      	neglt	r3, r3
 800b914:	f042 0202 	orrlt.w	r2, r2, #2
 800b918:	9307      	strge	r3, [sp, #28]
 800b91a:	9307      	strlt	r3, [sp, #28]
 800b91c:	bfb8      	it	lt
 800b91e:	9204      	strlt	r2, [sp, #16]
 800b920:	7823      	ldrb	r3, [r4, #0]
 800b922:	2b2e      	cmp	r3, #46	@ 0x2e
 800b924:	d10a      	bne.n	800b93c <_svfiprintf_r+0x130>
 800b926:	7863      	ldrb	r3, [r4, #1]
 800b928:	2b2a      	cmp	r3, #42	@ 0x2a
 800b92a:	d132      	bne.n	800b992 <_svfiprintf_r+0x186>
 800b92c:	9b03      	ldr	r3, [sp, #12]
 800b92e:	1d1a      	adds	r2, r3, #4
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	9203      	str	r2, [sp, #12]
 800b934:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b938:	3402      	adds	r4, #2
 800b93a:	9305      	str	r3, [sp, #20]
 800b93c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ba00 <_svfiprintf_r+0x1f4>
 800b940:	7821      	ldrb	r1, [r4, #0]
 800b942:	2203      	movs	r2, #3
 800b944:	4650      	mov	r0, sl
 800b946:	f7f4 fc43 	bl	80001d0 <memchr>
 800b94a:	b138      	cbz	r0, 800b95c <_svfiprintf_r+0x150>
 800b94c:	9b04      	ldr	r3, [sp, #16]
 800b94e:	eba0 000a 	sub.w	r0, r0, sl
 800b952:	2240      	movs	r2, #64	@ 0x40
 800b954:	4082      	lsls	r2, r0
 800b956:	4313      	orrs	r3, r2
 800b958:	3401      	adds	r4, #1
 800b95a:	9304      	str	r3, [sp, #16]
 800b95c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b960:	4824      	ldr	r0, [pc, #144]	@ (800b9f4 <_svfiprintf_r+0x1e8>)
 800b962:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b966:	2206      	movs	r2, #6
 800b968:	f7f4 fc32 	bl	80001d0 <memchr>
 800b96c:	2800      	cmp	r0, #0
 800b96e:	d036      	beq.n	800b9de <_svfiprintf_r+0x1d2>
 800b970:	4b21      	ldr	r3, [pc, #132]	@ (800b9f8 <_svfiprintf_r+0x1ec>)
 800b972:	bb1b      	cbnz	r3, 800b9bc <_svfiprintf_r+0x1b0>
 800b974:	9b03      	ldr	r3, [sp, #12]
 800b976:	3307      	adds	r3, #7
 800b978:	f023 0307 	bic.w	r3, r3, #7
 800b97c:	3308      	adds	r3, #8
 800b97e:	9303      	str	r3, [sp, #12]
 800b980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b982:	4433      	add	r3, r6
 800b984:	9309      	str	r3, [sp, #36]	@ 0x24
 800b986:	e76a      	b.n	800b85e <_svfiprintf_r+0x52>
 800b988:	fb0c 3202 	mla	r2, ip, r2, r3
 800b98c:	460c      	mov	r4, r1
 800b98e:	2001      	movs	r0, #1
 800b990:	e7a8      	b.n	800b8e4 <_svfiprintf_r+0xd8>
 800b992:	2300      	movs	r3, #0
 800b994:	3401      	adds	r4, #1
 800b996:	9305      	str	r3, [sp, #20]
 800b998:	4619      	mov	r1, r3
 800b99a:	f04f 0c0a 	mov.w	ip, #10
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9a4:	3a30      	subs	r2, #48	@ 0x30
 800b9a6:	2a09      	cmp	r2, #9
 800b9a8:	d903      	bls.n	800b9b2 <_svfiprintf_r+0x1a6>
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d0c6      	beq.n	800b93c <_svfiprintf_r+0x130>
 800b9ae:	9105      	str	r1, [sp, #20]
 800b9b0:	e7c4      	b.n	800b93c <_svfiprintf_r+0x130>
 800b9b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e7f0      	b.n	800b99e <_svfiprintf_r+0x192>
 800b9bc:	ab03      	add	r3, sp, #12
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	462a      	mov	r2, r5
 800b9c2:	4b0e      	ldr	r3, [pc, #56]	@ (800b9fc <_svfiprintf_r+0x1f0>)
 800b9c4:	a904      	add	r1, sp, #16
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	f7fd fe78 	bl	80096bc <_printf_float>
 800b9cc:	1c42      	adds	r2, r0, #1
 800b9ce:	4606      	mov	r6, r0
 800b9d0:	d1d6      	bne.n	800b980 <_svfiprintf_r+0x174>
 800b9d2:	89ab      	ldrh	r3, [r5, #12]
 800b9d4:	065b      	lsls	r3, r3, #25
 800b9d6:	f53f af2d 	bmi.w	800b834 <_svfiprintf_r+0x28>
 800b9da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9dc:	e72c      	b.n	800b838 <_svfiprintf_r+0x2c>
 800b9de:	ab03      	add	r3, sp, #12
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	462a      	mov	r2, r5
 800b9e4:	4b05      	ldr	r3, [pc, #20]	@ (800b9fc <_svfiprintf_r+0x1f0>)
 800b9e6:	a904      	add	r1, sp, #16
 800b9e8:	4638      	mov	r0, r7
 800b9ea:	f7fe f8ff 	bl	8009bec <_printf_i>
 800b9ee:	e7ed      	b.n	800b9cc <_svfiprintf_r+0x1c0>
 800b9f0:	0800d158 	.word	0x0800d158
 800b9f4:	0800d162 	.word	0x0800d162
 800b9f8:	080096bd 	.word	0x080096bd
 800b9fc:	0800b755 	.word	0x0800b755
 800ba00:	0800d15e 	.word	0x0800d15e

0800ba04 <__sflush_r>:
 800ba04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba0c:	0716      	lsls	r6, r2, #28
 800ba0e:	4605      	mov	r5, r0
 800ba10:	460c      	mov	r4, r1
 800ba12:	d454      	bmi.n	800babe <__sflush_r+0xba>
 800ba14:	684b      	ldr	r3, [r1, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	dc02      	bgt.n	800ba20 <__sflush_r+0x1c>
 800ba1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	dd48      	ble.n	800bab2 <__sflush_r+0xae>
 800ba20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba22:	2e00      	cmp	r6, #0
 800ba24:	d045      	beq.n	800bab2 <__sflush_r+0xae>
 800ba26:	2300      	movs	r3, #0
 800ba28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ba2c:	682f      	ldr	r7, [r5, #0]
 800ba2e:	6a21      	ldr	r1, [r4, #32]
 800ba30:	602b      	str	r3, [r5, #0]
 800ba32:	d030      	beq.n	800ba96 <__sflush_r+0x92>
 800ba34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ba36:	89a3      	ldrh	r3, [r4, #12]
 800ba38:	0759      	lsls	r1, r3, #29
 800ba3a:	d505      	bpl.n	800ba48 <__sflush_r+0x44>
 800ba3c:	6863      	ldr	r3, [r4, #4]
 800ba3e:	1ad2      	subs	r2, r2, r3
 800ba40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ba42:	b10b      	cbz	r3, 800ba48 <__sflush_r+0x44>
 800ba44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ba46:	1ad2      	subs	r2, r2, r3
 800ba48:	2300      	movs	r3, #0
 800ba4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba4c:	6a21      	ldr	r1, [r4, #32]
 800ba4e:	4628      	mov	r0, r5
 800ba50:	47b0      	blx	r6
 800ba52:	1c43      	adds	r3, r0, #1
 800ba54:	89a3      	ldrh	r3, [r4, #12]
 800ba56:	d106      	bne.n	800ba66 <__sflush_r+0x62>
 800ba58:	6829      	ldr	r1, [r5, #0]
 800ba5a:	291d      	cmp	r1, #29
 800ba5c:	d82b      	bhi.n	800bab6 <__sflush_r+0xb2>
 800ba5e:	4a2a      	ldr	r2, [pc, #168]	@ (800bb08 <__sflush_r+0x104>)
 800ba60:	410a      	asrs	r2, r1
 800ba62:	07d6      	lsls	r6, r2, #31
 800ba64:	d427      	bmi.n	800bab6 <__sflush_r+0xb2>
 800ba66:	2200      	movs	r2, #0
 800ba68:	6062      	str	r2, [r4, #4]
 800ba6a:	04d9      	lsls	r1, r3, #19
 800ba6c:	6922      	ldr	r2, [r4, #16]
 800ba6e:	6022      	str	r2, [r4, #0]
 800ba70:	d504      	bpl.n	800ba7c <__sflush_r+0x78>
 800ba72:	1c42      	adds	r2, r0, #1
 800ba74:	d101      	bne.n	800ba7a <__sflush_r+0x76>
 800ba76:	682b      	ldr	r3, [r5, #0]
 800ba78:	b903      	cbnz	r3, 800ba7c <__sflush_r+0x78>
 800ba7a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ba7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba7e:	602f      	str	r7, [r5, #0]
 800ba80:	b1b9      	cbz	r1, 800bab2 <__sflush_r+0xae>
 800ba82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba86:	4299      	cmp	r1, r3
 800ba88:	d002      	beq.n	800ba90 <__sflush_r+0x8c>
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	f7ff f9e0 	bl	800ae50 <_free_r>
 800ba90:	2300      	movs	r3, #0
 800ba92:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba94:	e00d      	b.n	800bab2 <__sflush_r+0xae>
 800ba96:	2301      	movs	r3, #1
 800ba98:	4628      	mov	r0, r5
 800ba9a:	47b0      	blx	r6
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	1c50      	adds	r0, r2, #1
 800baa0:	d1c9      	bne.n	800ba36 <__sflush_r+0x32>
 800baa2:	682b      	ldr	r3, [r5, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d0c6      	beq.n	800ba36 <__sflush_r+0x32>
 800baa8:	2b1d      	cmp	r3, #29
 800baaa:	d001      	beq.n	800bab0 <__sflush_r+0xac>
 800baac:	2b16      	cmp	r3, #22
 800baae:	d11e      	bne.n	800baee <__sflush_r+0xea>
 800bab0:	602f      	str	r7, [r5, #0]
 800bab2:	2000      	movs	r0, #0
 800bab4:	e022      	b.n	800bafc <__sflush_r+0xf8>
 800bab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baba:	b21b      	sxth	r3, r3
 800babc:	e01b      	b.n	800baf6 <__sflush_r+0xf2>
 800babe:	690f      	ldr	r7, [r1, #16]
 800bac0:	2f00      	cmp	r7, #0
 800bac2:	d0f6      	beq.n	800bab2 <__sflush_r+0xae>
 800bac4:	0793      	lsls	r3, r2, #30
 800bac6:	680e      	ldr	r6, [r1, #0]
 800bac8:	bf08      	it	eq
 800baca:	694b      	ldreq	r3, [r1, #20]
 800bacc:	600f      	str	r7, [r1, #0]
 800bace:	bf18      	it	ne
 800bad0:	2300      	movne	r3, #0
 800bad2:	eba6 0807 	sub.w	r8, r6, r7
 800bad6:	608b      	str	r3, [r1, #8]
 800bad8:	f1b8 0f00 	cmp.w	r8, #0
 800badc:	dde9      	ble.n	800bab2 <__sflush_r+0xae>
 800bade:	6a21      	ldr	r1, [r4, #32]
 800bae0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bae2:	4643      	mov	r3, r8
 800bae4:	463a      	mov	r2, r7
 800bae6:	4628      	mov	r0, r5
 800bae8:	47b0      	blx	r6
 800baea:	2800      	cmp	r0, #0
 800baec:	dc08      	bgt.n	800bb00 <__sflush_r+0xfc>
 800baee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baf6:	81a3      	strh	r3, [r4, #12]
 800baf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb00:	4407      	add	r7, r0
 800bb02:	eba8 0800 	sub.w	r8, r8, r0
 800bb06:	e7e7      	b.n	800bad8 <__sflush_r+0xd4>
 800bb08:	dfbffffe 	.word	0xdfbffffe

0800bb0c <_fflush_r>:
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	690b      	ldr	r3, [r1, #16]
 800bb10:	4605      	mov	r5, r0
 800bb12:	460c      	mov	r4, r1
 800bb14:	b913      	cbnz	r3, 800bb1c <_fflush_r+0x10>
 800bb16:	2500      	movs	r5, #0
 800bb18:	4628      	mov	r0, r5
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	b118      	cbz	r0, 800bb26 <_fflush_r+0x1a>
 800bb1e:	6a03      	ldr	r3, [r0, #32]
 800bb20:	b90b      	cbnz	r3, 800bb26 <_fflush_r+0x1a>
 800bb22:	f7fe fa0f 	bl	8009f44 <__sinit>
 800bb26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d0f3      	beq.n	800bb16 <_fflush_r+0xa>
 800bb2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bb30:	07d0      	lsls	r0, r2, #31
 800bb32:	d404      	bmi.n	800bb3e <_fflush_r+0x32>
 800bb34:	0599      	lsls	r1, r3, #22
 800bb36:	d402      	bmi.n	800bb3e <_fflush_r+0x32>
 800bb38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb3a:	f7fe fb2c 	bl	800a196 <__retarget_lock_acquire_recursive>
 800bb3e:	4628      	mov	r0, r5
 800bb40:	4621      	mov	r1, r4
 800bb42:	f7ff ff5f 	bl	800ba04 <__sflush_r>
 800bb46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb48:	07da      	lsls	r2, r3, #31
 800bb4a:	4605      	mov	r5, r0
 800bb4c:	d4e4      	bmi.n	800bb18 <_fflush_r+0xc>
 800bb4e:	89a3      	ldrh	r3, [r4, #12]
 800bb50:	059b      	lsls	r3, r3, #22
 800bb52:	d4e1      	bmi.n	800bb18 <_fflush_r+0xc>
 800bb54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb56:	f7fe fb1f 	bl	800a198 <__retarget_lock_release_recursive>
 800bb5a:	e7dd      	b.n	800bb18 <_fflush_r+0xc>

0800bb5c <memmove>:
 800bb5c:	4288      	cmp	r0, r1
 800bb5e:	b510      	push	{r4, lr}
 800bb60:	eb01 0402 	add.w	r4, r1, r2
 800bb64:	d902      	bls.n	800bb6c <memmove+0x10>
 800bb66:	4284      	cmp	r4, r0
 800bb68:	4623      	mov	r3, r4
 800bb6a:	d807      	bhi.n	800bb7c <memmove+0x20>
 800bb6c:	1e43      	subs	r3, r0, #1
 800bb6e:	42a1      	cmp	r1, r4
 800bb70:	d008      	beq.n	800bb84 <memmove+0x28>
 800bb72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb7a:	e7f8      	b.n	800bb6e <memmove+0x12>
 800bb7c:	4402      	add	r2, r0
 800bb7e:	4601      	mov	r1, r0
 800bb80:	428a      	cmp	r2, r1
 800bb82:	d100      	bne.n	800bb86 <memmove+0x2a>
 800bb84:	bd10      	pop	{r4, pc}
 800bb86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb8e:	e7f7      	b.n	800bb80 <memmove+0x24>

0800bb90 <_sbrk_r>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4d06      	ldr	r5, [pc, #24]	@ (800bbac <_sbrk_r+0x1c>)
 800bb94:	2300      	movs	r3, #0
 800bb96:	4604      	mov	r4, r0
 800bb98:	4608      	mov	r0, r1
 800bb9a:	602b      	str	r3, [r5, #0]
 800bb9c:	f7f6 ff08 	bl	80029b0 <_sbrk>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d102      	bne.n	800bbaa <_sbrk_r+0x1a>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b103      	cbz	r3, 800bbaa <_sbrk_r+0x1a>
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	200056a4 	.word	0x200056a4

0800bbb0 <__assert_func>:
 800bbb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbb2:	4614      	mov	r4, r2
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	4b09      	ldr	r3, [pc, #36]	@ (800bbdc <__assert_func+0x2c>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4605      	mov	r5, r0
 800bbbc:	68d8      	ldr	r0, [r3, #12]
 800bbbe:	b954      	cbnz	r4, 800bbd6 <__assert_func+0x26>
 800bbc0:	4b07      	ldr	r3, [pc, #28]	@ (800bbe0 <__assert_func+0x30>)
 800bbc2:	461c      	mov	r4, r3
 800bbc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbc8:	9100      	str	r1, [sp, #0]
 800bbca:	462b      	mov	r3, r5
 800bbcc:	4905      	ldr	r1, [pc, #20]	@ (800bbe4 <__assert_func+0x34>)
 800bbce:	f000 f86f 	bl	800bcb0 <fiprintf>
 800bbd2:	f000 f87f 	bl	800bcd4 <abort>
 800bbd6:	4b04      	ldr	r3, [pc, #16]	@ (800bbe8 <__assert_func+0x38>)
 800bbd8:	e7f4      	b.n	800bbc4 <__assert_func+0x14>
 800bbda:	bf00      	nop
 800bbdc:	2000001c 	.word	0x2000001c
 800bbe0:	0800d1ae 	.word	0x0800d1ae
 800bbe4:	0800d180 	.word	0x0800d180
 800bbe8:	0800d173 	.word	0x0800d173

0800bbec <_calloc_r>:
 800bbec:	b570      	push	{r4, r5, r6, lr}
 800bbee:	fba1 5402 	umull	r5, r4, r1, r2
 800bbf2:	b93c      	cbnz	r4, 800bc04 <_calloc_r+0x18>
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	f7ff f99f 	bl	800af38 <_malloc_r>
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	b928      	cbnz	r0, 800bc0a <_calloc_r+0x1e>
 800bbfe:	2600      	movs	r6, #0
 800bc00:	4630      	mov	r0, r6
 800bc02:	bd70      	pop	{r4, r5, r6, pc}
 800bc04:	220c      	movs	r2, #12
 800bc06:	6002      	str	r2, [r0, #0]
 800bc08:	e7f9      	b.n	800bbfe <_calloc_r+0x12>
 800bc0a:	462a      	mov	r2, r5
 800bc0c:	4621      	mov	r1, r4
 800bc0e:	f7fe fa32 	bl	800a076 <memset>
 800bc12:	e7f5      	b.n	800bc00 <_calloc_r+0x14>

0800bc14 <__ascii_mbtowc>:
 800bc14:	b082      	sub	sp, #8
 800bc16:	b901      	cbnz	r1, 800bc1a <__ascii_mbtowc+0x6>
 800bc18:	a901      	add	r1, sp, #4
 800bc1a:	b142      	cbz	r2, 800bc2e <__ascii_mbtowc+0x1a>
 800bc1c:	b14b      	cbz	r3, 800bc32 <__ascii_mbtowc+0x1e>
 800bc1e:	7813      	ldrb	r3, [r2, #0]
 800bc20:	600b      	str	r3, [r1, #0]
 800bc22:	7812      	ldrb	r2, [r2, #0]
 800bc24:	1e10      	subs	r0, r2, #0
 800bc26:	bf18      	it	ne
 800bc28:	2001      	movne	r0, #1
 800bc2a:	b002      	add	sp, #8
 800bc2c:	4770      	bx	lr
 800bc2e:	4610      	mov	r0, r2
 800bc30:	e7fb      	b.n	800bc2a <__ascii_mbtowc+0x16>
 800bc32:	f06f 0001 	mvn.w	r0, #1
 800bc36:	e7f8      	b.n	800bc2a <__ascii_mbtowc+0x16>

0800bc38 <_realloc_r>:
 800bc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc3c:	4680      	mov	r8, r0
 800bc3e:	4615      	mov	r5, r2
 800bc40:	460c      	mov	r4, r1
 800bc42:	b921      	cbnz	r1, 800bc4e <_realloc_r+0x16>
 800bc44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc48:	4611      	mov	r1, r2
 800bc4a:	f7ff b975 	b.w	800af38 <_malloc_r>
 800bc4e:	b92a      	cbnz	r2, 800bc5c <_realloc_r+0x24>
 800bc50:	f7ff f8fe 	bl	800ae50 <_free_r>
 800bc54:	2400      	movs	r4, #0
 800bc56:	4620      	mov	r0, r4
 800bc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc5c:	f000 f841 	bl	800bce2 <_malloc_usable_size_r>
 800bc60:	4285      	cmp	r5, r0
 800bc62:	4606      	mov	r6, r0
 800bc64:	d802      	bhi.n	800bc6c <_realloc_r+0x34>
 800bc66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bc6a:	d8f4      	bhi.n	800bc56 <_realloc_r+0x1e>
 800bc6c:	4629      	mov	r1, r5
 800bc6e:	4640      	mov	r0, r8
 800bc70:	f7ff f962 	bl	800af38 <_malloc_r>
 800bc74:	4607      	mov	r7, r0
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d0ec      	beq.n	800bc54 <_realloc_r+0x1c>
 800bc7a:	42b5      	cmp	r5, r6
 800bc7c:	462a      	mov	r2, r5
 800bc7e:	4621      	mov	r1, r4
 800bc80:	bf28      	it	cs
 800bc82:	4632      	movcs	r2, r6
 800bc84:	f7fe fa89 	bl	800a19a <memcpy>
 800bc88:	4621      	mov	r1, r4
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	f7ff f8e0 	bl	800ae50 <_free_r>
 800bc90:	463c      	mov	r4, r7
 800bc92:	e7e0      	b.n	800bc56 <_realloc_r+0x1e>

0800bc94 <__ascii_wctomb>:
 800bc94:	4603      	mov	r3, r0
 800bc96:	4608      	mov	r0, r1
 800bc98:	b141      	cbz	r1, 800bcac <__ascii_wctomb+0x18>
 800bc9a:	2aff      	cmp	r2, #255	@ 0xff
 800bc9c:	d904      	bls.n	800bca8 <__ascii_wctomb+0x14>
 800bc9e:	228a      	movs	r2, #138	@ 0x8a
 800bca0:	601a      	str	r2, [r3, #0]
 800bca2:	f04f 30ff 	mov.w	r0, #4294967295
 800bca6:	4770      	bx	lr
 800bca8:	700a      	strb	r2, [r1, #0]
 800bcaa:	2001      	movs	r0, #1
 800bcac:	4770      	bx	lr
	...

0800bcb0 <fiprintf>:
 800bcb0:	b40e      	push	{r1, r2, r3}
 800bcb2:	b503      	push	{r0, r1, lr}
 800bcb4:	4601      	mov	r1, r0
 800bcb6:	ab03      	add	r3, sp, #12
 800bcb8:	4805      	ldr	r0, [pc, #20]	@ (800bcd0 <fiprintf+0x20>)
 800bcba:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcbe:	6800      	ldr	r0, [r0, #0]
 800bcc0:	9301      	str	r3, [sp, #4]
 800bcc2:	f000 f83f 	bl	800bd44 <_vfiprintf_r>
 800bcc6:	b002      	add	sp, #8
 800bcc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bccc:	b003      	add	sp, #12
 800bcce:	4770      	bx	lr
 800bcd0:	2000001c 	.word	0x2000001c

0800bcd4 <abort>:
 800bcd4:	b508      	push	{r3, lr}
 800bcd6:	2006      	movs	r0, #6
 800bcd8:	f000 fa08 	bl	800c0ec <raise>
 800bcdc:	2001      	movs	r0, #1
 800bcde:	f7f6 fdef 	bl	80028c0 <_exit>

0800bce2 <_malloc_usable_size_r>:
 800bce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bce6:	1f18      	subs	r0, r3, #4
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	bfbc      	itt	lt
 800bcec:	580b      	ldrlt	r3, [r1, r0]
 800bcee:	18c0      	addlt	r0, r0, r3
 800bcf0:	4770      	bx	lr

0800bcf2 <__sfputc_r>:
 800bcf2:	6893      	ldr	r3, [r2, #8]
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	b410      	push	{r4}
 800bcfa:	6093      	str	r3, [r2, #8]
 800bcfc:	da08      	bge.n	800bd10 <__sfputc_r+0x1e>
 800bcfe:	6994      	ldr	r4, [r2, #24]
 800bd00:	42a3      	cmp	r3, r4
 800bd02:	db01      	blt.n	800bd08 <__sfputc_r+0x16>
 800bd04:	290a      	cmp	r1, #10
 800bd06:	d103      	bne.n	800bd10 <__sfputc_r+0x1e>
 800bd08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd0c:	f000 b932 	b.w	800bf74 <__swbuf_r>
 800bd10:	6813      	ldr	r3, [r2, #0]
 800bd12:	1c58      	adds	r0, r3, #1
 800bd14:	6010      	str	r0, [r2, #0]
 800bd16:	7019      	strb	r1, [r3, #0]
 800bd18:	4608      	mov	r0, r1
 800bd1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <__sfputs_r>:
 800bd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd22:	4606      	mov	r6, r0
 800bd24:	460f      	mov	r7, r1
 800bd26:	4614      	mov	r4, r2
 800bd28:	18d5      	adds	r5, r2, r3
 800bd2a:	42ac      	cmp	r4, r5
 800bd2c:	d101      	bne.n	800bd32 <__sfputs_r+0x12>
 800bd2e:	2000      	movs	r0, #0
 800bd30:	e007      	b.n	800bd42 <__sfputs_r+0x22>
 800bd32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd36:	463a      	mov	r2, r7
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f7ff ffda 	bl	800bcf2 <__sfputc_r>
 800bd3e:	1c43      	adds	r3, r0, #1
 800bd40:	d1f3      	bne.n	800bd2a <__sfputs_r+0xa>
 800bd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd44 <_vfiprintf_r>:
 800bd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd48:	460d      	mov	r5, r1
 800bd4a:	b09d      	sub	sp, #116	@ 0x74
 800bd4c:	4614      	mov	r4, r2
 800bd4e:	4698      	mov	r8, r3
 800bd50:	4606      	mov	r6, r0
 800bd52:	b118      	cbz	r0, 800bd5c <_vfiprintf_r+0x18>
 800bd54:	6a03      	ldr	r3, [r0, #32]
 800bd56:	b90b      	cbnz	r3, 800bd5c <_vfiprintf_r+0x18>
 800bd58:	f7fe f8f4 	bl	8009f44 <__sinit>
 800bd5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd5e:	07d9      	lsls	r1, r3, #31
 800bd60:	d405      	bmi.n	800bd6e <_vfiprintf_r+0x2a>
 800bd62:	89ab      	ldrh	r3, [r5, #12]
 800bd64:	059a      	lsls	r2, r3, #22
 800bd66:	d402      	bmi.n	800bd6e <_vfiprintf_r+0x2a>
 800bd68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd6a:	f7fe fa14 	bl	800a196 <__retarget_lock_acquire_recursive>
 800bd6e:	89ab      	ldrh	r3, [r5, #12]
 800bd70:	071b      	lsls	r3, r3, #28
 800bd72:	d501      	bpl.n	800bd78 <_vfiprintf_r+0x34>
 800bd74:	692b      	ldr	r3, [r5, #16]
 800bd76:	b99b      	cbnz	r3, 800bda0 <_vfiprintf_r+0x5c>
 800bd78:	4629      	mov	r1, r5
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f000 f938 	bl	800bff0 <__swsetup_r>
 800bd80:	b170      	cbz	r0, 800bda0 <_vfiprintf_r+0x5c>
 800bd82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd84:	07dc      	lsls	r4, r3, #31
 800bd86:	d504      	bpl.n	800bd92 <_vfiprintf_r+0x4e>
 800bd88:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8c:	b01d      	add	sp, #116	@ 0x74
 800bd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd92:	89ab      	ldrh	r3, [r5, #12]
 800bd94:	0598      	lsls	r0, r3, #22
 800bd96:	d4f7      	bmi.n	800bd88 <_vfiprintf_r+0x44>
 800bd98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd9a:	f7fe f9fd 	bl	800a198 <__retarget_lock_release_recursive>
 800bd9e:	e7f3      	b.n	800bd88 <_vfiprintf_r+0x44>
 800bda0:	2300      	movs	r3, #0
 800bda2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bda4:	2320      	movs	r3, #32
 800bda6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bdaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdae:	2330      	movs	r3, #48	@ 0x30
 800bdb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf60 <_vfiprintf_r+0x21c>
 800bdb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bdb8:	f04f 0901 	mov.w	r9, #1
 800bdbc:	4623      	mov	r3, r4
 800bdbe:	469a      	mov	sl, r3
 800bdc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdc4:	b10a      	cbz	r2, 800bdca <_vfiprintf_r+0x86>
 800bdc6:	2a25      	cmp	r2, #37	@ 0x25
 800bdc8:	d1f9      	bne.n	800bdbe <_vfiprintf_r+0x7a>
 800bdca:	ebba 0b04 	subs.w	fp, sl, r4
 800bdce:	d00b      	beq.n	800bde8 <_vfiprintf_r+0xa4>
 800bdd0:	465b      	mov	r3, fp
 800bdd2:	4622      	mov	r2, r4
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f7ff ffa2 	bl	800bd20 <__sfputs_r>
 800bddc:	3001      	adds	r0, #1
 800bdde:	f000 80a7 	beq.w	800bf30 <_vfiprintf_r+0x1ec>
 800bde2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bde4:	445a      	add	r2, fp
 800bde6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bde8:	f89a 3000 	ldrb.w	r3, [sl]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f000 809f 	beq.w	800bf30 <_vfiprintf_r+0x1ec>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f04f 32ff 	mov.w	r2, #4294967295
 800bdf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdfc:	f10a 0a01 	add.w	sl, sl, #1
 800be00:	9304      	str	r3, [sp, #16]
 800be02:	9307      	str	r3, [sp, #28]
 800be04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be08:	931a      	str	r3, [sp, #104]	@ 0x68
 800be0a:	4654      	mov	r4, sl
 800be0c:	2205      	movs	r2, #5
 800be0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be12:	4853      	ldr	r0, [pc, #332]	@ (800bf60 <_vfiprintf_r+0x21c>)
 800be14:	f7f4 f9dc 	bl	80001d0 <memchr>
 800be18:	9a04      	ldr	r2, [sp, #16]
 800be1a:	b9d8      	cbnz	r0, 800be54 <_vfiprintf_r+0x110>
 800be1c:	06d1      	lsls	r1, r2, #27
 800be1e:	bf44      	itt	mi
 800be20:	2320      	movmi	r3, #32
 800be22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be26:	0713      	lsls	r3, r2, #28
 800be28:	bf44      	itt	mi
 800be2a:	232b      	movmi	r3, #43	@ 0x2b
 800be2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be30:	f89a 3000 	ldrb.w	r3, [sl]
 800be34:	2b2a      	cmp	r3, #42	@ 0x2a
 800be36:	d015      	beq.n	800be64 <_vfiprintf_r+0x120>
 800be38:	9a07      	ldr	r2, [sp, #28]
 800be3a:	4654      	mov	r4, sl
 800be3c:	2000      	movs	r0, #0
 800be3e:	f04f 0c0a 	mov.w	ip, #10
 800be42:	4621      	mov	r1, r4
 800be44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be48:	3b30      	subs	r3, #48	@ 0x30
 800be4a:	2b09      	cmp	r3, #9
 800be4c:	d94b      	bls.n	800bee6 <_vfiprintf_r+0x1a2>
 800be4e:	b1b0      	cbz	r0, 800be7e <_vfiprintf_r+0x13a>
 800be50:	9207      	str	r2, [sp, #28]
 800be52:	e014      	b.n	800be7e <_vfiprintf_r+0x13a>
 800be54:	eba0 0308 	sub.w	r3, r0, r8
 800be58:	fa09 f303 	lsl.w	r3, r9, r3
 800be5c:	4313      	orrs	r3, r2
 800be5e:	9304      	str	r3, [sp, #16]
 800be60:	46a2      	mov	sl, r4
 800be62:	e7d2      	b.n	800be0a <_vfiprintf_r+0xc6>
 800be64:	9b03      	ldr	r3, [sp, #12]
 800be66:	1d19      	adds	r1, r3, #4
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	9103      	str	r1, [sp, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	bfbb      	ittet	lt
 800be70:	425b      	neglt	r3, r3
 800be72:	f042 0202 	orrlt.w	r2, r2, #2
 800be76:	9307      	strge	r3, [sp, #28]
 800be78:	9307      	strlt	r3, [sp, #28]
 800be7a:	bfb8      	it	lt
 800be7c:	9204      	strlt	r2, [sp, #16]
 800be7e:	7823      	ldrb	r3, [r4, #0]
 800be80:	2b2e      	cmp	r3, #46	@ 0x2e
 800be82:	d10a      	bne.n	800be9a <_vfiprintf_r+0x156>
 800be84:	7863      	ldrb	r3, [r4, #1]
 800be86:	2b2a      	cmp	r3, #42	@ 0x2a
 800be88:	d132      	bne.n	800bef0 <_vfiprintf_r+0x1ac>
 800be8a:	9b03      	ldr	r3, [sp, #12]
 800be8c:	1d1a      	adds	r2, r3, #4
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	9203      	str	r2, [sp, #12]
 800be92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be96:	3402      	adds	r4, #2
 800be98:	9305      	str	r3, [sp, #20]
 800be9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf70 <_vfiprintf_r+0x22c>
 800be9e:	7821      	ldrb	r1, [r4, #0]
 800bea0:	2203      	movs	r2, #3
 800bea2:	4650      	mov	r0, sl
 800bea4:	f7f4 f994 	bl	80001d0 <memchr>
 800bea8:	b138      	cbz	r0, 800beba <_vfiprintf_r+0x176>
 800beaa:	9b04      	ldr	r3, [sp, #16]
 800beac:	eba0 000a 	sub.w	r0, r0, sl
 800beb0:	2240      	movs	r2, #64	@ 0x40
 800beb2:	4082      	lsls	r2, r0
 800beb4:	4313      	orrs	r3, r2
 800beb6:	3401      	adds	r4, #1
 800beb8:	9304      	str	r3, [sp, #16]
 800beba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bebe:	4829      	ldr	r0, [pc, #164]	@ (800bf64 <_vfiprintf_r+0x220>)
 800bec0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bec4:	2206      	movs	r2, #6
 800bec6:	f7f4 f983 	bl	80001d0 <memchr>
 800beca:	2800      	cmp	r0, #0
 800becc:	d03f      	beq.n	800bf4e <_vfiprintf_r+0x20a>
 800bece:	4b26      	ldr	r3, [pc, #152]	@ (800bf68 <_vfiprintf_r+0x224>)
 800bed0:	bb1b      	cbnz	r3, 800bf1a <_vfiprintf_r+0x1d6>
 800bed2:	9b03      	ldr	r3, [sp, #12]
 800bed4:	3307      	adds	r3, #7
 800bed6:	f023 0307 	bic.w	r3, r3, #7
 800beda:	3308      	adds	r3, #8
 800bedc:	9303      	str	r3, [sp, #12]
 800bede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bee0:	443b      	add	r3, r7
 800bee2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bee4:	e76a      	b.n	800bdbc <_vfiprintf_r+0x78>
 800bee6:	fb0c 3202 	mla	r2, ip, r2, r3
 800beea:	460c      	mov	r4, r1
 800beec:	2001      	movs	r0, #1
 800beee:	e7a8      	b.n	800be42 <_vfiprintf_r+0xfe>
 800bef0:	2300      	movs	r3, #0
 800bef2:	3401      	adds	r4, #1
 800bef4:	9305      	str	r3, [sp, #20]
 800bef6:	4619      	mov	r1, r3
 800bef8:	f04f 0c0a 	mov.w	ip, #10
 800befc:	4620      	mov	r0, r4
 800befe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf02:	3a30      	subs	r2, #48	@ 0x30
 800bf04:	2a09      	cmp	r2, #9
 800bf06:	d903      	bls.n	800bf10 <_vfiprintf_r+0x1cc>
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d0c6      	beq.n	800be9a <_vfiprintf_r+0x156>
 800bf0c:	9105      	str	r1, [sp, #20]
 800bf0e:	e7c4      	b.n	800be9a <_vfiprintf_r+0x156>
 800bf10:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf14:	4604      	mov	r4, r0
 800bf16:	2301      	movs	r3, #1
 800bf18:	e7f0      	b.n	800befc <_vfiprintf_r+0x1b8>
 800bf1a:	ab03      	add	r3, sp, #12
 800bf1c:	9300      	str	r3, [sp, #0]
 800bf1e:	462a      	mov	r2, r5
 800bf20:	4b12      	ldr	r3, [pc, #72]	@ (800bf6c <_vfiprintf_r+0x228>)
 800bf22:	a904      	add	r1, sp, #16
 800bf24:	4630      	mov	r0, r6
 800bf26:	f7fd fbc9 	bl	80096bc <_printf_float>
 800bf2a:	4607      	mov	r7, r0
 800bf2c:	1c78      	adds	r0, r7, #1
 800bf2e:	d1d6      	bne.n	800bede <_vfiprintf_r+0x19a>
 800bf30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf32:	07d9      	lsls	r1, r3, #31
 800bf34:	d405      	bmi.n	800bf42 <_vfiprintf_r+0x1fe>
 800bf36:	89ab      	ldrh	r3, [r5, #12]
 800bf38:	059a      	lsls	r2, r3, #22
 800bf3a:	d402      	bmi.n	800bf42 <_vfiprintf_r+0x1fe>
 800bf3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf3e:	f7fe f92b 	bl	800a198 <__retarget_lock_release_recursive>
 800bf42:	89ab      	ldrh	r3, [r5, #12]
 800bf44:	065b      	lsls	r3, r3, #25
 800bf46:	f53f af1f 	bmi.w	800bd88 <_vfiprintf_r+0x44>
 800bf4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf4c:	e71e      	b.n	800bd8c <_vfiprintf_r+0x48>
 800bf4e:	ab03      	add	r3, sp, #12
 800bf50:	9300      	str	r3, [sp, #0]
 800bf52:	462a      	mov	r2, r5
 800bf54:	4b05      	ldr	r3, [pc, #20]	@ (800bf6c <_vfiprintf_r+0x228>)
 800bf56:	a904      	add	r1, sp, #16
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f7fd fe47 	bl	8009bec <_printf_i>
 800bf5e:	e7e4      	b.n	800bf2a <_vfiprintf_r+0x1e6>
 800bf60:	0800d158 	.word	0x0800d158
 800bf64:	0800d162 	.word	0x0800d162
 800bf68:	080096bd 	.word	0x080096bd
 800bf6c:	0800bd21 	.word	0x0800bd21
 800bf70:	0800d15e 	.word	0x0800d15e

0800bf74 <__swbuf_r>:
 800bf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf76:	460e      	mov	r6, r1
 800bf78:	4614      	mov	r4, r2
 800bf7a:	4605      	mov	r5, r0
 800bf7c:	b118      	cbz	r0, 800bf86 <__swbuf_r+0x12>
 800bf7e:	6a03      	ldr	r3, [r0, #32]
 800bf80:	b90b      	cbnz	r3, 800bf86 <__swbuf_r+0x12>
 800bf82:	f7fd ffdf 	bl	8009f44 <__sinit>
 800bf86:	69a3      	ldr	r3, [r4, #24]
 800bf88:	60a3      	str	r3, [r4, #8]
 800bf8a:	89a3      	ldrh	r3, [r4, #12]
 800bf8c:	071a      	lsls	r2, r3, #28
 800bf8e:	d501      	bpl.n	800bf94 <__swbuf_r+0x20>
 800bf90:	6923      	ldr	r3, [r4, #16]
 800bf92:	b943      	cbnz	r3, 800bfa6 <__swbuf_r+0x32>
 800bf94:	4621      	mov	r1, r4
 800bf96:	4628      	mov	r0, r5
 800bf98:	f000 f82a 	bl	800bff0 <__swsetup_r>
 800bf9c:	b118      	cbz	r0, 800bfa6 <__swbuf_r+0x32>
 800bf9e:	f04f 37ff 	mov.w	r7, #4294967295
 800bfa2:	4638      	mov	r0, r7
 800bfa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfa6:	6823      	ldr	r3, [r4, #0]
 800bfa8:	6922      	ldr	r2, [r4, #16]
 800bfaa:	1a98      	subs	r0, r3, r2
 800bfac:	6963      	ldr	r3, [r4, #20]
 800bfae:	b2f6      	uxtb	r6, r6
 800bfb0:	4283      	cmp	r3, r0
 800bfb2:	4637      	mov	r7, r6
 800bfb4:	dc05      	bgt.n	800bfc2 <__swbuf_r+0x4e>
 800bfb6:	4621      	mov	r1, r4
 800bfb8:	4628      	mov	r0, r5
 800bfba:	f7ff fda7 	bl	800bb0c <_fflush_r>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d1ed      	bne.n	800bf9e <__swbuf_r+0x2a>
 800bfc2:	68a3      	ldr	r3, [r4, #8]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	60a3      	str	r3, [r4, #8]
 800bfc8:	6823      	ldr	r3, [r4, #0]
 800bfca:	1c5a      	adds	r2, r3, #1
 800bfcc:	6022      	str	r2, [r4, #0]
 800bfce:	701e      	strb	r6, [r3, #0]
 800bfd0:	6962      	ldr	r2, [r4, #20]
 800bfd2:	1c43      	adds	r3, r0, #1
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d004      	beq.n	800bfe2 <__swbuf_r+0x6e>
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	07db      	lsls	r3, r3, #31
 800bfdc:	d5e1      	bpl.n	800bfa2 <__swbuf_r+0x2e>
 800bfde:	2e0a      	cmp	r6, #10
 800bfe0:	d1df      	bne.n	800bfa2 <__swbuf_r+0x2e>
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	f7ff fd91 	bl	800bb0c <_fflush_r>
 800bfea:	2800      	cmp	r0, #0
 800bfec:	d0d9      	beq.n	800bfa2 <__swbuf_r+0x2e>
 800bfee:	e7d6      	b.n	800bf9e <__swbuf_r+0x2a>

0800bff0 <__swsetup_r>:
 800bff0:	b538      	push	{r3, r4, r5, lr}
 800bff2:	4b29      	ldr	r3, [pc, #164]	@ (800c098 <__swsetup_r+0xa8>)
 800bff4:	4605      	mov	r5, r0
 800bff6:	6818      	ldr	r0, [r3, #0]
 800bff8:	460c      	mov	r4, r1
 800bffa:	b118      	cbz	r0, 800c004 <__swsetup_r+0x14>
 800bffc:	6a03      	ldr	r3, [r0, #32]
 800bffe:	b90b      	cbnz	r3, 800c004 <__swsetup_r+0x14>
 800c000:	f7fd ffa0 	bl	8009f44 <__sinit>
 800c004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c008:	0719      	lsls	r1, r3, #28
 800c00a:	d422      	bmi.n	800c052 <__swsetup_r+0x62>
 800c00c:	06da      	lsls	r2, r3, #27
 800c00e:	d407      	bmi.n	800c020 <__swsetup_r+0x30>
 800c010:	2209      	movs	r2, #9
 800c012:	602a      	str	r2, [r5, #0]
 800c014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c018:	81a3      	strh	r3, [r4, #12]
 800c01a:	f04f 30ff 	mov.w	r0, #4294967295
 800c01e:	e033      	b.n	800c088 <__swsetup_r+0x98>
 800c020:	0758      	lsls	r0, r3, #29
 800c022:	d512      	bpl.n	800c04a <__swsetup_r+0x5a>
 800c024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c026:	b141      	cbz	r1, 800c03a <__swsetup_r+0x4a>
 800c028:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c02c:	4299      	cmp	r1, r3
 800c02e:	d002      	beq.n	800c036 <__swsetup_r+0x46>
 800c030:	4628      	mov	r0, r5
 800c032:	f7fe ff0d 	bl	800ae50 <_free_r>
 800c036:	2300      	movs	r3, #0
 800c038:	6363      	str	r3, [r4, #52]	@ 0x34
 800c03a:	89a3      	ldrh	r3, [r4, #12]
 800c03c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c040:	81a3      	strh	r3, [r4, #12]
 800c042:	2300      	movs	r3, #0
 800c044:	6063      	str	r3, [r4, #4]
 800c046:	6923      	ldr	r3, [r4, #16]
 800c048:	6023      	str	r3, [r4, #0]
 800c04a:	89a3      	ldrh	r3, [r4, #12]
 800c04c:	f043 0308 	orr.w	r3, r3, #8
 800c050:	81a3      	strh	r3, [r4, #12]
 800c052:	6923      	ldr	r3, [r4, #16]
 800c054:	b94b      	cbnz	r3, 800c06a <__swsetup_r+0x7a>
 800c056:	89a3      	ldrh	r3, [r4, #12]
 800c058:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c05c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c060:	d003      	beq.n	800c06a <__swsetup_r+0x7a>
 800c062:	4621      	mov	r1, r4
 800c064:	4628      	mov	r0, r5
 800c066:	f000 f883 	bl	800c170 <__smakebuf_r>
 800c06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c06e:	f013 0201 	ands.w	r2, r3, #1
 800c072:	d00a      	beq.n	800c08a <__swsetup_r+0x9a>
 800c074:	2200      	movs	r2, #0
 800c076:	60a2      	str	r2, [r4, #8]
 800c078:	6962      	ldr	r2, [r4, #20]
 800c07a:	4252      	negs	r2, r2
 800c07c:	61a2      	str	r2, [r4, #24]
 800c07e:	6922      	ldr	r2, [r4, #16]
 800c080:	b942      	cbnz	r2, 800c094 <__swsetup_r+0xa4>
 800c082:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c086:	d1c5      	bne.n	800c014 <__swsetup_r+0x24>
 800c088:	bd38      	pop	{r3, r4, r5, pc}
 800c08a:	0799      	lsls	r1, r3, #30
 800c08c:	bf58      	it	pl
 800c08e:	6962      	ldrpl	r2, [r4, #20]
 800c090:	60a2      	str	r2, [r4, #8]
 800c092:	e7f4      	b.n	800c07e <__swsetup_r+0x8e>
 800c094:	2000      	movs	r0, #0
 800c096:	e7f7      	b.n	800c088 <__swsetup_r+0x98>
 800c098:	2000001c 	.word	0x2000001c

0800c09c <_raise_r>:
 800c09c:	291f      	cmp	r1, #31
 800c09e:	b538      	push	{r3, r4, r5, lr}
 800c0a0:	4605      	mov	r5, r0
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	d904      	bls.n	800c0b0 <_raise_r+0x14>
 800c0a6:	2316      	movs	r3, #22
 800c0a8:	6003      	str	r3, [r0, #0]
 800c0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ae:	bd38      	pop	{r3, r4, r5, pc}
 800c0b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c0b2:	b112      	cbz	r2, 800c0ba <_raise_r+0x1e>
 800c0b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0b8:	b94b      	cbnz	r3, 800c0ce <_raise_r+0x32>
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f000 f830 	bl	800c120 <_getpid_r>
 800c0c0:	4622      	mov	r2, r4
 800c0c2:	4601      	mov	r1, r0
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0ca:	f000 b817 	b.w	800c0fc <_kill_r>
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d00a      	beq.n	800c0e8 <_raise_r+0x4c>
 800c0d2:	1c59      	adds	r1, r3, #1
 800c0d4:	d103      	bne.n	800c0de <_raise_r+0x42>
 800c0d6:	2316      	movs	r3, #22
 800c0d8:	6003      	str	r3, [r0, #0]
 800c0da:	2001      	movs	r0, #1
 800c0dc:	e7e7      	b.n	800c0ae <_raise_r+0x12>
 800c0de:	2100      	movs	r1, #0
 800c0e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	4798      	blx	r3
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	e7e0      	b.n	800c0ae <_raise_r+0x12>

0800c0ec <raise>:
 800c0ec:	4b02      	ldr	r3, [pc, #8]	@ (800c0f8 <raise+0xc>)
 800c0ee:	4601      	mov	r1, r0
 800c0f0:	6818      	ldr	r0, [r3, #0]
 800c0f2:	f7ff bfd3 	b.w	800c09c <_raise_r>
 800c0f6:	bf00      	nop
 800c0f8:	2000001c 	.word	0x2000001c

0800c0fc <_kill_r>:
 800c0fc:	b538      	push	{r3, r4, r5, lr}
 800c0fe:	4d07      	ldr	r5, [pc, #28]	@ (800c11c <_kill_r+0x20>)
 800c100:	2300      	movs	r3, #0
 800c102:	4604      	mov	r4, r0
 800c104:	4608      	mov	r0, r1
 800c106:	4611      	mov	r1, r2
 800c108:	602b      	str	r3, [r5, #0]
 800c10a:	f7f6 fbc9 	bl	80028a0 <_kill>
 800c10e:	1c43      	adds	r3, r0, #1
 800c110:	d102      	bne.n	800c118 <_kill_r+0x1c>
 800c112:	682b      	ldr	r3, [r5, #0]
 800c114:	b103      	cbz	r3, 800c118 <_kill_r+0x1c>
 800c116:	6023      	str	r3, [r4, #0]
 800c118:	bd38      	pop	{r3, r4, r5, pc}
 800c11a:	bf00      	nop
 800c11c:	200056a4 	.word	0x200056a4

0800c120 <_getpid_r>:
 800c120:	f7f6 bbb6 	b.w	8002890 <_getpid>

0800c124 <__swhatbuf_r>:
 800c124:	b570      	push	{r4, r5, r6, lr}
 800c126:	460c      	mov	r4, r1
 800c128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c12c:	2900      	cmp	r1, #0
 800c12e:	b096      	sub	sp, #88	@ 0x58
 800c130:	4615      	mov	r5, r2
 800c132:	461e      	mov	r6, r3
 800c134:	da0d      	bge.n	800c152 <__swhatbuf_r+0x2e>
 800c136:	89a3      	ldrh	r3, [r4, #12]
 800c138:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c13c:	f04f 0100 	mov.w	r1, #0
 800c140:	bf14      	ite	ne
 800c142:	2340      	movne	r3, #64	@ 0x40
 800c144:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c148:	2000      	movs	r0, #0
 800c14a:	6031      	str	r1, [r6, #0]
 800c14c:	602b      	str	r3, [r5, #0]
 800c14e:	b016      	add	sp, #88	@ 0x58
 800c150:	bd70      	pop	{r4, r5, r6, pc}
 800c152:	466a      	mov	r2, sp
 800c154:	f000 f848 	bl	800c1e8 <_fstat_r>
 800c158:	2800      	cmp	r0, #0
 800c15a:	dbec      	blt.n	800c136 <__swhatbuf_r+0x12>
 800c15c:	9901      	ldr	r1, [sp, #4]
 800c15e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c162:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c166:	4259      	negs	r1, r3
 800c168:	4159      	adcs	r1, r3
 800c16a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c16e:	e7eb      	b.n	800c148 <__swhatbuf_r+0x24>

0800c170 <__smakebuf_r>:
 800c170:	898b      	ldrh	r3, [r1, #12]
 800c172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c174:	079d      	lsls	r5, r3, #30
 800c176:	4606      	mov	r6, r0
 800c178:	460c      	mov	r4, r1
 800c17a:	d507      	bpl.n	800c18c <__smakebuf_r+0x1c>
 800c17c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	6123      	str	r3, [r4, #16]
 800c184:	2301      	movs	r3, #1
 800c186:	6163      	str	r3, [r4, #20]
 800c188:	b003      	add	sp, #12
 800c18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c18c:	ab01      	add	r3, sp, #4
 800c18e:	466a      	mov	r2, sp
 800c190:	f7ff ffc8 	bl	800c124 <__swhatbuf_r>
 800c194:	9f00      	ldr	r7, [sp, #0]
 800c196:	4605      	mov	r5, r0
 800c198:	4639      	mov	r1, r7
 800c19a:	4630      	mov	r0, r6
 800c19c:	f7fe fecc 	bl	800af38 <_malloc_r>
 800c1a0:	b948      	cbnz	r0, 800c1b6 <__smakebuf_r+0x46>
 800c1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1a6:	059a      	lsls	r2, r3, #22
 800c1a8:	d4ee      	bmi.n	800c188 <__smakebuf_r+0x18>
 800c1aa:	f023 0303 	bic.w	r3, r3, #3
 800c1ae:	f043 0302 	orr.w	r3, r3, #2
 800c1b2:	81a3      	strh	r3, [r4, #12]
 800c1b4:	e7e2      	b.n	800c17c <__smakebuf_r+0xc>
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	6020      	str	r0, [r4, #0]
 800c1ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1be:	81a3      	strh	r3, [r4, #12]
 800c1c0:	9b01      	ldr	r3, [sp, #4]
 800c1c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1c6:	b15b      	cbz	r3, 800c1e0 <__smakebuf_r+0x70>
 800c1c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	f000 f81d 	bl	800c20c <_isatty_r>
 800c1d2:	b128      	cbz	r0, 800c1e0 <__smakebuf_r+0x70>
 800c1d4:	89a3      	ldrh	r3, [r4, #12]
 800c1d6:	f023 0303 	bic.w	r3, r3, #3
 800c1da:	f043 0301 	orr.w	r3, r3, #1
 800c1de:	81a3      	strh	r3, [r4, #12]
 800c1e0:	89a3      	ldrh	r3, [r4, #12]
 800c1e2:	431d      	orrs	r5, r3
 800c1e4:	81a5      	strh	r5, [r4, #12]
 800c1e6:	e7cf      	b.n	800c188 <__smakebuf_r+0x18>

0800c1e8 <_fstat_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4d07      	ldr	r5, [pc, #28]	@ (800c208 <_fstat_r+0x20>)
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	4608      	mov	r0, r1
 800c1f2:	4611      	mov	r1, r2
 800c1f4:	602b      	str	r3, [r5, #0]
 800c1f6:	f7f6 fbb3 	bl	8002960 <_fstat>
 800c1fa:	1c43      	adds	r3, r0, #1
 800c1fc:	d102      	bne.n	800c204 <_fstat_r+0x1c>
 800c1fe:	682b      	ldr	r3, [r5, #0]
 800c200:	b103      	cbz	r3, 800c204 <_fstat_r+0x1c>
 800c202:	6023      	str	r3, [r4, #0]
 800c204:	bd38      	pop	{r3, r4, r5, pc}
 800c206:	bf00      	nop
 800c208:	200056a4 	.word	0x200056a4

0800c20c <_isatty_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	4d06      	ldr	r5, [pc, #24]	@ (800c228 <_isatty_r+0x1c>)
 800c210:	2300      	movs	r3, #0
 800c212:	4604      	mov	r4, r0
 800c214:	4608      	mov	r0, r1
 800c216:	602b      	str	r3, [r5, #0]
 800c218:	f7f6 fbb2 	bl	8002980 <_isatty>
 800c21c:	1c43      	adds	r3, r0, #1
 800c21e:	d102      	bne.n	800c226 <_isatty_r+0x1a>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	b103      	cbz	r3, 800c226 <_isatty_r+0x1a>
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	bd38      	pop	{r3, r4, r5, pc}
 800c228:	200056a4 	.word	0x200056a4

0800c22c <_init>:
 800c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22e:	bf00      	nop
 800c230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c232:	bc08      	pop	{r3}
 800c234:	469e      	mov	lr, r3
 800c236:	4770      	bx	lr

0800c238 <_fini>:
 800c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23a:	bf00      	nop
 800c23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c23e:	bc08      	pop	{r3}
 800c240:	469e      	mov	lr, r3
 800c242:	4770      	bx	lr
