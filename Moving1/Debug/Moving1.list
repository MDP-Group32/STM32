
Moving1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000103cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb8  08010560  08010560  00011560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011518  08011518  000131e0  2**0
                  CONTENTS
  4 .ARM          00000008  08011518  08011518  00012518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011520  08011520  000131e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011520  08011520  00012520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011524  08011524  00012524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08011528  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000131e0  2**0
                  CONTENTS
 10 .bss          00005208  200001e0  200001e0  000131e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200053e8  200053e8  000131e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000131e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e02d  00000000  00000000  00013210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f8a  00000000  00000000  0003123d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b78  00000000  00000000  000351c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001585  00000000  00000000  00036d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e92  00000000  00000000  000382c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f8d3  00000000  00000000  0005e157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9dcd  00000000  00000000  0007da2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001677f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008aa0  00000000  00000000  0016783c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001702dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010544 	.word	0x08010544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08010544 	.word	0x08010544

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <_ICM20948_SelectUserBank>:

#include "ICM20948.h"

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	@ 0x28
 8000fe8:	af04      	add	r7, sp, #16
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	460b      	mov	r3, r1
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8001000:	7afb      	ldrb	r3, [r7, #11]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <_ICM20948_SelectUserBank+0x26>
 8001006:	2368      	movs	r3, #104	@ 0x68
 8001008:	e000      	b.n	800100c <_ICM20948_SelectUserBank+0x28>
 800100a:	2369      	movs	r3, #105	@ 0x69
 800100c:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800100e:	7dbb      	ldrb	r3, [r7, #22]
 8001010:	b29b      	uxth	r3, r3
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	b299      	uxth	r1, r3
 8001016:	230a      	movs	r3, #10
 8001018:	9302      	str	r3, [sp, #8]
 800101a:	2301      	movs	r3, #1
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	f107 0315 	add.w	r3, r7, #21
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2301      	movs	r3, #1
 8001026:	227f      	movs	r2, #127	@ 0x7f
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f003 fea5 	bl	8004d78 <HAL_I2C_Mem_Write>
 800102e:	4603      	mov	r3, r0
 8001030:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001032:	7dfb      	ldrb	r3, [r7, #23]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af04      	add	r7, sp, #16
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	4608      	mov	r0, r1
 8001046:	4611      	mov	r1, r2
 8001048:	461a      	mov	r2, r3
 800104a:	4603      	mov	r3, r0
 800104c:	70fb      	strb	r3, [r7, #3]
 800104e:	460b      	mov	r3, r1
 8001050:	70bb      	strb	r3, [r7, #2]
 8001052:	4613      	mov	r3, r2
 8001054:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <_ICM20948_WriteByte+0x28>
 8001060:	2368      	movs	r3, #104	@ 0x68
 8001062:	e000      	b.n	8001066 <_ICM20948_WriteByte+0x2a>
 8001064:	2369      	movs	r3, #105	@ 0x69
 8001066:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	b29b      	uxth	r3, r3
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	b299      	uxth	r1, r3
 8001070:	78bb      	ldrb	r3, [r7, #2]
 8001072:	b29a      	uxth	r2, r3
 8001074:	230a      	movs	r3, #10
 8001076:	9302      	str	r3, [sp, #8]
 8001078:	2301      	movs	r3, #1
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	1c7b      	adds	r3, r7, #1
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f003 fe78 	bl	8004d78 <HAL_I2C_Mem_Write>
 8001088:	4603      	mov	r3, r0
 800108a:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_AK09916_WriteByte>:
			10);

	return status;
}

HAL_StatusTypeDef _AK09916_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData) {
 8001096:	b580      	push	{r7, lr}
 8001098:	b088      	sub	sp, #32
 800109a:	af04      	add	r7, sp, #16
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	460b      	mov	r3, r1
 80010a0:	70fb      	strb	r3, [r7, #3]
 80010a2:	4613      	mov	r3, r2
 80010a4:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	230a      	movs	r3, #10
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	2301      	movs	r3, #1
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	1cbb      	adds	r3, r7, #2
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	2118      	movs	r1, #24
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f003 fe5a 	bl	8004d78 <HAL_I2C_Mem_Write>
 80010c4:	4603      	mov	r3, r0
 80010c6:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity) {
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	4608      	mov	r0, r1
 80010dc:	4611      	mov	r1, r2
 80010de:	461a      	mov	r2, r3
 80010e0:	4603      	mov	r3, r0
 80010e2:	70fb      	strb	r3, [r7, #3]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70bb      	strb	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	2200      	movs	r2, #0
 80010f4:	4619      	mov	r1, r3
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff74 	bl	8000fe4 <_ICM20948_SelectUserBank>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8001100:	78f9      	ldrb	r1, [r7, #3]
 8001102:	2380      	movs	r3, #128	@ 0x80
 8001104:	2206      	movs	r2, #6
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff98 	bl	800103c <_ICM20948_WriteByte>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 8001110:	20c8      	movs	r0, #200	@ 0xc8
 8001112:	f002 ff0d 	bl	8003f30 <HAL_Delay>

	status = _ICM20948_WriteByte(
 8001116:	78f9      	ldrb	r1, [r7, #3]
 8001118:	2301      	movs	r3, #1
 800111a:	2206      	movs	r2, #6
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff8d 	bl	800103c <_ICM20948_WriteByte>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_AUTO_SELECT_CLOCK);

	//enable both gyroscope and accelerometer
	status = _ICM20948_WriteByte(
 8001126:	78f9      	ldrb	r1, [r7, #3]
 8001128:	2300      	movs	r3, #0
 800112a:	2207      	movs	r2, #7
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff85 	bl	800103c <_ICM20948_WriteByte>
 8001132:	4603      	mov	r3, r0
 8001134:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); // For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8001136:	78fb      	ldrb	r3, [r7, #3]
 8001138:	2202      	movs	r2, #2
 800113a:	4619      	mov	r1, r3
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff51 	bl	8000fe4 <_ICM20948_SelectUserBank>
 8001142:	4603      	mov	r3, r0
 8001144:	73fb      	strb	r3, [r7, #15]
	//gyroscope sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			0 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << GYRO_FS_SEL_BIT|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8001146:	78bb      	ldrb	r3, [r7, #2]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	b25b      	sxtb	r3, r3
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8001152:	b2db      	uxtb	r3, r3
 8001154:	78f9      	ldrb	r1, [r7, #3]
 8001156:	2201      	movs	r2, #1
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff6f 	bl	800103c <_ICM20948_WriteByte>
 800115e:	4603      	mov	r3, r0
 8001160:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8001162:	78f9      	ldrb	r1, [r7, #3]
 8001164:	2304      	movs	r3, #4
 8001166:	2200      	movs	r2, #0
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff67 	bl	800103c <_ICM20948_WriteByte>
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
	//accelerometer sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
			1 << ACCEL_DLPFCFG_BIT|selectAccelSensitivity << ACCEL_FS_SEL_BIT|0x01 << ACCEL_FCHOICE_BIT);
 8001172:	787b      	ldrb	r3, [r7, #1]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	b25b      	sxtb	r3, r3
 8001178:	f043 0309 	orr.w	r3, r3, #9
 800117c:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800117e:	b2db      	uxtb	r3, r3
 8001180:	78f9      	ldrb	r1, [r7, #3]
 8001182:	2214      	movs	r2, #20
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff59 	bl	800103c <_ICM20948_WriteByte>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 800118e:	78f9      	ldrb	r1, [r7, #3]
 8001190:	2304      	movs	r3, #4
 8001192:	2211      	movs	r2, #17
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff51 	bl	800103c <_ICM20948_WriteByte>
 800119a:	4603      	mov	r3, r0
 800119c:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
			4);


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	2200      	movs	r2, #0
 80011a2:	4619      	mov	r1, r3
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff1d 	bl	8000fe4 <_ICM20948_SelectUserBank>
 80011aa:	4603      	mov	r3, r0
 80011ac:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 80011ae:	78f9      	ldrb	r1, [r7, #3]
 80011b0:	2302      	movs	r3, #2
 80011b2:	220f      	movs	r2, #15
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff41 	bl	800103c <_ICM20948_WriteByte>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

	status = _AK09916_WriteByte(
 80011be:	2208      	movs	r2, #8
 80011c0:	2131      	movs	r1, #49	@ 0x31
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff67 	bl	8001096 <_AK09916_WriteByte>
 80011c8:	4603      	mov	r3, r0
 80011ca:	73fb      	strb	r3, [r7, #15]
			hi2c,
			AK09916__CNTL2__REGISTER,
			0x08);
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d8:	f002 fe38 	bl	8003e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011dc:	f000 f856 	bl	800128c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e0:	f000 fc28 	bl	8001a34 <MX_GPIO_Init>
  MX_TIM8_Init();
 80011e4:	f000 fb52 	bl	800188c <MX_TIM8_Init>
  MX_TIM2_Init();
 80011e8:	f000 fa1e 	bl	8001628 <MX_TIM2_Init>
  MX_TIM1_Init();
 80011ec:	f000 f97e 	bl	80014ec <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80011f0:	f000 fbf6 	bl	80019e0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80011f4:	f000 fa6c 	bl	80016d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011f8:	f000 fabe 	bl	8001778 <MX_TIM4_Init>
  MX_TIM6_Init();
 80011fc:	f000 fb10 	bl	8001820 <MX_TIM6_Init>
  MX_ADC1_Init();
 8001200:	f000 f8a2 	bl	8001348 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001204:	f000 f8f2 	bl	80013ec <MX_ADC2_Init>
  MX_I2C1_Init();
 8001208:	f000 f942 	bl	8001490 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800120c:	f00a fd82 	bl	800bd14 <OLED_Init>
//  IMU_init();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001210:	f007 fe58 	bl	8008ec4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001214:	4a11      	ldr	r2, [pc, #68]	@ (800125c <main+0x88>)
 8001216:	2100      	movs	r1, #0
 8001218:	4811      	ldr	r0, [pc, #68]	@ (8001260 <main+0x8c>)
 800121a:	f007 fe9d 	bl	8008f58 <osThreadNew>
 800121e:	4603      	mov	r3, r0
 8001220:	4a10      	ldr	r2, [pc, #64]	@ (8001264 <main+0x90>)
 8001222:	6013      	str	r3, [r2, #0]

  /* creation of UART_Thread */
  UART_ThreadHandle = osThreadNew(Uart_Function, NULL, &UART_Thread_attributes);
 8001224:	4a10      	ldr	r2, [pc, #64]	@ (8001268 <main+0x94>)
 8001226:	2100      	movs	r1, #0
 8001228:	4810      	ldr	r0, [pc, #64]	@ (800126c <main+0x98>)
 800122a:	f007 fe95 	bl	8008f58 <osThreadNew>
 800122e:	4603      	mov	r3, r0
 8001230:	4a0f      	ldr	r2, [pc, #60]	@ (8001270 <main+0x9c>)
 8001232:	6013      	str	r3, [r2, #0]

  /* creation of Gyroscope */
  GyroscopeHandle = osThreadNew(GyroSensor, NULL, &Gyroscope_attributes);
 8001234:	4a0f      	ldr	r2, [pc, #60]	@ (8001274 <main+0xa0>)
 8001236:	2100      	movs	r1, #0
 8001238:	480f      	ldr	r0, [pc, #60]	@ (8001278 <main+0xa4>)
 800123a:	f007 fe8d 	bl	8008f58 <osThreadNew>
 800123e:	4603      	mov	r3, r0
 8001240:	4a0e      	ldr	r2, [pc, #56]	@ (800127c <main+0xa8>)
 8001242:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(encoder, NULL, &Encoder_attributes);
 8001244:	4a0e      	ldr	r2, [pc, #56]	@ (8001280 <main+0xac>)
 8001246:	2100      	movs	r1, #0
 8001248:	480e      	ldr	r0, [pc, #56]	@ (8001284 <main+0xb0>)
 800124a:	f007 fe85 	bl	8008f58 <osThreadNew>
 800124e:	4603      	mov	r3, r0
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <main+0xb4>)
 8001252:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001254:	f007 fe5a 	bl	8008f0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <main+0x84>
 800125c:	080105e0 	.word	0x080105e0
 8001260:	080030d1 	.word	0x080030d1
 8001264:	200004d8 	.word	0x200004d8
 8001268:	08010604 	.word	0x08010604
 800126c:	080030e1 	.word	0x080030e1
 8001270:	200004dc 	.word	0x200004dc
 8001274:	08010628 	.word	0x08010628
 8001278:	080033c5 	.word	0x080033c5
 800127c:	200004e0 	.word	0x200004e0
 8001280:	0801064c 	.word	0x0801064c
 8001284:	08003595 	.word	0x08003595
 8001288:	200004e4 	.word	0x200004e4

0800128c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b094      	sub	sp, #80	@ 0x50
 8001290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	2230      	movs	r2, #48	@ 0x30
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f00b fe97 	bl	800cfce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	4b22      	ldr	r3, [pc, #136]	@ (8001340 <SystemClock_Config+0xb4>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	4a21      	ldr	r2, [pc, #132]	@ (8001340 <SystemClock_Config+0xb4>)
 80012ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012be:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <SystemClock_Config+0xb4>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <SystemClock_Config+0xb8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001344 <SystemClock_Config+0xb8>)
 80012d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <SystemClock_Config+0xb8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e8:	2302      	movs	r3, #2
 80012ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ec:	2301      	movs	r3, #1
 80012ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f0:	2310      	movs	r3, #16
 80012f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f8:	f107 0320 	add.w	r3, r7, #32
 80012fc:	4618      	mov	r0, r3
 80012fe:	f004 fc43 	bl	8005b88 <HAL_RCC_OscConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001308:	f002 f98c 	bl	8003624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130c:	230f      	movs	r3, #15
 800130e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f004 fea6 	bl	8006078 <HAL_RCC_ClockConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001332:	f002 f977 	bl	8003624 <Error_Handler>
  }
}
 8001336:	bf00      	nop
 8001338:	3750      	adds	r7, #80	@ 0x50
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40007000 	.word	0x40007000

08001348 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800134e:	463b      	mov	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800135a:	4b21      	ldr	r3, [pc, #132]	@ (80013e0 <MX_ADC1_Init+0x98>)
 800135c:	4a21      	ldr	r2, [pc, #132]	@ (80013e4 <MX_ADC1_Init+0x9c>)
 800135e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001360:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <MX_ADC1_Init+0x98>)
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001366:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <MX_ADC1_Init+0x98>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800136c:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <MX_ADC1_Init+0x98>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001372:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <MX_ADC1_Init+0x98>)
 8001374:	2200      	movs	r2, #0
 8001376:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001378:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <MX_ADC1_Init+0x98>)
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001380:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MX_ADC1_Init+0x98>)
 8001382:	2200      	movs	r2, #0
 8001384:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001386:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <MX_ADC1_Init+0x98>)
 8001388:	4a17      	ldr	r2, [pc, #92]	@ (80013e8 <MX_ADC1_Init+0xa0>)
 800138a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <MX_ADC1_Init+0x98>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001392:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <MX_ADC1_Init+0x98>)
 8001394:	2201      	movs	r2, #1
 8001396:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_ADC1_Init+0x98>)
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MX_ADC1_Init+0x98>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013a6:	480e      	ldr	r0, [pc, #56]	@ (80013e0 <MX_ADC1_Init+0x98>)
 80013a8:	f002 fde6 	bl	8003f78 <HAL_ADC_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013b2:	f002 f937 	bl	8003624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013b6:	230b      	movs	r3, #11
 80013b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013ba:	2301      	movs	r3, #1
 80013bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c2:	463b      	mov	r3, r7
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	@ (80013e0 <MX_ADC1_Init+0x98>)
 80013c8:	f002 fe1a 	bl	8004000 <HAL_ADC_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013d2:	f002 f927 	bl	8003624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200001fc 	.word	0x200001fc
 80013e4:	40012000 	.word	0x40012000
 80013e8:	0f000001 	.word	0x0f000001

080013ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f2:	463b      	mov	r3, r7
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80013fe:	4b21      	ldr	r3, [pc, #132]	@ (8001484 <MX_ADC2_Init+0x98>)
 8001400:	4a21      	ldr	r2, [pc, #132]	@ (8001488 <MX_ADC2_Init+0x9c>)
 8001402:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001404:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <MX_ADC2_Init+0x98>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800140a:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <MX_ADC2_Init+0x98>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <MX_ADC2_Init+0x98>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001416:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <MX_ADC2_Init+0x98>)
 8001418:	2200      	movs	r2, #0
 800141a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800141c:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <MX_ADC2_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <MX_ADC2_Init+0x98>)
 8001426:	2200      	movs	r2, #0
 8001428:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <MX_ADC2_Init+0x98>)
 800142c:	4a17      	ldr	r2, [pc, #92]	@ (800148c <MX_ADC2_Init+0xa0>)
 800142e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <MX_ADC2_Init+0x98>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <MX_ADC2_Init+0x98>)
 8001438:	2201      	movs	r2, #1
 800143a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <MX_ADC2_Init+0x98>)
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <MX_ADC2_Init+0x98>)
 8001446:	2201      	movs	r2, #1
 8001448:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800144a:	480e      	ldr	r0, [pc, #56]	@ (8001484 <MX_ADC2_Init+0x98>)
 800144c:	f002 fd94 	bl	8003f78 <HAL_ADC_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001456:	f002 f8e5 	bl	8003624 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800145a:	230c      	movs	r3, #12
 800145c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800145e:	2301      	movs	r3, #1
 8001460:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	@ (8001484 <MX_ADC2_Init+0x98>)
 800146c:	f002 fdc8 	bl	8004000 <HAL_ADC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001476:	f002 f8d5 	bl	8003624 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000244 	.word	0x20000244
 8001488:	40012100 	.word	0x40012100
 800148c:	0f000001 	.word	0x0f000001

08001490 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <MX_I2C1_Init+0x50>)
 8001496:	4a13      	ldr	r2, [pc, #76]	@ (80014e4 <MX_I2C1_Init+0x54>)
 8001498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_I2C1_Init+0x50>)
 800149c:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <MX_I2C1_Init+0x58>)
 800149e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c0:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014ce:	f003 fb0f 	bl	8004af0 <HAL_I2C_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014d8:	f002 f8a4 	bl	8003624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000028c 	.word	0x2000028c
 80014e4:	40005400 	.word	0x40005400
 80014e8:	00061a80 	.word	0x00061a80

080014ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b096      	sub	sp, #88	@ 0x58
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	615a      	str	r2, [r3, #20]
 800151c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2220      	movs	r2, #32
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f00b fd52 	bl	800cfce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800152a:	4b3d      	ldr	r3, [pc, #244]	@ (8001620 <MX_TIM1_Init+0x134>)
 800152c:	4a3d      	ldr	r2, [pc, #244]	@ (8001624 <MX_TIM1_Init+0x138>)
 800152e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001530:	4b3b      	ldr	r3, [pc, #236]	@ (8001620 <MX_TIM1_Init+0x134>)
 8001532:	22a0      	movs	r2, #160	@ 0xa0
 8001534:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001536:	4b3a      	ldr	r3, [pc, #232]	@ (8001620 <MX_TIM1_Init+0x134>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800153c:	4b38      	ldr	r3, [pc, #224]	@ (8001620 <MX_TIM1_Init+0x134>)
 800153e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001542:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001544:	4b36      	ldr	r3, [pc, #216]	@ (8001620 <MX_TIM1_Init+0x134>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800154a:	4b35      	ldr	r3, [pc, #212]	@ (8001620 <MX_TIM1_Init+0x134>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001550:	4b33      	ldr	r3, [pc, #204]	@ (8001620 <MX_TIM1_Init+0x134>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001556:	4832      	ldr	r0, [pc, #200]	@ (8001620 <MX_TIM1_Init+0x134>)
 8001558:	f004 ff6e 	bl	8006438 <HAL_TIM_Base_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001562:	f002 f85f 	bl	8003624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001566:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800156c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001570:	4619      	mov	r1, r3
 8001572:	482b      	ldr	r0, [pc, #172]	@ (8001620 <MX_TIM1_Init+0x134>)
 8001574:	f005 fdc0 	bl	80070f8 <HAL_TIM_ConfigClockSource>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800157e:	f002 f851 	bl	8003624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001582:	4827      	ldr	r0, [pc, #156]	@ (8001620 <MX_TIM1_Init+0x134>)
 8001584:	f004 ffa7 	bl	80064d6 <HAL_TIM_PWM_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800158e:	f002 f849 	bl	8003624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800159a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800159e:	4619      	mov	r1, r3
 80015a0:	481f      	ldr	r0, [pc, #124]	@ (8001620 <MX_TIM1_Init+0x134>)
 80015a2:	f006 fb23 	bl	8007bec <HAL_TIMEx_MasterConfigSynchronization>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015ac:	f002 f83a 	bl	8003624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b0:	2360      	movs	r3, #96	@ 0x60
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015cc:	220c      	movs	r2, #12
 80015ce:	4619      	mov	r1, r3
 80015d0:	4813      	ldr	r0, [pc, #76]	@ (8001620 <MX_TIM1_Init+0x134>)
 80015d2:	f005 fccf 	bl	8006f74 <HAL_TIM_PWM_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80015dc:	f002 f822 	bl	8003624 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4619      	mov	r1, r3
 8001602:	4807      	ldr	r0, [pc, #28]	@ (8001620 <MX_TIM1_Init+0x134>)
 8001604:	f006 fb6e 	bl	8007ce4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800160e:	f002 f809 	bl	8003624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001612:	4803      	ldr	r0, [pc, #12]	@ (8001620 <MX_TIM1_Init+0x134>)
 8001614:	f002 fa52 	bl	8003abc <HAL_TIM_MspPostInit>

}
 8001618:	bf00      	nop
 800161a:	3758      	adds	r7, #88	@ 0x58
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200002e0 	.word	0x200002e0
 8001624:	40010000 	.word	0x40010000

08001628 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08c      	sub	sp, #48	@ 0x30
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	2224      	movs	r2, #36	@ 0x24
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f00b fcc9 	bl	800cfce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001644:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <MX_TIM2_Init+0xa4>)
 8001646:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800164a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800164c:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <MX_TIM2_Init+0xa4>)
 800164e:	2200      	movs	r2, #0
 8001650:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <MX_TIM2_Init+0xa4>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001658:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <MX_TIM2_Init+0xa4>)
 800165a:	f04f 32ff 	mov.w	r2, #4294967295
 800165e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001660:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <MX_TIM2_Init+0xa4>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001666:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <MX_TIM2_Init+0xa4>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800166c:	2303      	movs	r3, #3
 800166e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001674:	2301      	movs	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001684:	2301      	movs	r3, #1
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4619      	mov	r1, r3
 8001696:	480d      	ldr	r0, [pc, #52]	@ (80016cc <MX_TIM2_Init+0xa4>)
 8001698:	f005 f9ac 	bl	80069f4 <HAL_TIM_Encoder_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80016a2:	f001 ffbf 	bl	8003624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4806      	ldr	r0, [pc, #24]	@ (80016cc <MX_TIM2_Init+0xa4>)
 80016b4:	f006 fa9a 	bl	8007bec <HAL_TIMEx_MasterConfigSynchronization>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80016be:	f001 ffb1 	bl	8003624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	3730      	adds	r7, #48	@ 0x30
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000328 	.word	0x20000328

080016d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	@ 0x30
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	2224      	movs	r2, #36	@ 0x24
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f00b fc75 	bl	800cfce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ec:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <MX_TIM3_Init+0xa0>)
 80016ee:	4a21      	ldr	r2, [pc, #132]	@ (8001774 <MX_TIM3_Init+0xa4>)
 80016f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001770 <MX_TIM3_Init+0xa0>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001770 <MX_TIM3_Init+0xa0>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001770 <MX_TIM3_Init+0xa0>)
 8001700:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001704:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001706:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <MX_TIM3_Init+0xa0>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170c:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <MX_TIM3_Init+0xa0>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001712:	2301      	movs	r3, #1
 8001714:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800171a:	2301      	movs	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800172a:	2301      	movs	r3, #1
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800172e:	2300      	movs	r3, #0
 8001730:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	4619      	mov	r1, r3
 800173c:	480c      	ldr	r0, [pc, #48]	@ (8001770 <MX_TIM3_Init+0xa0>)
 800173e:	f005 f959 	bl	80069f4 <HAL_TIM_Encoder_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001748:	f001 ff6c 	bl	8003624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	4619      	mov	r1, r3
 8001758:	4805      	ldr	r0, [pc, #20]	@ (8001770 <MX_TIM3_Init+0xa0>)
 800175a:	f006 fa47 	bl	8007bec <HAL_TIMEx_MasterConfigSynchronization>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001764:	f001 ff5e 	bl	8003624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	3730      	adds	r7, #48	@ 0x30
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000370 	.word	0x20000370
 8001774:	40000400 	.word	0x40000400

08001778 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001788:	463b      	mov	r3, r7
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001794:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <MX_TIM4_Init+0xa0>)
 8001796:	4a21      	ldr	r2, [pc, #132]	@ (800181c <MX_TIM4_Init+0xa4>)
 8001798:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800179a:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <MX_TIM4_Init+0xa0>)
 800179c:	220f      	movs	r2, #15
 800179e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001818 <MX_TIM4_Init+0xa0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001818 <MX_TIM4_Init+0xa0>)
 80017a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <MX_TIM4_Init+0xa0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b4:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <MX_TIM4_Init+0xa0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80017ba:	4817      	ldr	r0, [pc, #92]	@ (8001818 <MX_TIM4_Init+0xa0>)
 80017bc:	f005 f81c 	bl	80067f8 <HAL_TIM_IC_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80017c6:	f001 ff2d 	bl	8003624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	4619      	mov	r1, r3
 80017d8:	480f      	ldr	r0, [pc, #60]	@ (8001818 <MX_TIM4_Init+0xa0>)
 80017da:	f006 fa07 	bl	8007bec <HAL_TIMEx_MasterConfigSynchronization>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80017e4:	f001 ff1e 	bl	8003624 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80017e8:	230a      	movs	r3, #10
 80017ea:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017ec:	2301      	movs	r3, #1
 80017ee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017f8:	463b      	mov	r3, r7
 80017fa:	2200      	movs	r2, #0
 80017fc:	4619      	mov	r1, r3
 80017fe:	4806      	ldr	r0, [pc, #24]	@ (8001818 <MX_TIM4_Init+0xa0>)
 8001800:	f005 fb1c 	bl	8006e3c <HAL_TIM_IC_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800180a:	f001 ff0b 	bl	8003624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200003b8 	.word	0x200003b8
 800181c:	40000800 	.word	0x40000800

08001820 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001826:	463b      	mov	r3, r7
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <MX_TIM6_Init+0x64>)
 8001830:	4a15      	ldr	r2, [pc, #84]	@ (8001888 <MX_TIM6_Init+0x68>)
 8001832:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8001834:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <MX_TIM6_Init+0x64>)
 8001836:	220f      	movs	r2, #15
 8001838:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <MX_TIM6_Init+0x64>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001840:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <MX_TIM6_Init+0x64>)
 8001842:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001846:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001848:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <MX_TIM6_Init+0x64>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800184e:	480d      	ldr	r0, [pc, #52]	@ (8001884 <MX_TIM6_Init+0x64>)
 8001850:	f004 fdf2 	bl	8006438 <HAL_TIM_Base_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800185a:	f001 fee3 	bl	8003624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001866:	463b      	mov	r3, r7
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	@ (8001884 <MX_TIM6_Init+0x64>)
 800186c:	f006 f9be 	bl	8007bec <HAL_TIMEx_MasterConfigSynchronization>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001876:	f001 fed5 	bl	8003624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000400 	.word	0x20000400
 8001888:	40001000 	.word	0x40001000

0800188c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b096      	sub	sp, #88	@ 0x58
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001892:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	611a      	str	r2, [r3, #16]
 80018ba:	615a      	str	r2, [r3, #20]
 80018bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2220      	movs	r2, #32
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f00b fb82 	bl	800cfce <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018ca:	4b43      	ldr	r3, [pc, #268]	@ (80019d8 <MX_TIM8_Init+0x14c>)
 80018cc:	4a43      	ldr	r2, [pc, #268]	@ (80019dc <MX_TIM8_Init+0x150>)
 80018ce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80018d0:	4b41      	ldr	r3, [pc, #260]	@ (80019d8 <MX_TIM8_Init+0x14c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d6:	4b40      	ldr	r3, [pc, #256]	@ (80019d8 <MX_TIM8_Init+0x14c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80018dc:	4b3e      	ldr	r3, [pc, #248]	@ (80019d8 <MX_TIM8_Init+0x14c>)
 80018de:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80018e2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e4:	4b3c      	ldr	r3, [pc, #240]	@ (80019d8 <MX_TIM8_Init+0x14c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018ea:	4b3b      	ldr	r3, [pc, #236]	@ (80019d8 <MX_TIM8_Init+0x14c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f0:	4b39      	ldr	r3, [pc, #228]	@ (80019d8 <MX_TIM8_Init+0x14c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80018f6:	4838      	ldr	r0, [pc, #224]	@ (80019d8 <MX_TIM8_Init+0x14c>)
 80018f8:	f004 fd9e 	bl	8006438 <HAL_TIM_Base_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001902:	f001 fe8f 	bl	8003624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800190a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800190c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001910:	4619      	mov	r1, r3
 8001912:	4831      	ldr	r0, [pc, #196]	@ (80019d8 <MX_TIM8_Init+0x14c>)
 8001914:	f005 fbf0 	bl	80070f8 <HAL_TIM_ConfigClockSource>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800191e:	f001 fe81 	bl	8003624 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001922:	482d      	ldr	r0, [pc, #180]	@ (80019d8 <MX_TIM8_Init+0x14c>)
 8001924:	f004 fdd7 	bl	80064d6 <HAL_TIM_PWM_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800192e:	f001 fe79 	bl	8003624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800193a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800193e:	4619      	mov	r1, r3
 8001940:	4825      	ldr	r0, [pc, #148]	@ (80019d8 <MX_TIM8_Init+0x14c>)
 8001942:	f006 f953 	bl	8007bec <HAL_TIMEx_MasterConfigSynchronization>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800194c:	f001 fe6a 	bl	8003624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001950:	2360      	movs	r3, #96	@ 0x60
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800195c:	2300      	movs	r3, #0
 800195e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001970:	2200      	movs	r2, #0
 8001972:	4619      	mov	r1, r3
 8001974:	4818      	ldr	r0, [pc, #96]	@ (80019d8 <MX_TIM8_Init+0x14c>)
 8001976:	f005 fafd 	bl	8006f74 <HAL_TIM_PWM_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001980:	f001 fe50 	bl	8003624 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001988:	2204      	movs	r2, #4
 800198a:	4619      	mov	r1, r3
 800198c:	4812      	ldr	r0, [pc, #72]	@ (80019d8 <MX_TIM8_Init+0x14c>)
 800198e:	f005 faf1 	bl	8006f74 <HAL_TIM_PWM_ConfigChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001998:	f001 fe44 	bl	8003624 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	4619      	mov	r1, r3
 80019be:	4806      	ldr	r0, [pc, #24]	@ (80019d8 <MX_TIM8_Init+0x14c>)
 80019c0:	f006 f990 	bl	8007ce4 <HAL_TIMEx_ConfigBreakDeadTime>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80019ca:	f001 fe2b 	bl	8003624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	3758      	adds	r7, #88	@ 0x58
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000448 	.word	0x20000448
 80019dc:	40010400 	.word	0x40010400

080019e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <MX_USART3_UART_Init+0x4c>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <MX_USART3_UART_Init+0x50>)
 80019e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <MX_USART3_UART_Init+0x4c>)
 80019ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <MX_USART3_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <MX_USART3_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <MX_USART3_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <MX_USART3_UART_Init+0x4c>)
 8001a06:	220c      	movs	r2, #12
 8001a08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <MX_USART3_UART_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <MX_USART3_UART_Init+0x4c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <MX_USART3_UART_Init+0x4c>)
 8001a18:	f006 f9ca 	bl	8007db0 <HAL_UART_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a22:	f001 fdff 	bl	8003624 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000490 	.word	0x20000490
 8001a30:	40004800 	.word	0x40004800

08001a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	@ 0x28
 8001a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b52      	ldr	r3, [pc, #328]	@ (8001b98 <MX_GPIO_Init+0x164>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	4a51      	ldr	r2, [pc, #324]	@ (8001b98 <MX_GPIO_Init+0x164>)
 8001a54:	f043 0310 	orr.w	r3, r3, #16
 8001a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001b98 <MX_GPIO_Init+0x164>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b98 <MX_GPIO_Init+0x164>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8001b98 <MX_GPIO_Init+0x164>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b48      	ldr	r3, [pc, #288]	@ (8001b98 <MX_GPIO_Init+0x164>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b44      	ldr	r3, [pc, #272]	@ (8001b98 <MX_GPIO_Init+0x164>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	4a43      	ldr	r2, [pc, #268]	@ (8001b98 <MX_GPIO_Init+0x164>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a92:	4b41      	ldr	r3, [pc, #260]	@ (8001b98 <MX_GPIO_Init+0x164>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8001b98 <MX_GPIO_Init+0x164>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a3c      	ldr	r2, [pc, #240]	@ (8001b98 <MX_GPIO_Init+0x164>)
 8001aa8:	f043 0308 	orr.w	r3, r3, #8
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b3a      	ldr	r3, [pc, #232]	@ (8001b98 <MX_GPIO_Init+0x164>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4b36      	ldr	r3, [pc, #216]	@ (8001b98 <MX_GPIO_Init+0x164>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	4a35      	ldr	r2, [pc, #212]	@ (8001b98 <MX_GPIO_Init+0x164>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aca:	4b33      	ldr	r3, [pc, #204]	@ (8001b98 <MX_GPIO_Init+0x164>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 8001adc:	482f      	ldr	r0, [pc, #188]	@ (8001b9c <MX_GPIO_Init+0x168>)
 8001ade:	f002 ffed 	bl	8004abc <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	213c      	movs	r1, #60	@ 0x3c
 8001ae6:	482e      	ldr	r0, [pc, #184]	@ (8001ba0 <MX_GPIO_Init+0x16c>)
 8001ae8:	f002 ffe8 	bl	8004abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001af2:	482c      	ldr	r0, [pc, #176]	@ (8001ba4 <MX_GPIO_Init+0x170>)
 8001af4:	f002 ffe2 	bl	8004abc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001af8:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 8001afc:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afe:	2301      	movs	r3, #1
 8001b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4822      	ldr	r0, [pc, #136]	@ (8001b9c <MX_GPIO_Init+0x168>)
 8001b12:	f002 fe37 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 8001b16:	230c      	movs	r3, #12
 8001b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b22:	2302      	movs	r3, #2
 8001b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	481c      	ldr	r0, [pc, #112]	@ (8001ba0 <MX_GPIO_Init+0x16c>)
 8001b2e:	f002 fe29 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 8001b32:	2330      	movs	r3, #48	@ 0x30
 8001b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4815      	ldr	r0, [pc, #84]	@ (8001ba0 <MX_GPIO_Init+0x16c>)
 8001b4a:	f002 fe1b 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001b4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	480f      	ldr	r0, [pc, #60]	@ (8001ba4 <MX_GPIO_Init+0x170>)
 8001b68:	f002 fe0c 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b6c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b7e:	2307      	movs	r3, #7
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <MX_GPIO_Init+0x16c>)
 8001b8a:	f002 fdfb 	bl	8004784 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	@ 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	40020c00 	.word	0x40020c00

08001ba8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	//Convert string recieved in sizeBuffer to integer
	if(bufferSize == 0 && startFlag == 0){
 8001bb0:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <HAL_UART_RxCpltCallback+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d121      	bne.n	8001bfc <HAL_UART_RxCpltCallback+0x54>
 8001bb8:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <HAL_UART_RxCpltCallback+0x68>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d11d      	bne.n	8001bfc <HAL_UART_RxCpltCallback+0x54>
		//HAL_UART_Transmit(&huart3, &sizeBuffer, 4, 1000);
		bufferSize = atoi(sizeBuffer);
 8001bc0:	4814      	ldr	r0, [pc, #80]	@ (8001c14 <HAL_UART_RxCpltCallback+0x6c>)
 8001bc2:	f00a f933 	bl	800be2c <atoi>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4a10      	ldr	r2, [pc, #64]	@ (8001c0c <HAL_UART_RxCpltCallback+0x64>)
 8001bca:	6013      	str	r3, [r2, #0]
		instructionIndex = bufferSize;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <HAL_UART_RxCpltCallback+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <HAL_UART_RxCpltCallback+0x70>)
 8001bd4:	601a      	str	r2, [r3, #0]
		instructionBuffer = (uint8_t*)malloc(bufferSize * sizeof(uint8_t)); //Allocate memory dynamically for instructionBuffer
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c0c <HAL_UART_RxCpltCallback+0x64>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f00a f92a 	bl	800be34 <malloc>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <HAL_UART_RxCpltCallback+0x74>)
 8001be6:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, instructionBuffer, bufferSize);
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <HAL_UART_RxCpltCallback+0x74>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a07      	ldr	r2, [pc, #28]	@ (8001c0c <HAL_UART_RxCpltCallback+0x64>)
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	b292      	uxth	r2, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480a      	ldr	r0, [pc, #40]	@ (8001c20 <HAL_UART_RxCpltCallback+0x78>)
 8001bf6:	f006 f9b6 	bl	8007f66 <HAL_UART_Receive_IT>
	if(bufferSize == 0 && startFlag == 0){
 8001bfa:	e003      	b.n	8001c04 <HAL_UART_RxCpltCallback+0x5c>
	}
	else{
		startFlag = 1;
 8001bfc:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <HAL_UART_RxCpltCallback+0x68>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
//    	}
//    }
//    else{
//    	startFlag = 1;
//    }
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200004ec 	.word	0x200004ec
 8001c10:	200004e8 	.word	0x200004e8
 8001c14:	20000004 	.word	0x20000004
 8001c18:	200004f4 	.word	0x200004f4
 8001c1c:	200004f0 	.word	0x200004f0
 8001c20:	20000490 	.word	0x20000490
 8001c24:	00000000 	.word	0x00000000

08001c28 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

	static int tc1, tc2, first=0, echo = 0;
	char buf[15];
	if(htim==&htim4){
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a4d      	ldr	r2, [pc, #308]	@ (8001d68 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	f040 808e 	bne.w	8001d56 <HAL_TIM_IC_CaptureCallback+0x12e>

		if (first == 0){
 8001c3a:	4b4c      	ldr	r3, [pc, #304]	@ (8001d6c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d11b      	bne.n	8001c7a <HAL_TIM_IC_CaptureCallback+0x52>
			tc1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001c42:	2100      	movs	r1, #0
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f005 fb1f 	bl	8007288 <HAL_TIM_ReadCapturedValue>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b48      	ldr	r3, [pc, #288]	@ (8001d70 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001c50:	601a      	str	r2, [r3, #0]
			first=1;
 8001c52:	4b46      	ldr	r3, [pc, #280]	@ (8001d6c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6a1a      	ldr	r2, [r3, #32]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 020a 	bic.w	r2, r2, #10
 8001c66:	621a      	str	r2, [r3, #32]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6a1a      	ldr	r2, [r3, #32]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0202 	orr.w	r2, r2, #2
 8001c76:	621a      	str	r2, [r3, #32]
			first=0;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
		}
	}
}
 8001c78:	e06d      	b.n	8001d56 <HAL_TIM_IC_CaptureCallback+0x12e>
		else if (first == 1){
 8001c7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d6c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d169      	bne.n	8001d56 <HAL_TIM_IC_CaptureCallback+0x12e>
			tc2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001c82:	2100      	movs	r1, #0
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f005 faff 	bl	8007288 <HAL_TIM_ReadCapturedValue>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b39      	ldr	r3, [pc, #228]	@ (8001d74 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001c90:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	@ 0x24
			if(tc2 >= tc1){
 8001c9a:	4b36      	ldr	r3, [pc, #216]	@ (8001d74 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4b34      	ldr	r3, [pc, #208]	@ (8001d70 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	db07      	blt.n	8001cb6 <HAL_TIM_IC_CaptureCallback+0x8e>
				echo = tc2 - tc1;
 8001ca6:	4b33      	ldr	r3, [pc, #204]	@ (8001d74 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4b31      	ldr	r3, [pc, #196]	@ (8001d70 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	4a31      	ldr	r2, [pc, #196]	@ (8001d78 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	e009      	b.n	8001cca <HAL_TIM_IC_CaptureCallback+0xa2>
				echo = (0xffff - tc1) + tc2;
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d70 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001cbe:	33ff      	adds	r3, #255	@ 0xff
 8001cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8001d74 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8001d78 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001cc8:	6013      	str	r3, [r2, #0]
			sprintf(buf, "Echo = %5dus", echo);
 8001cca:	4b2b      	ldr	r3, [pc, #172]	@ (8001d78 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	f107 0308 	add.w	r3, r7, #8
 8001cd2:	492a      	ldr	r1, [pc, #168]	@ (8001d7c <HAL_TIM_IC_CaptureCallback+0x154>)
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f00b f917 	bl	800cf08 <siprintf>
			OLED_ShowString(10, 40, &buf[0]);
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	461a      	mov	r2, r3
 8001ce0:	2128      	movs	r1, #40	@ 0x28
 8001ce2:	200a      	movs	r0, #10
 8001ce4:	f009 ffe4 	bl	800bcb0 <OLED_ShowString>
			OLED_Refresh_Gram();
 8001ce8:	f009 fe6e 	bl	800b9c8 <OLED_Refresh_Gram>
			detectedDistance = echo * (0.0343/2);
 8001cec:	4b22      	ldr	r3, [pc, #136]	@ (8001d78 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc17 	bl	8000524 <__aeabi_i2d>
 8001cf6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001d60 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fc7c 	bl	80005f8 <__aeabi_dmul>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	491e      	ldr	r1, [pc, #120]	@ (8001d80 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001d06:	e9c1 2300 	strd	r2, r3, [r1]
			sprintf(buf, "Dist = %5.1fcm", detectedDistance);
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d10:	f107 0008 	add.w	r0, r7, #8
 8001d14:	491b      	ldr	r1, [pc, #108]	@ (8001d84 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8001d16:	f00b f8f7 	bl	800cf08 <siprintf>
			OLED_ShowString(10, 50, &buf[0]);
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2132      	movs	r1, #50	@ 0x32
 8001d22:	200a      	movs	r0, #10
 8001d24:	f009 ffc4 	bl	800bcb0 <OLED_ShowString>
			OLED_Refresh_Gram();
 8001d28:	f009 fe4e 	bl	800b9c8 <OLED_Refresh_Gram>
			first=0;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6a1a      	ldr	r2, [r3, #32]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 020a 	bic.w	r2, r2, #10
 8001d40:	621a      	str	r2, [r3, #32]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6a12      	ldr	r2, [r2, #32]
 8001d4c:	621a      	str	r2, [r3, #32]
			HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4805      	ldr	r0, [pc, #20]	@ (8001d68 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001d52:	f004 fda1 	bl	8006898 <HAL_TIM_IC_Stop_IT>
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	04816f00 	.word	0x04816f00
 8001d64:	3f918fc5 	.word	0x3f918fc5
 8001d68:	200003b8 	.word	0x200003b8
 8001d6c:	20000534 	.word	0x20000534
 8001d70:	20000538 	.word	0x20000538
 8001d74:	2000053c 	.word	0x2000053c
 8001d78:	20000540 	.word	0x20000540
 8001d7c:	0801058c 	.word	0x0801058c
 8001d80:	20000500 	.word	0x20000500
 8001d84:	0801059c 	.word	0x0801059c

08001d88 <ICM_WriteByte>:

    }
}
//IMU related functions
// IMU related functions
HAL_StatusTypeDef ICM_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af04      	add	r7, sp, #16
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
 8001d94:	4613      	mov	r3, r2
 8001d96:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Write(
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	230a      	movs	r3, #10
 8001da2:	9302      	str	r3, [sp, #8]
 8001da4:	2301      	movs	r3, #1
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	1cbb      	adds	r3, r7, #2
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2301      	movs	r3, #1
 8001dae:	21d0      	movs	r1, #208	@ 0xd0
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f002 ffe1 	bl	8004d78 <HAL_I2C_Mem_Write>
 8001db6:	4603      	mov	r3, r0
 8001db8:	73fb      	strb	r3, [r7, #15]
							registerAddress,
							I2C_MEMADD_SIZE_8BIT,
							&writeData,
							I2C_MEMADD_SIZE_8BIT,
							10);
	return status;
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <ICM_BrustRead>:
							I2C_MEMADD_SIZE_8BIT,
							10);
	return status;
}

HAL_StatusTypeDef ICM_BrustRead(I2C_HandleTypeDef *hi2c, uint8_t const startAddress, uint16_t const amountOfRegistersToRead,uint8_t * readData){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	@ 0x28
 8001dc8:	af04      	add	r7, sp, #16
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	72fb      	strb	r3, [r7, #11]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	75fb      	strb	r3, [r7, #23]
	status = HAL_I2C_Mem_Read(
 8001dda:	7afb      	ldrb	r3, [r7, #11]
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	230a      	movs	r3, #10
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	893b      	ldrh	r3, [r7, #8]
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	2301      	movs	r3, #1
 8001dec:	21d0      	movs	r1, #208	@ 0xd0
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f003 f8bc 	bl	8004f6c <HAL_I2C_Mem_Read>
 8001df4:	4603      	mov	r3, r0
 8001df6:	75fb      	strb	r3, [r7, #23]
							startAddress,
							I2C_MEMADD_SIZE_8BIT,
							readData,
							amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
							10);
	return status;
 8001df8:	7dfb      	ldrb	r3, [r7, #23]

}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <ICM20948_SelectUserBank>:

HAL_StatusTypeDef ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, int userBankNum) {
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b088      	sub	sp, #32
 8001e06:	af04      	add	r7, sp, #16
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]
	uint8_t writeData = userBankNum << 4;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8001e1a:	230a      	movs	r3, #10
 8001e1c:	9302      	str	r3, [sp, #8]
 8001e1e:	2301      	movs	r3, #1
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	f107 030e 	add.w	r3, r7, #14
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	227f      	movs	r2, #127	@ 0x7f
 8001e2c:	21d0      	movs	r1, #208	@ 0xd0
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f002 ffa2 	bl	8004d78 <HAL_I2C_Mem_Write>
 8001e34:	4603      	mov	r3, r0
 8001e36:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <__ICM20948_init>:

void __ICM20948_init(I2C_HandleTypeDef *hi2c){
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]

	//Bank 0
	status = ICM20948_SelectUserBank(hi2c, 0x0);
 8001e4e:	2100      	movs	r1, #0
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ffd6 	bl	8001e02 <ICM20948_SelectUserBank>
 8001e56:	4603      	mov	r3, r0
 8001e58:	73fb      	strb	r3, [r7, #15]
	//Power Reset
	status = ICM_WriteByte(hi2c, PWR_MGMT_1, 0x80);
 8001e5a:	2280      	movs	r2, #128	@ 0x80
 8001e5c:	2106      	movs	r1, #6
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ff92 	bl	8001d88 <ICM_WriteByte>
 8001e64:	4603      	mov	r3, r0
 8001e66:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(200);
 8001e68:	20c8      	movs	r0, #200	@ 0xc8
 8001e6a:	f002 f861 	bl	8003f30 <HAL_Delay>
	status = ICM_WriteByte(hi2c, PWR_MGMT_1, 0x01);
 8001e6e:	2201      	movs	r2, #1
 8001e70:	2106      	movs	r1, #6
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ff88 	bl	8001d88 <ICM_WriteByte>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	73fb      	strb	r3, [r7, #15]

	//Enable both gyroscope and accelerometer
	status = ICM_WriteByte(hi2c, PWR_MGMT_2, 0x38);
 8001e7c:	2238      	movs	r2, #56	@ 0x38
 8001e7e:	2107      	movs	r1, #7
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff81 	bl	8001d88 <ICM_WriteByte>
 8001e86:	4603      	mov	r3, r0
 8001e88:	73fb      	strb	r3, [r7, #15]

	//Bank 2
	status = ICM20948_SelectUserBank(hi2c, 0x2);
 8001e8a:	2102      	movs	r1, #2
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ffb8 	bl	8001e02 <ICM20948_SelectUserBank>
 8001e92:	4603      	mov	r3, r0
 8001e94:	73fb      	strb	r3, [r7, #15]

	status = ICM_WriteByte(hi2c, GYRO_CONFIG_1, 0x39);
 8001e96:	2239      	movs	r2, #57	@ 0x39
 8001e98:	2101      	movs	r1, #1
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ff74 	bl	8001d88 <ICM_WriteByte>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]

	status = ICM_WriteByte(hi2c, GYRO_SMPLRT_DIV, 0x08);
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff6d 	bl	8001d88 <ICM_WriteByte>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	73fb      	strb	r3, [r7, #15]

	status = ICM_WriteByte(hi2c, ACCEL_CONFIG, 0x39);
 8001eb2:	2239      	movs	r2, #57	@ 0x39
 8001eb4:	2114      	movs	r1, #20
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ff66 	bl	8001d88 <ICM_WriteByte>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	73fb      	strb	r3, [r7, #15]

	//Bank 0
	status = ICM20948_SelectUserBank(hi2c, 0x0);
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ff9d 	bl	8001e02 <ICM20948_SelectUserBank>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	73fb      	strb	r3, [r7, #15]
	//Interrupt pin config: BYPASS ENABLE
	status = ICM_WriteByte(hi2c, 0x0F, 0x02);
 8001ecc:	2202      	movs	r2, #2
 8001ece:	210f      	movs	r1, #15
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff59 	bl	8001d88 <ICM_WriteByte>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	73fb      	strb	r3, [r7, #15]


}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <countTargetTicks>:

uint32_t countTargetTicks(int distance) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
    float rev, dist, circumference;
    uint32_t targetTicks;

    dist = (float)distance;  // Convert distance to float
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	ee07 3a90 	vmov	s15, r3
 8001ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef6:	edc7 7a05 	vstr	s15, [r7, #20]
    circumference = PI * WHEEL_DIAMETER_CM;  // Calculate the wheel's circumference in cm
 8001efa:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <countTargetTicks+0x50>)
 8001efc:	613b      	str	r3, [r7, #16]

    rev = dist / circumference;  // Calculate the number of wheel revolutions needed
 8001efe:	edd7 6a05 	vldr	s13, [r7, #20]
 8001f02:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f0a:	edc7 7a03 	vstr	s15, [r7, #12]
    targetTicks = (uint32_t)(rev * TICKS_PER_REV);  // Convert revolutions to encoder ticks (adjust factor if needed)
 8001f0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f12:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001f38 <countTargetTicks+0x54>
 8001f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f1e:	ee17 3a90 	vmov	r3, s15
 8001f22:	60bb      	str	r3, [r7, #8]

    return targetTicks;
 8001f24:	68bb      	ldr	r3, [r7, #8]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	41a35cd9 	.word	0x41a35cd9
 8001f38:	43c30000 	.word	0x43c30000

08001f3c <PID_Compute>:

    __HAL_TIM_SET_COUNTER(&htim3, 0);  // Reset the counter after reading
    return rightEncoderVal;
}

float PID_Compute(PID_TypeDef *pid, float setpoint, float measurement, int direction){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f48:	edc7 0a01 	vstr	s1, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
	float error;
	if (direction == 0){
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d108      	bne.n	8001f66 <PID_Compute+0x2a>
		error = setpoint - measurement;
 8001f54:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f60:	edc7 7a07 	vstr	s15, [r7, #28]
 8001f64:	e007      	b.n	8001f76 <PID_Compute+0x3a>
	}
	else{
		error = measurement-setpoint;
 8001f66:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f72:	edc7 7a07 	vstr	s15, [r7, #28]
	}
	pid->integral += error;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	edc3 7a03 	vstr	s15, [r3, #12]
	float derivative = error - pid->previousError;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f90:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f98:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->previousError = error;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	611a      	str	r2, [r3, #16]
	float output = ((pid->Kp*error) + (pid->Ki * pid->integral) + (pid->Kd * derivative));
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	ed93 7a00 	vldr	s14, [r3]
 8001fa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fca:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd6:	edc7 7a05 	vstr	s15, [r7, #20]
	output = 2000 +(5000*output/100.0);
 8001fda:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fde:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800202c <PID_Compute+0xf0>
 8001fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fe6:	ee17 0a90 	vmov	r0, s15
 8001fea:	f7fe faad 	bl	8000548 <__aeabi_f2d>
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <PID_Compute+0xf4>)
 8001ff4:	f7fe fc2a 	bl	800084c <__aeabi_ddiv>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <PID_Compute+0xf8>)
 8002006:	f7fe f941 	bl	800028c <__adddf3>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	f7fe fde9 	bl	8000be8 <__aeabi_d2f>
 8002016:	4603      	mov	r3, r0
 8002018:	617b      	str	r3, [r7, #20]
	return output;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	ee07 3a90 	vmov	s15, r3
}
 8002020:	eeb0 0a67 	vmov.f32	s0, s15
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	459c4000 	.word	0x459c4000
 8002030:	40590000 	.word	0x40590000
 8002034:	409f4000 	.word	0x409f4000

08002038 <PID_Init>:
void PID_Reset(PID_TypeDef *pid){
	pid->integral = 0.0f;
	pid->previousError = 0.0f;
}

void PID_Init(PID_TypeDef *pid, float Kp, float Ki, float Kd){
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	ed87 0a02 	vstr	s0, [r7, #8]
 8002044:	edc7 0a01 	vstr	s1, [r7, #4]
 8002048:	ed87 1a00 	vstr	s2, [r7]
	pid->Kp = Kp;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	609a      	str	r2, [r3, #8]

	pid->integral = 0.0f;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
	pid->previousError = 0.0f;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <forward>:

void forward(int distance){
 800207c:	b580      	push	{r7, lr}
 800207e:	b092      	sub	sp, #72	@ 0x48
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	if(indoor){
 8002084:	4ba4      	ldr	r3, [pc, #656]	@ (8002318 <forward+0x29c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80d5 	beq.w	8002238 <forward+0x1bc>
		yawAngle = 0.0;
 800208e:	4ba3      	ldr	r3, [pc, #652]	@ (800231c <forward+0x2a0>)
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
		htim1.Instance->CCR4 = 150;
 8002096:	4ba2      	ldr	r3, [pc, #648]	@ (8002320 <forward+0x2a4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2296      	movs	r2, #150	@ 0x96
 800209c:	641a      	str	r2, [r3, #64]	@ 0x40
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800209e:	2100      	movs	r1, #0
 80020a0:	48a0      	ldr	r0, [pc, #640]	@ (8002324 <forward+0x2a8>)
 80020a2:	f004 fa71 	bl	8006588 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80020a6:	2104      	movs	r1, #4
 80020a8:	489e      	ldr	r0, [pc, #632]	@ (8002324 <forward+0x2a8>)
 80020aa:	f004 fa6d 	bl	8006588 <HAL_TIM_PWM_Start>
	    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80020ae:	2201      	movs	r2, #1
 80020b0:	2108      	movs	r1, #8
 80020b2:	489d      	ldr	r0, [pc, #628]	@ (8002328 <forward+0x2ac>)
 80020b4:	f002 fd02 	bl	8004abc <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2104      	movs	r1, #4
 80020bc:	489a      	ldr	r0, [pc, #616]	@ (8002328 <forward+0x2ac>)
 80020be:	f002 fcfd 	bl	8004abc <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80020c2:	2201      	movs	r2, #1
 80020c4:	2110      	movs	r1, #16
 80020c6:	4898      	ldr	r0, [pc, #608]	@ (8002328 <forward+0x2ac>)
 80020c8:	f002 fcf8 	bl	8004abc <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2120      	movs	r1, #32
 80020d0:	4895      	ldr	r0, [pc, #596]	@ (8002328 <forward+0x2ac>)
 80020d2:	f002 fcf3 	bl	8004abc <HAL_GPIO_WritePin>

	    double correctionTicks;
	    double targetTicks = countTargetTicks(distance);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ff04 	bl	8001ee4 <countTargetTicks>
 80020dc:	4603      	mov	r3, r0
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fa10 	bl	8000504 <__aeabi_ui2d>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	    targetTicks *= 1.5;
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	4b8e      	ldr	r3, [pc, #568]	@ (800232c <forward+0x2b0>)
 80020f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80020f6:	f7fe fa7f 	bl	80005f8 <__aeabi_dmul>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	    //added wacky tuning stuff
	    if(distance<=40) {
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b28      	cmp	r3, #40	@ 0x28
 8002106:	dc15      	bgt.n	8002134 <forward+0xb8>
	    	correctionTicks = countTargetTicks(10);
 8002108:	200a      	movs	r0, #10
 800210a:	f7ff feeb 	bl	8001ee4 <countTargetTicks>
 800210e:	4603      	mov	r3, r0
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe f9f7 	bl	8000504 <__aeabi_ui2d>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	    	targetTicks = targetTicks - correctionTicks;
 800211e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002122:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002126:	f7fe f8af 	bl	8000288 <__aeabi_dsub>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002132:	e036      	b.n	80021a2 <forward+0x126>
	    }
	    else if (distance> 40 && distance<=65){
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b28      	cmp	r3, #40	@ 0x28
 8002138:	dd18      	ble.n	800216c <forward+0xf0>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b41      	cmp	r3, #65	@ 0x41
 800213e:	dc15      	bgt.n	800216c <forward+0xf0>
	    	correctionTicks = countTargetTicks(6);
 8002140:	2006      	movs	r0, #6
 8002142:	f7ff fecf 	bl	8001ee4 <countTargetTicks>
 8002146:	4603      	mov	r3, r0
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe f9db 	bl	8000504 <__aeabi_ui2d>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	e9c7 2306 	strd	r2, r3, [r7, #24]
	    	targetTicks = targetTicks - correctionTicks;
 8002156:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800215a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800215e:	f7fe f893 	bl	8000288 <__aeabi_dsub>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800216a:	e01a      	b.n	80021a2 <forward+0x126>
	    }
	    else if (distance>65 && distance<=85){
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b41      	cmp	r3, #65	@ 0x41
 8002170:	dd17      	ble.n	80021a2 <forward+0x126>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b55      	cmp	r3, #85	@ 0x55
 8002176:	dc14      	bgt.n	80021a2 <forward+0x126>
	    	correctionTicks = countTargetTicks(3);
 8002178:	2003      	movs	r0, #3
 800217a:	f7ff feb3 	bl	8001ee4 <countTargetTicks>
 800217e:	4603      	mov	r3, r0
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f9bf 	bl	8000504 <__aeabi_ui2d>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	    	targetTicks = targetTicks - correctionTicks;
 800218e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002192:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002196:	f7fe f877 	bl	8000288 <__aeabi_dsub>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	    }

	    int startCountB = __HAL_TIM_GET_COUNTER(&htim3);
 80021a2:	4b63      	ldr	r3, [pc, #396]	@ (8002330 <forward+0x2b4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a8:	617b      	str	r3, [r7, #20]
	    int encoderCountB;
	    int currentCountB ;
	    rightEncoderVal = 0;
 80021aa:	4b62      	ldr	r3, [pc, #392]	@ (8002334 <forward+0x2b8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

	    PID_Init(&pid, 9.5f, 0.01f, 0.05f);
 80021b0:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8002338 <forward+0x2bc>
 80021b4:	eddf 0a61 	vldr	s1, [pc, #388]	@ 800233c <forward+0x2c0>
 80021b8:	eeb2 0a03 	vmov.f32	s0, #35	@ 0x41180000  9.5
 80021bc:	4860      	ldr	r0, [pc, #384]	@ (8002340 <forward+0x2c4>)
 80021be:	f7ff ff3b 	bl	8002038 <PID_Init>

	    while (1) {

	    	currentCountB = __HAL_TIM_GET_COUNTER(&htim3);
 80021c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002330 <forward+0x2b4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c8:	613b      	str	r3, [r7, #16]
	    	encoderCountB = abs(currentCountB - startCountB);
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bfb8      	it	lt
 80021d4:	425b      	neglt	r3, r3
 80021d6:	60fb      	str	r3, [r7, #12]
	    	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 2500);
 80021d8:	4b52      	ldr	r3, [pc, #328]	@ (8002324 <forward+0x2a8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80021e0:	635a      	str	r2, [r3, #52]	@ 0x34
	    	uint16_t pwmValue = PID_Compute(&pid,0,yawAngle,0);
 80021e2:	4b4e      	ldr	r3, [pc, #312]	@ (800231c <forward+0x2a0>)
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	2100      	movs	r1, #0
 80021ea:	eef0 0a67 	vmov.f32	s1, s15
 80021ee:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 8002344 <forward+0x2c8>
 80021f2:	4853      	ldr	r0, [pc, #332]	@ (8002340 <forward+0x2c4>)
 80021f4:	f7ff fea2 	bl	8001f3c <PID_Compute>
 80021f8:	eef0 7a40 	vmov.f32	s15, s0
 80021fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002200:	ee17 3a90 	vmov	r3, s15
 8002204:	817b      	strh	r3, [r7, #10]
	        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValue);
 8002206:	4b47      	ldr	r3, [pc, #284]	@ (8002324 <forward+0x2a8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	897a      	ldrh	r2, [r7, #10]
 800220c:	639a      	str	r2, [r3, #56]	@ 0x38


	        if (rightEncoderVal >= targetTicks) {
 800220e:	4b49      	ldr	r3, [pc, #292]	@ (8002334 <forward+0x2b8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe f986 	bl	8000524 <__aeabi_i2d>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002220:	f7fe fc66 	bl	8000af0 <__aeabi_dcmple>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <forward+0x1b4>
	            stopMove();
 800222a:	f000 fa3b 	bl	80026a4 <stopMove>
	            break;
 800222e:	e0f1      	b.n	8002414 <forward+0x398>
	        }

	        osDelay(10);
 8002230:	200a      	movs	r0, #10
 8002232:	f006 ff23 	bl	800907c <osDelay>
	    while (1) {
 8002236:	e7c4      	b.n	80021c2 <forward+0x146>
	    }
	}
	else{
		yawAngle = 0.0;
 8002238:	4b38      	ldr	r3, [pc, #224]	@ (800231c <forward+0x2a0>)
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
		htim1.Instance->CCR4 = 150;
 8002240:	4b37      	ldr	r3, [pc, #220]	@ (8002320 <forward+0x2a4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2296      	movs	r2, #150	@ 0x96
 8002246:	641a      	str	r2, [r3, #64]	@ 0x40
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002248:	2100      	movs	r1, #0
 800224a:	4836      	ldr	r0, [pc, #216]	@ (8002324 <forward+0x2a8>)
 800224c:	f004 f99c 	bl	8006588 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002250:	2104      	movs	r1, #4
 8002252:	4834      	ldr	r0, [pc, #208]	@ (8002324 <forward+0x2a8>)
 8002254:	f004 f998 	bl	8006588 <HAL_TIM_PWM_Start>
	    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002258:	2201      	movs	r2, #1
 800225a:	2108      	movs	r1, #8
 800225c:	4832      	ldr	r0, [pc, #200]	@ (8002328 <forward+0x2ac>)
 800225e:	f002 fc2d 	bl	8004abc <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	2104      	movs	r1, #4
 8002266:	4830      	ldr	r0, [pc, #192]	@ (8002328 <forward+0x2ac>)
 8002268:	f002 fc28 	bl	8004abc <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 800226c:	2201      	movs	r2, #1
 800226e:	2110      	movs	r1, #16
 8002270:	482d      	ldr	r0, [pc, #180]	@ (8002328 <forward+0x2ac>)
 8002272:	f002 fc23 	bl	8004abc <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002276:	2200      	movs	r2, #0
 8002278:	2120      	movs	r1, #32
 800227a:	482b      	ldr	r0, [pc, #172]	@ (8002328 <forward+0x2ac>)
 800227c:	f002 fc1e 	bl	8004abc <HAL_GPIO_WritePin>

	    double correctionTicks;

	    double targetTicks = countTargetTicks(distance);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fe2f 	bl	8001ee4 <countTargetTicks>
 8002286:	4603      	mov	r3, r0
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe f93b 	bl	8000504 <__aeabi_ui2d>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	    targetTicks *= 1.5;
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	4b24      	ldr	r3, [pc, #144]	@ (800232c <forward+0x2b0>)
 800229c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80022a0:	f7fe f9aa 	bl	80005f8 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	    //added wacky tuning stuff
	    if(distance<=40) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b28      	cmp	r3, #40	@ 0x28
 80022b0:	dc15      	bgt.n	80022de <forward+0x262>
	    	correctionTicks = countTargetTicks(10);
 80022b2:	200a      	movs	r0, #10
 80022b4:	f7ff fe16 	bl	8001ee4 <countTargetTicks>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe f922 	bl	8000504 <__aeabi_ui2d>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	    	targetTicks = targetTicks - correctionTicks;
 80022c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022cc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80022d0:	f7fd ffda 	bl	8000288 <__aeabi_dsub>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80022dc:	e04f      	b.n	800237e <forward+0x302>
	    }
	    else if (distance> 40 && distance<=65){
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b28      	cmp	r3, #40	@ 0x28
 80022e2:	dd31      	ble.n	8002348 <forward+0x2cc>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b41      	cmp	r3, #65	@ 0x41
 80022e8:	dc2e      	bgt.n	8002348 <forward+0x2cc>
	    	correctionTicks = countTargetTicks(6);
 80022ea:	2006      	movs	r0, #6
 80022ec:	f7ff fdfa 	bl	8001ee4 <countTargetTicks>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe f906 	bl	8000504 <__aeabi_ui2d>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	    	targetTicks = targetTicks - correctionTicks;
 8002300:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002304:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002308:	f7fd ffbe 	bl	8000288 <__aeabi_dsub>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8002314:	e033      	b.n	800237e <forward+0x302>
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000
 800231c:	20000514 	.word	0x20000514
 8002320:	200002e0 	.word	0x200002e0
 8002324:	20000448 	.word	0x20000448
 8002328:	40020000 	.word	0x40020000
 800232c:	3ff80000 	.word	0x3ff80000
 8002330:	20000370 	.word	0x20000370
 8002334:	20000530 	.word	0x20000530
 8002338:	3d4ccccd 	.word	0x3d4ccccd
 800233c:	3c23d70a 	.word	0x3c23d70a
 8002340:	20000518 	.word	0x20000518
 8002344:	00000000 	.word	0x00000000
	    }
	    else if (distance>65 && distance<=85){
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b41      	cmp	r3, #65	@ 0x41
 800234c:	dd17      	ble.n	800237e <forward+0x302>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b55      	cmp	r3, #85	@ 0x55
 8002352:	dc14      	bgt.n	800237e <forward+0x302>
	    	correctionTicks = countTargetTicks(3);
 8002354:	2003      	movs	r0, #3
 8002356:	f7ff fdc5 	bl	8001ee4 <countTargetTicks>
 800235a:	4603      	mov	r3, r0
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f8d1 	bl	8000504 <__aeabi_ui2d>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	    	targetTicks = targetTicks - correctionTicks;
 800236a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800236e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002372:	f7fd ff89 	bl	8000288 <__aeabi_dsub>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	    }

	    int startCountB = __HAL_TIM_GET_COUNTER(&htim3);
 800237e:	4b27      	ldr	r3, [pc, #156]	@ (800241c <forward+0x3a0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002384:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    int encoderCountB;
	    int currentCountB ;
	    rightEncoderVal = 0;
 8002386:	4b26      	ldr	r3, [pc, #152]	@ (8002420 <forward+0x3a4>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

	    PID_Init(&pid, 9.0f, 0.01f, 1.0f);
 800238c:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002390:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8002424 <forward+0x3a8>
 8002394:	eeb2 0a02 	vmov.f32	s0, #34	@ 0x41100000  9.0
 8002398:	4823      	ldr	r0, [pc, #140]	@ (8002428 <forward+0x3ac>)
 800239a:	f7ff fe4d 	bl	8002038 <PID_Init>

	    while (1) {

	    	currentCountB = __HAL_TIM_GET_COUNTER(&htim3);
 800239e:	4b1f      	ldr	r3, [pc, #124]	@ (800241c <forward+0x3a0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	    	encoderCountB = abs(currentCountB - startCountB);
 80023a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bfb8      	it	lt
 80023b0:	425b      	neglt	r3, r3
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
	    	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 2500);
 80023b4:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <forward+0x3b0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80023bc:	635a      	str	r2, [r3, #52]	@ 0x34
	    	uint16_t pwmValue = PID_Compute(&pid,0,yawAngle,0);
 80023be:	4b1c      	ldr	r3, [pc, #112]	@ (8002430 <forward+0x3b4>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	2100      	movs	r1, #0
 80023c6:	eef0 0a67 	vmov.f32	s1, s15
 80023ca:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8002434 <forward+0x3b8>
 80023ce:	4816      	ldr	r0, [pc, #88]	@ (8002428 <forward+0x3ac>)
 80023d0:	f7ff fdb4 	bl	8001f3c <PID_Compute>
 80023d4:	eef0 7a40 	vmov.f32	s15, s0
 80023d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023dc:	ee17 3a90 	vmov	r3, s15
 80023e0:	847b      	strh	r3, [r7, #34]	@ 0x22
	        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValue);
 80023e2:	4b12      	ldr	r3, [pc, #72]	@ (800242c <forward+0x3b0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80023e8:	639a      	str	r2, [r3, #56]	@ 0x38


	        if (rightEncoderVal >= targetTicks) {
 80023ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <forward+0x3a4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f898 	bl	8000524 <__aeabi_i2d>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80023fc:	f7fe fb78 	bl	8000af0 <__aeabi_dcmple>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <forward+0x390>
	            stopMove();
 8002406:	f000 f94d 	bl	80026a4 <stopMove>
	            break;
 800240a:	e003      	b.n	8002414 <forward+0x398>
	        }

	        osDelay(10);
 800240c:	200a      	movs	r0, #10
 800240e:	f006 fe35 	bl	800907c <osDelay>
	    while (1) {
 8002412:	e7c4      	b.n	800239e <forward+0x322>
	    }
	}
}
 8002414:	bf00      	nop
 8002416:	3748      	adds	r7, #72	@ 0x48
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000370 	.word	0x20000370
 8002420:	20000530 	.word	0x20000530
 8002424:	3c23d70a 	.word	0x3c23d70a
 8002428:	20000518 	.word	0x20000518
 800242c:	20000448 	.word	0x20000448
 8002430:	20000514 	.word	0x20000514
 8002434:	00000000 	.word	0x00000000

08002438 <backward>:

void backward(int distance){
 8002438:	b580      	push	{r7, lr}
 800243a:	b08e      	sub	sp, #56	@ 0x38
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	if(indoor){
 8002440:	4b8c      	ldr	r3, [pc, #560]	@ (8002674 <backward+0x23c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 8088 	beq.w	800255a <backward+0x122>
		yawAngle = 0.0;
 800244a:	4b8b      	ldr	r3, [pc, #556]	@ (8002678 <backward+0x240>)
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
		htim1.Instance->CCR4 = 150;
 8002452:	4b8a      	ldr	r3, [pc, #552]	@ (800267c <backward+0x244>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2296      	movs	r2, #150	@ 0x96
 8002458:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800245a:	2100      	movs	r1, #0
 800245c:	4888      	ldr	r0, [pc, #544]	@ (8002680 <backward+0x248>)
 800245e:	f004 f893 	bl	8006588 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002462:	2104      	movs	r1, #4
 8002464:	4886      	ldr	r0, [pc, #536]	@ (8002680 <backward+0x248>)
 8002466:	f004 f88f 	bl	8006588 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800246a:	2200      	movs	r2, #0
 800246c:	2108      	movs	r1, #8
 800246e:	4885      	ldr	r0, [pc, #532]	@ (8002684 <backward+0x24c>)
 8002470:	f002 fb24 	bl	8004abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002474:	2201      	movs	r2, #1
 8002476:	2104      	movs	r1, #4
 8002478:	4882      	ldr	r0, [pc, #520]	@ (8002684 <backward+0x24c>)
 800247a:	f002 fb1f 	bl	8004abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800247e:	2200      	movs	r2, #0
 8002480:	2110      	movs	r1, #16
 8002482:	4880      	ldr	r0, [pc, #512]	@ (8002684 <backward+0x24c>)
 8002484:	f002 fb1a 	bl	8004abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002488:	2201      	movs	r2, #1
 800248a:	2120      	movs	r1, #32
 800248c:	487d      	ldr	r0, [pc, #500]	@ (8002684 <backward+0x24c>)
 800248e:	f002 fb15 	bl	8004abc <HAL_GPIO_WritePin>
		rightEncoderVal = 0;
 8002492:	4b7d      	ldr	r3, [pc, #500]	@ (8002688 <backward+0x250>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]


		double targetTicks = countTargetTicks(distance);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff fd23 	bl	8001ee4 <countTargetTicks>
 800249e:	4603      	mov	r3, r0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f82f 	bl	8000504 <__aeabi_ui2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
		targetTicks *=1.5;
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	4b76      	ldr	r3, [pc, #472]	@ (800268c <backward+0x254>)
 80024b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024b8:	f7fe f89e 	bl	80005f8 <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	e9c7 2306 	strd	r2, r3, [r7, #24]

		int startCountB = __HAL_TIM_GET_COUNTER(&htim3);
 80024c4:	4b72      	ldr	r3, [pc, #456]	@ (8002690 <backward+0x258>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ca:	617b      	str	r3, [r7, #20]
		int encoderCountB;
		int currentCountB ;

		PID_Init(&pid, 9.0f, 0.01f, 0.05f);
 80024cc:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 8002694 <backward+0x25c>
 80024d0:	eddf 0a71 	vldr	s1, [pc, #452]	@ 8002698 <backward+0x260>
 80024d4:	eeb2 0a02 	vmov.f32	s0, #34	@ 0x41100000  9.0
 80024d8:	4870      	ldr	r0, [pc, #448]	@ (800269c <backward+0x264>)
 80024da:	f7ff fdad 	bl	8002038 <PID_Init>

		while (1) {
			currentCountB = __HAL_TIM_GET_COUNTER(&htim3);
 80024de:	4b6c      	ldr	r3, [pc, #432]	@ (8002690 <backward+0x258>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	613b      	str	r3, [r7, #16]
			encoderCountB = abs(currentCountB - startCountB);
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bfb8      	it	lt
 80024f0:	425b      	neglt	r3, r3
 80024f2:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,2500);
 80024f4:	4b62      	ldr	r3, [pc, #392]	@ (8002680 <backward+0x248>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80024fc:	635a      	str	r2, [r3, #52]	@ 0x34
			uint16_t pwmValue = PID_Compute(&pid,0,yawAngle,1);
 80024fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002678 <backward+0x240>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	2101      	movs	r1, #1
 8002506:	eef0 0a67 	vmov.f32	s1, s15
 800250a:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 80026a0 <backward+0x268>
 800250e:	4863      	ldr	r0, [pc, #396]	@ (800269c <backward+0x264>)
 8002510:	f7ff fd14 	bl	8001f3c <PID_Compute>
 8002514:	eef0 7a40 	vmov.f32	s15, s0
 8002518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800251c:	ee17 3a90 	vmov	r3, s15
 8002520:	817b      	strh	r3, [r7, #10]
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValue);
 8002522:	4b57      	ldr	r3, [pc, #348]	@ (8002680 <backward+0x248>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	897a      	ldrh	r2, [r7, #10]
 8002528:	639a      	str	r2, [r3, #56]	@ 0x38


			if (abs(rightEncoderVal) >= targetTicks) {
 800252a:	4b57      	ldr	r3, [pc, #348]	@ (8002688 <backward+0x250>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	bfb8      	it	lt
 8002532:	425b      	neglt	r3, r3
 8002534:	4618      	mov	r0, r3
 8002536:	f7fd fff5 	bl	8000524 <__aeabi_i2d>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002542:	f7fe fad5 	bl	8000af0 <__aeabi_dcmple>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <backward+0x11a>
				stopMove();
 800254c:	f000 f8aa 	bl	80026a4 <stopMove>
				break;
 8002550:	e08b      	b.n	800266a <backward+0x232>
			}

			osDelay(10);
 8002552:	200a      	movs	r0, #10
 8002554:	f006 fd92 	bl	800907c <osDelay>
		while (1) {
 8002558:	e7c1      	b.n	80024de <backward+0xa6>
		}
	}
	else{
		yawAngle = 0.0;
 800255a:	4b47      	ldr	r3, [pc, #284]	@ (8002678 <backward+0x240>)
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
		htim1.Instance->CCR4 = 150;
 8002562:	4b46      	ldr	r3, [pc, #280]	@ (800267c <backward+0x244>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2296      	movs	r2, #150	@ 0x96
 8002568:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800256a:	2100      	movs	r1, #0
 800256c:	4844      	ldr	r0, [pc, #272]	@ (8002680 <backward+0x248>)
 800256e:	f004 f80b 	bl	8006588 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002572:	2104      	movs	r1, #4
 8002574:	4842      	ldr	r0, [pc, #264]	@ (8002680 <backward+0x248>)
 8002576:	f004 f807 	bl	8006588 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800257a:	2200      	movs	r2, #0
 800257c:	2108      	movs	r1, #8
 800257e:	4841      	ldr	r0, [pc, #260]	@ (8002684 <backward+0x24c>)
 8002580:	f002 fa9c 	bl	8004abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002584:	2201      	movs	r2, #1
 8002586:	2104      	movs	r1, #4
 8002588:	483e      	ldr	r0, [pc, #248]	@ (8002684 <backward+0x24c>)
 800258a:	f002 fa97 	bl	8004abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800258e:	2200      	movs	r2, #0
 8002590:	2110      	movs	r1, #16
 8002592:	483c      	ldr	r0, [pc, #240]	@ (8002684 <backward+0x24c>)
 8002594:	f002 fa92 	bl	8004abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002598:	2201      	movs	r2, #1
 800259a:	2120      	movs	r1, #32
 800259c:	4839      	ldr	r0, [pc, #228]	@ (8002684 <backward+0x24c>)
 800259e:	f002 fa8d 	bl	8004abc <HAL_GPIO_WritePin>
		rightEncoderVal = 0;
 80025a2:	4b39      	ldr	r3, [pc, #228]	@ (8002688 <backward+0x250>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]


		double targetTicks = countTargetTicks(distance);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff fc9b 	bl	8001ee4 <countTargetTicks>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd ffa7 	bl	8000504 <__aeabi_ui2d>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		targetTicks *=1.5;
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	4b32      	ldr	r3, [pc, #200]	@ (800268c <backward+0x254>)
 80025c4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80025c8:	f7fe f816 	bl	80005f8 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

		int startCountB = __HAL_TIM_GET_COUNTER(&htim3);
 80025d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002690 <backward+0x258>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	62fb      	str	r3, [r7, #44]	@ 0x2c
		int encoderCountB;
		int currentCountB ;

		PID_Init(&pid, 10.0f, 0.01f, 1.0f);
 80025dc:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80025e0:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8002698 <backward+0x260>
 80025e4:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80025e8:	482c      	ldr	r0, [pc, #176]	@ (800269c <backward+0x264>)
 80025ea:	f7ff fd25 	bl	8002038 <PID_Init>

		while (1) {
			currentCountB = __HAL_TIM_GET_COUNTER(&htim3);
 80025ee:	4b28      	ldr	r3, [pc, #160]	@ (8002690 <backward+0x258>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
			encoderCountB = abs(currentCountB - startCountB);
 80025f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bfb8      	it	lt
 8002600:	425b      	neglt	r3, r3
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,3000);
 8002604:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <backward+0x248>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800260c:	635a      	str	r2, [r3, #52]	@ 0x34
			uint16_t pwmValue = PID_Compute(&pid,0,yawAngle,1);
 800260e:	4b1a      	ldr	r3, [pc, #104]	@ (8002678 <backward+0x240>)
 8002610:	edd3 7a00 	vldr	s15, [r3]
 8002614:	2101      	movs	r1, #1
 8002616:	eef0 0a67 	vmov.f32	s1, s15
 800261a:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80026a0 <backward+0x268>
 800261e:	481f      	ldr	r0, [pc, #124]	@ (800269c <backward+0x264>)
 8002620:	f7ff fc8c 	bl	8001f3c <PID_Compute>
 8002624:	eef0 7a40 	vmov.f32	s15, s0
 8002628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800262c:	ee17 3a90 	vmov	r3, s15
 8002630:	847b      	strh	r3, [r7, #34]	@ 0x22
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValue);
 8002632:	4b13      	ldr	r3, [pc, #76]	@ (8002680 <backward+0x248>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002638:	639a      	str	r2, [r3, #56]	@ 0x38


			if (abs(rightEncoderVal) >= targetTicks) {
 800263a:	4b13      	ldr	r3, [pc, #76]	@ (8002688 <backward+0x250>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	bfb8      	it	lt
 8002642:	425b      	neglt	r3, r3
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd ff6d 	bl	8000524 <__aeabi_i2d>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002652:	f7fe fa4d 	bl	8000af0 <__aeabi_dcmple>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <backward+0x22a>
				stopMove();
 800265c:	f000 f822 	bl	80026a4 <stopMove>
				break;
 8002660:	e003      	b.n	800266a <backward+0x232>
			}

			osDelay(10);
 8002662:	200a      	movs	r0, #10
 8002664:	f006 fd0a 	bl	800907c <osDelay>
		while (1) {
 8002668:	e7c1      	b.n	80025ee <backward+0x1b6>
		}
	}
}
 800266a:	bf00      	nop
 800266c:	3738      	adds	r7, #56	@ 0x38
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000000 	.word	0x20000000
 8002678:	20000514 	.word	0x20000514
 800267c:	200002e0 	.word	0x200002e0
 8002680:	20000448 	.word	0x20000448
 8002684:	40020000 	.word	0x40020000
 8002688:	20000530 	.word	0x20000530
 800268c:	3ff80000 	.word	0x3ff80000
 8002690:	20000370 	.word	0x20000370
 8002694:	3d4ccccd 	.word	0x3d4ccccd
 8002698:	3c23d70a 	.word	0x3c23d70a
 800269c:	20000518 	.word	0x20000518
 80026a0:	00000000 	.word	0x00000000

080026a4 <stopMove>:

void stopMove(){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
    // Reset GPIO pins to stop motors
    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80026a8:	2200      	movs	r2, #0
 80026aa:	2108      	movs	r1, #8
 80026ac:	480d      	ldr	r0, [pc, #52]	@ (80026e4 <stopMove+0x40>)
 80026ae:	f002 fa05 	bl	8004abc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2104      	movs	r1, #4
 80026b6:	480b      	ldr	r0, [pc, #44]	@ (80026e4 <stopMove+0x40>)
 80026b8:	f002 fa00 	bl	8004abc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80026bc:	2200      	movs	r2, #0
 80026be:	2110      	movs	r1, #16
 80026c0:	4808      	ldr	r0, [pc, #32]	@ (80026e4 <stopMove+0x40>)
 80026c2:	f002 f9fb 	bl	8004abc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2120      	movs	r1, #32
 80026ca:	4806      	ldr	r0, [pc, #24]	@ (80026e4 <stopMove+0x40>)
 80026cc:	f002 f9f6 	bl	8004abc <HAL_GPIO_WritePin>

    // Set PWM values to zero to fully stop motors
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80026d0:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <stopMove+0x44>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80026d8:	4b03      	ldr	r3, [pc, #12]	@ (80026e8 <stopMove+0x44>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2200      	movs	r2, #0
 80026de:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40020000 	.word	0x40020000
 80026e8:	20000448 	.word	0x20000448

080026ec <frontRight>:

void frontRight(int distance){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08e      	sub	sp, #56	@ 0x38
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	if(indoor){
 80026f4:	4b8f      	ldr	r3, [pc, #572]	@ (8002934 <frontRight+0x248>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 808c 	beq.w	8002816 <frontRight+0x12a>
	    yawAngle = 0.0; //reset angle
 80026fe:	4b8e      	ldr	r3, [pc, #568]	@ (8002938 <frontRight+0x24c>)
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
	    uint32_t pwmValL = 2100;
 8002706:	f640 0334 	movw	r3, #2100	@ 0x834
 800270a:	61fb      	str	r3, [r7, #28]
	    uint32_t pwmValR = 500;
 800270c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002710:	61bb      	str	r3, [r7, #24]
	    uint32_t encoderCount = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
	    uint32_t startEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8002716:	4b89      	ldr	r3, [pc, #548]	@ (800293c <frontRight+0x250>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271c:	613b      	str	r3, [r7, #16]
	    uint32_t currentEncoderCount = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
	    uint32_t targetTicks = (uint32_t)countTargetTicks(distance);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff fbde 	bl	8001ee4 <countTargetTicks>
 8002728:	60b8      	str	r0, [r7, #8]

	        //(uint32_t)countTargetTicks(distance);
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800272a:	210c      	movs	r1, #12
 800272c:	4884      	ldr	r0, [pc, #528]	@ (8002940 <frontRight+0x254>)
 800272e:	f003 ff2b 	bl	8006588 <HAL_TIM_PWM_Start>
	    htim1.Instance->CCR4 = 260;
 8002732:	4b83      	ldr	r3, [pc, #524]	@ (8002940 <frontRight+0x254>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800273a:	641a      	str	r2, [r3, #64]	@ 0x40
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800273c:	2100      	movs	r1, #0
 800273e:	4881      	ldr	r0, [pc, #516]	@ (8002944 <frontRight+0x258>)
 8002740:	f003 ff22 	bl	8006588 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002744:	2104      	movs	r1, #4
 8002746:	487f      	ldr	r0, [pc, #508]	@ (8002944 <frontRight+0x258>)
 8002748:	f003 ff1e 	bl	8006588 <HAL_TIM_PWM_Start>

	    for(;;){
	      //Move Forward
	       HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 800274c:	2201      	movs	r2, #1
 800274e:	2108      	movs	r1, #8
 8002750:	487d      	ldr	r0, [pc, #500]	@ (8002948 <frontRight+0x25c>)
 8002752:	f002 f9b3 	bl	8004abc <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	2104      	movs	r1, #4
 800275a:	487b      	ldr	r0, [pc, #492]	@ (8002948 <frontRight+0x25c>)
 800275c:	f002 f9ae 	bl	8004abc <HAL_GPIO_WritePin>
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValL);
 8002760:	4b78      	ldr	r3, [pc, #480]	@ (8002944 <frontRight+0x258>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	635a      	str	r2, [r3, #52]	@ 0x34
	       HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 8002768:	2200      	movs	r2, #0
 800276a:	2120      	movs	r1, #32
 800276c:	4876      	ldr	r0, [pc, #472]	@ (8002948 <frontRight+0x25c>)
 800276e:	f002 f9a5 	bl	8004abc <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 8002772:	2201      	movs	r2, #1
 8002774:	2110      	movs	r1, #16
 8002776:	4874      	ldr	r0, [pc, #464]	@ (8002948 <frontRight+0x25c>)
 8002778:	f002 f9a0 	bl	8004abc <HAL_GPIO_WritePin>
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValR);
 800277c:	4b71      	ldr	r3, [pc, #452]	@ (8002944 <frontRight+0x258>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	639a      	str	r2, [r3, #56]	@ 0x38
	      currentEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8002784:	4b6d      	ldr	r3, [pc, #436]	@ (800293c <frontRight+0x250>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	60fb      	str	r3, [r7, #12]
	      osDelay(10);
 800278c:	200a      	movs	r0, #10
 800278e:	f006 fc75 	bl	800907c <osDelay>
	        // Check if the robot has reached the target distance

	          // Calculate total encoder ticks since the motor started moving
	          if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8002792:	4b6a      	ldr	r3, [pc, #424]	@ (800293c <frontRight+0x250>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b10      	cmp	r3, #16
 800279e:	d104      	bne.n	80027aa <frontRight+0xbe>
	              encoderCount = (startEncoderCount - currentEncoderCount);
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	e003      	b.n	80027b2 <frontRight+0xc6>
	          } else {
	              encoderCount = (currentEncoderCount - startEncoderCount);
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	617b      	str	r3, [r7, #20]
	          }

	          if (fabs(yawAngle)>=85) {
 80027b2:	4b61      	ldr	r3, [pc, #388]	@ (8002938 <frontRight+0x24c>)
 80027b4:	edd3 7a00 	vldr	s15, [r3]
 80027b8:	eef0 7ae7 	vabs.f32	s15, s15
 80027bc:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800294c <frontRight+0x260>
 80027c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c8:	db24      	blt.n	8002814 <frontRight+0x128>
	              // Stop the motor
	            HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2104      	movs	r1, #4
 80027ce:	485e      	ldr	r0, [pc, #376]	@ (8002948 <frontRight+0x25c>)
 80027d0:	f002 f974 	bl	8004abc <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2108      	movs	r1, #8
 80027d8:	485b      	ldr	r0, [pc, #364]	@ (8002948 <frontRight+0x25c>)
 80027da:	f002 f96f 	bl	8004abc <HAL_GPIO_WritePin>
	            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);  // Stop PWM
 80027de:	4b59      	ldr	r3, [pc, #356]	@ (8002944 <frontRight+0x258>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2200      	movs	r2, #0
 80027e4:	635a      	str	r2, [r3, #52]	@ 0x34
	            HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2120      	movs	r1, #32
 80027ea:	4857      	ldr	r0, [pc, #348]	@ (8002948 <frontRight+0x25c>)
 80027ec:	f002 f966 	bl	8004abc <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80027f0:	2200      	movs	r2, #0
 80027f2:	2110      	movs	r1, #16
 80027f4:	4854      	ldr	r0, [pc, #336]	@ (8002948 <frontRight+0x25c>)
 80027f6:	f002 f961 	bl	8004abc <HAL_GPIO_WritePin>
	            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);  // Stop PWM
 80027fa:	4b52      	ldr	r3, [pc, #328]	@ (8002944 <frontRight+0x258>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2200      	movs	r2, #0
 8002800:	639a      	str	r2, [r3, #56]	@ 0x38
	            htim1.Instance -> CCR4 = 155;
 8002802:	4b4f      	ldr	r3, [pc, #316]	@ (8002940 <frontRight+0x254>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	229b      	movs	r2, #155	@ 0x9b
 8002808:	641a      	str	r2, [r3, #64]	@ 0x40
	            yawAngle = 0.0;
 800280a:	4b4b      	ldr	r3, [pc, #300]	@ (8002938 <frontRight+0x24c>)
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

	              return;
 8002812:	e08c      	b.n	800292e <frontRight+0x242>
	       HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8002814:	e79a      	b.n	800274c <frontRight+0x60>
	          }
	    }
	}
	else{
	    yawAngle = 0.0; //reset angle
 8002816:	4b48      	ldr	r3, [pc, #288]	@ (8002938 <frontRight+0x24c>)
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
	    uint32_t pwmValL = 2500;
 800281e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002822:	637b      	str	r3, [r7, #52]	@ 0x34
	    uint32_t pwmValR = 500;
 8002824:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002828:	633b      	str	r3, [r7, #48]	@ 0x30
	    uint32_t encoderCount = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    uint32_t startEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 800282e:	4b43      	ldr	r3, [pc, #268]	@ (800293c <frontRight+0x250>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	62bb      	str	r3, [r7, #40]	@ 0x28
	    uint32_t currentEncoderCount = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
	    uint32_t targetTicks = (uint32_t)countTargetTicks(distance);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fb52 	bl	8001ee4 <countTargetTicks>
 8002840:	6238      	str	r0, [r7, #32]

	        //(uint32_t)countTargetTicks(distance);
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002842:	210c      	movs	r1, #12
 8002844:	483e      	ldr	r0, [pc, #248]	@ (8002940 <frontRight+0x254>)
 8002846:	f003 fe9f 	bl	8006588 <HAL_TIM_PWM_Start>
	    htim1.Instance->CCR4 = 260;
 800284a:	4b3d      	ldr	r3, [pc, #244]	@ (8002940 <frontRight+0x254>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002852:	641a      	str	r2, [r3, #64]	@ 0x40
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002854:	2100      	movs	r1, #0
 8002856:	483b      	ldr	r0, [pc, #236]	@ (8002944 <frontRight+0x258>)
 8002858:	f003 fe96 	bl	8006588 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800285c:	2104      	movs	r1, #4
 800285e:	4839      	ldr	r0, [pc, #228]	@ (8002944 <frontRight+0x258>)
 8002860:	f003 fe92 	bl	8006588 <HAL_TIM_PWM_Start>

	    for(;;){
	      //Move Forward
	       HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8002864:	2201      	movs	r2, #1
 8002866:	2108      	movs	r1, #8
 8002868:	4837      	ldr	r0, [pc, #220]	@ (8002948 <frontRight+0x25c>)
 800286a:	f002 f927 	bl	8004abc <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 800286e:	2200      	movs	r2, #0
 8002870:	2104      	movs	r1, #4
 8002872:	4835      	ldr	r0, [pc, #212]	@ (8002948 <frontRight+0x25c>)
 8002874:	f002 f922 	bl	8004abc <HAL_GPIO_WritePin>
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValL);
 8002878:	4b32      	ldr	r3, [pc, #200]	@ (8002944 <frontRight+0x258>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800287e:	635a      	str	r2, [r3, #52]	@ 0x34
	       HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 8002880:	2200      	movs	r2, #0
 8002882:	2120      	movs	r1, #32
 8002884:	4830      	ldr	r0, [pc, #192]	@ (8002948 <frontRight+0x25c>)
 8002886:	f002 f919 	bl	8004abc <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 800288a:	2201      	movs	r2, #1
 800288c:	2110      	movs	r1, #16
 800288e:	482e      	ldr	r0, [pc, #184]	@ (8002948 <frontRight+0x25c>)
 8002890:	f002 f914 	bl	8004abc <HAL_GPIO_WritePin>
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValR);
 8002894:	4b2b      	ldr	r3, [pc, #172]	@ (8002944 <frontRight+0x258>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800289a:	639a      	str	r2, [r3, #56]	@ 0x38
	      currentEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 800289c:	4b27      	ldr	r3, [pc, #156]	@ (800293c <frontRight+0x250>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
	      osDelay(10);
 80028a4:	200a      	movs	r0, #10
 80028a6:	f006 fbe9 	bl	800907c <osDelay>
	        // Check if the robot has reached the target distance

	          // Calculate total encoder ticks since the motor started moving
	          if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80028aa:	4b24      	ldr	r3, [pc, #144]	@ (800293c <frontRight+0x250>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b10      	cmp	r3, #16
 80028b6:	d104      	bne.n	80028c2 <frontRight+0x1d6>
	              encoderCount = (startEncoderCount - currentEncoderCount);
 80028b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028c0:	e003      	b.n	80028ca <frontRight+0x1de>
	          } else {
	              encoderCount = (currentEncoderCount - startEncoderCount);
 80028c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	          }

	          if (fabs(yawAngle)>=81) {
 80028ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002938 <frontRight+0x24c>)
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	eef0 7ae7 	vabs.f32	s15, s15
 80028d4:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002950 <frontRight+0x264>
 80028d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	db24      	blt.n	800292c <frontRight+0x240>
	              // Stop the motor
	            HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80028e2:	2200      	movs	r2, #0
 80028e4:	2104      	movs	r1, #4
 80028e6:	4818      	ldr	r0, [pc, #96]	@ (8002948 <frontRight+0x25c>)
 80028e8:	f002 f8e8 	bl	8004abc <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80028ec:	2200      	movs	r2, #0
 80028ee:	2108      	movs	r1, #8
 80028f0:	4815      	ldr	r0, [pc, #84]	@ (8002948 <frontRight+0x25c>)
 80028f2:	f002 f8e3 	bl	8004abc <HAL_GPIO_WritePin>
	            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);  // Stop PWM
 80028f6:	4b13      	ldr	r3, [pc, #76]	@ (8002944 <frontRight+0x258>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2200      	movs	r2, #0
 80028fc:	635a      	str	r2, [r3, #52]	@ 0x34
	            HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80028fe:	2200      	movs	r2, #0
 8002900:	2120      	movs	r1, #32
 8002902:	4811      	ldr	r0, [pc, #68]	@ (8002948 <frontRight+0x25c>)
 8002904:	f002 f8da 	bl	8004abc <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002908:	2200      	movs	r2, #0
 800290a:	2110      	movs	r1, #16
 800290c:	480e      	ldr	r0, [pc, #56]	@ (8002948 <frontRight+0x25c>)
 800290e:	f002 f8d5 	bl	8004abc <HAL_GPIO_WritePin>
	            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);  // Stop PWM
 8002912:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <frontRight+0x258>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2200      	movs	r2, #0
 8002918:	639a      	str	r2, [r3, #56]	@ 0x38
	            htim1.Instance -> CCR4 = 155;
 800291a:	4b09      	ldr	r3, [pc, #36]	@ (8002940 <frontRight+0x254>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	229b      	movs	r2, #155	@ 0x9b
 8002920:	641a      	str	r2, [r3, #64]	@ 0x40
	            yawAngle = 0.0;
 8002922:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <frontRight+0x24c>)
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	601a      	str	r2, [r3, #0]

	              return;
 800292a:	e000      	b.n	800292e <frontRight+0x242>
	       HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 800292c:	e79a      	b.n	8002864 <frontRight+0x178>
	          }
	    }
	}


}
 800292e:	3738      	adds	r7, #56	@ 0x38
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20000000 	.word	0x20000000
 8002938:	20000514 	.word	0x20000514
 800293c:	20000328 	.word	0x20000328
 8002940:	200002e0 	.word	0x200002e0
 8002944:	20000448 	.word	0x20000448
 8002948:	40020000 	.word	0x40020000
 800294c:	42aa0000 	.word	0x42aa0000
 8002950:	42a20000 	.word	0x42a20000

08002954 <backRight>:


void backRight(int distance){
 8002954:	b580      	push	{r7, lr}
 8002956:	b08e      	sub	sp, #56	@ 0x38
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	if(indoor){
 800295c:	4b8f      	ldr	r3, [pc, #572]	@ (8002b9c <backRight+0x248>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 808c 	beq.w	8002a7e <backRight+0x12a>
		yawAngle = 0.0; //reset angle
 8002966:	4b8e      	ldr	r3, [pc, #568]	@ (8002ba0 <backRight+0x24c>)
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
	    uint32_t pwmValL = 2000;
 800296e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002972:	61fb      	str	r3, [r7, #28]
	    uint32_t pwmValR = 500;
 8002974:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002978:	61bb      	str	r3, [r7, #24]
	  	uint32_t encoderCount = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
	  	uint32_t startEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 800297e:	4b89      	ldr	r3, [pc, #548]	@ (8002ba4 <backRight+0x250>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	613b      	str	r3, [r7, #16]
	  	uint32_t currentEncoderCount = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
	  	uint32_t targetTicks = (uint32_t)countTargetTicks(distance);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff faaa 	bl	8001ee4 <countTargetTicks>
 8002990:	60b8      	str	r0, [r7, #8]

	  			//(uint32_t)countTargetTicks(distance);
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002992:	210c      	movs	r1, #12
 8002994:	4884      	ldr	r0, [pc, #528]	@ (8002ba8 <backRight+0x254>)
 8002996:	f003 fdf7 	bl	8006588 <HAL_TIM_PWM_Start>
	    htim1.Instance->CCR4 = 260;
 800299a:	4b83      	ldr	r3, [pc, #524]	@ (8002ba8 <backRight+0x254>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80029a2:	641a      	str	r2, [r3, #64]	@ 0x40
	  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80029a4:	2100      	movs	r1, #0
 80029a6:	4881      	ldr	r0, [pc, #516]	@ (8002bac <backRight+0x258>)
 80029a8:	f003 fdee 	bl	8006588 <HAL_TIM_PWM_Start>
	  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80029ac:	2104      	movs	r1, #4
 80029ae:	487f      	ldr	r0, [pc, #508]	@ (8002bac <backRight+0x258>)
 80029b0:	f003 fdea 	bl	8006588 <HAL_TIM_PWM_Start>

	  	for(;;){
	  	  //Move Backwards
	  		 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 80029b4:	2200      	movs	r2, #0
 80029b6:	2108      	movs	r1, #8
 80029b8:	487d      	ldr	r0, [pc, #500]	@ (8002bb0 <backRight+0x25c>)
 80029ba:	f002 f87f 	bl	8004abc <HAL_GPIO_WritePin>
	  		 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 80029be:	2201      	movs	r2, #1
 80029c0:	2104      	movs	r1, #4
 80029c2:	487b      	ldr	r0, [pc, #492]	@ (8002bb0 <backRight+0x25c>)
 80029c4:	f002 f87a 	bl	8004abc <HAL_GPIO_WritePin>
	  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValL);
 80029c8:	4b78      	ldr	r3, [pc, #480]	@ (8002bac <backRight+0x258>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	635a      	str	r2, [r3, #52]	@ 0x34
	  		 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 80029d0:	2201      	movs	r2, #1
 80029d2:	2120      	movs	r1, #32
 80029d4:	4876      	ldr	r0, [pc, #472]	@ (8002bb0 <backRight+0x25c>)
 80029d6:	f002 f871 	bl	8004abc <HAL_GPIO_WritePin>
	  		 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 80029da:	2200      	movs	r2, #0
 80029dc:	2110      	movs	r1, #16
 80029de:	4874      	ldr	r0, [pc, #464]	@ (8002bb0 <backRight+0x25c>)
 80029e0:	f002 f86c 	bl	8004abc <HAL_GPIO_WritePin>
	  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValR);
 80029e4:	4b71      	ldr	r3, [pc, #452]	@ (8002bac <backRight+0x258>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	639a      	str	r2, [r3, #56]	@ 0x38
	  		osDelay(10);
 80029ec:	200a      	movs	r0, #10
 80029ee:	f006 fb45 	bl	800907c <osDelay>
	  		currentEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 80029f2:	4b6c      	ldr	r3, [pc, #432]	@ (8002ba4 <backRight+0x250>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	60fb      	str	r3, [r7, #12]

	        // Check if the robot has reached the target distance

	          // Calculate total encoder ticks since the motor started moving
	          if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80029fa:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba4 <backRight+0x250>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b10      	cmp	r3, #16
 8002a06:	d104      	bne.n	8002a12 <backRight+0xbe>
	              encoderCount = (startEncoderCount - currentEncoderCount);
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	e003      	b.n	8002a1a <backRight+0xc6>
	          } else {
	              encoderCount = (currentEncoderCount - startEncoderCount);
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
	          }

	          if (fabs(yawAngle)>= 87) {
 8002a1a:	4b61      	ldr	r3, [pc, #388]	@ (8002ba0 <backRight+0x24c>)
 8002a1c:	edd3 7a00 	vldr	s15, [r3]
 8002a20:	eef0 7ae7 	vabs.f32	s15, s15
 8002a24:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8002bb4 <backRight+0x260>
 8002a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a30:	db24      	blt.n	8002a7c <backRight+0x128>
	              // Stop the motor
	              HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2104      	movs	r1, #4
 8002a36:	485e      	ldr	r0, [pc, #376]	@ (8002bb0 <backRight+0x25c>)
 8002a38:	f002 f840 	bl	8004abc <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2108      	movs	r1, #8
 8002a40:	485b      	ldr	r0, [pc, #364]	@ (8002bb0 <backRight+0x25c>)
 8002a42:	f002 f83b 	bl	8004abc <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);  // Stop PWM
 8002a46:	4b59      	ldr	r3, [pc, #356]	@ (8002bac <backRight+0x258>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	635a      	str	r2, [r3, #52]	@ 0x34
	              HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2120      	movs	r1, #32
 8002a52:	4857      	ldr	r0, [pc, #348]	@ (8002bb0 <backRight+0x25c>)
 8002a54:	f002 f832 	bl	8004abc <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2110      	movs	r1, #16
 8002a5c:	4854      	ldr	r0, [pc, #336]	@ (8002bb0 <backRight+0x25c>)
 8002a5e:	f002 f82d 	bl	8004abc <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);  // Stop PWM
 8002a62:	4b52      	ldr	r3, [pc, #328]	@ (8002bac <backRight+0x258>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2200      	movs	r2, #0
 8002a68:	639a      	str	r2, [r3, #56]	@ 0x38
	              htim1.Instance -> CCR4 = 155;
 8002a6a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ba8 <backRight+0x254>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	229b      	movs	r2, #155	@ 0x9b
 8002a70:	641a      	str	r2, [r3, #64]	@ 0x40
	              yawAngle = 0.0;
 8002a72:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba0 <backRight+0x24c>)
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
	              return;
 8002a7a:	e08c      	b.n	8002b96 <backRight+0x242>
	  		 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8002a7c:	e79a      	b.n	80029b4 <backRight+0x60>
	          }
	  	}
	}
	else{
		yawAngle = 0.0; //reset angle
 8002a7e:	4b48      	ldr	r3, [pc, #288]	@ (8002ba0 <backRight+0x24c>)
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
	    uint32_t pwmValL = 2500;
 8002a86:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002a8a:	637b      	str	r3, [r7, #52]	@ 0x34
	    uint32_t pwmValR = 500;
 8002a8c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a90:	633b      	str	r3, [r7, #48]	@ 0x30
	  	uint32_t encoderCount = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  	uint32_t startEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8002a96:	4b43      	ldr	r3, [pc, #268]	@ (8002ba4 <backRight+0x250>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	  	uint32_t currentEncoderCount = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
	  	uint32_t targetTicks = (uint32_t)countTargetTicks(distance);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff fa1e 	bl	8001ee4 <countTargetTicks>
 8002aa8:	6238      	str	r0, [r7, #32]

	  			//(uint32_t)countTargetTicks(distance);
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002aaa:	210c      	movs	r1, #12
 8002aac:	483e      	ldr	r0, [pc, #248]	@ (8002ba8 <backRight+0x254>)
 8002aae:	f003 fd6b 	bl	8006588 <HAL_TIM_PWM_Start>
	    htim1.Instance->CCR4 = 260;
 8002ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba8 <backRight+0x254>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002aba:	641a      	str	r2, [r3, #64]	@ 0x40
	  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002abc:	2100      	movs	r1, #0
 8002abe:	483b      	ldr	r0, [pc, #236]	@ (8002bac <backRight+0x258>)
 8002ac0:	f003 fd62 	bl	8006588 <HAL_TIM_PWM_Start>
	  	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002ac4:	2104      	movs	r1, #4
 8002ac6:	4839      	ldr	r0, [pc, #228]	@ (8002bac <backRight+0x258>)
 8002ac8:	f003 fd5e 	bl	8006588 <HAL_TIM_PWM_Start>

	  	for(;;){
	  	  //Move Backwards
	  		 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2108      	movs	r1, #8
 8002ad0:	4837      	ldr	r0, [pc, #220]	@ (8002bb0 <backRight+0x25c>)
 8002ad2:	f001 fff3 	bl	8004abc <HAL_GPIO_WritePin>
	  		 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2104      	movs	r1, #4
 8002ada:	4835      	ldr	r0, [pc, #212]	@ (8002bb0 <backRight+0x25c>)
 8002adc:	f001 ffee 	bl	8004abc <HAL_GPIO_WritePin>
	  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValL);
 8002ae0:	4b32      	ldr	r3, [pc, #200]	@ (8002bac <backRight+0x258>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ae6:	635a      	str	r2, [r3, #52]	@ 0x34
	  		 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2120      	movs	r1, #32
 8002aec:	4830      	ldr	r0, [pc, #192]	@ (8002bb0 <backRight+0x25c>)
 8002aee:	f001 ffe5 	bl	8004abc <HAL_GPIO_WritePin>
	  		 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2110      	movs	r1, #16
 8002af6:	482e      	ldr	r0, [pc, #184]	@ (8002bb0 <backRight+0x25c>)
 8002af8:	f001 ffe0 	bl	8004abc <HAL_GPIO_WritePin>
	  		 __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValR);
 8002afc:	4b2b      	ldr	r3, [pc, #172]	@ (8002bac <backRight+0x258>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b02:	639a      	str	r2, [r3, #56]	@ 0x38
	  		osDelay(10);
 8002b04:	200a      	movs	r0, #10
 8002b06:	f006 fab9 	bl	800907c <osDelay>
	  		currentEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8002b0a:	4b26      	ldr	r3, [pc, #152]	@ (8002ba4 <backRight+0x250>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24

	        // Check if the robot has reached the target distance

	          // Calculate total encoder ticks since the motor started moving
	          if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8002b12:	4b24      	ldr	r3, [pc, #144]	@ (8002ba4 <backRight+0x250>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b10      	cmp	r3, #16
 8002b1e:	d104      	bne.n	8002b2a <backRight+0x1d6>
	              encoderCount = (startEncoderCount - currentEncoderCount);
 8002b20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b28:	e003      	b.n	8002b32 <backRight+0x1de>
	          } else {
	              encoderCount = (currentEncoderCount - startEncoderCount);
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	          }

	          if (fabs(yawAngle)>= 82) {
 8002b32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <backRight+0x24c>)
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	eef0 7ae7 	vabs.f32	s15, s15
 8002b3c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002bb8 <backRight+0x264>
 8002b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b48:	db24      	blt.n	8002b94 <backRight+0x240>
	              // Stop the motor
	              HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2104      	movs	r1, #4
 8002b4e:	4818      	ldr	r0, [pc, #96]	@ (8002bb0 <backRight+0x25c>)
 8002b50:	f001 ffb4 	bl	8004abc <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2108      	movs	r1, #8
 8002b58:	4815      	ldr	r0, [pc, #84]	@ (8002bb0 <backRight+0x25c>)
 8002b5a:	f001 ffaf 	bl	8004abc <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);  // Stop PWM
 8002b5e:	4b13      	ldr	r3, [pc, #76]	@ (8002bac <backRight+0x258>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2200      	movs	r2, #0
 8002b64:	635a      	str	r2, [r3, #52]	@ 0x34
	              HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2120      	movs	r1, #32
 8002b6a:	4811      	ldr	r0, [pc, #68]	@ (8002bb0 <backRight+0x25c>)
 8002b6c:	f001 ffa6 	bl	8004abc <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002b70:	2200      	movs	r2, #0
 8002b72:	2110      	movs	r1, #16
 8002b74:	480e      	ldr	r0, [pc, #56]	@ (8002bb0 <backRight+0x25c>)
 8002b76:	f001 ffa1 	bl	8004abc <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);  // Stop PWM
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <backRight+0x258>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	639a      	str	r2, [r3, #56]	@ 0x38
	              htim1.Instance -> CCR4 = 155;
 8002b82:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <backRight+0x254>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	229b      	movs	r2, #155	@ 0x9b
 8002b88:	641a      	str	r2, [r3, #64]	@ 0x40
	              yawAngle = 0.0;
 8002b8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <backRight+0x24c>)
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
	              return;
 8002b92:	e000      	b.n	8002b96 <backRight+0x242>
	  		 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8002b94:	e79a      	b.n	8002acc <backRight+0x178>
	          }
	  	}
	}
}
 8002b96:	3738      	adds	r7, #56	@ 0x38
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	20000514 	.word	0x20000514
 8002ba4:	20000328 	.word	0x20000328
 8002ba8:	200002e0 	.word	0x200002e0
 8002bac:	20000448 	.word	0x20000448
 8002bb0:	40020000 	.word	0x40020000
 8002bb4:	42ae0000 	.word	0x42ae0000
 8002bb8:	42a40000 	.word	0x42a40000

08002bbc <frontLeft>:
void frontLeft(int distance){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08e      	sub	sp, #56	@ 0x38
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	if(indoor){
 8002bc4:	4b8e      	ldr	r3, [pc, #568]	@ (8002e00 <frontLeft+0x244>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 808b 	beq.w	8002ce4 <frontLeft+0x128>
		yawAngle = 0.0; //reset angle
 8002bce:	4b8d      	ldr	r3, [pc, #564]	@ (8002e04 <frontLeft+0x248>)
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
	    uint32_t pwmValL = 450;
 8002bd6:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8002bda:	61fb      	str	r3, [r7, #28]
	    uint32_t pwmValR = 2000;
 8002bdc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002be0:	61bb      	str	r3, [r7, #24]
	    uint32_t encoderCount = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
	    uint32_t startEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8002be6:	4b88      	ldr	r3, [pc, #544]	@ (8002e08 <frontLeft+0x24c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	613b      	str	r3, [r7, #16]
	    uint32_t currentEncoderCount = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
	    uint32_t targetTicks = (uint32_t)countTargetTicks(distance);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff f976 	bl	8001ee4 <countTargetTicks>
 8002bf8:	60b8      	str	r0, [r7, #8]

	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002bfa:	210c      	movs	r1, #12
 8002bfc:	4883      	ldr	r0, [pc, #524]	@ (8002e0c <frontLeft+0x250>)
 8002bfe:	f003 fcc3 	bl	8006588 <HAL_TIM_PWM_Start>
	    htim1.Instance->CCR4 = 120;
 8002c02:	4b82      	ldr	r3, [pc, #520]	@ (8002e0c <frontLeft+0x250>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2278      	movs	r2, #120	@ 0x78
 8002c08:	641a      	str	r2, [r3, #64]	@ 0x40
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4880      	ldr	r0, [pc, #512]	@ (8002e10 <frontLeft+0x254>)
 8002c0e:	f003 fcbb 	bl	8006588 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002c12:	2104      	movs	r1, #4
 8002c14:	487e      	ldr	r0, [pc, #504]	@ (8002e10 <frontLeft+0x254>)
 8002c16:	f003 fcb7 	bl	8006588 <HAL_TIM_PWM_Start>


	    for(;;){
	      //Move Forward
	       HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	2108      	movs	r1, #8
 8002c1e:	487d      	ldr	r0, [pc, #500]	@ (8002e14 <frontLeft+0x258>)
 8002c20:	f001 ff4c 	bl	8004abc <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 8002c24:	2200      	movs	r2, #0
 8002c26:	2104      	movs	r1, #4
 8002c28:	487a      	ldr	r0, [pc, #488]	@ (8002e14 <frontLeft+0x258>)
 8002c2a:	f001 ff47 	bl	8004abc <HAL_GPIO_WritePin>
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValL);
 8002c2e:	4b78      	ldr	r3, [pc, #480]	@ (8002e10 <frontLeft+0x254>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	635a      	str	r2, [r3, #52]	@ 0x34
	       HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2120      	movs	r1, #32
 8002c3a:	4876      	ldr	r0, [pc, #472]	@ (8002e14 <frontLeft+0x258>)
 8002c3c:	f001 ff3e 	bl	8004abc <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 8002c40:	2201      	movs	r2, #1
 8002c42:	2110      	movs	r1, #16
 8002c44:	4873      	ldr	r0, [pc, #460]	@ (8002e14 <frontLeft+0x258>)
 8002c46:	f001 ff39 	bl	8004abc <HAL_GPIO_WritePin>
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValR);
 8002c4a:	4b71      	ldr	r3, [pc, #452]	@ (8002e10 <frontLeft+0x254>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	639a      	str	r2, [r3, #56]	@ 0x38
	      osDelay(10);
 8002c52:	200a      	movs	r0, #10
 8002c54:	f006 fa12 	bl	800907c <osDelay>
	      currentEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8002c58:	4b6b      	ldr	r3, [pc, #428]	@ (8002e08 <frontLeft+0x24c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	60fb      	str	r3, [r7, #12]

	        // Check if the robot has reached the target distance

	          // Calculate total encoder ticks since the motor started moving
	          if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8002c60:	4b69      	ldr	r3, [pc, #420]	@ (8002e08 <frontLeft+0x24c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d104      	bne.n	8002c78 <frontLeft+0xbc>
	              encoderCount = (startEncoderCount - currentEncoderCount);
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	e003      	b.n	8002c80 <frontLeft+0xc4>
	          } else {
	              encoderCount = (currentEncoderCount - startEncoderCount);
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	617b      	str	r3, [r7, #20]
	          }

	          if (fabs(yawAngle)>= 81) {
 8002c80:	4b60      	ldr	r3, [pc, #384]	@ (8002e04 <frontLeft+0x248>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	eef0 7ae7 	vabs.f32	s15, s15
 8002c8a:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8002e18 <frontLeft+0x25c>
 8002c8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c96:	db24      	blt.n	8002ce2 <frontLeft+0x126>
	              HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2104      	movs	r1, #4
 8002c9c:	485d      	ldr	r0, [pc, #372]	@ (8002e14 <frontLeft+0x258>)
 8002c9e:	f001 ff0d 	bl	8004abc <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2108      	movs	r1, #8
 8002ca6:	485b      	ldr	r0, [pc, #364]	@ (8002e14 <frontLeft+0x258>)
 8002ca8:	f001 ff08 	bl	8004abc <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);  // Stop PWM
 8002cac:	4b58      	ldr	r3, [pc, #352]	@ (8002e10 <frontLeft+0x254>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	635a      	str	r2, [r3, #52]	@ 0x34
	              HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2120      	movs	r1, #32
 8002cb8:	4856      	ldr	r0, [pc, #344]	@ (8002e14 <frontLeft+0x258>)
 8002cba:	f001 feff 	bl	8004abc <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2110      	movs	r1, #16
 8002cc2:	4854      	ldr	r0, [pc, #336]	@ (8002e14 <frontLeft+0x258>)
 8002cc4:	f001 fefa 	bl	8004abc <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);  // Stop PWM
 8002cc8:	4b51      	ldr	r3, [pc, #324]	@ (8002e10 <frontLeft+0x254>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	639a      	str	r2, [r3, #56]	@ 0x38
	              htim1.Instance -> CCR4 = 155;
 8002cd0:	4b4e      	ldr	r3, [pc, #312]	@ (8002e0c <frontLeft+0x250>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	229b      	movs	r2, #155	@ 0x9b
 8002cd6:	641a      	str	r2, [r3, #64]	@ 0x40
	              yawAngle = 0.0;
 8002cd8:	4b4a      	ldr	r3, [pc, #296]	@ (8002e04 <frontLeft+0x248>)
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
	              return;
 8002ce0:	e08b      	b.n	8002dfa <frontLeft+0x23e>
	       HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8002ce2:	e79a      	b.n	8002c1a <frontLeft+0x5e>
	          }
	    }
	}
	else{
		yawAngle = 0.0; //reset angle
 8002ce4:	4b47      	ldr	r3, [pc, #284]	@ (8002e04 <frontLeft+0x248>)
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
	    uint32_t pwmValL = 500;
 8002cec:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002cf0:	637b      	str	r3, [r7, #52]	@ 0x34
	    uint32_t pwmValR = 2500;
 8002cf2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002cf6:	633b      	str	r3, [r7, #48]	@ 0x30
	    uint32_t encoderCount = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    uint32_t startEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8002cfc:	4b42      	ldr	r3, [pc, #264]	@ (8002e08 <frontLeft+0x24c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	62bb      	str	r3, [r7, #40]	@ 0x28
	    uint32_t currentEncoderCount = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	627b      	str	r3, [r7, #36]	@ 0x24
	    uint32_t targetTicks = (uint32_t)countTargetTicks(distance);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff f8eb 	bl	8001ee4 <countTargetTicks>
 8002d0e:	6238      	str	r0, [r7, #32]

	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002d10:	210c      	movs	r1, #12
 8002d12:	483e      	ldr	r0, [pc, #248]	@ (8002e0c <frontLeft+0x250>)
 8002d14:	f003 fc38 	bl	8006588 <HAL_TIM_PWM_Start>
	    htim1.Instance->CCR4 = 120;
 8002d18:	4b3c      	ldr	r3, [pc, #240]	@ (8002e0c <frontLeft+0x250>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2278      	movs	r2, #120	@ 0x78
 8002d1e:	641a      	str	r2, [r3, #64]	@ 0x40
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002d20:	2100      	movs	r1, #0
 8002d22:	483b      	ldr	r0, [pc, #236]	@ (8002e10 <frontLeft+0x254>)
 8002d24:	f003 fc30 	bl	8006588 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002d28:	2104      	movs	r1, #4
 8002d2a:	4839      	ldr	r0, [pc, #228]	@ (8002e10 <frontLeft+0x254>)
 8002d2c:	f003 fc2c 	bl	8006588 <HAL_TIM_PWM_Start>


	    for(;;){
	      //Move Forward
	       HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8002d30:	2201      	movs	r2, #1
 8002d32:	2108      	movs	r1, #8
 8002d34:	4837      	ldr	r0, [pc, #220]	@ (8002e14 <frontLeft+0x258>)
 8002d36:	f001 fec1 	bl	8004abc <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2104      	movs	r1, #4
 8002d3e:	4835      	ldr	r0, [pc, #212]	@ (8002e14 <frontLeft+0x258>)
 8002d40:	f001 febc 	bl	8004abc <HAL_GPIO_WritePin>
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValL);
 8002d44:	4b32      	ldr	r3, [pc, #200]	@ (8002e10 <frontLeft+0x254>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d4a:	635a      	str	r2, [r3, #52]	@ 0x34
	       HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2120      	movs	r1, #32
 8002d50:	4830      	ldr	r0, [pc, #192]	@ (8002e14 <frontLeft+0x258>)
 8002d52:	f001 feb3 	bl	8004abc <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 8002d56:	2201      	movs	r2, #1
 8002d58:	2110      	movs	r1, #16
 8002d5a:	482e      	ldr	r0, [pc, #184]	@ (8002e14 <frontLeft+0x258>)
 8002d5c:	f001 feae 	bl	8004abc <HAL_GPIO_WritePin>
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValR);
 8002d60:	4b2b      	ldr	r3, [pc, #172]	@ (8002e10 <frontLeft+0x254>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d66:	639a      	str	r2, [r3, #56]	@ 0x38
	      osDelay(10);
 8002d68:	200a      	movs	r0, #10
 8002d6a:	f006 f987 	bl	800907c <osDelay>
	      currentEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8002d6e:	4b26      	ldr	r3, [pc, #152]	@ (8002e08 <frontLeft+0x24c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24

	        // Check if the robot has reached the target distance

	          // Calculate total encoder ticks since the motor started moving
	          if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8002d76:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <frontLeft+0x24c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d104      	bne.n	8002d8e <frontLeft+0x1d2>
	              encoderCount = (startEncoderCount - currentEncoderCount);
 8002d84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d8c:	e003      	b.n	8002d96 <frontLeft+0x1da>
	          } else {
	              encoderCount = (currentEncoderCount - startEncoderCount);
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	          }

	          if (fabs(yawAngle)>= 86) {
 8002d96:	4b1b      	ldr	r3, [pc, #108]	@ (8002e04 <frontLeft+0x248>)
 8002d98:	edd3 7a00 	vldr	s15, [r3]
 8002d9c:	eef0 7ae7 	vabs.f32	s15, s15
 8002da0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002e1c <frontLeft+0x260>
 8002da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dac:	db24      	blt.n	8002df8 <frontLeft+0x23c>
	              HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2104      	movs	r1, #4
 8002db2:	4818      	ldr	r0, [pc, #96]	@ (8002e14 <frontLeft+0x258>)
 8002db4:	f001 fe82 	bl	8004abc <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002db8:	2200      	movs	r2, #0
 8002dba:	2108      	movs	r1, #8
 8002dbc:	4815      	ldr	r0, [pc, #84]	@ (8002e14 <frontLeft+0x258>)
 8002dbe:	f001 fe7d 	bl	8004abc <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);  // Stop PWM
 8002dc2:	4b13      	ldr	r3, [pc, #76]	@ (8002e10 <frontLeft+0x254>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	635a      	str	r2, [r3, #52]	@ 0x34
	              HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2120      	movs	r1, #32
 8002dce:	4811      	ldr	r0, [pc, #68]	@ (8002e14 <frontLeft+0x258>)
 8002dd0:	f001 fe74 	bl	8004abc <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2110      	movs	r1, #16
 8002dd8:	480e      	ldr	r0, [pc, #56]	@ (8002e14 <frontLeft+0x258>)
 8002dda:	f001 fe6f 	bl	8004abc <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);  // Stop PWM
 8002dde:	4b0c      	ldr	r3, [pc, #48]	@ (8002e10 <frontLeft+0x254>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2200      	movs	r2, #0
 8002de4:	639a      	str	r2, [r3, #56]	@ 0x38
	              htim1.Instance -> CCR4 = 155;
 8002de6:	4b09      	ldr	r3, [pc, #36]	@ (8002e0c <frontLeft+0x250>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	229b      	movs	r2, #155	@ 0x9b
 8002dec:	641a      	str	r2, [r3, #64]	@ 0x40
	              yawAngle = 0.0;
 8002dee:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <frontLeft+0x248>)
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
	              return;
 8002df6:	e000      	b.n	8002dfa <frontLeft+0x23e>
	       HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8002df8:	e79a      	b.n	8002d30 <frontLeft+0x174>
	          }
	    }
	}

}
 8002dfa:	3738      	adds	r7, #56	@ 0x38
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000000 	.word	0x20000000
 8002e04:	20000514 	.word	0x20000514
 8002e08:	20000328 	.word	0x20000328
 8002e0c:	200002e0 	.word	0x200002e0
 8002e10:	20000448 	.word	0x20000448
 8002e14:	40020000 	.word	0x40020000
 8002e18:	42a20000 	.word	0x42a20000
 8002e1c:	42ac0000 	.word	0x42ac0000

08002e20 <backLeft>:

void backLeft(int distance){
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08e      	sub	sp, #56	@ 0x38
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	if(indoor){
 8002e28:	4b8e      	ldr	r3, [pc, #568]	@ (8003064 <backLeft+0x244>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 808b 	beq.w	8002f48 <backLeft+0x128>
		yawAngle = 0.0; //reset angle
 8002e32:	4b8d      	ldr	r3, [pc, #564]	@ (8003068 <backLeft+0x248>)
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
	    uint32_t pwmValL = 500;
 8002e3a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002e3e:	61fb      	str	r3, [r7, #28]
	    uint32_t pwmValR = 2000;
 8002e40:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002e44:	61bb      	str	r3, [r7, #24]
	    uint32_t encoderCount = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
	    uint32_t startEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8002e4a:	4b88      	ldr	r3, [pc, #544]	@ (800306c <backLeft+0x24c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	613b      	str	r3, [r7, #16]
	    uint32_t currentEncoderCount = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
	    uint32_t targetTicks = (uint32_t)countTargetTicks(distance);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff f844 	bl	8001ee4 <countTargetTicks>
 8002e5c:	60b8      	str	r0, [r7, #8]

	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002e5e:	210c      	movs	r1, #12
 8002e60:	4883      	ldr	r0, [pc, #524]	@ (8003070 <backLeft+0x250>)
 8002e62:	f003 fb91 	bl	8006588 <HAL_TIM_PWM_Start>
	    htim1.Instance->CCR4 = 88;
 8002e66:	4b82      	ldr	r3, [pc, #520]	@ (8003070 <backLeft+0x250>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2258      	movs	r2, #88	@ 0x58
 8002e6c:	641a      	str	r2, [r3, #64]	@ 0x40
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4880      	ldr	r0, [pc, #512]	@ (8003074 <backLeft+0x254>)
 8002e72:	f003 fb89 	bl	8006588 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002e76:	2104      	movs	r1, #4
 8002e78:	487e      	ldr	r0, [pc, #504]	@ (8003074 <backLeft+0x254>)
 8002e7a:	f003 fb85 	bl	8006588 <HAL_TIM_PWM_Start>


	    for(;;){
	      //Move Backwards
	       HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2108      	movs	r1, #8
 8002e82:	487d      	ldr	r0, [pc, #500]	@ (8003078 <backLeft+0x258>)
 8002e84:	f001 fe1a 	bl	8004abc <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 8002e88:	2201      	movs	r2, #1
 8002e8a:	2104      	movs	r1, #4
 8002e8c:	487a      	ldr	r0, [pc, #488]	@ (8003078 <backLeft+0x258>)
 8002e8e:	f001 fe15 	bl	8004abc <HAL_GPIO_WritePin>
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValL);
 8002e92:	4b78      	ldr	r3, [pc, #480]	@ (8003074 <backLeft+0x254>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	635a      	str	r2, [r3, #52]	@ 0x34
	       HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	2120      	movs	r1, #32
 8002e9e:	4876      	ldr	r0, [pc, #472]	@ (8003078 <backLeft+0x258>)
 8002ea0:	f001 fe0c 	bl	8004abc <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2110      	movs	r1, #16
 8002ea8:	4873      	ldr	r0, [pc, #460]	@ (8003078 <backLeft+0x258>)
 8002eaa:	f001 fe07 	bl	8004abc <HAL_GPIO_WritePin>
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValR);
 8002eae:	4b71      	ldr	r3, [pc, #452]	@ (8003074 <backLeft+0x254>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	639a      	str	r2, [r3, #56]	@ 0x38
	      osDelay(10);
 8002eb6:	200a      	movs	r0, #10
 8002eb8:	f006 f8e0 	bl	800907c <osDelay>
	      currentEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8002ebc:	4b6b      	ldr	r3, [pc, #428]	@ (800306c <backLeft+0x24c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	60fb      	str	r3, [r7, #12]

	        // Check if the robot has reached the target distance

	          // Calculate total encoder ticks since the motor started moving
	          if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8002ec4:	4b69      	ldr	r3, [pc, #420]	@ (800306c <backLeft+0x24c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b10      	cmp	r3, #16
 8002ed0:	d104      	bne.n	8002edc <backLeft+0xbc>
	              encoderCount = (startEncoderCount - currentEncoderCount);
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e003      	b.n	8002ee4 <backLeft+0xc4>
	          } else {
	              encoderCount = (currentEncoderCount - startEncoderCount);
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	617b      	str	r3, [r7, #20]
	          }

	          if (fabs(yawAngle)>=82) {
 8002ee4:	4b60      	ldr	r3, [pc, #384]	@ (8003068 <backLeft+0x248>)
 8002ee6:	edd3 7a00 	vldr	s15, [r3]
 8002eea:	eef0 7ae7 	vabs.f32	s15, s15
 8002eee:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800307c <backLeft+0x25c>
 8002ef2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efa:	db24      	blt.n	8002f46 <backLeft+0x126>
	              HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002efc:	2200      	movs	r2, #0
 8002efe:	2104      	movs	r1, #4
 8002f00:	485d      	ldr	r0, [pc, #372]	@ (8003078 <backLeft+0x258>)
 8002f02:	f001 fddb 	bl	8004abc <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2108      	movs	r1, #8
 8002f0a:	485b      	ldr	r0, [pc, #364]	@ (8003078 <backLeft+0x258>)
 8002f0c:	f001 fdd6 	bl	8004abc <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);  // Stop PWM
 8002f10:	4b58      	ldr	r3, [pc, #352]	@ (8003074 <backLeft+0x254>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	635a      	str	r2, [r3, #52]	@ 0x34
	              HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	4856      	ldr	r0, [pc, #344]	@ (8003078 <backLeft+0x258>)
 8002f1e:	f001 fdcd 	bl	8004abc <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2110      	movs	r1, #16
 8002f26:	4854      	ldr	r0, [pc, #336]	@ (8003078 <backLeft+0x258>)
 8002f28:	f001 fdc8 	bl	8004abc <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);  // Stop PWM
 8002f2c:	4b51      	ldr	r3, [pc, #324]	@ (8003074 <backLeft+0x254>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2200      	movs	r2, #0
 8002f32:	639a      	str	r2, [r3, #56]	@ 0x38
	              htim1.Instance -> CCR4 = 155;
 8002f34:	4b4e      	ldr	r3, [pc, #312]	@ (8003070 <backLeft+0x250>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	229b      	movs	r2, #155	@ 0x9b
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40
	              yawAngle = 0.0;
 8002f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8003068 <backLeft+0x248>)
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
	              return;
 8002f44:	e08b      	b.n	800305e <backLeft+0x23e>
	       HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8002f46:	e79a      	b.n	8002e7e <backLeft+0x5e>
	          }
	    }
	}
	else{
		yawAngle = 0.0; //reset angle
 8002f48:	4b47      	ldr	r3, [pc, #284]	@ (8003068 <backLeft+0x248>)
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
	    uint32_t pwmValL = 500;
 8002f50:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002f54:	637b      	str	r3, [r7, #52]	@ 0x34
	    uint32_t pwmValR = 2500;
 8002f56:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002f5a:	633b      	str	r3, [r7, #48]	@ 0x30
	    uint32_t encoderCount = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    uint32_t startEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8002f60:	4b42      	ldr	r3, [pc, #264]	@ (800306c <backLeft+0x24c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	62bb      	str	r3, [r7, #40]	@ 0x28
	    uint32_t currentEncoderCount = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24
	    uint32_t targetTicks = (uint32_t)countTargetTicks(distance);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7fe ffb9 	bl	8001ee4 <countTargetTicks>
 8002f72:	6238      	str	r0, [r7, #32]

	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002f74:	210c      	movs	r1, #12
 8002f76:	483e      	ldr	r0, [pc, #248]	@ (8003070 <backLeft+0x250>)
 8002f78:	f003 fb06 	bl	8006588 <HAL_TIM_PWM_Start>
	    htim1.Instance->CCR4 = 88;
 8002f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8003070 <backLeft+0x250>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2258      	movs	r2, #88	@ 0x58
 8002f82:	641a      	str	r2, [r3, #64]	@ 0x40
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002f84:	2100      	movs	r1, #0
 8002f86:	483b      	ldr	r0, [pc, #236]	@ (8003074 <backLeft+0x254>)
 8002f88:	f003 fafe 	bl	8006588 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002f8c:	2104      	movs	r1, #4
 8002f8e:	4839      	ldr	r0, [pc, #228]	@ (8003074 <backLeft+0x254>)
 8002f90:	f003 fafa 	bl	8006588 <HAL_TIM_PWM_Start>


	    for(;;){
	      //Move Backwards
	       HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8002f94:	2200      	movs	r2, #0
 8002f96:	2108      	movs	r1, #8
 8002f98:	4837      	ldr	r0, [pc, #220]	@ (8003078 <backLeft+0x258>)
 8002f9a:	f001 fd8f 	bl	8004abc <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	2104      	movs	r1, #4
 8002fa2:	4835      	ldr	r0, [pc, #212]	@ (8003078 <backLeft+0x258>)
 8002fa4:	f001 fd8a 	bl	8004abc <HAL_GPIO_WritePin>
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwmValL);
 8002fa8:	4b32      	ldr	r3, [pc, #200]	@ (8003074 <backLeft+0x254>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fae:	635a      	str	r2, [r3, #52]	@ 0x34
	       HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	2120      	movs	r1, #32
 8002fb4:	4830      	ldr	r0, [pc, #192]	@ (8003078 <backLeft+0x258>)
 8002fb6:	f001 fd81 	bl	8004abc <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2110      	movs	r1, #16
 8002fbe:	482e      	ldr	r0, [pc, #184]	@ (8003078 <backLeft+0x258>)
 8002fc0:	f001 fd7c 	bl	8004abc <HAL_GPIO_WritePin>
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmValR);
 8002fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003074 <backLeft+0x254>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fca:	639a      	str	r2, [r3, #56]	@ 0x38
	      osDelay(10);
 8002fcc:	200a      	movs	r0, #10
 8002fce:	f006 f855 	bl	800907c <osDelay>
	      currentEncoderCount = __HAL_TIM_GET_COUNTER(&htim2);
 8002fd2:	4b26      	ldr	r3, [pc, #152]	@ (800306c <backLeft+0x24c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	627b      	str	r3, [r7, #36]	@ 0x24

	        // Check if the robot has reached the target distance

	          // Calculate total encoder ticks since the motor started moving
	          if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8002fda:	4b24      	ldr	r3, [pc, #144]	@ (800306c <backLeft+0x24c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d104      	bne.n	8002ff2 <backLeft+0x1d2>
	              encoderCount = (startEncoderCount - currentEncoderCount);
 8002fe8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ff0:	e003      	b.n	8002ffa <backLeft+0x1da>
	          } else {
	              encoderCount = (currentEncoderCount - startEncoderCount);
 8002ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	          }

	          if (fabs(yawAngle)>=79) {
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <backLeft+0x248>)
 8002ffc:	edd3 7a00 	vldr	s15, [r3]
 8003000:	eef0 7ae7 	vabs.f32	s15, s15
 8003004:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8003080 <backLeft+0x260>
 8003008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003010:	db24      	blt.n	800305c <backLeft+0x23c>
	              HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003012:	2200      	movs	r2, #0
 8003014:	2104      	movs	r1, #4
 8003016:	4818      	ldr	r0, [pc, #96]	@ (8003078 <backLeft+0x258>)
 8003018:	f001 fd50 	bl	8004abc <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800301c:	2200      	movs	r2, #0
 800301e:	2108      	movs	r1, #8
 8003020:	4815      	ldr	r0, [pc, #84]	@ (8003078 <backLeft+0x258>)
 8003022:	f001 fd4b 	bl	8004abc <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);  // Stop PWM
 8003026:	4b13      	ldr	r3, [pc, #76]	@ (8003074 <backLeft+0x254>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2200      	movs	r2, #0
 800302c:	635a      	str	r2, [r3, #52]	@ 0x34
	              HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800302e:	2200      	movs	r2, #0
 8003030:	2120      	movs	r1, #32
 8003032:	4811      	ldr	r0, [pc, #68]	@ (8003078 <backLeft+0x258>)
 8003034:	f001 fd42 	bl	8004abc <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8003038:	2200      	movs	r2, #0
 800303a:	2110      	movs	r1, #16
 800303c:	480e      	ldr	r0, [pc, #56]	@ (8003078 <backLeft+0x258>)
 800303e:	f001 fd3d 	bl	8004abc <HAL_GPIO_WritePin>
	              __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);  // Stop PWM
 8003042:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <backLeft+0x254>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2200      	movs	r2, #0
 8003048:	639a      	str	r2, [r3, #56]	@ 0x38
	              htim1.Instance -> CCR4 = 155;
 800304a:	4b09      	ldr	r3, [pc, #36]	@ (8003070 <backLeft+0x250>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	229b      	movs	r2, #155	@ 0x9b
 8003050:	641a      	str	r2, [r3, #64]	@ 0x40
	              yawAngle = 0.0;
 8003052:	4b05      	ldr	r3, [pc, #20]	@ (8003068 <backLeft+0x248>)
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
	              return;
 800305a:	e000      	b.n	800305e <backLeft+0x23e>
	       HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 800305c:	e79a      	b.n	8002f94 <backLeft+0x174>
	          }
	    }
	}
}
 800305e:	3738      	adds	r7, #56	@ 0x38
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000000 	.word	0x20000000
 8003068:	20000514 	.word	0x20000514
 800306c:	20000328 	.word	0x20000328
 8003070:	200002e0 	.word	0x200002e0
 8003074:	20000448 	.word	0x20000448
 8003078:	40020000 	.word	0x40020000
 800307c:	42a40000 	.word	0x42a40000
 8003080:	429e0000 	.word	0x429e0000

08003084 <resetAllGlobals>:

void resetAllGlobals() {
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
    target_counts = 0;
 8003088:	4b0c      	ldr	r3, [pc, #48]	@ (80030bc <resetAllGlobals+0x38>)
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
    detectedDistance = 0.0;
 800308e:	490c      	ldr	r1, [pc, #48]	@ (80030c0 <resetAllGlobals+0x3c>)
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e9c1 2300 	strd	r2, r3, [r1]
    startFlag = 0;
 800309c:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <resetAllGlobals+0x40>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
    //memset(rxBuffer, 0, sizeof(rxBuffer));
    //memset(rpiBuffer, 0, sizeof(rpiBuffer));
    memset(instructionBuffer, 0, sizeof(instructionBuffer));
 80030a2:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <resetAllGlobals+0x44>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2204      	movs	r2, #4
 80030a8:	2100      	movs	r1, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f009 ff8f 	bl	800cfce <memset>
    instructionIndex = 0;
 80030b0:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <resetAllGlobals+0x48>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	2000052c 	.word	0x2000052c
 80030c0:	20000500 	.word	0x20000500
 80030c4:	200004e8 	.word	0x200004e8
 80030c8:	200004f0 	.word	0x200004f0
 80030cc:	200004f4 	.word	0x200004f4

080030d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 80030d8:	200a      	movs	r0, #10
 80030da:	f005 ffcf 	bl	800907c <osDelay>
 80030de:	e7fb      	b.n	80030d8 <StartDefaultTask+0x8>

080030e0 <Uart_Function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Uart_Function */
void Uart_Function(void *argument)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08e      	sub	sp, #56	@ 0x38
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
//	osDelay(1000);
//	backward(50);
//	osDelay(1000);


	HAL_UART_Receive_IT(&huart3,sizeBuffer ,4);
 80030e8:	2204      	movs	r2, #4
 80030ea:	496e      	ldr	r1, [pc, #440]	@ (80032a4 <Uart_Function+0x1c4>)
 80030ec:	486e      	ldr	r0, [pc, #440]	@ (80032a8 <Uart_Function+0x1c8>)
 80030ee:	f004 ff3a 	bl	8007f66 <HAL_UART_Receive_IT>


	  for(;;)
	  {
	      if(startFlag) {
 80030f2:	4b6e      	ldr	r3, [pc, #440]	@ (80032ac <Uart_Function+0x1cc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8153 	beq.w	80033a2 <Uart_Function+0x2c2>
	       uint32_t iBufferSize,currentIndex,dirIndex,turnIndex,hunIndex,tensIndex,onesIndex,distance;
	       int digit;
	       char num[4];
	       iBufferSize = instructionIndex;
 80030fc:	4b6c      	ldr	r3, [pc, #432]	@ (80032b0 <Uart_Function+0x1d0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	633b      	str	r3, [r7, #48]	@ 0x30
	       currentIndex = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	637b      	str	r3, [r7, #52]	@ 0x34
	       //OLED_ShowString(10,50,"start movement");

	       while(currentIndex<iBufferSize){
 8003106:	e11e      	b.n	8003346 <Uart_Function+0x266>
	        dirIndex = currentIndex;
 8003108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	        turnIndex = currentIndex + 1;
 800310c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310e:	3301      	adds	r3, #1
 8003110:	62bb      	str	r3, [r7, #40]	@ 0x28
	        hunIndex = currentIndex + 2;
 8003112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003114:	3302      	adds	r3, #2
 8003116:	627b      	str	r3, [r7, #36]	@ 0x24
	        tensIndex = currentIndex + 3;
 8003118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311a:	3303      	adds	r3, #3
 800311c:	623b      	str	r3, [r7, #32]
	        onesIndex = currentIndex + 4;
 800311e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003120:	3304      	adds	r3, #4
 8003122:	61fb      	str	r3, [r7, #28]

	           int length = 3;
 8003124:	2303      	movs	r3, #3
 8003126:	61bb      	str	r3, [r7, #24]
	           strncpy(num, instructionBuffer + hunIndex, length);
 8003128:	4b62      	ldr	r3, [pc, #392]	@ (80032b4 <Uart_Function+0x1d4>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312e:	18d1      	adds	r1, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	f107 0310 	add.w	r3, r7, #16
 8003136:	4618      	mov	r0, r3
 8003138:	f009 ff51 	bl	800cfde <strncpy>
	           num[length] = '\0'; // Null-terminate the extracted
 800313c:	f107 0210 	add.w	r2, r7, #16
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	4413      	add	r3, r2
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]

	           digit = atoi(num);
 8003148:	f107 0310 	add.w	r3, r7, #16
 800314c:	4618      	mov	r0, r3
 800314e:	f008 fe6d 	bl	800be2c <atoi>
 8003152:	6178      	str	r0, [r7, #20]
//	           OLED_ShowString(10,30,num);
//	           OLED_ShowString(10,50,dist); //Note index starts from 1
//	           osDelay(500);

	           char direction[3];
	           direction[0] = instructionBuffer[dirIndex];
 8003154:	4b57      	ldr	r3, [pc, #348]	@ (80032b4 <Uart_Function+0x1d4>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315a:	4413      	add	r3, r2
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	733b      	strb	r3, [r7, #12]
	           direction[1] = instructionBuffer[turnIndex];
 8003160:	4b54      	ldr	r3, [pc, #336]	@ (80032b4 <Uart_Function+0x1d4>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003166:	4413      	add	r3, r2
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	737b      	strb	r3, [r7, #13]
//	           OLED_Clear();
//	           OLED_ShowString(10,10,direction);
//	           osDelay(500);
	           if(instructionBuffer[dirIndex] =='F'&& instructionBuffer[turnIndex]== 'F'){
 800316c:	4b51      	ldr	r3, [pc, #324]	@ (80032b4 <Uart_Function+0x1d4>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003172:	4413      	add	r3, r2
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b46      	cmp	r3, #70	@ 0x46
 8003178:	d112      	bne.n	80031a0 <Uart_Function+0xc0>
 800317a:	4b4e      	ldr	r3, [pc, #312]	@ (80032b4 <Uart_Function+0x1d4>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003180:	4413      	add	r3, r2
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b46      	cmp	r3, #70	@ 0x46
 8003186:	d10b      	bne.n	80031a0 <Uart_Function+0xc0>
		        osDelay(500);
 8003188:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800318c:	f005 ff76 	bl	800907c <osDelay>
	            forward(digit);
 8003190:	6978      	ldr	r0, [r7, #20]
 8003192:	f7fe ff73 	bl	800207c <forward>
	            osDelay(2000);
 8003196:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800319a:	f005 ff6f 	bl	800907c <osDelay>
 800319e:	e0cf      	b.n	8003340 <Uart_Function+0x260>
	           }
	           else if(instructionBuffer[dirIndex] =='R'&& instructionBuffer[turnIndex]== 'R'){
 80031a0:	4b44      	ldr	r3, [pc, #272]	@ (80032b4 <Uart_Function+0x1d4>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a6:	4413      	add	r3, r2
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b52      	cmp	r3, #82	@ 0x52
 80031ac:	d112      	bne.n	80031d4 <Uart_Function+0xf4>
 80031ae:	4b41      	ldr	r3, [pc, #260]	@ (80032b4 <Uart_Function+0x1d4>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b4:	4413      	add	r3, r2
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b52      	cmp	r3, #82	@ 0x52
 80031ba:	d10b      	bne.n	80031d4 <Uart_Function+0xf4>
			    osDelay(500);
 80031bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80031c0:	f005 ff5c 	bl	800907c <osDelay>
	            backward(digit);
 80031c4:	6978      	ldr	r0, [r7, #20]
 80031c6:	f7ff f937 	bl	8002438 <backward>
	            osDelay(2000);
 80031ca:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80031ce:	f005 ff55 	bl	800907c <osDelay>
 80031d2:	e0b5      	b.n	8003340 <Uart_Function+0x260>
	           }
	           else if(instructionBuffer[dirIndex] =='F'&& instructionBuffer[turnIndex]== 'R'){
 80031d4:	4b37      	ldr	r3, [pc, #220]	@ (80032b4 <Uart_Function+0x1d4>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031da:	4413      	add	r3, r2
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b46      	cmp	r3, #70	@ 0x46
 80031e0:	d112      	bne.n	8003208 <Uart_Function+0x128>
 80031e2:	4b34      	ldr	r3, [pc, #208]	@ (80032b4 <Uart_Function+0x1d4>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e8:	4413      	add	r3, r2
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b52      	cmp	r3, #82	@ 0x52
 80031ee:	d10b      	bne.n	8003208 <Uart_Function+0x128>
		        osDelay(500);
 80031f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80031f4:	f005 ff42 	bl	800907c <osDelay>
	            frontRight(0);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7ff fa77 	bl	80026ec <frontRight>
	            osDelay(2000);
 80031fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003202:	f005 ff3b 	bl	800907c <osDelay>
 8003206:	e09b      	b.n	8003340 <Uart_Function+0x260>
	           }
	           else if(instructionBuffer[dirIndex] =='F'&& instructionBuffer[turnIndex]== 'L'){
 8003208:	4b2a      	ldr	r3, [pc, #168]	@ (80032b4 <Uart_Function+0x1d4>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320e:	4413      	add	r3, r2
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b46      	cmp	r3, #70	@ 0x46
 8003214:	d112      	bne.n	800323c <Uart_Function+0x15c>
 8003216:	4b27      	ldr	r3, [pc, #156]	@ (80032b4 <Uart_Function+0x1d4>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321c:	4413      	add	r3, r2
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b4c      	cmp	r3, #76	@ 0x4c
 8003222:	d10b      	bne.n	800323c <Uart_Function+0x15c>
		        osDelay(500);
 8003224:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003228:	f005 ff28 	bl	800907c <osDelay>
	            frontLeft(0);
 800322c:	2000      	movs	r0, #0
 800322e:	f7ff fcc5 	bl	8002bbc <frontLeft>
	            osDelay(2000);
 8003232:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003236:	f005 ff21 	bl	800907c <osDelay>
 800323a:	e081      	b.n	8003340 <Uart_Function+0x260>
	           }
	           else if(instructionBuffer[dirIndex] =='B'&& instructionBuffer[turnIndex]== 'R'){
 800323c:	4b1d      	ldr	r3, [pc, #116]	@ (80032b4 <Uart_Function+0x1d4>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003242:	4413      	add	r3, r2
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b42      	cmp	r3, #66	@ 0x42
 8003248:	d112      	bne.n	8003270 <Uart_Function+0x190>
 800324a:	4b1a      	ldr	r3, [pc, #104]	@ (80032b4 <Uart_Function+0x1d4>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003250:	4413      	add	r3, r2
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b52      	cmp	r3, #82	@ 0x52
 8003256:	d10b      	bne.n	8003270 <Uart_Function+0x190>
		        osDelay(500);
 8003258:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800325c:	f005 ff0e 	bl	800907c <osDelay>
	            backRight(0);
 8003260:	2000      	movs	r0, #0
 8003262:	f7ff fb77 	bl	8002954 <backRight>
	            osDelay(2000);
 8003266:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800326a:	f005 ff07 	bl	800907c <osDelay>
 800326e:	e067      	b.n	8003340 <Uart_Function+0x260>
	           }
	           else if(instructionBuffer[dirIndex] =='B'&& instructionBuffer[turnIndex]== 'L'){
 8003270:	4b10      	ldr	r3, [pc, #64]	@ (80032b4 <Uart_Function+0x1d4>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003276:	4413      	add	r3, r2
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b42      	cmp	r3, #66	@ 0x42
 800327c:	d11c      	bne.n	80032b8 <Uart_Function+0x1d8>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <Uart_Function+0x1d4>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003284:	4413      	add	r3, r2
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b4c      	cmp	r3, #76	@ 0x4c
 800328a:	d115      	bne.n	80032b8 <Uart_Function+0x1d8>
		        osDelay(500);
 800328c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003290:	f005 fef4 	bl	800907c <osDelay>
	            backLeft(0);
 8003294:	2000      	movs	r0, #0
 8003296:	f7ff fdc3 	bl	8002e20 <backLeft>
	            osDelay(2000);
 800329a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800329e:	f005 feed 	bl	800907c <osDelay>
 80032a2:	e04d      	b.n	8003340 <Uart_Function+0x260>
 80032a4:	20000004 	.word	0x20000004
 80032a8:	20000490 	.word	0x20000490
 80032ac:	200004e8 	.word	0x200004e8
 80032b0:	200004f4 	.word	0x200004f4
 80032b4:	200004f0 	.word	0x200004f0
	           }
	           else if(instructionBuffer[dirIndex] =='S'&& instructionBuffer[turnIndex]== 'T'){
 80032b8:	4b3e      	ldr	r3, [pc, #248]	@ (80033b4 <Uart_Function+0x2d4>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032be:	4413      	add	r3, r2
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b53      	cmp	r3, #83	@ 0x53
 80032c4:	d13c      	bne.n	8003340 <Uart_Function+0x260>
 80032c6:	4b3b      	ldr	r3, [pc, #236]	@ (80033b4 <Uart_Function+0x2d4>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032cc:	4413      	add	r3, r2
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b54      	cmp	r3, #84	@ 0x54
 80032d2:	d135      	bne.n	8003340 <Uart_Function+0x260>
	            //transmit 's' to rpi to confirm we have stopped so it can snap picture
	            HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80032d4:	2100      	movs	r1, #0
 80032d6:	4838      	ldr	r0, [pc, #224]	@ (80033b8 <Uart_Function+0x2d8>)
 80032d8:	f003 fa1e 	bl	8006718 <HAL_TIM_PWM_Stop>
	            HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 80032dc:	2104      	movs	r1, #4
 80032de:	4836      	ldr	r0, [pc, #216]	@ (80033b8 <Uart_Function+0x2d8>)
 80032e0:	f003 fa1a 	bl	8006718 <HAL_TIM_PWM_Stop>
	            rpiBuffer[0] = instructionBuffer[dirIndex];
 80032e4:	4b33      	ldr	r3, [pc, #204]	@ (80033b4 <Uart_Function+0x2d4>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ea:	4413      	add	r3, r2
 80032ec:	781a      	ldrb	r2, [r3, #0]
 80032ee:	4b33      	ldr	r3, [pc, #204]	@ (80033bc <Uart_Function+0x2dc>)
 80032f0:	701a      	strb	r2, [r3, #0]
	            rpiBuffer[1] = instructionBuffer[turnIndex];
 80032f2:	4b30      	ldr	r3, [pc, #192]	@ (80033b4 <Uart_Function+0x2d4>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f8:	4413      	add	r3, r2
 80032fa:	781a      	ldrb	r2, [r3, #0]
 80032fc:	4b2f      	ldr	r3, [pc, #188]	@ (80033bc <Uart_Function+0x2dc>)
 80032fe:	705a      	strb	r2, [r3, #1]
	            rpiBuffer[2] = instructionBuffer[hunIndex];
 8003300:	4b2c      	ldr	r3, [pc, #176]	@ (80033b4 <Uart_Function+0x2d4>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	4413      	add	r3, r2
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	4b2c      	ldr	r3, [pc, #176]	@ (80033bc <Uart_Function+0x2dc>)
 800330c:	709a      	strb	r2, [r3, #2]
	            rpiBuffer[3] = instructionBuffer[tensIndex];
 800330e:	4b29      	ldr	r3, [pc, #164]	@ (80033b4 <Uart_Function+0x2d4>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	4413      	add	r3, r2
 8003316:	781a      	ldrb	r2, [r3, #0]
 8003318:	4b28      	ldr	r3, [pc, #160]	@ (80033bc <Uart_Function+0x2dc>)
 800331a:	70da      	strb	r2, [r3, #3]
	            rpiBuffer[4] = instructionBuffer[onesIndex];
 800331c:	4b25      	ldr	r3, [pc, #148]	@ (80033b4 <Uart_Function+0x2d4>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	4413      	add	r3, r2
 8003324:	781a      	ldrb	r2, [r3, #0]
 8003326:	4b25      	ldr	r3, [pc, #148]	@ (80033bc <Uart_Function+0x2dc>)
 8003328:	711a      	strb	r2, [r3, #4]
	            HAL_UART_Transmit(&huart3, rpiBuffer, 5, 1000);
 800332a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800332e:	2205      	movs	r2, #5
 8003330:	4922      	ldr	r1, [pc, #136]	@ (80033bc <Uart_Function+0x2dc>)
 8003332:	4823      	ldr	r0, [pc, #140]	@ (80033c0 <Uart_Function+0x2e0>)
 8003334:	f004 fd8c 	bl	8007e50 <HAL_UART_Transmit>
	            osDelay(1000);
 8003338:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800333c:	f005 fe9e 	bl	800907c <osDelay>
	           }

	        currentIndex +=5;
 8003340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003342:	3305      	adds	r3, #5
 8003344:	637b      	str	r3, [r7, #52]	@ 0x34
	       while(currentIndex<iBufferSize){
 8003346:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334a:	429a      	cmp	r2, r3
 800334c:	f4ff aedc 	bcc.w	8003108 <Uart_Function+0x28>
	       }
	       if(currentIndex>=iBufferSize){
 8003350:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003354:	429a      	cmp	r2, r3
 8003356:	d324      	bcc.n	80033a2 <Uart_Function+0x2c2>
	            HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8003358:	2100      	movs	r1, #0
 800335a:	4817      	ldr	r0, [pc, #92]	@ (80033b8 <Uart_Function+0x2d8>)
 800335c:	f003 f9dc 	bl	8006718 <HAL_TIM_PWM_Stop>
	            HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8003360:	2104      	movs	r1, #4
 8003362:	4815      	ldr	r0, [pc, #84]	@ (80033b8 <Uart_Function+0x2d8>)
 8003364:	f003 f9d8 	bl	8006718 <HAL_TIM_PWM_Stop>
	            rpiBuffer[0] = '#';
 8003368:	4b14      	ldr	r3, [pc, #80]	@ (80033bc <Uart_Function+0x2dc>)
 800336a:	2223      	movs	r2, #35	@ 0x23
 800336c:	701a      	strb	r2, [r3, #0]
	            rpiBuffer[1] = '#';
 800336e:	4b13      	ldr	r3, [pc, #76]	@ (80033bc <Uart_Function+0x2dc>)
 8003370:	2223      	movs	r2, #35	@ 0x23
 8003372:	705a      	strb	r2, [r3, #1]
	            rpiBuffer[2] = '#';
 8003374:	4b11      	ldr	r3, [pc, #68]	@ (80033bc <Uart_Function+0x2dc>)
 8003376:	2223      	movs	r2, #35	@ 0x23
 8003378:	709a      	strb	r2, [r3, #2]
	            rpiBuffer[3] = '#';
 800337a:	4b10      	ldr	r3, [pc, #64]	@ (80033bc <Uart_Function+0x2dc>)
 800337c:	2223      	movs	r2, #35	@ 0x23
 800337e:	70da      	strb	r2, [r3, #3]
	            rpiBuffer[4] = '#';
 8003380:	4b0e      	ldr	r3, [pc, #56]	@ (80033bc <Uart_Function+0x2dc>)
 8003382:	2223      	movs	r2, #35	@ 0x23
 8003384:	711a      	strb	r2, [r3, #4]
	            HAL_UART_Transmit(&huart3, rpiBuffer, 5, 1000);
 8003386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800338a:	2205      	movs	r2, #5
 800338c:	490b      	ldr	r1, [pc, #44]	@ (80033bc <Uart_Function+0x2dc>)
 800338e:	480c      	ldr	r0, [pc, #48]	@ (80033c0 <Uart_Function+0x2e0>)
 8003390:	f004 fd5e 	bl	8007e50 <HAL_UART_Transmit>
	            osDelay(1000);
 8003394:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003398:	f005 fe70 	bl	800907c <osDelay>
	        resetAllGlobals();
 800339c:	f7ff fe72 	bl	8003084 <resetAllGlobals>
	//      }

	      osDelay(1000);  // Adjust delay as needed
	  }
  /* USER CODE END Uart_Function */
}
 80033a0:	e004      	b.n	80033ac <Uart_Function+0x2cc>
	      osDelay(1000);  // Adjust delay as needed
 80033a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033a6:	f005 fe69 	bl	800907c <osDelay>
	      if(startFlag) {
 80033aa:	e6a2      	b.n	80030f2 <Uart_Function+0x12>
}
 80033ac:	3738      	adds	r7, #56	@ 0x38
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	200004f0 	.word	0x200004f0
 80033b8:	20000448 	.word	0x20000448
 80033bc:	200004f8 	.word	0x200004f8
 80033c0:	20000490 	.word	0x20000490

080033c4 <GyroSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GyroSensor */
void GyroSensor(void *argument)
{
 80033c4:	b5b0      	push	{r4, r5, r7, lr}
 80033c6:	b08a      	sub	sp, #40	@ 0x28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GyroSensor */
  /* Infinite loop */
	__ICM20948_init(&hi2c1);
 80033cc:	4865      	ldr	r0, [pc, #404]	@ (8003564 <GyroSensor+0x1a0>)
 80033ce:	f7fe fd38 	bl	8001e42 <__ICM20948_init>
	prev_time_elapsed = HAL_GetTick();
 80033d2:	f000 fda1 	bl	8003f18 <HAL_GetTick>
 80033d6:	4603      	mov	r3, r0
 80033d8:	4a63      	ldr	r2, [pc, #396]	@ (8003568 <GyroSensor+0x1a4>)
 80033da:	6013      	str	r3, [r2, #0]
	ICM20948_init(&hi2c1);
 80033dc:	4861      	ldr	r0, [pc, #388]	@ (8003564 <GyroSensor+0x1a0>)
 80033de:	f7fd fe78 	bl	80010d2 <ICM20948_init>
	int16_t reading;
	uint8_t gyroZ[2];
	yawAngle = 0.0;
 80033e2:	4b62      	ldr	r3, [pc, #392]	@ (800356c <GyroSensor+0x1a8>)
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
	float sum = 0.0;
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	627b      	str	r3, [r7, #36]	@ 0x24
	int printAngle;
	char angleBuffer[8];
	for (int i = 0; i < 100; i++) {
 80033f0:	2300      	movs	r3, #0
 80033f2:	623b      	str	r3, [r7, #32]
 80033f4:	e01f      	b.n	8003436 <GyroSensor+0x72>
		ICM_BrustRead(&hi2c1, GYRO_ZOUT_H, 2, &gyroZ);
 80033f6:	f107 0310 	add.w	r3, r7, #16
 80033fa:	2202      	movs	r2, #2
 80033fc:	2137      	movs	r1, #55	@ 0x37
 80033fe:	4859      	ldr	r0, [pc, #356]	@ (8003564 <GyroSensor+0x1a0>)
 8003400:	f7fe fce0 	bl	8001dc4 <ICM_BrustRead>
		reading = (int16_t)(gyroZ[0] << 8 | gyroZ[1]);
 8003404:	7c3b      	ldrb	r3, [r7, #16]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	b21a      	sxth	r2, r3
 800340a:	7c7b      	ldrb	r3, [r7, #17]
 800340c:	b21b      	sxth	r3, r3
 800340e:	4313      	orrs	r3, r2
 8003410:	837b      	strh	r3, [r7, #26]
		sum += reading;
 8003412:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800341e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003426:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		osDelay(1); // Delay to simulate time between readings
 800342a:	2001      	movs	r0, #1
 800342c:	f005 fe26 	bl	800907c <osDelay>
	for (int i = 0; i < 100; i++) {
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	3301      	adds	r3, #1
 8003434:	623b      	str	r3, [r7, #32]
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	2b63      	cmp	r3, #99	@ 0x63
 800343a:	dddc      	ble.n	80033f6 <GyroSensor+0x32>
	  }
	 float gyroOffset = sum / 100.0;
 800343c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003440:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8003570 <GyroSensor+0x1ac>
 8003444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003448:	edc7 7a07 	vstr	s15, [r7, #28]

	for (;;)
	{
		OLED_ShowString(0,0, "GyroStart");
 800344c:	4a49      	ldr	r2, [pc, #292]	@ (8003574 <GyroSensor+0x1b0>)
 800344e:	2100      	movs	r1, #0
 8003450:	2000      	movs	r0, #0
 8003452:	f008 fc2d 	bl	800bcb0 <OLED_ShowString>
		OLED_Refresh_Gram();
 8003456:	f008 fab7 	bl	800b9c8 <OLED_Refresh_Gram>
		time_elapsed = HAL_GetTick();
 800345a:	f000 fd5d 	bl	8003f18 <HAL_GetTick>
 800345e:	4603      	mov	r3, r0
 8003460:	4a45      	ldr	r2, [pc, #276]	@ (8003578 <GyroSensor+0x1b4>)
 8003462:	6013      	str	r3, [r2, #0]
		 time_difference = time_elapsed - prev_time_elapsed;
 8003464:	4b44      	ldr	r3, [pc, #272]	@ (8003578 <GyroSensor+0x1b4>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b3f      	ldr	r3, [pc, #252]	@ (8003568 <GyroSensor+0x1a4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	4a43      	ldr	r2, [pc, #268]	@ (800357c <GyroSensor+0x1b8>)
 8003470:	6013      	str	r3, [r2, #0]
		 ICM_BrustRead(&hi2c1, GYRO_ZOUT_H, 2, &gyroZ);
 8003472:	f107 0310 	add.w	r3, r7, #16
 8003476:	2202      	movs	r2, #2
 8003478:	2137      	movs	r1, #55	@ 0x37
 800347a:	483a      	ldr	r0, [pc, #232]	@ (8003564 <GyroSensor+0x1a0>)
 800347c:	f7fe fca2 	bl	8001dc4 <ICM_BrustRead>
		 reading = (int16_t)(gyroZ[0] << 8 |gyroZ[1]);
 8003480:	7c3b      	ldrb	r3, [r7, #16]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	b21a      	sxth	r2, r3
 8003486:	7c7b      	ldrb	r3, [r7, #17]
 8003488:	b21b      	sxth	r3, r3
 800348a:	4313      	orrs	r3, r2
 800348c:	837b      	strh	r3, [r7, #26]
		 yawAngle += (float)((time_difference * (reading - gyroOffset)/ 131.0) )/ 1000.0;
 800348e:	4b37      	ldr	r3, [pc, #220]	@ (800356c <GyroSensor+0x1a8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd f858 	bl	8000548 <__aeabi_f2d>
 8003498:	4604      	mov	r4, r0
 800349a:	460d      	mov	r5, r1
 800349c:	4b37      	ldr	r3, [pc, #220]	@ (800357c <GyroSensor+0x1b8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	ee07 3a90 	vmov	s15, r3
 80034a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80034ac:	ee07 3a90 	vmov	s15, r3
 80034b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80034b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80034b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80034bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8003580 <GyroSensor+0x1bc>
 80034c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80034c8:	ee16 0a90 	vmov	r0, s13
 80034cc:	f7fd f83c 	bl	8000548 <__aeabi_f2d>
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003584 <GyroSensor+0x1c0>)
 80034d6:	f7fd f9b9 	bl	800084c <__aeabi_ddiv>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4620      	mov	r0, r4
 80034e0:	4629      	mov	r1, r5
 80034e2:	f7fc fed3 	bl	800028c <__adddf3>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	f7fd fb7b 	bl	8000be8 <__aeabi_d2f>
 80034f2:	4603      	mov	r3, r0
 80034f4:	4a1d      	ldr	r2, [pc, #116]	@ (800356c <GyroSensor+0x1a8>)
 80034f6:	6013      	str	r3, [r2, #0]
		 //sprintf(oled_buf1,"%.2f\n\r", yawAngle);
		 //HAL_UART_Transmit(&huart3, (uint8_t*)oled_buf1, strlen(oled_buf1), HAL_MAX_DELAY); 	//serial plot
		 prev_time_elapsed = time_elapsed;
 80034f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003578 <GyroSensor+0x1b4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003568 <GyroSensor+0x1a4>)
 80034fe:	6013      	str	r3, [r2, #0]
		 printAngle = (int)fabs(yawAngle);
 8003500:	4b1a      	ldr	r3, [pc, #104]	@ (800356c <GyroSensor+0x1a8>)
 8003502:	edd3 7a00 	vldr	s15, [r3]
 8003506:	eef0 7ae7 	vabs.f32	s15, s15
 800350a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800350e:	ee17 3a90 	vmov	r3, s15
 8003512:	617b      	str	r3, [r7, #20]
		 sprintf(angleBuffer,"Angle = %d",printAngle);
 8003514:	f107 0308 	add.w	r3, r7, #8
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	491b      	ldr	r1, [pc, #108]	@ (8003588 <GyroSensor+0x1c4>)
 800351c:	4618      	mov	r0, r3
 800351e:	f009 fcf3 	bl	800cf08 <siprintf>
		 OLED_ShowString(10,20,angleBuffer);
 8003522:	f107 0308 	add.w	r3, r7, #8
 8003526:	461a      	mov	r2, r3
 8003528:	2114      	movs	r1, #20
 800352a:	200a      	movs	r0, #10
 800352c:	f008 fbc0 	bl	800bcb0 <OLED_ShowString>
		 OLED_Refresh_Gram();
 8003530:	f008 fa4a 	bl	800b9c8 <OLED_Refresh_Gram>
		 if(fabs(yawAngle) >= 90){
 8003534:	4b0d      	ldr	r3, [pc, #52]	@ (800356c <GyroSensor+0x1a8>)
 8003536:	edd3 7a00 	vldr	s15, [r3]
 800353a:	eef0 7ae7 	vabs.f32	s15, s15
 800353e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800358c <GyroSensor+0x1c8>
 8003542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354a:	db06      	blt.n	800355a <GyroSensor+0x196>
			 OLED_ShowString(10,10, "90");
 800354c:	4a10      	ldr	r2, [pc, #64]	@ (8003590 <GyroSensor+0x1cc>)
 800354e:	210a      	movs	r1, #10
 8003550:	200a      	movs	r0, #10
 8003552:	f008 fbad 	bl	800bcb0 <OLED_ShowString>
			 OLED_Refresh_Gram();
 8003556:	f008 fa37 	bl	800b9c8 <OLED_Refresh_Gram>
		 }
		 osDelay(1);
 800355a:	2001      	movs	r0, #1
 800355c:	f005 fd8e 	bl	800907c <osDelay>
	{
 8003560:	e774      	b.n	800344c <GyroSensor+0x88>
 8003562:	bf00      	nop
 8003564:	2000028c 	.word	0x2000028c
 8003568:	2000050c 	.word	0x2000050c
 800356c:	20000514 	.word	0x20000514
 8003570:	42c80000 	.word	0x42c80000
 8003574:	080105ac 	.word	0x080105ac
 8003578:	20000508 	.word	0x20000508
 800357c:	20000510 	.word	0x20000510
 8003580:	43030000 	.word	0x43030000
 8003584:	408f4000 	.word	0x408f4000
 8003588:	080105b8 	.word	0x080105b8
 800358c:	42b40000 	.word	0x42b40000
 8003590:	080105c4 	.word	0x080105c4

08003594 <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800359c:	213c      	movs	r1, #60	@ 0x3c
 800359e:	481f      	ldr	r0, [pc, #124]	@ (800361c <encoder+0x88>)
 80035a0:	f003 face 	bl	8006b40 <HAL_TIM_Encoder_Start>
	int cntR = __HAL_TIM_GET_COUNTER(&htim3);  // Read the right encoder value
 80035a4:	4b1d      	ldr	r3, [pc, #116]	@ (800361c <encoder+0x88>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	617b      	str	r3, [r7, #20]
	    int diffR;
	    int dirR = 1;
 80035ac:	2301      	movs	r3, #1
 80035ae:	61bb      	str	r3, [r7, #24]
	    uint32_t tick = HAL_GetTick();
 80035b0:	f000 fcb2 	bl	8003f18 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

	   // Reset the counter after reading
  for(;;)
  {
	  if(HAL_GetTick()-tick > 10L){
 80035b6:	f000 fcaf 	bl	8003f18 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b0a      	cmp	r3, #10
 80035c2:	d927      	bls.n	8003614 <encoder+0x80>
	  int cntR = __HAL_TIM_GET_COUNTER(&htim3);
 80035c4:	4b15      	ldr	r3, [pc, #84]	@ (800361c <encoder+0x88>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	60fb      	str	r3, [r7, #12]
	  if (cntR > 32000) {
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80035d2:	dd06      	ble.n	80035e2 <encoder+0x4e>
	  	        dirR = 1;
 80035d4:	2301      	movs	r3, #1
 80035d6:	61bb      	str	r3, [r7, #24]
	  	        diffR = (65536 - cntR);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	e004      	b.n	80035ec <encoder+0x58>
	  	    } else {
	  	        dirR = -1;
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
 80035e6:	61bb      	str	r3, [r7, #24]
	  	        diffR = cntR;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	61fb      	str	r3, [r7, #28]
	  	    }

	  	    // Update right encoder value based on direction

	  	    if (dirR == 1) {
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d106      	bne.n	8003600 <encoder+0x6c>
	  	        rightEncoderVal -= diffR;
 80035f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <encoder+0x8c>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	4a09      	ldr	r2, [pc, #36]	@ (8003620 <encoder+0x8c>)
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e005      	b.n	800360c <encoder+0x78>
	  	    } else {
	  	        rightEncoderVal += diffR;
 8003600:	4b07      	ldr	r3, [pc, #28]	@ (8003620 <encoder+0x8c>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	4a05      	ldr	r2, [pc, #20]	@ (8003620 <encoder+0x8c>)
 800360a:	6013      	str	r3, [r2, #0]
	  	    }

	  	    __HAL_TIM_SET_COUNTER(&htim3, 0);
 800360c:	4b03      	ldr	r3, [pc, #12]	@ (800361c <encoder+0x88>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2200      	movs	r2, #0
 8003612:	625a      	str	r2, [r3, #36]	@ 0x24
	  }
    osDelay(1);
 8003614:	2001      	movs	r0, #1
 8003616:	f005 fd31 	bl	800907c <osDelay>
	  if(HAL_GetTick()-tick > 10L){
 800361a:	e7cc      	b.n	80035b6 <encoder+0x22>
 800361c:	20000370 	.word	0x20000370
 8003620:	20000530 	.word	0x20000530

08003624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003628:	b672      	cpsid	i
}
 800362a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800362c:	bf00      	nop
 800362e:	e7fd      	b.n	800362c <Error_Handler+0x8>

08003630 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	4b12      	ldr	r3, [pc, #72]	@ (8003684 <HAL_MspInit+0x54>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363e:	4a11      	ldr	r2, [pc, #68]	@ (8003684 <HAL_MspInit+0x54>)
 8003640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003644:	6453      	str	r3, [r2, #68]	@ 0x44
 8003646:	4b0f      	ldr	r3, [pc, #60]	@ (8003684 <HAL_MspInit+0x54>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800364e:	607b      	str	r3, [r7, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	4b0b      	ldr	r3, [pc, #44]	@ (8003684 <HAL_MspInit+0x54>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	4a0a      	ldr	r2, [pc, #40]	@ (8003684 <HAL_MspInit+0x54>)
 800365c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003660:	6413      	str	r3, [r2, #64]	@ 0x40
 8003662:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <HAL_MspInit+0x54>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800366e:	2200      	movs	r2, #0
 8003670:	210f      	movs	r1, #15
 8003672:	f06f 0001 	mvn.w	r0, #1
 8003676:	f000 ffbc 	bl	80045f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800

08003688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	@ 0x30
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003690:	f107 031c 	add.w	r3, r7, #28
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003760 <HAL_ADC_MspInit+0xd8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d128      	bne.n	80036fc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003764 <HAL_ADC_MspInit+0xdc>)
 80036b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003764 <HAL_ADC_MspInit+0xdc>)
 80036b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003764 <HAL_ADC_MspInit+0xdc>)
 80036bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	4b26      	ldr	r3, [pc, #152]	@ (8003764 <HAL_ADC_MspInit+0xdc>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	4a25      	ldr	r2, [pc, #148]	@ (8003764 <HAL_ADC_MspInit+0xdc>)
 80036d0:	f043 0304 	orr.w	r3, r3, #4
 80036d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036d6:	4b23      	ldr	r3, [pc, #140]	@ (8003764 <HAL_ADC_MspInit+0xdc>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = IRRIGHT_Pin;
 80036e2:	2302      	movs	r3, #2
 80036e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036e6:	2303      	movs	r3, #3
 80036e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IRRIGHT_GPIO_Port, &GPIO_InitStruct);
 80036ee:	f107 031c 	add.w	r3, r7, #28
 80036f2:	4619      	mov	r1, r3
 80036f4:	481c      	ldr	r0, [pc, #112]	@ (8003768 <HAL_ADC_MspInit+0xe0>)
 80036f6:	f001 f845 	bl	8004784 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80036fa:	e02c      	b.n	8003756 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1a      	ldr	r2, [pc, #104]	@ (800376c <HAL_ADC_MspInit+0xe4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d127      	bne.n	8003756 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	4b16      	ldr	r3, [pc, #88]	@ (8003764 <HAL_ADC_MspInit+0xdc>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370e:	4a15      	ldr	r2, [pc, #84]	@ (8003764 <HAL_ADC_MspInit+0xdc>)
 8003710:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003714:	6453      	str	r3, [r2, #68]	@ 0x44
 8003716:	4b13      	ldr	r3, [pc, #76]	@ (8003764 <HAL_ADC_MspInit+0xdc>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	4b0f      	ldr	r3, [pc, #60]	@ (8003764 <HAL_ADC_MspInit+0xdc>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	4a0e      	ldr	r2, [pc, #56]	@ (8003764 <HAL_ADC_MspInit+0xdc>)
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	6313      	str	r3, [r2, #48]	@ 0x30
 8003732:	4b0c      	ldr	r3, [pc, #48]	@ (8003764 <HAL_ADC_MspInit+0xdc>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IRLEFT_Pin;
 800373e:	2304      	movs	r3, #4
 8003740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003742:	2303      	movs	r3, #3
 8003744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	2300      	movs	r3, #0
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IRLEFT_GPIO_Port, &GPIO_InitStruct);
 800374a:	f107 031c 	add.w	r3, r7, #28
 800374e:	4619      	mov	r1, r3
 8003750:	4805      	ldr	r0, [pc, #20]	@ (8003768 <HAL_ADC_MspInit+0xe0>)
 8003752:	f001 f817 	bl	8004784 <HAL_GPIO_Init>
}
 8003756:	bf00      	nop
 8003758:	3730      	adds	r7, #48	@ 0x30
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40012000 	.word	0x40012000
 8003764:	40023800 	.word	0x40023800
 8003768:	40020800 	.word	0x40020800
 800376c:	40012100 	.word	0x40012100

08003770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08a      	sub	sp, #40	@ 0x28
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003778:	f107 0314 	add.w	r3, r7, #20
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a19      	ldr	r2, [pc, #100]	@ (80037f4 <HAL_I2C_MspInit+0x84>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d12c      	bne.n	80037ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	4b18      	ldr	r3, [pc, #96]	@ (80037f8 <HAL_I2C_MspInit+0x88>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	4a17      	ldr	r2, [pc, #92]	@ (80037f8 <HAL_I2C_MspInit+0x88>)
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a2:	4b15      	ldr	r3, [pc, #84]	@ (80037f8 <HAL_I2C_MspInit+0x88>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ICM_SCL_Pin|ICM_SDA_Pin;
 80037ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80037b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037b4:	2312      	movs	r3, #18
 80037b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037bc:	2303      	movs	r3, #3
 80037be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80037c0:	2304      	movs	r3, #4
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	4619      	mov	r1, r3
 80037ca:	480c      	ldr	r0, [pc, #48]	@ (80037fc <HAL_I2C_MspInit+0x8c>)
 80037cc:	f000 ffda 	bl	8004784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	4b08      	ldr	r3, [pc, #32]	@ (80037f8 <HAL_I2C_MspInit+0x88>)
 80037d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d8:	4a07      	ldr	r2, [pc, #28]	@ (80037f8 <HAL_I2C_MspInit+0x88>)
 80037da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80037de:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e0:	4b05      	ldr	r3, [pc, #20]	@ (80037f8 <HAL_I2C_MspInit+0x88>)
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80037ec:	bf00      	nop
 80037ee:	3728      	adds	r7, #40	@ 0x28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40005400 	.word	0x40005400
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40020400 	.word	0x40020400

08003800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08c      	sub	sp, #48	@ 0x30
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 031c 	add.w	r3, r7, #28
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2d      	ldr	r2, [pc, #180]	@ (80038d4 <HAL_TIM_Base_MspInit+0xd4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d10e      	bne.n	8003840 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	4b2c      	ldr	r3, [pc, #176]	@ (80038d8 <HAL_TIM_Base_MspInit+0xd8>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382a:	4a2b      	ldr	r2, [pc, #172]	@ (80038d8 <HAL_TIM_Base_MspInit+0xd8>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6453      	str	r3, [r2, #68]	@ 0x44
 8003832:	4b29      	ldr	r3, [pc, #164]	@ (80038d8 <HAL_TIM_Base_MspInit+0xd8>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	61bb      	str	r3, [r7, #24]
 800383c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800383e:	e044      	b.n	80038ca <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a25      	ldr	r2, [pc, #148]	@ (80038dc <HAL_TIM_Base_MspInit+0xdc>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d10e      	bne.n	8003868 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	4b22      	ldr	r3, [pc, #136]	@ (80038d8 <HAL_TIM_Base_MspInit+0xd8>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	4a21      	ldr	r2, [pc, #132]	@ (80038d8 <HAL_TIM_Base_MspInit+0xd8>)
 8003854:	f043 0310 	orr.w	r3, r3, #16
 8003858:	6413      	str	r3, [r2, #64]	@ 0x40
 800385a:	4b1f      	ldr	r3, [pc, #124]	@ (80038d8 <HAL_TIM_Base_MspInit+0xd8>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	697b      	ldr	r3, [r7, #20]
}
 8003866:	e030      	b.n	80038ca <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1c      	ldr	r2, [pc, #112]	@ (80038e0 <HAL_TIM_Base_MspInit+0xe0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d12b      	bne.n	80038ca <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	4b18      	ldr	r3, [pc, #96]	@ (80038d8 <HAL_TIM_Base_MspInit+0xd8>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387a:	4a17      	ldr	r2, [pc, #92]	@ (80038d8 <HAL_TIM_Base_MspInit+0xd8>)
 800387c:	f043 0302 	orr.w	r3, r3, #2
 8003880:	6453      	str	r3, [r2, #68]	@ 0x44
 8003882:	4b15      	ldr	r3, [pc, #84]	@ (80038d8 <HAL_TIM_Base_MspInit+0xd8>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	4b11      	ldr	r3, [pc, #68]	@ (80038d8 <HAL_TIM_Base_MspInit+0xd8>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	4a10      	ldr	r2, [pc, #64]	@ (80038d8 <HAL_TIM_Base_MspInit+0xd8>)
 8003898:	f043 0304 	orr.w	r3, r3, #4
 800389c:	6313      	str	r3, [r2, #48]	@ 0x30
 800389e:	4b0e      	ldr	r3, [pc, #56]	@ (80038d8 <HAL_TIM_Base_MspInit+0xd8>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038aa:	23c0      	movs	r3, #192	@ 0xc0
 80038ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ae:	2302      	movs	r3, #2
 80038b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b6:	2300      	movs	r3, #0
 80038b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80038ba:	2303      	movs	r3, #3
 80038bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038be:	f107 031c 	add.w	r3, r7, #28
 80038c2:	4619      	mov	r1, r3
 80038c4:	4807      	ldr	r0, [pc, #28]	@ (80038e4 <HAL_TIM_Base_MspInit+0xe4>)
 80038c6:	f000 ff5d 	bl	8004784 <HAL_GPIO_Init>
}
 80038ca:	bf00      	nop
 80038cc:	3730      	adds	r7, #48	@ 0x30
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40010000 	.word	0x40010000
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40001000 	.word	0x40001000
 80038e0:	40010400 	.word	0x40010400
 80038e4:	40020800 	.word	0x40020800

080038e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08c      	sub	sp, #48	@ 0x30
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f0:	f107 031c 	add.w	r3, r7, #28
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	60da      	str	r2, [r3, #12]
 80038fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003908:	d14b      	bne.n	80039a2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a0c <HAL_TIM_Encoder_MspInit+0x124>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	4a3e      	ldr	r2, [pc, #248]	@ (8003a0c <HAL_TIM_Encoder_MspInit+0x124>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	6413      	str	r3, [r2, #64]	@ 0x40
 800391a:	4b3c      	ldr	r3, [pc, #240]	@ (8003a0c <HAL_TIM_Encoder_MspInit+0x124>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	4b38      	ldr	r3, [pc, #224]	@ (8003a0c <HAL_TIM_Encoder_MspInit+0x124>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	4a37      	ldr	r2, [pc, #220]	@ (8003a0c <HAL_TIM_Encoder_MspInit+0x124>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6313      	str	r3, [r2, #48]	@ 0x30
 8003936:	4b35      	ldr	r3, [pc, #212]	@ (8003a0c <HAL_TIM_Encoder_MspInit+0x124>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	4b31      	ldr	r3, [pc, #196]	@ (8003a0c <HAL_TIM_Encoder_MspInit+0x124>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	4a30      	ldr	r2, [pc, #192]	@ (8003a0c <HAL_TIM_Encoder_MspInit+0x124>)
 800394c:	f043 0302 	orr.w	r3, r3, #2
 8003950:	6313      	str	r3, [r2, #48]	@ 0x30
 8003952:	4b2e      	ldr	r3, [pc, #184]	@ (8003a0c <HAL_TIM_Encoder_MspInit+0x124>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800395e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003964:	2302      	movs	r3, #2
 8003966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003968:	2300      	movs	r3, #0
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396c:	2300      	movs	r3, #0
 800396e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003970:	2301      	movs	r3, #1
 8003972:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003974:	f107 031c 	add.w	r3, r7, #28
 8003978:	4619      	mov	r1, r3
 800397a:	4825      	ldr	r0, [pc, #148]	@ (8003a10 <HAL_TIM_Encoder_MspInit+0x128>)
 800397c:	f000 ff02 	bl	8004784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003980:	2308      	movs	r3, #8
 8003982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003984:	2302      	movs	r3, #2
 8003986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003988:	2300      	movs	r3, #0
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398c:	2300      	movs	r3, #0
 800398e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003990:	2301      	movs	r3, #1
 8003992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003994:	f107 031c 	add.w	r3, r7, #28
 8003998:	4619      	mov	r1, r3
 800399a:	481e      	ldr	r0, [pc, #120]	@ (8003a14 <HAL_TIM_Encoder_MspInit+0x12c>)
 800399c:	f000 fef2 	bl	8004784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80039a0:	e030      	b.n	8003a04 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a18 <HAL_TIM_Encoder_MspInit+0x130>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d12b      	bne.n	8003a04 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	4b16      	ldr	r3, [pc, #88]	@ (8003a0c <HAL_TIM_Encoder_MspInit+0x124>)
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	4a15      	ldr	r2, [pc, #84]	@ (8003a0c <HAL_TIM_Encoder_MspInit+0x124>)
 80039b6:	f043 0302 	orr.w	r3, r3, #2
 80039ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80039bc:	4b13      	ldr	r3, [pc, #76]	@ (8003a0c <HAL_TIM_Encoder_MspInit+0x124>)
 80039be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c8:	2300      	movs	r3, #0
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a0c <HAL_TIM_Encoder_MspInit+0x124>)
 80039ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d0:	4a0e      	ldr	r2, [pc, #56]	@ (8003a0c <HAL_TIM_Encoder_MspInit+0x124>)
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80039d8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a0c <HAL_TIM_Encoder_MspInit+0x124>)
 80039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039e4:	23c0      	movs	r3, #192	@ 0xc0
 80039e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e8:	2302      	movs	r3, #2
 80039ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f0:	2300      	movs	r3, #0
 80039f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039f4:	2302      	movs	r3, #2
 80039f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f8:	f107 031c 	add.w	r3, r7, #28
 80039fc:	4619      	mov	r1, r3
 80039fe:	4804      	ldr	r0, [pc, #16]	@ (8003a10 <HAL_TIM_Encoder_MspInit+0x128>)
 8003a00:	f000 fec0 	bl	8004784 <HAL_GPIO_Init>
}
 8003a04:	bf00      	nop
 8003a06:	3730      	adds	r7, #48	@ 0x30
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40020000 	.word	0x40020000
 8003a14:	40020400 	.word	0x40020400
 8003a18:	40000400 	.word	0x40000400

08003a1c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	@ 0x28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab0 <HAL_TIM_IC_MspInit+0x94>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d134      	bne.n	8003aa8 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	4b1c      	ldr	r3, [pc, #112]	@ (8003ab4 <HAL_TIM_IC_MspInit+0x98>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab4 <HAL_TIM_IC_MspInit+0x98>)
 8003a48:	f043 0304 	orr.w	r3, r3, #4
 8003a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a4e:	4b19      	ldr	r3, [pc, #100]	@ (8003ab4 <HAL_TIM_IC_MspInit+0x98>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	4b15      	ldr	r3, [pc, #84]	@ (8003ab4 <HAL_TIM_IC_MspInit+0x98>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a62:	4a14      	ldr	r2, [pc, #80]	@ (8003ab4 <HAL_TIM_IC_MspInit+0x98>)
 8003a64:	f043 0308 	orr.w	r3, r3, #8
 8003a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a6a:	4b12      	ldr	r3, [pc, #72]	@ (8003ab4 <HAL_TIM_IC_MspInit+0x98>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8003a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a84:	2300      	movs	r3, #0
 8003a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003a8c:	f107 0314 	add.w	r3, r7, #20
 8003a90:	4619      	mov	r1, r3
 8003a92:	4809      	ldr	r0, [pc, #36]	@ (8003ab8 <HAL_TIM_IC_MspInit+0x9c>)
 8003a94:	f000 fe76 	bl	8004784 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2105      	movs	r1, #5
 8003a9c:	201e      	movs	r0, #30
 8003a9e:	f000 fda8 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003aa2:	201e      	movs	r0, #30
 8003aa4:	f000 fdc1 	bl	800462a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8003aa8:	bf00      	nop
 8003aaa:	3728      	adds	r7, #40	@ 0x28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40020c00 	.word	0x40020c00

08003abc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac4:	f107 030c 	add.w	r3, r7, #12
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	60da      	str	r2, [r3, #12]
 8003ad2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a12      	ldr	r2, [pc, #72]	@ (8003b24 <HAL_TIM_MspPostInit+0x68>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d11e      	bne.n	8003b1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	4b11      	ldr	r3, [pc, #68]	@ (8003b28 <HAL_TIM_MspPostInit+0x6c>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	4a10      	ldr	r2, [pc, #64]	@ (8003b28 <HAL_TIM_MspPostInit+0x6c>)
 8003ae8:	f043 0310 	orr.w	r3, r3, #16
 8003aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aee:	4b0e      	ldr	r3, [pc, #56]	@ (8003b28 <HAL_TIM_MspPostInit+0x6c>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003afa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003afe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b00:	2302      	movs	r3, #2
 8003b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b10:	f107 030c 	add.w	r3, r7, #12
 8003b14:	4619      	mov	r1, r3
 8003b16:	4805      	ldr	r0, [pc, #20]	@ (8003b2c <HAL_TIM_MspPostInit+0x70>)
 8003b18:	f000 fe34 	bl	8004784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003b1c:	bf00      	nop
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40010000 	.word	0x40010000
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40021000 	.word	0x40021000

08003b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	@ 0x28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	f107 0314 	add.w	r3, r7, #20
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc4 <HAL_UART_MspInit+0x94>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d134      	bne.n	8003bbc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc8 <HAL_UART_MspInit+0x98>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc8 <HAL_UART_MspInit+0x98>)
 8003b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b62:	4b19      	ldr	r3, [pc, #100]	@ (8003bc8 <HAL_UART_MspInit+0x98>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	4b15      	ldr	r3, [pc, #84]	@ (8003bc8 <HAL_UART_MspInit+0x98>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	4a14      	ldr	r2, [pc, #80]	@ (8003bc8 <HAL_UART_MspInit+0x98>)
 8003b78:	f043 0304 	orr.w	r3, r3, #4
 8003b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b7e:	4b12      	ldr	r3, [pc, #72]	@ (8003bc8 <HAL_UART_MspInit+0x98>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003b8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b90:	2302      	movs	r3, #2
 8003b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b9c:	2307      	movs	r3, #7
 8003b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ba0:	f107 0314 	add.w	r3, r7, #20
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4809      	ldr	r0, [pc, #36]	@ (8003bcc <HAL_UART_MspInit+0x9c>)
 8003ba8:	f000 fdec 	bl	8004784 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003bac:	2200      	movs	r2, #0
 8003bae:	2105      	movs	r1, #5
 8003bb0:	2027      	movs	r0, #39	@ 0x27
 8003bb2:	f000 fd1e 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003bb6:	2027      	movs	r0, #39	@ 0x27
 8003bb8:	f000 fd37 	bl	800462a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003bbc:	bf00      	nop
 8003bbe:	3728      	adds	r7, #40	@ 0x28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40004800 	.word	0x40004800
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40020800 	.word	0x40020800

08003bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <NMI_Handler+0x4>

08003bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <HardFault_Handler+0x4>

08003be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003be4:	bf00      	nop
 8003be6:	e7fd      	b.n	8003be4 <MemManage_Handler+0x4>

08003be8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bec:	bf00      	nop
 8003bee:	e7fd      	b.n	8003bec <BusFault_Handler+0x4>

08003bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <UsageFault_Handler+0x4>

08003bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c0a:	f000 f971 	bl	8003ef0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003c0e:	f006 fe5d 	bl	800a8cc <xTaskGetSchedulerState>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d001      	beq.n	8003c1c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003c18:	f007 fc56 	bl	800b4c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c1c:	bf00      	nop
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c24:	4802      	ldr	r0, [pc, #8]	@ (8003c30 <TIM4_IRQHandler+0x10>)
 8003c26:	f003 f819 	bl	8006c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	200003b8 	.word	0x200003b8

08003c34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003c38:	4802      	ldr	r0, [pc, #8]	@ (8003c44 <USART3_IRQHandler+0x10>)
 8003c3a:	f004 f9b9 	bl	8007fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000490 	.word	0x20000490

08003c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return 1;
 8003c4c:	2301      	movs	r3, #1
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <_kill>:

int _kill(int pid, int sig)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c62:	f009 fa29 	bl	800d0b8 <__errno>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2216      	movs	r2, #22
 8003c6a:	601a      	str	r2, [r3, #0]
  return -1;
 8003c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <_exit>:

void _exit (int status)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c80:	f04f 31ff 	mov.w	r1, #4294967295
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff ffe7 	bl	8003c58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c8a:	bf00      	nop
 8003c8c:	e7fd      	b.n	8003c8a <_exit+0x12>

08003c8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	e00a      	b.n	8003cb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ca0:	f3af 8000 	nop.w
 8003ca4:	4601      	mov	r1, r0
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	60ba      	str	r2, [r7, #8]
 8003cac:	b2ca      	uxtb	r2, r1
 8003cae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	dbf0      	blt.n	8003ca0 <_read+0x12>
  }

  return len;
 8003cbe:	687b      	ldr	r3, [r7, #4]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e009      	b.n	8003cee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	60ba      	str	r2, [r7, #8]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	3301      	adds	r3, #1
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	dbf1      	blt.n	8003cda <_write+0x12>
  }
  return len;
 8003cf6:	687b      	ldr	r3, [r7, #4]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <_close>:

int _close(int file)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d28:	605a      	str	r2, [r3, #4]
  return 0;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <_isatty>:

int _isatty(int file)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d40:	2301      	movs	r3, #1
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b085      	sub	sp, #20
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d70:	4a14      	ldr	r2, [pc, #80]	@ (8003dc4 <_sbrk+0x5c>)
 8003d72:	4b15      	ldr	r3, [pc, #84]	@ (8003dc8 <_sbrk+0x60>)
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d7c:	4b13      	ldr	r3, [pc, #76]	@ (8003dcc <_sbrk+0x64>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d102      	bne.n	8003d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d84:	4b11      	ldr	r3, [pc, #68]	@ (8003dcc <_sbrk+0x64>)
 8003d86:	4a12      	ldr	r2, [pc, #72]	@ (8003dd0 <_sbrk+0x68>)
 8003d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d8a:	4b10      	ldr	r3, [pc, #64]	@ (8003dcc <_sbrk+0x64>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4413      	add	r3, r2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d207      	bcs.n	8003da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d98:	f009 f98e 	bl	800d0b8 <__errno>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	220c      	movs	r2, #12
 8003da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003da2:	f04f 33ff 	mov.w	r3, #4294967295
 8003da6:	e009      	b.n	8003dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003da8:	4b08      	ldr	r3, [pc, #32]	@ (8003dcc <_sbrk+0x64>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dae:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <_sbrk+0x64>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	4a05      	ldr	r2, [pc, #20]	@ (8003dcc <_sbrk+0x64>)
 8003db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dba:	68fb      	ldr	r3, [r7, #12]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20020000 	.word	0x20020000
 8003dc8:	00000400 	.word	0x00000400
 8003dcc:	20000544 	.word	0x20000544
 8003dd0:	200053e8 	.word	0x200053e8

08003dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003dd8:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <SystemInit+0x20>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dde:	4a05      	ldr	r2, [pc, #20]	@ (8003df4 <SystemInit+0x20>)
 8003de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003de8:	bf00      	nop
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	e000ed00 	.word	0xe000ed00

08003df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003df8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003dfc:	f7ff ffea 	bl	8003dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e00:	480c      	ldr	r0, [pc, #48]	@ (8003e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e02:	490d      	ldr	r1, [pc, #52]	@ (8003e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e04:	4a0d      	ldr	r2, [pc, #52]	@ (8003e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e08:	e002      	b.n	8003e10 <LoopCopyDataInit>

08003e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e0e:	3304      	adds	r3, #4

08003e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e14:	d3f9      	bcc.n	8003e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e16:	4a0a      	ldr	r2, [pc, #40]	@ (8003e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e18:	4c0a      	ldr	r4, [pc, #40]	@ (8003e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e1c:	e001      	b.n	8003e22 <LoopFillZerobss>

08003e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e20:	3204      	adds	r2, #4

08003e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e24:	d3fb      	bcc.n	8003e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e26:	f009 f94d 	bl	800d0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e2a:	f7fd f9d3 	bl	80011d4 <main>
  bx  lr    
 8003e2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e38:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003e3c:	08011528 	.word	0x08011528
  ldr r2, =_sbss
 8003e40:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003e44:	200053e8 	.word	0x200053e8

08003e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e48:	e7fe      	b.n	8003e48 <ADC_IRQHandler>
	...

08003e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e50:	4b0e      	ldr	r3, [pc, #56]	@ (8003e8c <HAL_Init+0x40>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a0d      	ldr	r2, [pc, #52]	@ (8003e8c <HAL_Init+0x40>)
 8003e56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <HAL_Init+0x40>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0a      	ldr	r2, [pc, #40]	@ (8003e8c <HAL_Init+0x40>)
 8003e62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e68:	4b08      	ldr	r3, [pc, #32]	@ (8003e8c <HAL_Init+0x40>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a07      	ldr	r2, [pc, #28]	@ (8003e8c <HAL_Init+0x40>)
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e74:	2003      	movs	r0, #3
 8003e76:	f000 fbb1 	bl	80045dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e7a:	200f      	movs	r0, #15
 8003e7c:	f000 f808 	bl	8003e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e80:	f7ff fbd6 	bl	8003630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023c00 	.word	0x40023c00

08003e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e98:	4b12      	ldr	r3, [pc, #72]	@ (8003ee4 <HAL_InitTick+0x54>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b12      	ldr	r3, [pc, #72]	@ (8003ee8 <HAL_InitTick+0x58>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fbc9 	bl	8004646 <HAL_SYSTICK_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e00e      	b.n	8003edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b0f      	cmp	r3, #15
 8003ec2:	d80a      	bhi.n	8003eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ecc:	f000 fb91 	bl	80045f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ed0:	4a06      	ldr	r2, [pc, #24]	@ (8003eec <HAL_InitTick+0x5c>)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000008 	.word	0x20000008
 8003ee8:	20000010 	.word	0x20000010
 8003eec:	2000000c 	.word	0x2000000c

08003ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ef4:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <HAL_IncTick+0x20>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <HAL_IncTick+0x24>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4413      	add	r3, r2
 8003f00:	4a04      	ldr	r2, [pc, #16]	@ (8003f14 <HAL_IncTick+0x24>)
 8003f02:	6013      	str	r3, [r2, #0]
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000010 	.word	0x20000010
 8003f14:	20000548 	.word	0x20000548

08003f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f1c:	4b03      	ldr	r3, [pc, #12]	@ (8003f2c <HAL_GetTick+0x14>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000548 	.word	0x20000548

08003f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f38:	f7ff ffee 	bl	8003f18 <HAL_GetTick>
 8003f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f48:	d005      	beq.n	8003f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f74 <HAL_Delay+0x44>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f56:	bf00      	nop
 8003f58:	f7ff ffde 	bl	8003f18 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d8f7      	bhi.n	8003f58 <HAL_Delay+0x28>
  {
  }
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000010 	.word	0x20000010

08003f78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e033      	b.n	8003ff6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d109      	bne.n	8003faa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff fb76 	bl	8003688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d118      	bne.n	8003fe8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003fbe:	f023 0302 	bic.w	r3, r3, #2
 8003fc2:	f043 0202 	orr.w	r2, r3, #2
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f93a 	bl	8004244 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	f043 0201 	orr.w	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fe6:	e001      	b.n	8003fec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_ADC_ConfigChannel+0x1c>
 8004018:	2302      	movs	r3, #2
 800401a:	e105      	b.n	8004228 <HAL_ADC_ConfigChannel+0x228>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b09      	cmp	r3, #9
 800402a:	d925      	bls.n	8004078 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68d9      	ldr	r1, [r3, #12]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	4613      	mov	r3, r2
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4413      	add	r3, r2
 8004040:	3b1e      	subs	r3, #30
 8004042:	2207      	movs	r2, #7
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43da      	mvns	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	400a      	ands	r2, r1
 8004050:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68d9      	ldr	r1, [r3, #12]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	b29b      	uxth	r3, r3
 8004062:	4618      	mov	r0, r3
 8004064:	4603      	mov	r3, r0
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	4403      	add	r3, r0
 800406a:	3b1e      	subs	r3, #30
 800406c:	409a      	lsls	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	60da      	str	r2, [r3, #12]
 8004076:	e022      	b.n	80040be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6919      	ldr	r1, [r3, #16]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	2207      	movs	r2, #7
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43da      	mvns	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	400a      	ands	r2, r1
 800409a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6919      	ldr	r1, [r3, #16]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	4618      	mov	r0, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4403      	add	r3, r0
 80040b4:	409a      	lsls	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d824      	bhi.n	8004110 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	3b05      	subs	r3, #5
 80040d8:	221f      	movs	r2, #31
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43da      	mvns	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	400a      	ands	r2, r1
 80040e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	4618      	mov	r0, r3
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	3b05      	subs	r3, #5
 8004102:	fa00 f203 	lsl.w	r2, r0, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	635a      	str	r2, [r3, #52]	@ 0x34
 800410e:	e04c      	b.n	80041aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b0c      	cmp	r3, #12
 8004116:	d824      	bhi.n	8004162 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	3b23      	subs	r3, #35	@ 0x23
 800412a:	221f      	movs	r2, #31
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43da      	mvns	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	400a      	ands	r2, r1
 8004138:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	b29b      	uxth	r3, r3
 8004146:	4618      	mov	r0, r3
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	3b23      	subs	r3, #35	@ 0x23
 8004154:	fa00 f203 	lsl.w	r2, r0, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004160:	e023      	b.n	80041aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	3b41      	subs	r3, #65	@ 0x41
 8004174:	221f      	movs	r2, #31
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43da      	mvns	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	400a      	ands	r2, r1
 8004182:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	4618      	mov	r0, r3
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	3b41      	subs	r3, #65	@ 0x41
 800419e:	fa00 f203 	lsl.w	r2, r0, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041aa:	4b22      	ldr	r3, [pc, #136]	@ (8004234 <HAL_ADC_ConfigChannel+0x234>)
 80041ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a21      	ldr	r2, [pc, #132]	@ (8004238 <HAL_ADC_ConfigChannel+0x238>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d109      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x1cc>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b12      	cmp	r3, #18
 80041be:	d105      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a19      	ldr	r2, [pc, #100]	@ (8004238 <HAL_ADC_ConfigChannel+0x238>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d123      	bne.n	800421e <HAL_ADC_ConfigChannel+0x21e>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b10      	cmp	r3, #16
 80041dc:	d003      	beq.n	80041e6 <HAL_ADC_ConfigChannel+0x1e6>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b11      	cmp	r3, #17
 80041e4:	d11b      	bne.n	800421e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b10      	cmp	r3, #16
 80041f8:	d111      	bne.n	800421e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041fa:	4b10      	ldr	r3, [pc, #64]	@ (800423c <HAL_ADC_ConfigChannel+0x23c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a10      	ldr	r2, [pc, #64]	@ (8004240 <HAL_ADC_ConfigChannel+0x240>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	0c9a      	lsrs	r2, r3, #18
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004210:	e002      	b.n	8004218 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	3b01      	subs	r3, #1
 8004216:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f9      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40012300 	.word	0x40012300
 8004238:	40012000 	.word	0x40012000
 800423c:	20000008 	.word	0x20000008
 8004240:	431bde83 	.word	0x431bde83

08004244 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800424c:	4b79      	ldr	r3, [pc, #484]	@ (8004434 <ADC_Init+0x1f0>)
 800424e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	431a      	orrs	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004278:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6859      	ldr	r1, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	021a      	lsls	r2, r3, #8
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800429c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6859      	ldr	r1, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6899      	ldr	r1, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d6:	4a58      	ldr	r2, [pc, #352]	@ (8004438 <ADC_Init+0x1f4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d022      	beq.n	8004322 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80042ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6899      	ldr	r1, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800430c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6899      	ldr	r1, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	e00f      	b.n	8004342 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004330:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004340:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0202 	bic.w	r2, r2, #2
 8004350:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6899      	ldr	r1, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	7e1b      	ldrb	r3, [r3, #24]
 800435c:	005a      	lsls	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01b      	beq.n	80043a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800437e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800438e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	3b01      	subs	r3, #1
 800439c:	035a      	lsls	r2, r3, #13
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	e007      	b.n	80043b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80043c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	051a      	lsls	r2, r3, #20
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80043ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6899      	ldr	r1, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043fa:	025a      	lsls	r2, r3, #9
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6899      	ldr	r1, [r3, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	029a      	lsls	r2, r3, #10
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	609a      	str	r2, [r3, #8]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	40012300 	.word	0x40012300
 8004438:	0f000001 	.word	0x0f000001

0800443c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800444c:	4b0c      	ldr	r3, [pc, #48]	@ (8004480 <__NVIC_SetPriorityGrouping+0x44>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004458:	4013      	ands	r3, r2
 800445a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004464:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800446c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800446e:	4a04      	ldr	r2, [pc, #16]	@ (8004480 <__NVIC_SetPriorityGrouping+0x44>)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	60d3      	str	r3, [r2, #12]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004488:	4b04      	ldr	r3, [pc, #16]	@ (800449c <__NVIC_GetPriorityGrouping+0x18>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	0a1b      	lsrs	r3, r3, #8
 800448e:	f003 0307 	and.w	r3, r3, #7
}
 8004492:	4618      	mov	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	db0b      	blt.n	80044ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	f003 021f 	and.w	r2, r3, #31
 80044b8:	4907      	ldr	r1, [pc, #28]	@ (80044d8 <__NVIC_EnableIRQ+0x38>)
 80044ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	2001      	movs	r0, #1
 80044c2:	fa00 f202 	lsl.w	r2, r0, r2
 80044c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	e000e100 	.word	0xe000e100

080044dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	6039      	str	r1, [r7, #0]
 80044e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	db0a      	blt.n	8004506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	490c      	ldr	r1, [pc, #48]	@ (8004528 <__NVIC_SetPriority+0x4c>)
 80044f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fa:	0112      	lsls	r2, r2, #4
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	440b      	add	r3, r1
 8004500:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004504:	e00a      	b.n	800451c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	4908      	ldr	r1, [pc, #32]	@ (800452c <__NVIC_SetPriority+0x50>)
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	3b04      	subs	r3, #4
 8004514:	0112      	lsls	r2, r2, #4
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	440b      	add	r3, r1
 800451a:	761a      	strb	r2, [r3, #24]
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	e000e100 	.word	0xe000e100
 800452c:	e000ed00 	.word	0xe000ed00

08004530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004530:	b480      	push	{r7}
 8004532:	b089      	sub	sp, #36	@ 0x24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f1c3 0307 	rsb	r3, r3, #7
 800454a:	2b04      	cmp	r3, #4
 800454c:	bf28      	it	cs
 800454e:	2304      	movcs	r3, #4
 8004550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	3304      	adds	r3, #4
 8004556:	2b06      	cmp	r3, #6
 8004558:	d902      	bls.n	8004560 <NVIC_EncodePriority+0x30>
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	3b03      	subs	r3, #3
 800455e:	e000      	b.n	8004562 <NVIC_EncodePriority+0x32>
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004564:	f04f 32ff 	mov.w	r2, #4294967295
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43da      	mvns	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	401a      	ands	r2, r3
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004578:	f04f 31ff 	mov.w	r1, #4294967295
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	fa01 f303 	lsl.w	r3, r1, r3
 8004582:	43d9      	mvns	r1, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004588:	4313      	orrs	r3, r2
         );
}
 800458a:	4618      	mov	r0, r3
 800458c:	3724      	adds	r7, #36	@ 0x24
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045a8:	d301      	bcc.n	80045ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045aa:	2301      	movs	r3, #1
 80045ac:	e00f      	b.n	80045ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ae:	4a0a      	ldr	r2, [pc, #40]	@ (80045d8 <SysTick_Config+0x40>)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045b6:	210f      	movs	r1, #15
 80045b8:	f04f 30ff 	mov.w	r0, #4294967295
 80045bc:	f7ff ff8e 	bl	80044dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045c0:	4b05      	ldr	r3, [pc, #20]	@ (80045d8 <SysTick_Config+0x40>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045c6:	4b04      	ldr	r3, [pc, #16]	@ (80045d8 <SysTick_Config+0x40>)
 80045c8:	2207      	movs	r2, #7
 80045ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	e000e010 	.word	0xe000e010

080045dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff ff29 	bl	800443c <__NVIC_SetPriorityGrouping>
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b086      	sub	sp, #24
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	4603      	mov	r3, r0
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004604:	f7ff ff3e 	bl	8004484 <__NVIC_GetPriorityGrouping>
 8004608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	6978      	ldr	r0, [r7, #20]
 8004610:	f7ff ff8e 	bl	8004530 <NVIC_EncodePriority>
 8004614:	4602      	mov	r2, r0
 8004616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800461a:	4611      	mov	r1, r2
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff ff5d 	bl	80044dc <__NVIC_SetPriority>
}
 8004622:	bf00      	nop
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	4603      	mov	r3, r0
 8004632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff ff31 	bl	80044a0 <__NVIC_EnableIRQ>
}
 800463e:	bf00      	nop
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff ffa2 	bl	8004598 <SysTick_Config>
 8004654:	4603      	mov	r3, r0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b084      	sub	sp, #16
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800466a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800466c:	f7ff fc54 	bl	8003f18 <HAL_GetTick>
 8004670:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d008      	beq.n	8004690 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2280      	movs	r2, #128	@ 0x80
 8004682:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e052      	b.n	8004736 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0216 	bic.w	r2, r2, #22
 800469e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d103      	bne.n	80046c0 <HAL_DMA_Abort+0x62>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0208 	bic.w	r2, r2, #8
 80046ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046e0:	e013      	b.n	800470a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046e2:	f7ff fc19 	bl	8003f18 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b05      	cmp	r3, #5
 80046ee:	d90c      	bls.n	800470a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2203      	movs	r2, #3
 80046fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e015      	b.n	8004736 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e4      	bne.n	80046e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471c:	223f      	movs	r2, #63	@ 0x3f
 800471e:	409a      	lsls	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d004      	beq.n	800475c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2280      	movs	r2, #128	@ 0x80
 8004756:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e00c      	b.n	8004776 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2205      	movs	r2, #5
 8004760:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004784:	b480      	push	{r7}
 8004786:	b089      	sub	sp, #36	@ 0x24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004792:	2300      	movs	r3, #0
 8004794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004796:	2300      	movs	r3, #0
 8004798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
 800479e:	e16b      	b.n	8004a78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047a0:	2201      	movs	r2, #1
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	f040 815a 	bne.w	8004a72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d005      	beq.n	80047d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d130      	bne.n	8004838 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	2203      	movs	r2, #3
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	43db      	mvns	r3, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4013      	ands	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800480c:	2201      	movs	r2, #1
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	43db      	mvns	r3, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4013      	ands	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	091b      	lsrs	r3, r3, #4
 8004822:	f003 0201 	and.w	r2, r3, #1
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4313      	orrs	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	2b03      	cmp	r3, #3
 8004842:	d017      	beq.n	8004874 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	2203      	movs	r2, #3
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4013      	ands	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4313      	orrs	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d123      	bne.n	80048c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	08da      	lsrs	r2, r3, #3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3208      	adds	r2, #8
 8004888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800488c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	220f      	movs	r2, #15
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	08da      	lsrs	r2, r3, #3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3208      	adds	r2, #8
 80048c2:	69b9      	ldr	r1, [r7, #24]
 80048c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	2203      	movs	r2, #3
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 0203 	and.w	r2, r3, #3
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80b4 	beq.w	8004a72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	4b60      	ldr	r3, [pc, #384]	@ (8004a90 <HAL_GPIO_Init+0x30c>)
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	4a5f      	ldr	r2, [pc, #380]	@ (8004a90 <HAL_GPIO_Init+0x30c>)
 8004914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004918:	6453      	str	r3, [r2, #68]	@ 0x44
 800491a:	4b5d      	ldr	r3, [pc, #372]	@ (8004a90 <HAL_GPIO_Init+0x30c>)
 800491c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004926:	4a5b      	ldr	r2, [pc, #364]	@ (8004a94 <HAL_GPIO_Init+0x310>)
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	089b      	lsrs	r3, r3, #2
 800492c:	3302      	adds	r3, #2
 800492e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	220f      	movs	r2, #15
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43db      	mvns	r3, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4013      	ands	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a52      	ldr	r2, [pc, #328]	@ (8004a98 <HAL_GPIO_Init+0x314>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d02b      	beq.n	80049aa <HAL_GPIO_Init+0x226>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a51      	ldr	r2, [pc, #324]	@ (8004a9c <HAL_GPIO_Init+0x318>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d025      	beq.n	80049a6 <HAL_GPIO_Init+0x222>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a50      	ldr	r2, [pc, #320]	@ (8004aa0 <HAL_GPIO_Init+0x31c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01f      	beq.n	80049a2 <HAL_GPIO_Init+0x21e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a4f      	ldr	r2, [pc, #316]	@ (8004aa4 <HAL_GPIO_Init+0x320>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d019      	beq.n	800499e <HAL_GPIO_Init+0x21a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a4e      	ldr	r2, [pc, #312]	@ (8004aa8 <HAL_GPIO_Init+0x324>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <HAL_GPIO_Init+0x216>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a4d      	ldr	r2, [pc, #308]	@ (8004aac <HAL_GPIO_Init+0x328>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00d      	beq.n	8004996 <HAL_GPIO_Init+0x212>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a4c      	ldr	r2, [pc, #304]	@ (8004ab0 <HAL_GPIO_Init+0x32c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d007      	beq.n	8004992 <HAL_GPIO_Init+0x20e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a4b      	ldr	r2, [pc, #300]	@ (8004ab4 <HAL_GPIO_Init+0x330>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d101      	bne.n	800498e <HAL_GPIO_Init+0x20a>
 800498a:	2307      	movs	r3, #7
 800498c:	e00e      	b.n	80049ac <HAL_GPIO_Init+0x228>
 800498e:	2308      	movs	r3, #8
 8004990:	e00c      	b.n	80049ac <HAL_GPIO_Init+0x228>
 8004992:	2306      	movs	r3, #6
 8004994:	e00a      	b.n	80049ac <HAL_GPIO_Init+0x228>
 8004996:	2305      	movs	r3, #5
 8004998:	e008      	b.n	80049ac <HAL_GPIO_Init+0x228>
 800499a:	2304      	movs	r3, #4
 800499c:	e006      	b.n	80049ac <HAL_GPIO_Init+0x228>
 800499e:	2303      	movs	r3, #3
 80049a0:	e004      	b.n	80049ac <HAL_GPIO_Init+0x228>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e002      	b.n	80049ac <HAL_GPIO_Init+0x228>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <HAL_GPIO_Init+0x228>
 80049aa:	2300      	movs	r3, #0
 80049ac:	69fa      	ldr	r2, [r7, #28]
 80049ae:	f002 0203 	and.w	r2, r2, #3
 80049b2:	0092      	lsls	r2, r2, #2
 80049b4:	4093      	lsls	r3, r2
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049bc:	4935      	ldr	r1, [pc, #212]	@ (8004a94 <HAL_GPIO_Init+0x310>)
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	089b      	lsrs	r3, r3, #2
 80049c2:	3302      	adds	r3, #2
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049ca:	4b3b      	ldr	r3, [pc, #236]	@ (8004ab8 <HAL_GPIO_Init+0x334>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049ee:	4a32      	ldr	r2, [pc, #200]	@ (8004ab8 <HAL_GPIO_Init+0x334>)
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049f4:	4b30      	ldr	r3, [pc, #192]	@ (8004ab8 <HAL_GPIO_Init+0x334>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4013      	ands	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a18:	4a27      	ldr	r2, [pc, #156]	@ (8004ab8 <HAL_GPIO_Init+0x334>)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a1e:	4b26      	ldr	r3, [pc, #152]	@ (8004ab8 <HAL_GPIO_Init+0x334>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	43db      	mvns	r3, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a42:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab8 <HAL_GPIO_Init+0x334>)
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a48:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab8 <HAL_GPIO_Init+0x334>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	4013      	ands	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a6c:	4a12      	ldr	r2, [pc, #72]	@ (8004ab8 <HAL_GPIO_Init+0x334>)
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	3301      	adds	r3, #1
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	2b0f      	cmp	r3, #15
 8004a7c:	f67f ae90 	bls.w	80047a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	3724      	adds	r7, #36	@ 0x24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40023800 	.word	0x40023800
 8004a94:	40013800 	.word	0x40013800
 8004a98:	40020000 	.word	0x40020000
 8004a9c:	40020400 	.word	0x40020400
 8004aa0:	40020800 	.word	0x40020800
 8004aa4:	40020c00 	.word	0x40020c00
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	40021400 	.word	0x40021400
 8004ab0:	40021800 	.word	0x40021800
 8004ab4:	40021c00 	.word	0x40021c00
 8004ab8:	40013c00 	.word	0x40013c00

08004abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	807b      	strh	r3, [r7, #2]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004acc:	787b      	ldrb	r3, [r7, #1]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ad2:	887a      	ldrh	r2, [r7, #2]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ad8:	e003      	b.n	8004ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ada:	887b      	ldrh	r3, [r7, #2]
 8004adc:	041a      	lsls	r2, r3, #16
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	619a      	str	r2, [r3, #24]
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
	...

08004af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e12b      	b.n	8004d5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fe fe2a 	bl	8003770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2224      	movs	r2, #36	@ 0x24
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0201 	bic.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b54:	f001 fc48 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 8004b58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4a81      	ldr	r2, [pc, #516]	@ (8004d64 <HAL_I2C_Init+0x274>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d807      	bhi.n	8004b74 <HAL_I2C_Init+0x84>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4a80      	ldr	r2, [pc, #512]	@ (8004d68 <HAL_I2C_Init+0x278>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	bf94      	ite	ls
 8004b6c:	2301      	movls	r3, #1
 8004b6e:	2300      	movhi	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	e006      	b.n	8004b82 <HAL_I2C_Init+0x92>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4a7d      	ldr	r2, [pc, #500]	@ (8004d6c <HAL_I2C_Init+0x27c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	bf94      	ite	ls
 8004b7c:	2301      	movls	r3, #1
 8004b7e:	2300      	movhi	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e0e7      	b.n	8004d5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4a78      	ldr	r2, [pc, #480]	@ (8004d70 <HAL_I2C_Init+0x280>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	0c9b      	lsrs	r3, r3, #18
 8004b94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4a6a      	ldr	r2, [pc, #424]	@ (8004d64 <HAL_I2C_Init+0x274>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d802      	bhi.n	8004bc4 <HAL_I2C_Init+0xd4>
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	e009      	b.n	8004bd8 <HAL_I2C_Init+0xe8>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004bca:	fb02 f303 	mul.w	r3, r2, r3
 8004bce:	4a69      	ldr	r2, [pc, #420]	@ (8004d74 <HAL_I2C_Init+0x284>)
 8004bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd4:	099b      	lsrs	r3, r3, #6
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004bea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	495c      	ldr	r1, [pc, #368]	@ (8004d64 <HAL_I2C_Init+0x274>)
 8004bf4:	428b      	cmp	r3, r1
 8004bf6:	d819      	bhi.n	8004c2c <HAL_I2C_Init+0x13c>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1e59      	subs	r1, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c06:	1c59      	adds	r1, r3, #1
 8004c08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004c0c:	400b      	ands	r3, r1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_I2C_Init+0x138>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1e59      	subs	r1, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c20:	3301      	adds	r3, #1
 8004c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c26:	e051      	b.n	8004ccc <HAL_I2C_Init+0x1dc>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	e04f      	b.n	8004ccc <HAL_I2C_Init+0x1dc>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d111      	bne.n	8004c58 <HAL_I2C_Init+0x168>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	1e58      	subs	r0, r3, #1
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6859      	ldr	r1, [r3, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	440b      	add	r3, r1
 8004c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c46:	3301      	adds	r3, #1
 8004c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	e012      	b.n	8004c7e <HAL_I2C_Init+0x18e>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	1e58      	subs	r0, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6859      	ldr	r1, [r3, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	0099      	lsls	r1, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c6e:	3301      	adds	r3, #1
 8004c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bf0c      	ite	eq
 8004c78:	2301      	moveq	r3, #1
 8004c7a:	2300      	movne	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_I2C_Init+0x196>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e022      	b.n	8004ccc <HAL_I2C_Init+0x1dc>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10e      	bne.n	8004cac <HAL_I2C_Init+0x1bc>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1e58      	subs	r0, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6859      	ldr	r1, [r3, #4]
 8004c96:	460b      	mov	r3, r1
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	440b      	add	r3, r1
 8004c9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004caa:	e00f      	b.n	8004ccc <HAL_I2C_Init+0x1dc>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	1e58      	subs	r0, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6859      	ldr	r1, [r3, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	0099      	lsls	r1, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	6809      	ldr	r1, [r1, #0]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69da      	ldr	r2, [r3, #28]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004cfa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6911      	ldr	r1, [r2, #16]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	68d2      	ldr	r2, [r2, #12]
 8004d06:	4311      	orrs	r1, r2
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	430b      	orrs	r3, r1
 8004d0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	000186a0 	.word	0x000186a0
 8004d68:	001e847f 	.word	0x001e847f
 8004d6c:	003d08ff 	.word	0x003d08ff
 8004d70:	431bde83 	.word	0x431bde83
 8004d74:	10624dd3 	.word	0x10624dd3

08004d78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af02      	add	r7, sp, #8
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	4608      	mov	r0, r1
 8004d82:	4611      	mov	r1, r2
 8004d84:	461a      	mov	r2, r3
 8004d86:	4603      	mov	r3, r0
 8004d88:	817b      	strh	r3, [r7, #10]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	813b      	strh	r3, [r7, #8]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d92:	f7ff f8c1 	bl	8003f18 <HAL_GetTick>
 8004d96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	f040 80d9 	bne.w	8004f58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	2319      	movs	r3, #25
 8004dac:	2201      	movs	r2, #1
 8004dae:	496d      	ldr	r1, [pc, #436]	@ (8004f64 <HAL_I2C_Mem_Write+0x1ec>)
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fc8b 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e0cc      	b.n	8004f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_I2C_Mem_Write+0x56>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e0c5      	b.n	8004f5a <HAL_I2C_Mem_Write+0x1e2>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d007      	beq.n	8004df4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2221      	movs	r2, #33	@ 0x21
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2240      	movs	r2, #64	@ 0x40
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a3a      	ldr	r2, [r7, #32]
 8004e1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4a4d      	ldr	r2, [pc, #308]	@ (8004f68 <HAL_I2C_Mem_Write+0x1f0>)
 8004e34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e36:	88f8      	ldrh	r0, [r7, #6]
 8004e38:	893a      	ldrh	r2, [r7, #8]
 8004e3a:	8979      	ldrh	r1, [r7, #10]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4603      	mov	r3, r0
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fac2 	bl	80053d0 <I2C_RequestMemoryWrite>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d052      	beq.n	8004ef8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e081      	b.n	8004f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fd50 	bl	8005900 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00d      	beq.n	8004e82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d107      	bne.n	8004e7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e06b      	b.n	8004f5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	781a      	ldrb	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d11b      	bne.n	8004ef8 <HAL_I2C_Mem_Write+0x180>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d017      	beq.n	8004ef8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	781a      	ldrb	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1aa      	bne.n	8004e56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 fd43 	bl	8005990 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00d      	beq.n	8004f2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d107      	bne.n	8004f28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e016      	b.n	8004f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e000      	b.n	8004f5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	00100002 	.word	0x00100002
 8004f68:	ffff0000 	.word	0xffff0000

08004f6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08c      	sub	sp, #48	@ 0x30
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	4608      	mov	r0, r1
 8004f76:	4611      	mov	r1, r2
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	817b      	strh	r3, [r7, #10]
 8004f7e:	460b      	mov	r3, r1
 8004f80:	813b      	strh	r3, [r7, #8]
 8004f82:	4613      	mov	r3, r2
 8004f84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f86:	f7fe ffc7 	bl	8003f18 <HAL_GetTick>
 8004f8a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	f040 8214 	bne.w	80053c2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	2319      	movs	r3, #25
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	497b      	ldr	r1, [pc, #492]	@ (8005190 <HAL_I2C_Mem_Read+0x224>)
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fb91 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e207      	b.n	80053c4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_I2C_Mem_Read+0x56>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e200      	b.n	80053c4 <HAL_I2C_Mem_Read+0x458>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d007      	beq.n	8004fe8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ff6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2222      	movs	r2, #34	@ 0x22
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2240      	movs	r2, #64	@ 0x40
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005012:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005018:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4a5b      	ldr	r2, [pc, #364]	@ (8005194 <HAL_I2C_Mem_Read+0x228>)
 8005028:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800502a:	88f8      	ldrh	r0, [r7, #6]
 800502c:	893a      	ldrh	r2, [r7, #8]
 800502e:	8979      	ldrh	r1, [r7, #10]
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	4603      	mov	r3, r0
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 fa5e 	bl	80054fc <I2C_RequestMemoryRead>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e1bc      	b.n	80053c4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800504e:	2b00      	cmp	r3, #0
 8005050:	d113      	bne.n	800507a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005052:	2300      	movs	r3, #0
 8005054:	623b      	str	r3, [r7, #32]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	623b      	str	r3, [r7, #32]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	623b      	str	r3, [r7, #32]
 8005066:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	e190      	b.n	800539c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507e:	2b01      	cmp	r3, #1
 8005080:	d11b      	bne.n	80050ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005090:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005092:	2300      	movs	r3, #0
 8005094:	61fb      	str	r3, [r7, #28]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	61fb      	str	r3, [r7, #28]
 80050a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	e170      	b.n	800539c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d11b      	bne.n	80050fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e2:	2300      	movs	r3, #0
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	e150      	b.n	800539c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005110:	e144      	b.n	800539c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005116:	2b03      	cmp	r3, #3
 8005118:	f200 80f1 	bhi.w	80052fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005120:	2b01      	cmp	r3, #1
 8005122:	d123      	bne.n	800516c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005126:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 fc79 	bl	8005a20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e145      	b.n	80053c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800516a:	e117      	b.n	800539c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005170:	2b02      	cmp	r3, #2
 8005172:	d14e      	bne.n	8005212 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517a:	2200      	movs	r2, #0
 800517c:	4906      	ldr	r1, [pc, #24]	@ (8005198 <HAL_I2C_Mem_Read+0x22c>)
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 faa4 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d008      	beq.n	800519c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e11a      	b.n	80053c4 <HAL_I2C_Mem_Read+0x458>
 800518e:	bf00      	nop
 8005190:	00100002 	.word	0x00100002
 8005194:	ffff0000 	.word	0xffff0000
 8005198:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005210:	e0c4      	b.n	800539c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005218:	2200      	movs	r2, #0
 800521a:	496c      	ldr	r1, [pc, #432]	@ (80053cc <HAL_I2C_Mem_Read+0x460>)
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 fa55 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e0cb      	b.n	80053c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800523a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005274:	2200      	movs	r2, #0
 8005276:	4955      	ldr	r1, [pc, #340]	@ (80053cc <HAL_I2C_Mem_Read+0x460>)
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 fa27 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e09d      	b.n	80053c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005296:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052fc:	e04e      	b.n	800539c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005300:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 fb8c 	bl	8005a20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e058      	b.n	80053c4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533a:	b29b      	uxth	r3, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b04      	cmp	r3, #4
 8005350:	d124      	bne.n	800539c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005356:	2b03      	cmp	r3, #3
 8005358:	d107      	bne.n	800536a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005368:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f47f aeb6 	bne.w	8005112 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	e000      	b.n	80053c4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
  }
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3728      	adds	r7, #40	@ 0x28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	00010004 	.word	0x00010004

080053d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	4608      	mov	r0, r1
 80053da:	4611      	mov	r1, r2
 80053dc:	461a      	mov	r2, r3
 80053de:	4603      	mov	r3, r0
 80053e0:	817b      	strh	r3, [r7, #10]
 80053e2:	460b      	mov	r3, r1
 80053e4:	813b      	strh	r3, [r7, #8]
 80053e6:	4613      	mov	r3, r2
 80053e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	2200      	movs	r2, #0
 8005402:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f960 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00d      	beq.n	800542e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005420:	d103      	bne.n	800542a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005428:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e05f      	b.n	80054ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800542e:	897b      	ldrh	r3, [r7, #10]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800543c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	6a3a      	ldr	r2, [r7, #32]
 8005442:	492d      	ldr	r1, [pc, #180]	@ (80054f8 <I2C_RequestMemoryWrite+0x128>)
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f9bb 	bl	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e04c      	b.n	80054ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800546a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800546c:	6a39      	ldr	r1, [r7, #32]
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 fa46 	bl	8005900 <I2C_WaitOnTXEFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00d      	beq.n	8005496 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	2b04      	cmp	r3, #4
 8005480:	d107      	bne.n	8005492 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005490:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e02b      	b.n	80054ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d105      	bne.n	80054a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800549c:	893b      	ldrh	r3, [r7, #8]
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	611a      	str	r2, [r3, #16]
 80054a6:	e021      	b.n	80054ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054a8:	893b      	ldrh	r3, [r7, #8]
 80054aa:	0a1b      	lsrs	r3, r3, #8
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b8:	6a39      	ldr	r1, [r7, #32]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 fa20 	bl	8005900 <I2C_WaitOnTXEFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00d      	beq.n	80054e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d107      	bne.n	80054de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e005      	b.n	80054ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054e2:	893b      	ldrh	r3, [r7, #8]
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	00010002 	.word	0x00010002

080054fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af02      	add	r7, sp, #8
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	4608      	mov	r0, r1
 8005506:	4611      	mov	r1, r2
 8005508:	461a      	mov	r2, r3
 800550a:	4603      	mov	r3, r0
 800550c:	817b      	strh	r3, [r7, #10]
 800550e:	460b      	mov	r3, r1
 8005510:	813b      	strh	r3, [r7, #8]
 8005512:	4613      	mov	r3, r2
 8005514:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005524:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005534:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	2200      	movs	r2, #0
 800553e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f8c2 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00d      	beq.n	800556a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800555c:	d103      	bne.n	8005566 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005564:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e0aa      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800556a:	897b      	ldrh	r3, [r7, #10]
 800556c:	b2db      	uxtb	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005578:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	6a3a      	ldr	r2, [r7, #32]
 800557e:	4952      	ldr	r1, [pc, #328]	@ (80056c8 <I2C_RequestMemoryRead+0x1cc>)
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f91d 	bl	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e097      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a8:	6a39      	ldr	r1, [r7, #32]
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f9a8 	bl	8005900 <I2C_WaitOnTXEFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00d      	beq.n	80055d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d107      	bne.n	80055ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e076      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d105      	bne.n	80055e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055d8:	893b      	ldrh	r3, [r7, #8]
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	611a      	str	r2, [r3, #16]
 80055e2:	e021      	b.n	8005628 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055e4:	893b      	ldrh	r3, [r7, #8]
 80055e6:	0a1b      	lsrs	r3, r3, #8
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f4:	6a39      	ldr	r1, [r7, #32]
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f982 	bl	8005900 <I2C_WaitOnTXEFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00d      	beq.n	800561e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005606:	2b04      	cmp	r3, #4
 8005608:	d107      	bne.n	800561a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005618:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e050      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800561e:	893b      	ldrh	r3, [r7, #8]
 8005620:	b2da      	uxtb	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800562a:	6a39      	ldr	r1, [r7, #32]
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f967 	bl	8005900 <I2C_WaitOnTXEFlagUntilTimeout>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00d      	beq.n	8005654 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563c:	2b04      	cmp	r3, #4
 800563e:	d107      	bne.n	8005650 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800564e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e035      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005662:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	2200      	movs	r2, #0
 800566c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f82b 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00d      	beq.n	8005698 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800568a:	d103      	bne.n	8005694 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005692:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e013      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005698:	897b      	ldrh	r3, [r7, #10]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056aa:	6a3a      	ldr	r2, [r7, #32]
 80056ac:	4906      	ldr	r1, [pc, #24]	@ (80056c8 <I2C_RequestMemoryRead+0x1cc>)
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f886 	bl	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	00010002 	.word	0x00010002

080056cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	4613      	mov	r3, r2
 80056da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056dc:	e048      	b.n	8005770 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d044      	beq.n	8005770 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e6:	f7fe fc17 	bl	8003f18 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d302      	bcc.n	80056fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d139      	bne.n	8005770 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	0c1b      	lsrs	r3, r3, #16
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b01      	cmp	r3, #1
 8005704:	d10d      	bne.n	8005722 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	43da      	mvns	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4013      	ands	r3, r2
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	bf0c      	ite	eq
 8005718:	2301      	moveq	r3, #1
 800571a:	2300      	movne	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	e00c      	b.n	800573c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	43da      	mvns	r2, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4013      	ands	r3, r2
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	bf0c      	ite	eq
 8005734:	2301      	moveq	r3, #1
 8005736:	2300      	movne	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	429a      	cmp	r2, r3
 8005740:	d116      	bne.n	8005770 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575c:	f043 0220 	orr.w	r2, r3, #32
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e023      	b.n	80057b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	d10d      	bne.n	8005796 <I2C_WaitOnFlagUntilTimeout+0xca>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	43da      	mvns	r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	4013      	ands	r3, r2
 8005786:	b29b      	uxth	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	bf0c      	ite	eq
 800578c:	2301      	moveq	r3, #1
 800578e:	2300      	movne	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	461a      	mov	r2, r3
 8005794:	e00c      	b.n	80057b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	43da      	mvns	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4013      	ands	r3, r2
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d093      	beq.n	80056de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057ce:	e071      	b.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057de:	d123      	bne.n	8005828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005814:	f043 0204 	orr.w	r2, r3, #4
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e067      	b.n	80058f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582e:	d041      	beq.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005830:	f7fe fb72 	bl	8003f18 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	429a      	cmp	r2, r3
 800583e:	d302      	bcc.n	8005846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d136      	bne.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	0c1b      	lsrs	r3, r3, #16
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	d10c      	bne.n	800586a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	43da      	mvns	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4013      	ands	r3, r2
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	bf14      	ite	ne
 8005862:	2301      	movne	r3, #1
 8005864:	2300      	moveq	r3, #0
 8005866:	b2db      	uxtb	r3, r3
 8005868:	e00b      	b.n	8005882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	43da      	mvns	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4013      	ands	r3, r2
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	bf14      	ite	ne
 800587c:	2301      	movne	r3, #1
 800587e:	2300      	moveq	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d016      	beq.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	f043 0220 	orr.w	r2, r3, #32
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e021      	b.n	80058f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	0c1b      	lsrs	r3, r3, #16
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d10c      	bne.n	80058d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	43da      	mvns	r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4013      	ands	r3, r2
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bf14      	ite	ne
 80058d0:	2301      	movne	r3, #1
 80058d2:	2300      	moveq	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	e00b      	b.n	80058f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	43da      	mvns	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4013      	ands	r3, r2
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	bf14      	ite	ne
 80058ea:	2301      	movne	r3, #1
 80058ec:	2300      	moveq	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f47f af6d 	bne.w	80057d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800590c:	e034      	b.n	8005978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f8e3 	bl	8005ada <I2C_IsAcknowledgeFailed>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e034      	b.n	8005988 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005924:	d028      	beq.n	8005978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005926:	f7fe faf7 	bl	8003f18 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	429a      	cmp	r2, r3
 8005934:	d302      	bcc.n	800593c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d11d      	bne.n	8005978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005946:	2b80      	cmp	r3, #128	@ 0x80
 8005948:	d016      	beq.n	8005978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005964:	f043 0220 	orr.w	r2, r3, #32
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e007      	b.n	8005988 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005982:	2b80      	cmp	r3, #128	@ 0x80
 8005984:	d1c3      	bne.n	800590e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800599c:	e034      	b.n	8005a08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 f89b 	bl	8005ada <I2C_IsAcknowledgeFailed>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e034      	b.n	8005a18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d028      	beq.n	8005a08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b6:	f7fe faaf 	bl	8003f18 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d302      	bcc.n	80059cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d11d      	bne.n	8005a08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d016      	beq.n	8005a08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f4:	f043 0220 	orr.w	r2, r3, #32
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e007      	b.n	8005a18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d1c3      	bne.n	800599e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a2c:	e049      	b.n	8005ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d119      	bne.n	8005a70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0210 	mvn.w	r2, #16
 8005a44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e030      	b.n	8005ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a70:	f7fe fa52 	bl	8003f18 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d302      	bcc.n	8005a86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d11d      	bne.n	8005ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a90:	2b40      	cmp	r3, #64	@ 0x40
 8005a92:	d016      	beq.n	8005ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aae:	f043 0220 	orr.w	r2, r3, #32
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e007      	b.n	8005ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005acc:	2b40      	cmp	r3, #64	@ 0x40
 8005ace:	d1ae      	bne.n	8005a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af0:	d11b      	bne.n	8005b2a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005afa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	f043 0204 	orr.w	r2, r3, #4
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005b3e:	4b06      	ldr	r3, [pc, #24]	@ (8005b58 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005b44:	4b05      	ldr	r3, [pc, #20]	@ (8005b5c <HAL_PWR_EnableBkUpAccess+0x24>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005b4a:	687b      	ldr	r3, [r7, #4]
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	420e0020 	.word	0x420e0020
 8005b5c:	40007000 	.word	0x40007000

08005b60 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005b66:	4b06      	ldr	r3, [pc, #24]	@ (8005b80 <HAL_PWR_DisableBkUpAccess+0x20>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005b6c:	4b05      	ldr	r3, [pc, #20]	@ (8005b84 <HAL_PWR_DisableBkUpAccess+0x24>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005b72:	687b      	ldr	r3, [r7, #4]
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	420e0020 	.word	0x420e0020
 8005b84:	40007000 	.word	0x40007000

08005b88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e267      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d075      	beq.n	8005c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ba6:	4b88      	ldr	r3, [pc, #544]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 030c 	and.w	r3, r3, #12
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d00c      	beq.n	8005bcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bb2:	4b85      	ldr	r3, [pc, #532]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d112      	bne.n	8005be4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bbe:	4b82      	ldr	r3, [pc, #520]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bca:	d10b      	bne.n	8005be4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bcc:	4b7e      	ldr	r3, [pc, #504]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d05b      	beq.n	8005c90 <HAL_RCC_OscConfig+0x108>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d157      	bne.n	8005c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e242      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bec:	d106      	bne.n	8005bfc <HAL_RCC_OscConfig+0x74>
 8005bee:	4b76      	ldr	r3, [pc, #472]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a75      	ldr	r2, [pc, #468]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	e01d      	b.n	8005c38 <HAL_RCC_OscConfig+0xb0>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c04:	d10c      	bne.n	8005c20 <HAL_RCC_OscConfig+0x98>
 8005c06:	4b70      	ldr	r3, [pc, #448]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a6f      	ldr	r2, [pc, #444]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	4b6d      	ldr	r3, [pc, #436]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a6c      	ldr	r2, [pc, #432]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e00b      	b.n	8005c38 <HAL_RCC_OscConfig+0xb0>
 8005c20:	4b69      	ldr	r3, [pc, #420]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a68      	ldr	r2, [pc, #416]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	4b66      	ldr	r3, [pc, #408]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a65      	ldr	r2, [pc, #404]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d013      	beq.n	8005c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c40:	f7fe f96a 	bl	8003f18 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c48:	f7fe f966 	bl	8003f18 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b64      	cmp	r3, #100	@ 0x64
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e207      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5a:	4b5b      	ldr	r3, [pc, #364]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0f0      	beq.n	8005c48 <HAL_RCC_OscConfig+0xc0>
 8005c66:	e014      	b.n	8005c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c68:	f7fe f956 	bl	8003f18 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c70:	f7fe f952 	bl	8003f18 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b64      	cmp	r3, #100	@ 0x64
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e1f3      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c82:	4b51      	ldr	r3, [pc, #324]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0xe8>
 8005c8e:	e000      	b.n	8005c92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d063      	beq.n	8005d66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 030c 	and.w	r3, r3, #12
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00b      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005caa:	4b47      	ldr	r3, [pc, #284]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d11c      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cb6:	4b44      	ldr	r3, [pc, #272]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d116      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cc2:	4b41      	ldr	r3, [pc, #260]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <HAL_RCC_OscConfig+0x152>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d001      	beq.n	8005cda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e1c7      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cda:	4b3b      	ldr	r3, [pc, #236]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	4937      	ldr	r1, [pc, #220]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cee:	e03a      	b.n	8005d66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d020      	beq.n	8005d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cf8:	4b34      	ldr	r3, [pc, #208]	@ (8005dcc <HAL_RCC_OscConfig+0x244>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfe:	f7fe f90b 	bl	8003f18 <HAL_GetTick>
 8005d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d04:	e008      	b.n	8005d18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d06:	f7fe f907 	bl	8003f18 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e1a8      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d18:	4b2b      	ldr	r3, [pc, #172]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0f0      	beq.n	8005d06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d24:	4b28      	ldr	r3, [pc, #160]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	4925      	ldr	r1, [pc, #148]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	600b      	str	r3, [r1, #0]
 8005d38:	e015      	b.n	8005d66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d3a:	4b24      	ldr	r3, [pc, #144]	@ (8005dcc <HAL_RCC_OscConfig+0x244>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d40:	f7fe f8ea 	bl	8003f18 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d48:	f7fe f8e6 	bl	8003f18 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e187      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1f0      	bne.n	8005d48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d036      	beq.n	8005de0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d016      	beq.n	8005da8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d7a:	4b15      	ldr	r3, [pc, #84]	@ (8005dd0 <HAL_RCC_OscConfig+0x248>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d80:	f7fe f8ca 	bl	8003f18 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d88:	f7fe f8c6 	bl	8003f18 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e167      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc8 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f0      	beq.n	8005d88 <HAL_RCC_OscConfig+0x200>
 8005da6:	e01b      	b.n	8005de0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005da8:	4b09      	ldr	r3, [pc, #36]	@ (8005dd0 <HAL_RCC_OscConfig+0x248>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dae:	f7fe f8b3 	bl	8003f18 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005db4:	e00e      	b.n	8005dd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005db6:	f7fe f8af 	bl	8003f18 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d907      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e150      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	42470000 	.word	0x42470000
 8005dd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dd4:	4b88      	ldr	r3, [pc, #544]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1ea      	bne.n	8005db6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8097 	beq.w	8005f1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dee:	2300      	movs	r3, #0
 8005df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005df2:	4b81      	ldr	r3, [pc, #516]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10f      	bne.n	8005e1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60bb      	str	r3, [r7, #8]
 8005e02:	4b7d      	ldr	r3, [pc, #500]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e06:	4a7c      	ldr	r2, [pc, #496]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e0e:	4b7a      	ldr	r3, [pc, #488]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e16:	60bb      	str	r3, [r7, #8]
 8005e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e1e:	4b77      	ldr	r3, [pc, #476]	@ (8005ffc <HAL_RCC_OscConfig+0x474>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d118      	bne.n	8005e5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e2a:	4b74      	ldr	r3, [pc, #464]	@ (8005ffc <HAL_RCC_OscConfig+0x474>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a73      	ldr	r2, [pc, #460]	@ (8005ffc <HAL_RCC_OscConfig+0x474>)
 8005e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e36:	f7fe f86f 	bl	8003f18 <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e3c:	e008      	b.n	8005e50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e3e:	f7fe f86b 	bl	8003f18 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e10c      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e50:	4b6a      	ldr	r3, [pc, #424]	@ (8005ffc <HAL_RCC_OscConfig+0x474>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0f0      	beq.n	8005e3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d106      	bne.n	8005e72 <HAL_RCC_OscConfig+0x2ea>
 8005e64:	4b64      	ldr	r3, [pc, #400]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e68:	4a63      	ldr	r2, [pc, #396]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005e6a:	f043 0301 	orr.w	r3, r3, #1
 8005e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e70:	e01c      	b.n	8005eac <HAL_RCC_OscConfig+0x324>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2b05      	cmp	r3, #5
 8005e78:	d10c      	bne.n	8005e94 <HAL_RCC_OscConfig+0x30c>
 8005e7a:	4b5f      	ldr	r3, [pc, #380]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7e:	4a5e      	ldr	r2, [pc, #376]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005e80:	f043 0304 	orr.w	r3, r3, #4
 8005e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e86:	4b5c      	ldr	r3, [pc, #368]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8a:	4a5b      	ldr	r2, [pc, #364]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005e8c:	f043 0301 	orr.w	r3, r3, #1
 8005e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e92:	e00b      	b.n	8005eac <HAL_RCC_OscConfig+0x324>
 8005e94:	4b58      	ldr	r3, [pc, #352]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e98:	4a57      	ldr	r2, [pc, #348]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005e9a:	f023 0301 	bic.w	r3, r3, #1
 8005e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ea0:	4b55      	ldr	r3, [pc, #340]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea4:	4a54      	ldr	r2, [pc, #336]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005ea6:	f023 0304 	bic.w	r3, r3, #4
 8005eaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d015      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb4:	f7fe f830 	bl	8003f18 <HAL_GetTick>
 8005eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eba:	e00a      	b.n	8005ed2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ebc:	f7fe f82c 	bl	8003f18 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e0cb      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed2:	4b49      	ldr	r3, [pc, #292]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0ee      	beq.n	8005ebc <HAL_RCC_OscConfig+0x334>
 8005ede:	e014      	b.n	8005f0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ee0:	f7fe f81a 	bl	8003f18 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ee6:	e00a      	b.n	8005efe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ee8:	f7fe f816 	bl	8003f18 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e0b5      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005efe:	4b3e      	ldr	r3, [pc, #248]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1ee      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d105      	bne.n	8005f1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f10:	4b39      	ldr	r3, [pc, #228]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f14:	4a38      	ldr	r2, [pc, #224]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005f16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80a1 	beq.w	8006068 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f26:	4b34      	ldr	r3, [pc, #208]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
 8005f2e:	2b08      	cmp	r3, #8
 8005f30:	d05c      	beq.n	8005fec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d141      	bne.n	8005fbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f3a:	4b31      	ldr	r3, [pc, #196]	@ (8006000 <HAL_RCC_OscConfig+0x478>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f40:	f7fd ffea 	bl	8003f18 <HAL_GetTick>
 8005f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f46:	e008      	b.n	8005f5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f48:	f7fd ffe6 	bl	8003f18 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e087      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f5a:	4b27      	ldr	r3, [pc, #156]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1f0      	bne.n	8005f48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69da      	ldr	r2, [r3, #28]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f74:	019b      	lsls	r3, r3, #6
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7c:	085b      	lsrs	r3, r3, #1
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	041b      	lsls	r3, r3, #16
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f88:	061b      	lsls	r3, r3, #24
 8005f8a:	491b      	ldr	r1, [pc, #108]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f90:	4b1b      	ldr	r3, [pc, #108]	@ (8006000 <HAL_RCC_OscConfig+0x478>)
 8005f92:	2201      	movs	r2, #1
 8005f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f96:	f7fd ffbf 	bl	8003f18 <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f9e:	f7fd ffbb 	bl	8003f18 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e05c      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fb0:	4b11      	ldr	r3, [pc, #68]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0f0      	beq.n	8005f9e <HAL_RCC_OscConfig+0x416>
 8005fbc:	e054      	b.n	8006068 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fbe:	4b10      	ldr	r3, [pc, #64]	@ (8006000 <HAL_RCC_OscConfig+0x478>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc4:	f7fd ffa8 	bl	8003f18 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fcc:	f7fd ffa4 	bl	8003f18 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e045      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fde:	4b06      	ldr	r3, [pc, #24]	@ (8005ff8 <HAL_RCC_OscConfig+0x470>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f0      	bne.n	8005fcc <HAL_RCC_OscConfig+0x444>
 8005fea:	e03d      	b.n	8006068 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d107      	bne.n	8006004 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e038      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	40007000 	.word	0x40007000
 8006000:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006004:	4b1b      	ldr	r3, [pc, #108]	@ (8006074 <HAL_RCC_OscConfig+0x4ec>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d028      	beq.n	8006064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800601c:	429a      	cmp	r2, r3
 800601e:	d121      	bne.n	8006064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800602a:	429a      	cmp	r2, r3
 800602c:	d11a      	bne.n	8006064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006034:	4013      	ands	r3, r2
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800603a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800603c:	4293      	cmp	r3, r2
 800603e:	d111      	bne.n	8006064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604a:	085b      	lsrs	r3, r3, #1
 800604c:	3b01      	subs	r3, #1
 800604e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006050:	429a      	cmp	r2, r3
 8006052:	d107      	bne.n	8006064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006060:	429a      	cmp	r2, r3
 8006062:	d001      	beq.n	8006068 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e000      	b.n	800606a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40023800 	.word	0x40023800

08006078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e0cc      	b.n	8006226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800608c:	4b68      	ldr	r3, [pc, #416]	@ (8006230 <HAL_RCC_ClockConfig+0x1b8>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d90c      	bls.n	80060b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800609a:	4b65      	ldr	r3, [pc, #404]	@ (8006230 <HAL_RCC_ClockConfig+0x1b8>)
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a2:	4b63      	ldr	r3, [pc, #396]	@ (8006230 <HAL_RCC_ClockConfig+0x1b8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d001      	beq.n	80060b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e0b8      	b.n	8006226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d020      	beq.n	8006102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0304 	and.w	r3, r3, #4
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d005      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060cc:	4b59      	ldr	r3, [pc, #356]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	4a58      	ldr	r2, [pc, #352]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80060d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80060d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d005      	beq.n	80060f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060e4:	4b53      	ldr	r3, [pc, #332]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	4a52      	ldr	r2, [pc, #328]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80060ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060f0:	4b50      	ldr	r3, [pc, #320]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	494d      	ldr	r1, [pc, #308]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d044      	beq.n	8006198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d107      	bne.n	8006126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006116:	4b47      	ldr	r3, [pc, #284]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d119      	bne.n	8006156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e07f      	b.n	8006226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b02      	cmp	r3, #2
 800612c:	d003      	beq.n	8006136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006132:	2b03      	cmp	r3, #3
 8006134:	d107      	bne.n	8006146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006136:	4b3f      	ldr	r3, [pc, #252]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d109      	bne.n	8006156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e06f      	b.n	8006226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006146:	4b3b      	ldr	r3, [pc, #236]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e067      	b.n	8006226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006156:	4b37      	ldr	r3, [pc, #220]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f023 0203 	bic.w	r2, r3, #3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	4934      	ldr	r1, [pc, #208]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 8006164:	4313      	orrs	r3, r2
 8006166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006168:	f7fd fed6 	bl	8003f18 <HAL_GetTick>
 800616c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800616e:	e00a      	b.n	8006186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006170:	f7fd fed2 	bl	8003f18 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800617e:	4293      	cmp	r3, r2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e04f      	b.n	8006226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006186:	4b2b      	ldr	r3, [pc, #172]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 020c 	and.w	r2, r3, #12
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	429a      	cmp	r2, r3
 8006196:	d1eb      	bne.n	8006170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006198:	4b25      	ldr	r3, [pc, #148]	@ (8006230 <HAL_RCC_ClockConfig+0x1b8>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d20c      	bcs.n	80061c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a6:	4b22      	ldr	r3, [pc, #136]	@ (8006230 <HAL_RCC_ClockConfig+0x1b8>)
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ae:	4b20      	ldr	r3, [pc, #128]	@ (8006230 <HAL_RCC_ClockConfig+0x1b8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d001      	beq.n	80061c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e032      	b.n	8006226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d008      	beq.n	80061de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061cc:	4b19      	ldr	r3, [pc, #100]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	4916      	ldr	r1, [pc, #88]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d009      	beq.n	80061fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061ea:	4b12      	ldr	r3, [pc, #72]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	490e      	ldr	r1, [pc, #56]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061fe:	f000 f821 	bl	8006244 <HAL_RCC_GetSysClockFreq>
 8006202:	4602      	mov	r2, r0
 8006204:	4b0b      	ldr	r3, [pc, #44]	@ (8006234 <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	091b      	lsrs	r3, r3, #4
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	490a      	ldr	r1, [pc, #40]	@ (8006238 <HAL_RCC_ClockConfig+0x1c0>)
 8006210:	5ccb      	ldrb	r3, [r1, r3]
 8006212:	fa22 f303 	lsr.w	r3, r2, r3
 8006216:	4a09      	ldr	r2, [pc, #36]	@ (800623c <HAL_RCC_ClockConfig+0x1c4>)
 8006218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800621a:	4b09      	ldr	r3, [pc, #36]	@ (8006240 <HAL_RCC_ClockConfig+0x1c8>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f7fd fe36 	bl	8003e90 <HAL_InitTick>

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	40023c00 	.word	0x40023c00
 8006234:	40023800 	.word	0x40023800
 8006238:	08010670 	.word	0x08010670
 800623c:	20000008 	.word	0x20000008
 8006240:	2000000c 	.word	0x2000000c

08006244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006248:	b090      	sub	sp, #64	@ 0x40
 800624a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006250:	2300      	movs	r3, #0
 8006252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006254:	2300      	movs	r3, #0
 8006256:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800625c:	4b59      	ldr	r3, [pc, #356]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f003 030c 	and.w	r3, r3, #12
 8006264:	2b08      	cmp	r3, #8
 8006266:	d00d      	beq.n	8006284 <HAL_RCC_GetSysClockFreq+0x40>
 8006268:	2b08      	cmp	r3, #8
 800626a:	f200 80a1 	bhi.w	80063b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_RCC_GetSysClockFreq+0x34>
 8006272:	2b04      	cmp	r3, #4
 8006274:	d003      	beq.n	800627e <HAL_RCC_GetSysClockFreq+0x3a>
 8006276:	e09b      	b.n	80063b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006278:	4b53      	ldr	r3, [pc, #332]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800627a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800627c:	e09b      	b.n	80063b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800627e:	4b53      	ldr	r3, [pc, #332]	@ (80063cc <HAL_RCC_GetSysClockFreq+0x188>)
 8006280:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006282:	e098      	b.n	80063b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006284:	4b4f      	ldr	r3, [pc, #316]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800628c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800628e:	4b4d      	ldr	r3, [pc, #308]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d028      	beq.n	80062ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800629a:	4b4a      	ldr	r3, [pc, #296]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	099b      	lsrs	r3, r3, #6
 80062a0:	2200      	movs	r2, #0
 80062a2:	623b      	str	r3, [r7, #32]
 80062a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80062ac:	2100      	movs	r1, #0
 80062ae:	4b47      	ldr	r3, [pc, #284]	@ (80063cc <HAL_RCC_GetSysClockFreq+0x188>)
 80062b0:	fb03 f201 	mul.w	r2, r3, r1
 80062b4:	2300      	movs	r3, #0
 80062b6:	fb00 f303 	mul.w	r3, r0, r3
 80062ba:	4413      	add	r3, r2
 80062bc:	4a43      	ldr	r2, [pc, #268]	@ (80063cc <HAL_RCC_GetSysClockFreq+0x188>)
 80062be:	fba0 1202 	umull	r1, r2, r0, r2
 80062c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062c4:	460a      	mov	r2, r1
 80062c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80062c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062ca:	4413      	add	r3, r2
 80062cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d0:	2200      	movs	r2, #0
 80062d2:	61bb      	str	r3, [r7, #24]
 80062d4:	61fa      	str	r2, [r7, #28]
 80062d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80062de:	f7fa fcd3 	bl	8000c88 <__aeabi_uldivmod>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4613      	mov	r3, r2
 80062e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062ea:	e053      	b.n	8006394 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ec:	4b35      	ldr	r3, [pc, #212]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	099b      	lsrs	r3, r3, #6
 80062f2:	2200      	movs	r2, #0
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	617a      	str	r2, [r7, #20]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80062fe:	f04f 0b00 	mov.w	fp, #0
 8006302:	4652      	mov	r2, sl
 8006304:	465b      	mov	r3, fp
 8006306:	f04f 0000 	mov.w	r0, #0
 800630a:	f04f 0100 	mov.w	r1, #0
 800630e:	0159      	lsls	r1, r3, #5
 8006310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006314:	0150      	lsls	r0, r2, #5
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	ebb2 080a 	subs.w	r8, r2, sl
 800631e:	eb63 090b 	sbc.w	r9, r3, fp
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800632e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006332:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006336:	ebb2 0408 	subs.w	r4, r2, r8
 800633a:	eb63 0509 	sbc.w	r5, r3, r9
 800633e:	f04f 0200 	mov.w	r2, #0
 8006342:	f04f 0300 	mov.w	r3, #0
 8006346:	00eb      	lsls	r3, r5, #3
 8006348:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800634c:	00e2      	lsls	r2, r4, #3
 800634e:	4614      	mov	r4, r2
 8006350:	461d      	mov	r5, r3
 8006352:	eb14 030a 	adds.w	r3, r4, sl
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	eb45 030b 	adc.w	r3, r5, fp
 800635c:	607b      	str	r3, [r7, #4]
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800636a:	4629      	mov	r1, r5
 800636c:	028b      	lsls	r3, r1, #10
 800636e:	4621      	mov	r1, r4
 8006370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006374:	4621      	mov	r1, r4
 8006376:	028a      	lsls	r2, r1, #10
 8006378:	4610      	mov	r0, r2
 800637a:	4619      	mov	r1, r3
 800637c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637e:	2200      	movs	r2, #0
 8006380:	60bb      	str	r3, [r7, #8]
 8006382:	60fa      	str	r2, [r7, #12]
 8006384:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006388:	f7fa fc7e 	bl	8000c88 <__aeabi_uldivmod>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4613      	mov	r3, r2
 8006392:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006394:	4b0b      	ldr	r3, [pc, #44]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	0c1b      	lsrs	r3, r3, #16
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	3301      	adds	r3, #1
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80063a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80063ae:	e002      	b.n	80063b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063b0:	4b05      	ldr	r3, [pc, #20]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80063b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80063b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3740      	adds	r7, #64	@ 0x40
 80063bc:	46bd      	mov	sp, r7
 80063be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063c2:	bf00      	nop
 80063c4:	40023800 	.word	0x40023800
 80063c8:	00f42400 	.word	0x00f42400
 80063cc:	017d7840 	.word	0x017d7840

080063d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063d4:	4b03      	ldr	r3, [pc, #12]	@ (80063e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80063d6:	681b      	ldr	r3, [r3, #0]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	20000008 	.word	0x20000008

080063e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063ec:	f7ff fff0 	bl	80063d0 <HAL_RCC_GetHCLKFreq>
 80063f0:	4602      	mov	r2, r0
 80063f2:	4b05      	ldr	r3, [pc, #20]	@ (8006408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	0a9b      	lsrs	r3, r3, #10
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	4903      	ldr	r1, [pc, #12]	@ (800640c <HAL_RCC_GetPCLK1Freq+0x24>)
 80063fe:	5ccb      	ldrb	r3, [r1, r3]
 8006400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006404:	4618      	mov	r0, r3
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40023800 	.word	0x40023800
 800640c:	08010680 	.word	0x08010680

08006410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006414:	f7ff ffdc 	bl	80063d0 <HAL_RCC_GetHCLKFreq>
 8006418:	4602      	mov	r2, r0
 800641a:	4b05      	ldr	r3, [pc, #20]	@ (8006430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	0b5b      	lsrs	r3, r3, #13
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	4903      	ldr	r1, [pc, #12]	@ (8006434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006426:	5ccb      	ldrb	r3, [r1, r3]
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800642c:	4618      	mov	r0, r3
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40023800 	.word	0x40023800
 8006434:	08010680 	.word	0x08010680

08006438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e041      	b.n	80064ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fd f9ce 	bl	8003800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3304      	adds	r3, #4
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f000 ff72 	bl	8007360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e041      	b.n	800656c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d106      	bne.n	8006502 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f839 	bl	8006574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f000 ff23 	bl	8007360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d109      	bne.n	80065ac <HAL_TIM_PWM_Start+0x24>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	bf14      	ite	ne
 80065a4:	2301      	movne	r3, #1
 80065a6:	2300      	moveq	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	e022      	b.n	80065f2 <HAL_TIM_PWM_Start+0x6a>
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d109      	bne.n	80065c6 <HAL_TIM_PWM_Start+0x3e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	bf14      	ite	ne
 80065be:	2301      	movne	r3, #1
 80065c0:	2300      	moveq	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	e015      	b.n	80065f2 <HAL_TIM_PWM_Start+0x6a>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d109      	bne.n	80065e0 <HAL_TIM_PWM_Start+0x58>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	bf14      	ite	ne
 80065d8:	2301      	movne	r3, #1
 80065da:	2300      	moveq	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	e008      	b.n	80065f2 <HAL_TIM_PWM_Start+0x6a>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	bf14      	ite	ne
 80065ec:	2301      	movne	r3, #1
 80065ee:	2300      	moveq	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e07c      	b.n	80066f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d104      	bne.n	800660a <HAL_TIM_PWM_Start+0x82>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006608:	e013      	b.n	8006632 <HAL_TIM_PWM_Start+0xaa>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b04      	cmp	r3, #4
 800660e:	d104      	bne.n	800661a <HAL_TIM_PWM_Start+0x92>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006618:	e00b      	b.n	8006632 <HAL_TIM_PWM_Start+0xaa>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b08      	cmp	r3, #8
 800661e:	d104      	bne.n	800662a <HAL_TIM_PWM_Start+0xa2>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006628:	e003      	b.n	8006632 <HAL_TIM_PWM_Start+0xaa>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2202      	movs	r2, #2
 800662e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2201      	movs	r2, #1
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	4618      	mov	r0, r3
 800663c:	f001 fab0 	bl	8007ba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a2d      	ldr	r2, [pc, #180]	@ (80066fc <HAL_TIM_PWM_Start+0x174>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d004      	beq.n	8006654 <HAL_TIM_PWM_Start+0xcc>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a2c      	ldr	r2, [pc, #176]	@ (8006700 <HAL_TIM_PWM_Start+0x178>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d101      	bne.n	8006658 <HAL_TIM_PWM_Start+0xd0>
 8006654:	2301      	movs	r3, #1
 8006656:	e000      	b.n	800665a <HAL_TIM_PWM_Start+0xd2>
 8006658:	2300      	movs	r3, #0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d007      	beq.n	800666e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800666c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a22      	ldr	r2, [pc, #136]	@ (80066fc <HAL_TIM_PWM_Start+0x174>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d022      	beq.n	80066be <HAL_TIM_PWM_Start+0x136>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006680:	d01d      	beq.n	80066be <HAL_TIM_PWM_Start+0x136>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1f      	ldr	r2, [pc, #124]	@ (8006704 <HAL_TIM_PWM_Start+0x17c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d018      	beq.n	80066be <HAL_TIM_PWM_Start+0x136>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a1d      	ldr	r2, [pc, #116]	@ (8006708 <HAL_TIM_PWM_Start+0x180>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d013      	beq.n	80066be <HAL_TIM_PWM_Start+0x136>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a1c      	ldr	r2, [pc, #112]	@ (800670c <HAL_TIM_PWM_Start+0x184>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00e      	beq.n	80066be <HAL_TIM_PWM_Start+0x136>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a16      	ldr	r2, [pc, #88]	@ (8006700 <HAL_TIM_PWM_Start+0x178>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d009      	beq.n	80066be <HAL_TIM_PWM_Start+0x136>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a18      	ldr	r2, [pc, #96]	@ (8006710 <HAL_TIM_PWM_Start+0x188>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d004      	beq.n	80066be <HAL_TIM_PWM_Start+0x136>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a16      	ldr	r2, [pc, #88]	@ (8006714 <HAL_TIM_PWM_Start+0x18c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d111      	bne.n	80066e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b06      	cmp	r3, #6
 80066ce:	d010      	beq.n	80066f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e0:	e007      	b.n	80066f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f042 0201 	orr.w	r2, r2, #1
 80066f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40010000 	.word	0x40010000
 8006700:	40010400 	.word	0x40010400
 8006704:	40000400 	.word	0x40000400
 8006708:	40000800 	.word	0x40000800
 800670c:	40000c00 	.word	0x40000c00
 8006710:	40014000 	.word	0x40014000
 8006714:	40001800 	.word	0x40001800

08006718 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2200      	movs	r2, #0
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f001 fa38 	bl	8007ba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a2e      	ldr	r2, [pc, #184]	@ (80067f0 <HAL_TIM_PWM_Stop+0xd8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d004      	beq.n	8006744 <HAL_TIM_PWM_Stop+0x2c>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a2d      	ldr	r2, [pc, #180]	@ (80067f4 <HAL_TIM_PWM_Stop+0xdc>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d101      	bne.n	8006748 <HAL_TIM_PWM_Stop+0x30>
 8006744:	2301      	movs	r3, #1
 8006746:	e000      	b.n	800674a <HAL_TIM_PWM_Stop+0x32>
 8006748:	2300      	movs	r3, #0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d017      	beq.n	800677e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6a1a      	ldr	r2, [r3, #32]
 8006754:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006758:	4013      	ands	r3, r2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10f      	bne.n	800677e <HAL_TIM_PWM_Stop+0x66>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6a1a      	ldr	r2, [r3, #32]
 8006764:	f240 4344 	movw	r3, #1092	@ 0x444
 8006768:	4013      	ands	r3, r2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d107      	bne.n	800677e <HAL_TIM_PWM_Stop+0x66>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800677c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6a1a      	ldr	r2, [r3, #32]
 8006784:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006788:	4013      	ands	r3, r2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10f      	bne.n	80067ae <HAL_TIM_PWM_Stop+0x96>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6a1a      	ldr	r2, [r3, #32]
 8006794:	f240 4344 	movw	r3, #1092	@ 0x444
 8006798:	4013      	ands	r3, r2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d107      	bne.n	80067ae <HAL_TIM_PWM_Stop+0x96>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0201 	bic.w	r2, r2, #1
 80067ac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d104      	bne.n	80067be <HAL_TIM_PWM_Stop+0xa6>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067bc:	e013      	b.n	80067e6 <HAL_TIM_PWM_Stop+0xce>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d104      	bne.n	80067ce <HAL_TIM_PWM_Stop+0xb6>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067cc:	e00b      	b.n	80067e6 <HAL_TIM_PWM_Stop+0xce>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d104      	bne.n	80067de <HAL_TIM_PWM_Stop+0xc6>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067dc:	e003      	b.n	80067e6 <HAL_TIM_PWM_Stop+0xce>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	40010000 	.word	0x40010000
 80067f4:	40010400 	.word	0x40010400

080067f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e041      	b.n	800688e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d106      	bne.n	8006824 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7fd f8fc 	bl	8003a1c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3304      	adds	r3, #4
 8006834:	4619      	mov	r1, r3
 8006836:	4610      	mov	r0, r2
 8006838:	f000 fd92 	bl	8007360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
	...

08006898 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b0c      	cmp	r3, #12
 80068aa:	d841      	bhi.n	8006930 <HAL_TIM_IC_Stop_IT+0x98>
 80068ac:	a201      	add	r2, pc, #4	@ (adr r2, 80068b4 <HAL_TIM_IC_Stop_IT+0x1c>)
 80068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b2:	bf00      	nop
 80068b4:	080068e9 	.word	0x080068e9
 80068b8:	08006931 	.word	0x08006931
 80068bc:	08006931 	.word	0x08006931
 80068c0:	08006931 	.word	0x08006931
 80068c4:	080068fb 	.word	0x080068fb
 80068c8:	08006931 	.word	0x08006931
 80068cc:	08006931 	.word	0x08006931
 80068d0:	08006931 	.word	0x08006931
 80068d4:	0800690d 	.word	0x0800690d
 80068d8:	08006931 	.word	0x08006931
 80068dc:	08006931 	.word	0x08006931
 80068e0:	08006931 	.word	0x08006931
 80068e4:	0800691f 	.word	0x0800691f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0202 	bic.w	r2, r2, #2
 80068f6:	60da      	str	r2, [r3, #12]
      break;
 80068f8:	e01d      	b.n	8006936 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0204 	bic.w	r2, r2, #4
 8006908:	60da      	str	r2, [r3, #12]
      break;
 800690a:	e014      	b.n	8006936 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0208 	bic.w	r2, r2, #8
 800691a:	60da      	str	r2, [r3, #12]
      break;
 800691c:	e00b      	b.n	8006936 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0210 	bic.w	r2, r2, #16
 800692c:	60da      	str	r2, [r3, #12]
      break;
 800692e:	e002      	b.n	8006936 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	73fb      	strb	r3, [r7, #15]
      break;
 8006934:	bf00      	nop
  }

  if (status == HAL_OK)
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d156      	bne.n	80069ea <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2200      	movs	r2, #0
 8006942:	6839      	ldr	r1, [r7, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f001 f92b 	bl	8007ba0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6a1a      	ldr	r2, [r3, #32]
 8006950:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006954:	4013      	ands	r3, r2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10f      	bne.n	800697a <HAL_TIM_IC_Stop_IT+0xe2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6a1a      	ldr	r2, [r3, #32]
 8006960:	f240 4344 	movw	r3, #1092	@ 0x444
 8006964:	4013      	ands	r3, r2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d107      	bne.n	800697a <HAL_TIM_IC_Stop_IT+0xe2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0201 	bic.w	r2, r2, #1
 8006978:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <HAL_TIM_IC_Stop_IT+0xf2>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006988:	e013      	b.n	80069b2 <HAL_TIM_IC_Stop_IT+0x11a>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b04      	cmp	r3, #4
 800698e:	d104      	bne.n	800699a <HAL_TIM_IC_Stop_IT+0x102>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006998:	e00b      	b.n	80069b2 <HAL_TIM_IC_Stop_IT+0x11a>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b08      	cmp	r3, #8
 800699e:	d104      	bne.n	80069aa <HAL_TIM_IC_Stop_IT+0x112>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069a8:	e003      	b.n	80069b2 <HAL_TIM_IC_Stop_IT+0x11a>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d104      	bne.n	80069c2 <HAL_TIM_IC_Stop_IT+0x12a>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069c0:	e013      	b.n	80069ea <HAL_TIM_IC_Stop_IT+0x152>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d104      	bne.n	80069d2 <HAL_TIM_IC_Stop_IT+0x13a>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069d0:	e00b      	b.n	80069ea <HAL_TIM_IC_Stop_IT+0x152>
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d104      	bne.n	80069e2 <HAL_TIM_IC_Stop_IT+0x14a>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069e0:	e003      	b.n	80069ea <HAL_TIM_IC_Stop_IT+0x152>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e097      	b.n	8006b38 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d106      	bne.n	8006a22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7fc ff63 	bl	80038e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a38:	f023 0307 	bic.w	r3, r3, #7
 8006a3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3304      	adds	r3, #4
 8006a46:	4619      	mov	r1, r3
 8006a48:	4610      	mov	r0, r2
 8006a4a:	f000 fc89 	bl	8007360 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a76:	f023 0303 	bic.w	r3, r3, #3
 8006a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	021b      	lsls	r3, r3, #8
 8006a86:	4313      	orrs	r3, r2
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006a94:	f023 030c 	bic.w	r3, r3, #12
 8006a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006aa0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	021b      	lsls	r3, r3, #8
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	011a      	lsls	r2, r3, #4
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	031b      	lsls	r3, r3, #12
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006ad2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006ada:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	011b      	lsls	r3, r3, #4
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006b68:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d110      	bne.n	8006b92 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d102      	bne.n	8006b7c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b76:	7b7b      	ldrb	r3, [r7, #13]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d001      	beq.n	8006b80 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e069      	b.n	8006c54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b90:	e031      	b.n	8006bf6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d110      	bne.n	8006bba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b98:	7bbb      	ldrb	r3, [r7, #14]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d102      	bne.n	8006ba4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b9e:	7b3b      	ldrb	r3, [r7, #12]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d001      	beq.n	8006ba8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e055      	b.n	8006c54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bb8:	e01d      	b.n	8006bf6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d108      	bne.n	8006bd2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d105      	bne.n	8006bd2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bc6:	7b7b      	ldrb	r3, [r7, #13]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d102      	bne.n	8006bd2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bcc:	7b3b      	ldrb	r3, [r7, #12]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d001      	beq.n	8006bd6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e03e      	b.n	8006c54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2202      	movs	r2, #2
 8006be2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2202      	movs	r2, #2
 8006bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <HAL_TIM_Encoder_Start+0xc4>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d008      	beq.n	8006c14 <HAL_TIM_Encoder_Start+0xd4>
 8006c02:	e00f      	b.n	8006c24 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 ffc7 	bl	8007ba0 <TIM_CCxChannelCmd>
      break;
 8006c12:	e016      	b.n	8006c42 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	2104      	movs	r1, #4
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 ffbf 	bl	8007ba0 <TIM_CCxChannelCmd>
      break;
 8006c22:	e00e      	b.n	8006c42 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 ffb7 	bl	8007ba0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2201      	movs	r2, #1
 8006c38:	2104      	movs	r1, #4
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 ffb0 	bl	8007ba0 <TIM_CCxChannelCmd>
      break;
 8006c40:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f042 0201 	orr.w	r2, r2, #1
 8006c50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d020      	beq.n	8006cc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d01b      	beq.n	8006cc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f06f 0202 	mvn.w	r2, #2
 8006c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	f003 0303 	and.w	r3, r3, #3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fa ffbe 	bl	8001c28 <HAL_TIM_IC_CaptureCallback>
 8006cac:	e005      	b.n	8006cba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fb38 	bl	8007324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fb3f 	bl	8007338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f003 0304 	and.w	r3, r3, #4
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d020      	beq.n	8006d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d01b      	beq.n	8006d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f06f 0204 	mvn.w	r2, #4
 8006cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7fa ff98 	bl	8001c28 <HAL_TIM_IC_CaptureCallback>
 8006cf8:	e005      	b.n	8006d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fb12 	bl	8007324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fb19 	bl	8007338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f003 0308 	and.w	r3, r3, #8
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d020      	beq.n	8006d58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f003 0308 	and.w	r3, r3, #8
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01b      	beq.n	8006d58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f06f 0208 	mvn.w	r2, #8
 8006d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	f003 0303 	and.w	r3, r3, #3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fa ff72 	bl	8001c28 <HAL_TIM_IC_CaptureCallback>
 8006d44:	e005      	b.n	8006d52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 faec 	bl	8007324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 faf3 	bl	8007338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f003 0310 	and.w	r3, r3, #16
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d020      	beq.n	8006da4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f003 0310 	and.w	r3, r3, #16
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d01b      	beq.n	8006da4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f06f 0210 	mvn.w	r2, #16
 8006d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2208      	movs	r2, #8
 8006d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7fa ff4c 	bl	8001c28 <HAL_TIM_IC_CaptureCallback>
 8006d90:	e005      	b.n	8006d9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fac6 	bl	8007324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 facd 	bl	8007338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00c      	beq.n	8006dc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0201 	mvn.w	r2, #1
 8006dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 faa4 	bl	8007310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00c      	beq.n	8006dec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 ffd8 	bl	8007d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00c      	beq.n	8006e10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d007      	beq.n	8006e10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fa9e 	bl	800734c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00c      	beq.n	8006e34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d007      	beq.n	8006e34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f06f 0220 	mvn.w	r2, #32
 8006e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 ffaa 	bl	8007d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e34:	bf00      	nop
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d101      	bne.n	8006e5a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006e56:	2302      	movs	r3, #2
 8006e58:	e088      	b.n	8006f6c <HAL_TIM_IC_ConfigChannel+0x130>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d11b      	bne.n	8006ea0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006e78:	f000 fcce 	bl	8007818 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699a      	ldr	r2, [r3, #24]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 020c 	bic.w	r2, r2, #12
 8006e8a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6999      	ldr	r1, [r3, #24]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	619a      	str	r2, [r3, #24]
 8006e9e:	e060      	b.n	8006f62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d11c      	bne.n	8006ee0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006eb6:	f000 fd52 	bl	800795e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	699a      	ldr	r2, [r3, #24]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006ec8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6999      	ldr	r1, [r3, #24]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	021a      	lsls	r2, r3, #8
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	619a      	str	r2, [r3, #24]
 8006ede:	e040      	b.n	8006f62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	d11b      	bne.n	8006f1e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006ef6:	f000 fd9f 	bl	8007a38 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	69da      	ldr	r2, [r3, #28]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 020c 	bic.w	r2, r2, #12
 8006f08:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69d9      	ldr	r1, [r3, #28]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	61da      	str	r2, [r3, #28]
 8006f1c:	e021      	b.n	8006f62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b0c      	cmp	r3, #12
 8006f22:	d11c      	bne.n	8006f5e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006f34:	f000 fdbc 	bl	8007ab0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	69da      	ldr	r2, [r3, #28]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006f46:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	69d9      	ldr	r1, [r3, #28]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	021a      	lsls	r2, r3, #8
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	61da      	str	r2, [r3, #28]
 8006f5c:	e001      	b.n	8006f62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e0ae      	b.n	80070f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b0c      	cmp	r3, #12
 8006f9e:	f200 809f 	bhi.w	80070e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006fdd 	.word	0x08006fdd
 8006fac:	080070e1 	.word	0x080070e1
 8006fb0:	080070e1 	.word	0x080070e1
 8006fb4:	080070e1 	.word	0x080070e1
 8006fb8:	0800701d 	.word	0x0800701d
 8006fbc:	080070e1 	.word	0x080070e1
 8006fc0:	080070e1 	.word	0x080070e1
 8006fc4:	080070e1 	.word	0x080070e1
 8006fc8:	0800705f 	.word	0x0800705f
 8006fcc:	080070e1 	.word	0x080070e1
 8006fd0:	080070e1 	.word	0x080070e1
 8006fd4:	080070e1 	.word	0x080070e1
 8006fd8:	0800709f 	.word	0x0800709f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fa68 	bl	80074b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0208 	orr.w	r2, r2, #8
 8006ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0204 	bic.w	r2, r2, #4
 8007006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6999      	ldr	r1, [r3, #24]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	691a      	ldr	r2, [r3, #16]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	619a      	str	r2, [r3, #24]
      break;
 800701a:	e064      	b.n	80070e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68b9      	ldr	r1, [r7, #8]
 8007022:	4618      	mov	r0, r3
 8007024:	f000 fab8 	bl	8007598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	699a      	ldr	r2, [r3, #24]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6999      	ldr	r1, [r3, #24]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	021a      	lsls	r2, r3, #8
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	619a      	str	r2, [r3, #24]
      break;
 800705c:	e043      	b.n	80070e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68b9      	ldr	r1, [r7, #8]
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fb0d 	bl	8007684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69da      	ldr	r2, [r3, #28]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0208 	orr.w	r2, r2, #8
 8007078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69da      	ldr	r2, [r3, #28]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f022 0204 	bic.w	r2, r2, #4
 8007088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69d9      	ldr	r1, [r3, #28]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	61da      	str	r2, [r3, #28]
      break;
 800709c:	e023      	b.n	80070e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68b9      	ldr	r1, [r7, #8]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fb61 	bl	800776c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69da      	ldr	r2, [r3, #28]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	69da      	ldr	r2, [r3, #28]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69d9      	ldr	r1, [r3, #28]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	021a      	lsls	r2, r3, #8
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	61da      	str	r2, [r3, #28]
      break;
 80070de:	e002      	b.n	80070e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	75fb      	strb	r3, [r7, #23]
      break;
 80070e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800710c:	2b01      	cmp	r3, #1
 800710e:	d101      	bne.n	8007114 <HAL_TIM_ConfigClockSource+0x1c>
 8007110:	2302      	movs	r3, #2
 8007112:	e0b4      	b.n	800727e <HAL_TIM_ConfigClockSource+0x186>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800713a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800714c:	d03e      	beq.n	80071cc <HAL_TIM_ConfigClockSource+0xd4>
 800714e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007152:	f200 8087 	bhi.w	8007264 <HAL_TIM_ConfigClockSource+0x16c>
 8007156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800715a:	f000 8086 	beq.w	800726a <HAL_TIM_ConfigClockSource+0x172>
 800715e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007162:	d87f      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x16c>
 8007164:	2b70      	cmp	r3, #112	@ 0x70
 8007166:	d01a      	beq.n	800719e <HAL_TIM_ConfigClockSource+0xa6>
 8007168:	2b70      	cmp	r3, #112	@ 0x70
 800716a:	d87b      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x16c>
 800716c:	2b60      	cmp	r3, #96	@ 0x60
 800716e:	d050      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x11a>
 8007170:	2b60      	cmp	r3, #96	@ 0x60
 8007172:	d877      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x16c>
 8007174:	2b50      	cmp	r3, #80	@ 0x50
 8007176:	d03c      	beq.n	80071f2 <HAL_TIM_ConfigClockSource+0xfa>
 8007178:	2b50      	cmp	r3, #80	@ 0x50
 800717a:	d873      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x16c>
 800717c:	2b40      	cmp	r3, #64	@ 0x40
 800717e:	d058      	beq.n	8007232 <HAL_TIM_ConfigClockSource+0x13a>
 8007180:	2b40      	cmp	r3, #64	@ 0x40
 8007182:	d86f      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x16c>
 8007184:	2b30      	cmp	r3, #48	@ 0x30
 8007186:	d064      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x15a>
 8007188:	2b30      	cmp	r3, #48	@ 0x30
 800718a:	d86b      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x16c>
 800718c:	2b20      	cmp	r3, #32
 800718e:	d060      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x15a>
 8007190:	2b20      	cmp	r3, #32
 8007192:	d867      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x16c>
 8007194:	2b00      	cmp	r3, #0
 8007196:	d05c      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x15a>
 8007198:	2b10      	cmp	r3, #16
 800719a:	d05a      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x15a>
 800719c:	e062      	b.n	8007264 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071ae:	f000 fcd7 	bl	8007b60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80071c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	609a      	str	r2, [r3, #8]
      break;
 80071ca:	e04f      	b.n	800726c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071dc:	f000 fcc0 	bl	8007b60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071ee:	609a      	str	r2, [r3, #8]
      break;
 80071f0:	e03c      	b.n	800726c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071fe:	461a      	mov	r2, r3
 8007200:	f000 fb7e 	bl	8007900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2150      	movs	r1, #80	@ 0x50
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fc8d 	bl	8007b2a <TIM_ITRx_SetConfig>
      break;
 8007210:	e02c      	b.n	800726c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800721e:	461a      	mov	r2, r3
 8007220:	f000 fbda 	bl	80079d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2160      	movs	r1, #96	@ 0x60
 800722a:	4618      	mov	r0, r3
 800722c:	f000 fc7d 	bl	8007b2a <TIM_ITRx_SetConfig>
      break;
 8007230:	e01c      	b.n	800726c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800723e:	461a      	mov	r2, r3
 8007240:	f000 fb5e 	bl	8007900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2140      	movs	r1, #64	@ 0x40
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fc6d 	bl	8007b2a <TIM_ITRx_SetConfig>
      break;
 8007250:	e00c      	b.n	800726c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4619      	mov	r1, r3
 800725c:	4610      	mov	r0, r2
 800725e:	f000 fc64 	bl	8007b2a <TIM_ITRx_SetConfig>
      break;
 8007262:	e003      	b.n	800726c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	73fb      	strb	r3, [r7, #15]
      break;
 8007268:	e000      	b.n	800726c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800726a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800727c:	7bfb      	ldrb	r3, [r7, #15]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
	...

08007288 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b0c      	cmp	r3, #12
 800729a:	d831      	bhi.n	8007300 <HAL_TIM_ReadCapturedValue+0x78>
 800729c:	a201      	add	r2, pc, #4	@ (adr r2, 80072a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800729e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a2:	bf00      	nop
 80072a4:	080072d9 	.word	0x080072d9
 80072a8:	08007301 	.word	0x08007301
 80072ac:	08007301 	.word	0x08007301
 80072b0:	08007301 	.word	0x08007301
 80072b4:	080072e3 	.word	0x080072e3
 80072b8:	08007301 	.word	0x08007301
 80072bc:	08007301 	.word	0x08007301
 80072c0:	08007301 	.word	0x08007301
 80072c4:	080072ed 	.word	0x080072ed
 80072c8:	08007301 	.word	0x08007301
 80072cc:	08007301 	.word	0x08007301
 80072d0:	08007301 	.word	0x08007301
 80072d4:	080072f7 	.word	0x080072f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072de:	60fb      	str	r3, [r7, #12]

      break;
 80072e0:	e00f      	b.n	8007302 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e8:	60fb      	str	r3, [r7, #12]

      break;
 80072ea:	e00a      	b.n	8007302 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f2:	60fb      	str	r3, [r7, #12]

      break;
 80072f4:	e005      	b.n	8007302 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fc:	60fb      	str	r3, [r7, #12]

      break;
 80072fe:	e000      	b.n	8007302 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007300:	bf00      	nop
  }

  return tmpreg;
 8007302:	68fb      	ldr	r3, [r7, #12]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a46      	ldr	r2, [pc, #280]	@ (800748c <TIM_Base_SetConfig+0x12c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d013      	beq.n	80073a0 <TIM_Base_SetConfig+0x40>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800737e:	d00f      	beq.n	80073a0 <TIM_Base_SetConfig+0x40>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a43      	ldr	r2, [pc, #268]	@ (8007490 <TIM_Base_SetConfig+0x130>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00b      	beq.n	80073a0 <TIM_Base_SetConfig+0x40>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a42      	ldr	r2, [pc, #264]	@ (8007494 <TIM_Base_SetConfig+0x134>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d007      	beq.n	80073a0 <TIM_Base_SetConfig+0x40>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a41      	ldr	r2, [pc, #260]	@ (8007498 <TIM_Base_SetConfig+0x138>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d003      	beq.n	80073a0 <TIM_Base_SetConfig+0x40>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a40      	ldr	r2, [pc, #256]	@ (800749c <TIM_Base_SetConfig+0x13c>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d108      	bne.n	80073b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a35      	ldr	r2, [pc, #212]	@ (800748c <TIM_Base_SetConfig+0x12c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d02b      	beq.n	8007412 <TIM_Base_SetConfig+0xb2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c0:	d027      	beq.n	8007412 <TIM_Base_SetConfig+0xb2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a32      	ldr	r2, [pc, #200]	@ (8007490 <TIM_Base_SetConfig+0x130>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d023      	beq.n	8007412 <TIM_Base_SetConfig+0xb2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a31      	ldr	r2, [pc, #196]	@ (8007494 <TIM_Base_SetConfig+0x134>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d01f      	beq.n	8007412 <TIM_Base_SetConfig+0xb2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a30      	ldr	r2, [pc, #192]	@ (8007498 <TIM_Base_SetConfig+0x138>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d01b      	beq.n	8007412 <TIM_Base_SetConfig+0xb2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a2f      	ldr	r2, [pc, #188]	@ (800749c <TIM_Base_SetConfig+0x13c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d017      	beq.n	8007412 <TIM_Base_SetConfig+0xb2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a2e      	ldr	r2, [pc, #184]	@ (80074a0 <TIM_Base_SetConfig+0x140>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d013      	beq.n	8007412 <TIM_Base_SetConfig+0xb2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a2d      	ldr	r2, [pc, #180]	@ (80074a4 <TIM_Base_SetConfig+0x144>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d00f      	beq.n	8007412 <TIM_Base_SetConfig+0xb2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a2c      	ldr	r2, [pc, #176]	@ (80074a8 <TIM_Base_SetConfig+0x148>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d00b      	beq.n	8007412 <TIM_Base_SetConfig+0xb2>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a2b      	ldr	r2, [pc, #172]	@ (80074ac <TIM_Base_SetConfig+0x14c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d007      	beq.n	8007412 <TIM_Base_SetConfig+0xb2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a2a      	ldr	r2, [pc, #168]	@ (80074b0 <TIM_Base_SetConfig+0x150>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d003      	beq.n	8007412 <TIM_Base_SetConfig+0xb2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a29      	ldr	r2, [pc, #164]	@ (80074b4 <TIM_Base_SetConfig+0x154>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d108      	bne.n	8007424 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	4313      	orrs	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a10      	ldr	r2, [pc, #64]	@ (800748c <TIM_Base_SetConfig+0x12c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d003      	beq.n	8007458 <TIM_Base_SetConfig+0xf8>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a12      	ldr	r2, [pc, #72]	@ (800749c <TIM_Base_SetConfig+0x13c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d103      	bne.n	8007460 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	691a      	ldr	r2, [r3, #16]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b01      	cmp	r3, #1
 8007470:	d105      	bne.n	800747e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f023 0201 	bic.w	r2, r3, #1
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	611a      	str	r2, [r3, #16]
  }
}
 800747e:	bf00      	nop
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40010000 	.word	0x40010000
 8007490:	40000400 	.word	0x40000400
 8007494:	40000800 	.word	0x40000800
 8007498:	40000c00 	.word	0x40000c00
 800749c:	40010400 	.word	0x40010400
 80074a0:	40014000 	.word	0x40014000
 80074a4:	40014400 	.word	0x40014400
 80074a8:	40014800 	.word	0x40014800
 80074ac:	40001800 	.word	0x40001800
 80074b0:	40001c00 	.word	0x40001c00
 80074b4:	40002000 	.word	0x40002000

080074b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	f023 0201 	bic.w	r2, r3, #1
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 0303 	bic.w	r3, r3, #3
 80074ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f023 0302 	bic.w	r3, r3, #2
 8007500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a20      	ldr	r2, [pc, #128]	@ (8007590 <TIM_OC1_SetConfig+0xd8>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d003      	beq.n	800751c <TIM_OC1_SetConfig+0x64>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a1f      	ldr	r2, [pc, #124]	@ (8007594 <TIM_OC1_SetConfig+0xdc>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d10c      	bne.n	8007536 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f023 0308 	bic.w	r3, r3, #8
 8007522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	4313      	orrs	r3, r2
 800752c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f023 0304 	bic.w	r3, r3, #4
 8007534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a15      	ldr	r2, [pc, #84]	@ (8007590 <TIM_OC1_SetConfig+0xd8>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d003      	beq.n	8007546 <TIM_OC1_SetConfig+0x8e>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a14      	ldr	r2, [pc, #80]	@ (8007594 <TIM_OC1_SetConfig+0xdc>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d111      	bne.n	800756a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800754c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	4313      	orrs	r3, r2
 800755e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	4313      	orrs	r3, r2
 8007568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	621a      	str	r2, [r3, #32]
}
 8007584:	bf00      	nop
 8007586:	371c      	adds	r7, #28
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	40010000 	.word	0x40010000
 8007594:	40010400 	.word	0x40010400

08007598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	f023 0210 	bic.w	r2, r3, #16
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	4313      	orrs	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f023 0320 	bic.w	r3, r3, #32
 80075e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	011b      	lsls	r3, r3, #4
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a22      	ldr	r2, [pc, #136]	@ (800767c <TIM_OC2_SetConfig+0xe4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d003      	beq.n	8007600 <TIM_OC2_SetConfig+0x68>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a21      	ldr	r2, [pc, #132]	@ (8007680 <TIM_OC2_SetConfig+0xe8>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d10d      	bne.n	800761c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	011b      	lsls	r3, r3, #4
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	4313      	orrs	r3, r2
 8007612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800761a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a17      	ldr	r2, [pc, #92]	@ (800767c <TIM_OC2_SetConfig+0xe4>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d003      	beq.n	800762c <TIM_OC2_SetConfig+0x94>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a16      	ldr	r2, [pc, #88]	@ (8007680 <TIM_OC2_SetConfig+0xe8>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d113      	bne.n	8007654 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800763a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	4313      	orrs	r3, r2
 8007646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	4313      	orrs	r3, r2
 8007652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	621a      	str	r2, [r3, #32]
}
 800766e:	bf00      	nop
 8007670:	371c      	adds	r7, #28
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	40010000 	.word	0x40010000
 8007680:	40010400 	.word	0x40010400

08007684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a21      	ldr	r2, [pc, #132]	@ (8007764 <TIM_OC3_SetConfig+0xe0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d003      	beq.n	80076ea <TIM_OC3_SetConfig+0x66>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a20      	ldr	r2, [pc, #128]	@ (8007768 <TIM_OC3_SetConfig+0xe4>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d10d      	bne.n	8007706 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	021b      	lsls	r3, r3, #8
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a16      	ldr	r2, [pc, #88]	@ (8007764 <TIM_OC3_SetConfig+0xe0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d003      	beq.n	8007716 <TIM_OC3_SetConfig+0x92>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a15      	ldr	r2, [pc, #84]	@ (8007768 <TIM_OC3_SetConfig+0xe4>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d113      	bne.n	800773e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800771c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	011b      	lsls	r3, r3, #4
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	4313      	orrs	r3, r2
 8007730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	4313      	orrs	r3, r2
 800773c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	621a      	str	r2, [r3, #32]
}
 8007758:	bf00      	nop
 800775a:	371c      	adds	r7, #28
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	40010000 	.word	0x40010000
 8007768:	40010400 	.word	0x40010400

0800776c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800779a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	021b      	lsls	r3, r3, #8
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	031b      	lsls	r3, r3, #12
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a12      	ldr	r2, [pc, #72]	@ (8007810 <TIM_OC4_SetConfig+0xa4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d003      	beq.n	80077d4 <TIM_OC4_SetConfig+0x68>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a11      	ldr	r2, [pc, #68]	@ (8007814 <TIM_OC4_SetConfig+0xa8>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d109      	bne.n	80077e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	019b      	lsls	r3, r3, #6
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	621a      	str	r2, [r3, #32]
}
 8007802:	bf00      	nop
 8007804:	371c      	adds	r7, #28
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	40010000 	.word	0x40010000
 8007814:	40010400 	.word	0x40010400

08007818 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	f023 0201 	bic.w	r2, r3, #1
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4a28      	ldr	r2, [pc, #160]	@ (80078e4 <TIM_TI1_SetConfig+0xcc>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d01b      	beq.n	800787e <TIM_TI1_SetConfig+0x66>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800784c:	d017      	beq.n	800787e <TIM_TI1_SetConfig+0x66>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4a25      	ldr	r2, [pc, #148]	@ (80078e8 <TIM_TI1_SetConfig+0xd0>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d013      	beq.n	800787e <TIM_TI1_SetConfig+0x66>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4a24      	ldr	r2, [pc, #144]	@ (80078ec <TIM_TI1_SetConfig+0xd4>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d00f      	beq.n	800787e <TIM_TI1_SetConfig+0x66>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4a23      	ldr	r2, [pc, #140]	@ (80078f0 <TIM_TI1_SetConfig+0xd8>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d00b      	beq.n	800787e <TIM_TI1_SetConfig+0x66>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4a22      	ldr	r2, [pc, #136]	@ (80078f4 <TIM_TI1_SetConfig+0xdc>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d007      	beq.n	800787e <TIM_TI1_SetConfig+0x66>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4a21      	ldr	r2, [pc, #132]	@ (80078f8 <TIM_TI1_SetConfig+0xe0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d003      	beq.n	800787e <TIM_TI1_SetConfig+0x66>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4a20      	ldr	r2, [pc, #128]	@ (80078fc <TIM_TI1_SetConfig+0xe4>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d101      	bne.n	8007882 <TIM_TI1_SetConfig+0x6a>
 800787e:	2301      	movs	r3, #1
 8007880:	e000      	b.n	8007884 <TIM_TI1_SetConfig+0x6c>
 8007882:	2300      	movs	r3, #0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d008      	beq.n	800789a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f023 0303 	bic.w	r3, r3, #3
 800788e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4313      	orrs	r3, r2
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	e003      	b.n	80078a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f043 0301 	orr.w	r3, r3, #1
 80078a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f023 030a 	bic.w	r3, r3, #10
 80078bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	f003 030a 	and.w	r3, r3, #10
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	621a      	str	r2, [r3, #32]
}
 80078d6:	bf00      	nop
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40010000 	.word	0x40010000
 80078e8:	40000400 	.word	0x40000400
 80078ec:	40000800 	.word	0x40000800
 80078f0:	40000c00 	.word	0x40000c00
 80078f4:	40010400 	.word	0x40010400
 80078f8:	40014000 	.word	0x40014000
 80078fc:	40001800 	.word	0x40001800

08007900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	f023 0201 	bic.w	r2, r3, #1
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800792a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	011b      	lsls	r3, r3, #4
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	4313      	orrs	r3, r2
 8007934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f023 030a 	bic.w	r3, r3, #10
 800793c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	4313      	orrs	r3, r2
 8007944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	621a      	str	r2, [r3, #32]
}
 8007952:	bf00      	nop
 8007954:	371c      	adds	r7, #28
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800795e:	b480      	push	{r7}
 8007960:	b087      	sub	sp, #28
 8007962:	af00      	add	r7, sp, #0
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	607a      	str	r2, [r7, #4]
 800796a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f023 0210 	bic.w	r2, r3, #16
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800798a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	021b      	lsls	r3, r3, #8
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	4313      	orrs	r3, r2
 8007994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800799c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	031b      	lsls	r3, r3, #12
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079b0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	011b      	lsls	r3, r3, #4
 80079b6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	4313      	orrs	r3, r2
 80079be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	621a      	str	r2, [r3, #32]
}
 80079cc:	bf00      	nop
 80079ce:	371c      	adds	r7, #28
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	f023 0210 	bic.w	r2, r3, #16
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	031b      	lsls	r3, r3, #12
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007a14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	621a      	str	r2, [r3, #32]
}
 8007a2c:	bf00      	nop
 8007a2e:	371c      	adds	r7, #28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
 8007a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f023 0303 	bic.w	r3, r3, #3
 8007a64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a74:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007a88:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	621a      	str	r2, [r3, #32]
}
 8007aa4:	bf00      	nop
 8007aa6:	371c      	adds	r7, #28
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
 8007abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	69db      	ldr	r3, [r3, #28]
 8007ad4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007adc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	021b      	lsls	r3, r3, #8
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007aee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	031b      	lsls	r3, r3, #12
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007b02:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	031b      	lsls	r3, r3, #12
 8007b08:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	621a      	str	r2, [r3, #32]
}
 8007b1e:	bf00      	nop
 8007b20:	371c      	adds	r7, #28
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b085      	sub	sp, #20
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f043 0307 	orr.w	r3, r3, #7
 8007b4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	609a      	str	r2, [r3, #8]
}
 8007b54:	bf00      	nop
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	021a      	lsls	r2, r3, #8
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	431a      	orrs	r2, r3
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	609a      	str	r2, [r3, #8]
}
 8007b94:	bf00      	nop
 8007b96:	371c      	adds	r7, #28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f003 031f 	and.w	r3, r3, #31
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a1a      	ldr	r2, [r3, #32]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	43db      	mvns	r3, r3
 8007bc2:	401a      	ands	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6a1a      	ldr	r2, [r3, #32]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f003 031f 	and.w	r3, r3, #31
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	621a      	str	r2, [r3, #32]
}
 8007bde:	bf00      	nop
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
	...

08007bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e05a      	b.n	8007cba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a21      	ldr	r2, [pc, #132]	@ (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d022      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c50:	d01d      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a1d      	ldr	r2, [pc, #116]	@ (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d018      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a1b      	ldr	r2, [pc, #108]	@ (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d013      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d00e      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a18      	ldr	r2, [pc, #96]	@ (8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d009      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a17      	ldr	r2, [pc, #92]	@ (8007cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d004      	beq.n	8007c8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a15      	ldr	r2, [pc, #84]	@ (8007ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d10c      	bne.n	8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40010000 	.word	0x40010000
 8007ccc:	40000400 	.word	0x40000400
 8007cd0:	40000800 	.word	0x40000800
 8007cd4:	40000c00 	.word	0x40000c00
 8007cd8:	40010400 	.word	0x40010400
 8007cdc:	40014000 	.word	0x40014000
 8007ce0:	40001800 	.word	0x40001800

08007ce4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d101      	bne.n	8007d00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	e03d      	b.n	8007d7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d101      	bne.n	8007dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e042      	b.n	8007e48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d106      	bne.n	8007ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7fb feaa 	bl	8003b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2224      	movs	r2, #36	@ 0x24
 8007de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fdbd 	bl	8008974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	691a      	ldr	r2, [r3, #16]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	695a      	ldr	r2, [r3, #20]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68da      	ldr	r2, [r3, #12]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2220      	movs	r2, #32
 8007e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08a      	sub	sp, #40	@ 0x28
 8007e54:	af02      	add	r7, sp, #8
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b20      	cmp	r3, #32
 8007e6e:	d175      	bne.n	8007f5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <HAL_UART_Transmit+0x2c>
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e06e      	b.n	8007f5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2221      	movs	r2, #33	@ 0x21
 8007e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e8e:	f7fc f843 	bl	8003f18 <HAL_GetTick>
 8007e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	88fa      	ldrh	r2, [r7, #6]
 8007e98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	88fa      	ldrh	r2, [r7, #6]
 8007e9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ea8:	d108      	bne.n	8007ebc <HAL_UART_Transmit+0x6c>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d104      	bne.n	8007ebc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	61bb      	str	r3, [r7, #24]
 8007eba:	e003      	b.n	8007ec4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ec4:	e02e      	b.n	8007f24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2180      	movs	r1, #128	@ 0x80
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 fb1f 	bl	8008514 <UART_WaitOnFlagUntilTimeout>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d005      	beq.n	8007ee8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e03a      	b.n	8007f5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10b      	bne.n	8007f06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007efc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	3302      	adds	r3, #2
 8007f02:	61bb      	str	r3, [r7, #24]
 8007f04:	e007      	b.n	8007f16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	781a      	ldrb	r2, [r3, #0]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	3301      	adds	r3, #1
 8007f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1cb      	bne.n	8007ec6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2200      	movs	r2, #0
 8007f36:	2140      	movs	r1, #64	@ 0x40
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 faeb 	bl	8008514 <UART_WaitOnFlagUntilTimeout>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d005      	beq.n	8007f50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2220      	movs	r2, #32
 8007f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e006      	b.n	8007f5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2220      	movs	r2, #32
 8007f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	e000      	b.n	8007f5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007f5c:	2302      	movs	r3, #2
  }
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3720      	adds	r7, #32
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	4613      	mov	r3, r2
 8007f72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	d112      	bne.n	8007fa6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d002      	beq.n	8007f8c <HAL_UART_Receive_IT+0x26>
 8007f86:	88fb      	ldrh	r3, [r7, #6]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d101      	bne.n	8007f90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e00b      	b.n	8007fa8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f96:	88fb      	ldrh	r3, [r7, #6]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 fb12 	bl	80085c6 <UART_Start_Receive_IT>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	e000      	b.n	8007fa8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007fa6:	2302      	movs	r3, #2
  }
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b0ba      	sub	sp, #232	@ 0xe8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fe6:	f003 030f 	and.w	r3, r3, #15
 8007fea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007fee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10f      	bne.n	8008016 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d009      	beq.n	8008016 <HAL_UART_IRQHandler+0x66>
 8008002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008006:	f003 0320 	and.w	r3, r3, #32
 800800a:	2b00      	cmp	r3, #0
 800800c:	d003      	beq.n	8008016 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fbf2 	bl	80087f8 <UART_Receive_IT>
      return;
 8008014:	e25b      	b.n	80084ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 80de 	beq.w	80081dc <HAL_UART_IRQHandler+0x22c>
 8008020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b00      	cmp	r3, #0
 800802a:	d106      	bne.n	800803a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800802c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008030:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 80d1 	beq.w	80081dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800803a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00b      	beq.n	800805e <HAL_UART_IRQHandler+0xae>
 8008046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800804a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800804e:	2b00      	cmp	r3, #0
 8008050:	d005      	beq.n	800805e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008056:	f043 0201 	orr.w	r2, r3, #1
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800805e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008062:	f003 0304 	and.w	r3, r3, #4
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00b      	beq.n	8008082 <HAL_UART_IRQHandler+0xd2>
 800806a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	2b00      	cmp	r3, #0
 8008074:	d005      	beq.n	8008082 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800807a:	f043 0202 	orr.w	r2, r3, #2
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00b      	beq.n	80080a6 <HAL_UART_IRQHandler+0xf6>
 800808e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d005      	beq.n	80080a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800809e:	f043 0204 	orr.w	r2, r3, #4
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80080a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080aa:	f003 0308 	and.w	r3, r3, #8
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d011      	beq.n	80080d6 <HAL_UART_IRQHandler+0x126>
 80080b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d105      	bne.n	80080ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80080be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d005      	beq.n	80080d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ce:	f043 0208 	orr.w	r2, r3, #8
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 81f2 	beq.w	80084c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080e4:	f003 0320 	and.w	r3, r3, #32
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d008      	beq.n	80080fe <HAL_UART_IRQHandler+0x14e>
 80080ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080f0:	f003 0320 	and.w	r3, r3, #32
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fb7d 	bl	80087f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008108:	2b40      	cmp	r3, #64	@ 0x40
 800810a:	bf0c      	ite	eq
 800810c:	2301      	moveq	r3, #1
 800810e:	2300      	movne	r3, #0
 8008110:	b2db      	uxtb	r3, r3
 8008112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800811a:	f003 0308 	and.w	r3, r3, #8
 800811e:	2b00      	cmp	r3, #0
 8008120:	d103      	bne.n	800812a <HAL_UART_IRQHandler+0x17a>
 8008122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008126:	2b00      	cmp	r3, #0
 8008128:	d04f      	beq.n	80081ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fa85 	bl	800863a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800813a:	2b40      	cmp	r3, #64	@ 0x40
 800813c:	d141      	bne.n	80081c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3314      	adds	r3, #20
 8008144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008154:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800815c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	3314      	adds	r3, #20
 8008166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800816a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800816e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1d9      	bne.n	800813e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d013      	beq.n	80081ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008196:	4a7e      	ldr	r2, [pc, #504]	@ (8008390 <HAL_UART_IRQHandler+0x3e0>)
 8008198:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fc facd 	bl	800473e <HAL_DMA_Abort_IT>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d016      	beq.n	80081d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80081b4:	4610      	mov	r0, r2
 80081b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b8:	e00e      	b.n	80081d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f994 	bl	80084e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c0:	e00a      	b.n	80081d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f990 	bl	80084e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c8:	e006      	b.n	80081d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f98c 	bl	80084e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80081d6:	e175      	b.n	80084c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d8:	bf00      	nop
    return;
 80081da:	e173      	b.n	80084c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	f040 814f 	bne.w	8008484 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80081e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ea:	f003 0310 	and.w	r3, r3, #16
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 8148 	beq.w	8008484 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80081f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f8:	f003 0310 	and.w	r3, r3, #16
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 8141 	beq.w	8008484 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008202:	2300      	movs	r3, #0
 8008204:	60bb      	str	r3, [r7, #8]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	60bb      	str	r3, [r7, #8]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	60bb      	str	r3, [r7, #8]
 8008216:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008222:	2b40      	cmp	r3, #64	@ 0x40
 8008224:	f040 80b6 	bne.w	8008394 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008234:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 8145 	beq.w	80084c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008246:	429a      	cmp	r2, r3
 8008248:	f080 813e 	bcs.w	80084c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008252:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800825e:	f000 8088 	beq.w	8008372 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	330c      	adds	r3, #12
 8008268:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008278:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800827c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008280:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	330c      	adds	r3, #12
 800828a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800828e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800829a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80082a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1d9      	bne.n	8008262 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3314      	adds	r3, #20
 80082b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80082be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082c0:	f023 0301 	bic.w	r3, r3, #1
 80082c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3314      	adds	r3, #20
 80082ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80082d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80082d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80082da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80082e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e1      	bne.n	80082ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3314      	adds	r3, #20
 80082f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082f4:	e853 3f00 	ldrex	r3, [r3]
 80082f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80082fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008300:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3314      	adds	r3, #20
 800830a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800830e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008310:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008314:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800831c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e3      	bne.n	80082ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2220      	movs	r2, #32
 8008326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	330c      	adds	r3, #12
 8008336:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008342:	f023 0310 	bic.w	r3, r3, #16
 8008346:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	330c      	adds	r3, #12
 8008350:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008354:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008356:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800835a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008362:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e3      	bne.n	8008330 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800836c:	4618      	mov	r0, r3
 800836e:	f7fc f976 	bl	800465e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2202      	movs	r2, #2
 8008376:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008380:	b29b      	uxth	r3, r3
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	b29b      	uxth	r3, r3
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f8b7 	bl	80084fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800838e:	e09b      	b.n	80084c8 <HAL_UART_IRQHandler+0x518>
 8008390:	08008701 	.word	0x08008701
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800839c:	b29b      	uxth	r3, r3
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 808e 	beq.w	80084cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80083b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 8089 	beq.w	80084cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	330c      	adds	r3, #12
 80083c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	330c      	adds	r3, #12
 80083da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80083de:	647a      	str	r2, [r7, #68]	@ 0x44
 80083e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1e3      	bne.n	80083ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3314      	adds	r3, #20
 80083f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fc:	e853 3f00 	ldrex	r3, [r3]
 8008400:	623b      	str	r3, [r7, #32]
   return(result);
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	f023 0301 	bic.w	r3, r3, #1
 8008408:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3314      	adds	r3, #20
 8008412:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008416:	633a      	str	r2, [r7, #48]	@ 0x30
 8008418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800841c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800841e:	e841 2300 	strex	r3, r2, [r1]
 8008422:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1e3      	bne.n	80083f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2220      	movs	r2, #32
 800842e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	330c      	adds	r3, #12
 800843e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	e853 3f00 	ldrex	r3, [r3]
 8008446:	60fb      	str	r3, [r7, #12]
   return(result);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 0310 	bic.w	r3, r3, #16
 800844e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	330c      	adds	r3, #12
 8008458:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800845c:	61fa      	str	r2, [r7, #28]
 800845e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	69b9      	ldr	r1, [r7, #24]
 8008462:	69fa      	ldr	r2, [r7, #28]
 8008464:	e841 2300 	strex	r3, r2, [r1]
 8008468:	617b      	str	r3, [r7, #20]
   return(result);
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e3      	bne.n	8008438 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008476:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f83d 	bl	80084fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008482:	e023      	b.n	80084cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800848c:	2b00      	cmp	r3, #0
 800848e:	d009      	beq.n	80084a4 <HAL_UART_IRQHandler+0x4f4>
 8008490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f943 	bl	8008728 <UART_Transmit_IT>
    return;
 80084a2:	e014      	b.n	80084ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00e      	beq.n	80084ce <HAL_UART_IRQHandler+0x51e>
 80084b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d008      	beq.n	80084ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f983 	bl	80087c8 <UART_EndTransmit_IT>
    return;
 80084c2:	e004      	b.n	80084ce <HAL_UART_IRQHandler+0x51e>
    return;
 80084c4:	bf00      	nop
 80084c6:	e002      	b.n	80084ce <HAL_UART_IRQHandler+0x51e>
      return;
 80084c8:	bf00      	nop
 80084ca:	e000      	b.n	80084ce <HAL_UART_IRQHandler+0x51e>
      return;
 80084cc:	bf00      	nop
  }
}
 80084ce:	37e8      	adds	r7, #232	@ 0xe8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	460b      	mov	r3, r1
 8008506:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008508:	bf00      	nop
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	603b      	str	r3, [r7, #0]
 8008520:	4613      	mov	r3, r2
 8008522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008524:	e03b      	b.n	800859e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852c:	d037      	beq.n	800859e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800852e:	f7fb fcf3 	bl	8003f18 <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	6a3a      	ldr	r2, [r7, #32]
 800853a:	429a      	cmp	r2, r3
 800853c:	d302      	bcc.n	8008544 <UART_WaitOnFlagUntilTimeout+0x30>
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e03a      	b.n	80085be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	f003 0304 	and.w	r3, r3, #4
 8008552:	2b00      	cmp	r3, #0
 8008554:	d023      	beq.n	800859e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b80      	cmp	r3, #128	@ 0x80
 800855a:	d020      	beq.n	800859e <UART_WaitOnFlagUntilTimeout+0x8a>
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2b40      	cmp	r3, #64	@ 0x40
 8008560:	d01d      	beq.n	800859e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0308 	and.w	r3, r3, #8
 800856c:	2b08      	cmp	r3, #8
 800856e:	d116      	bne.n	800859e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008570:	2300      	movs	r3, #0
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 f857 	bl	800863a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2208      	movs	r2, #8
 8008590:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e00f      	b.n	80085be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	4013      	ands	r3, r2
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	bf0c      	ite	eq
 80085ae:	2301      	moveq	r3, #1
 80085b0:	2300      	movne	r3, #0
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	461a      	mov	r2, r3
 80085b6:	79fb      	ldrb	r3, [r7, #7]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d0b4      	beq.n	8008526 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b085      	sub	sp, #20
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	60b9      	str	r1, [r7, #8]
 80085d0:	4613      	mov	r3, r2
 80085d2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	88fa      	ldrh	r2, [r7, #6]
 80085de:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	88fa      	ldrh	r2, [r7, #6]
 80085e4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2222      	movs	r2, #34	@ 0x22
 80085f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d007      	beq.n	800860c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800860a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	695a      	ldr	r2, [r3, #20]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f042 0201 	orr.w	r2, r2, #1
 800861a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f042 0220 	orr.w	r2, r2, #32
 800862a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800863a:	b480      	push	{r7}
 800863c:	b095      	sub	sp, #84	@ 0x54
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	330c      	adds	r3, #12
 8008648:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008658:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	330c      	adds	r3, #12
 8008660:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008662:	643a      	str	r2, [r7, #64]	@ 0x40
 8008664:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008668:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e5      	bne.n	8008642 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3314      	adds	r3, #20
 800867c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867e:	6a3b      	ldr	r3, [r7, #32]
 8008680:	e853 3f00 	ldrex	r3, [r3]
 8008684:	61fb      	str	r3, [r7, #28]
   return(result);
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	f023 0301 	bic.w	r3, r3, #1
 800868c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	3314      	adds	r3, #20
 8008694:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008696:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008698:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800869c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800869e:	e841 2300 	strex	r3, r2, [r1]
 80086a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1e5      	bne.n	8008676 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d119      	bne.n	80086e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	330c      	adds	r3, #12
 80086b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	e853 3f00 	ldrex	r3, [r3]
 80086c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f023 0310 	bic.w	r3, r3, #16
 80086c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	330c      	adds	r3, #12
 80086d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086d2:	61ba      	str	r2, [r7, #24]
 80086d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d6:	6979      	ldr	r1, [r7, #20]
 80086d8:	69ba      	ldr	r2, [r7, #24]
 80086da:	e841 2300 	strex	r3, r2, [r1]
 80086de:	613b      	str	r3, [r7, #16]
   return(result);
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1e5      	bne.n	80086b2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2220      	movs	r2, #32
 80086ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80086f4:	bf00      	nop
 80086f6:	3754      	adds	r7, #84	@ 0x54
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800870c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f7ff fee4 	bl	80084e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008720:	bf00      	nop
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b21      	cmp	r3, #33	@ 0x21
 800873a:	d13e      	bne.n	80087ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008744:	d114      	bne.n	8008770 <UART_Transmit_IT+0x48>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d110      	bne.n	8008770 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	461a      	mov	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008762:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	1c9a      	adds	r2, r3, #2
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	621a      	str	r2, [r3, #32]
 800876e:	e008      	b.n	8008782 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	1c59      	adds	r1, r3, #1
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	6211      	str	r1, [r2, #32]
 800877a:	781a      	ldrb	r2, [r3, #0]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008786:	b29b      	uxth	r3, r3
 8008788:	3b01      	subs	r3, #1
 800878a:	b29b      	uxth	r3, r3
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	4619      	mov	r1, r3
 8008790:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10f      	bne.n	80087b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68da      	ldr	r2, [r3, #12]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80087a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68da      	ldr	r2, [r3, #12]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	e000      	b.n	80087bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80087ba:	2302      	movs	r3, #2
  }
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68da      	ldr	r2, [r3, #12]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7ff fe73 	bl	80084d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b08c      	sub	sp, #48	@ 0x30
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b22      	cmp	r3, #34	@ 0x22
 800880a:	f040 80ae 	bne.w	800896a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008816:	d117      	bne.n	8008848 <UART_Receive_IT+0x50>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d113      	bne.n	8008848 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008820:	2300      	movs	r3, #0
 8008822:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008828:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	b29b      	uxth	r3, r3
 8008832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008836:	b29a      	uxth	r2, r3
 8008838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008840:	1c9a      	adds	r2, r3, #2
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	629a      	str	r2, [r3, #40]	@ 0x28
 8008846:	e026      	b.n	8008896 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800884e:	2300      	movs	r3, #0
 8008850:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800885a:	d007      	beq.n	800886c <UART_Receive_IT+0x74>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <UART_Receive_IT+0x82>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d106      	bne.n	800887a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	b2da      	uxtb	r2, r3
 8008874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008876:	701a      	strb	r2, [r3, #0]
 8008878:	e008      	b.n	800888c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	b2db      	uxtb	r3, r3
 8008882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008886:	b2da      	uxtb	r2, r3
 8008888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008890:	1c5a      	adds	r2, r3, #1
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800889a:	b29b      	uxth	r3, r3
 800889c:	3b01      	subs	r3, #1
 800889e:	b29b      	uxth	r3, r3
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	4619      	mov	r1, r3
 80088a4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d15d      	bne.n	8008966 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68da      	ldr	r2, [r3, #12]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0220 	bic.w	r2, r2, #32
 80088b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68da      	ldr	r2, [r3, #12]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80088c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	695a      	ldr	r2, [r3, #20]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f022 0201 	bic.w	r2, r2, #1
 80088d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2220      	movs	r2, #32
 80088de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d135      	bne.n	800895c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	330c      	adds	r3, #12
 80088fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	613b      	str	r3, [r7, #16]
   return(result);
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f023 0310 	bic.w	r3, r3, #16
 800890c:	627b      	str	r3, [r7, #36]	@ 0x24
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	330c      	adds	r3, #12
 8008914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008916:	623a      	str	r2, [r7, #32]
 8008918:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	69f9      	ldr	r1, [r7, #28]
 800891c:	6a3a      	ldr	r2, [r7, #32]
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	61bb      	str	r3, [r7, #24]
   return(result);
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e5      	bne.n	80088f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0310 	and.w	r3, r3, #16
 8008934:	2b10      	cmp	r3, #16
 8008936:	d10a      	bne.n	800894e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008938:	2300      	movs	r3, #0
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f7ff fdd1 	bl	80084fc <HAL_UARTEx_RxEventCallback>
 800895a:	e002      	b.n	8008962 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7f9 f923 	bl	8001ba8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	e002      	b.n	800896c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	e000      	b.n	800896c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800896a:	2302      	movs	r3, #2
  }
}
 800896c:	4618      	mov	r0, r3
 800896e:	3730      	adds	r7, #48	@ 0x30
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008978:	b0c0      	sub	sp, #256	@ 0x100
 800897a:	af00      	add	r7, sp, #0
 800897c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800898c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008990:	68d9      	ldr	r1, [r3, #12]
 8008992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	ea40 0301 	orr.w	r3, r0, r1
 800899c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800899e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089a2:	689a      	ldr	r2, [r3, #8]
 80089a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	431a      	orrs	r2, r3
 80089ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	431a      	orrs	r2, r3
 80089b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80089c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80089cc:	f021 010c 	bic.w	r1, r1, #12
 80089d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80089da:	430b      	orrs	r3, r1
 80089dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80089ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089ee:	6999      	ldr	r1, [r3, #24]
 80089f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	ea40 0301 	orr.w	r3, r0, r1
 80089fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4b8f      	ldr	r3, [pc, #572]	@ (8008c40 <UART_SetConfig+0x2cc>)
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d005      	beq.n	8008a14 <UART_SetConfig+0xa0>
 8008a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	4b8d      	ldr	r3, [pc, #564]	@ (8008c44 <UART_SetConfig+0x2d0>)
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d104      	bne.n	8008a1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a14:	f7fd fcfc 	bl	8006410 <HAL_RCC_GetPCLK2Freq>
 8008a18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008a1c:	e003      	b.n	8008a26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a1e:	f7fd fce3 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 8008a22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a2a:	69db      	ldr	r3, [r3, #28]
 8008a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a30:	f040 810c 	bne.w	8008c4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008a3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008a42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008a46:	4622      	mov	r2, r4
 8008a48:	462b      	mov	r3, r5
 8008a4a:	1891      	adds	r1, r2, r2
 8008a4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008a4e:	415b      	adcs	r3, r3
 8008a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008a56:	4621      	mov	r1, r4
 8008a58:	eb12 0801 	adds.w	r8, r2, r1
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	eb43 0901 	adc.w	r9, r3, r1
 8008a62:	f04f 0200 	mov.w	r2, #0
 8008a66:	f04f 0300 	mov.w	r3, #0
 8008a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a76:	4690      	mov	r8, r2
 8008a78:	4699      	mov	r9, r3
 8008a7a:	4623      	mov	r3, r4
 8008a7c:	eb18 0303 	adds.w	r3, r8, r3
 8008a80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008a84:	462b      	mov	r3, r5
 8008a86:	eb49 0303 	adc.w	r3, r9, r3
 8008a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008a9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008a9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	18db      	adds	r3, r3, r3
 8008aa6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	eb42 0303 	adc.w	r3, r2, r3
 8008aae:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ab0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008ab4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008ab8:	f7f8 f8e6 	bl	8000c88 <__aeabi_uldivmod>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4b61      	ldr	r3, [pc, #388]	@ (8008c48 <UART_SetConfig+0x2d4>)
 8008ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ac6:	095b      	lsrs	r3, r3, #5
 8008ac8:	011c      	lsls	r4, r3, #4
 8008aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ad4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008ad8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008adc:	4642      	mov	r2, r8
 8008ade:	464b      	mov	r3, r9
 8008ae0:	1891      	adds	r1, r2, r2
 8008ae2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008ae4:	415b      	adcs	r3, r3
 8008ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ae8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008aec:	4641      	mov	r1, r8
 8008aee:	eb12 0a01 	adds.w	sl, r2, r1
 8008af2:	4649      	mov	r1, r9
 8008af4:	eb43 0b01 	adc.w	fp, r3, r1
 8008af8:	f04f 0200 	mov.w	r2, #0
 8008afc:	f04f 0300 	mov.w	r3, #0
 8008b00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b0c:	4692      	mov	sl, r2
 8008b0e:	469b      	mov	fp, r3
 8008b10:	4643      	mov	r3, r8
 8008b12:	eb1a 0303 	adds.w	r3, sl, r3
 8008b16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b1a:	464b      	mov	r3, r9
 8008b1c:	eb4b 0303 	adc.w	r3, fp, r3
 8008b20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008b34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	18db      	adds	r3, r3, r3
 8008b3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b3e:	4613      	mov	r3, r2
 8008b40:	eb42 0303 	adc.w	r3, r2, r3
 8008b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008b4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008b4e:	f7f8 f89b 	bl	8000c88 <__aeabi_uldivmod>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	4611      	mov	r1, r2
 8008b58:	4b3b      	ldr	r3, [pc, #236]	@ (8008c48 <UART_SetConfig+0x2d4>)
 8008b5a:	fba3 2301 	umull	r2, r3, r3, r1
 8008b5e:	095b      	lsrs	r3, r3, #5
 8008b60:	2264      	movs	r2, #100	@ 0x64
 8008b62:	fb02 f303 	mul.w	r3, r2, r3
 8008b66:	1acb      	subs	r3, r1, r3
 8008b68:	00db      	lsls	r3, r3, #3
 8008b6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008b6e:	4b36      	ldr	r3, [pc, #216]	@ (8008c48 <UART_SetConfig+0x2d4>)
 8008b70:	fba3 2302 	umull	r2, r3, r3, r2
 8008b74:	095b      	lsrs	r3, r3, #5
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008b7c:	441c      	add	r4, r3
 8008b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b82:	2200      	movs	r2, #0
 8008b84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008b8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008b90:	4642      	mov	r2, r8
 8008b92:	464b      	mov	r3, r9
 8008b94:	1891      	adds	r1, r2, r2
 8008b96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008b98:	415b      	adcs	r3, r3
 8008b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008ba0:	4641      	mov	r1, r8
 8008ba2:	1851      	adds	r1, r2, r1
 8008ba4:	6339      	str	r1, [r7, #48]	@ 0x30
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	414b      	adcs	r3, r1
 8008baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bac:	f04f 0200 	mov.w	r2, #0
 8008bb0:	f04f 0300 	mov.w	r3, #0
 8008bb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008bb8:	4659      	mov	r1, fp
 8008bba:	00cb      	lsls	r3, r1, #3
 8008bbc:	4651      	mov	r1, sl
 8008bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bc2:	4651      	mov	r1, sl
 8008bc4:	00ca      	lsls	r2, r1, #3
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4603      	mov	r3, r0
 8008bcc:	4642      	mov	r2, r8
 8008bce:	189b      	adds	r3, r3, r2
 8008bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008bd4:	464b      	mov	r3, r9
 8008bd6:	460a      	mov	r2, r1
 8008bd8:	eb42 0303 	adc.w	r3, r2, r3
 8008bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008bec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008bf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	18db      	adds	r3, r3, r3
 8008bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	eb42 0303 	adc.w	r3, r2, r3
 8008c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008c06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008c0a:	f7f8 f83d 	bl	8000c88 <__aeabi_uldivmod>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	4b0d      	ldr	r3, [pc, #52]	@ (8008c48 <UART_SetConfig+0x2d4>)
 8008c14:	fba3 1302 	umull	r1, r3, r3, r2
 8008c18:	095b      	lsrs	r3, r3, #5
 8008c1a:	2164      	movs	r1, #100	@ 0x64
 8008c1c:	fb01 f303 	mul.w	r3, r1, r3
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	3332      	adds	r3, #50	@ 0x32
 8008c26:	4a08      	ldr	r2, [pc, #32]	@ (8008c48 <UART_SetConfig+0x2d4>)
 8008c28:	fba2 2303 	umull	r2, r3, r2, r3
 8008c2c:	095b      	lsrs	r3, r3, #5
 8008c2e:	f003 0207 	and.w	r2, r3, #7
 8008c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4422      	add	r2, r4
 8008c3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c3c:	e106      	b.n	8008e4c <UART_SetConfig+0x4d8>
 8008c3e:	bf00      	nop
 8008c40:	40011000 	.word	0x40011000
 8008c44:	40011400 	.word	0x40011400
 8008c48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c50:	2200      	movs	r2, #0
 8008c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008c56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008c5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008c5e:	4642      	mov	r2, r8
 8008c60:	464b      	mov	r3, r9
 8008c62:	1891      	adds	r1, r2, r2
 8008c64:	6239      	str	r1, [r7, #32]
 8008c66:	415b      	adcs	r3, r3
 8008c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c6e:	4641      	mov	r1, r8
 8008c70:	1854      	adds	r4, r2, r1
 8008c72:	4649      	mov	r1, r9
 8008c74:	eb43 0501 	adc.w	r5, r3, r1
 8008c78:	f04f 0200 	mov.w	r2, #0
 8008c7c:	f04f 0300 	mov.w	r3, #0
 8008c80:	00eb      	lsls	r3, r5, #3
 8008c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c86:	00e2      	lsls	r2, r4, #3
 8008c88:	4614      	mov	r4, r2
 8008c8a:	461d      	mov	r5, r3
 8008c8c:	4643      	mov	r3, r8
 8008c8e:	18e3      	adds	r3, r4, r3
 8008c90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008c94:	464b      	mov	r3, r9
 8008c96:	eb45 0303 	adc.w	r3, r5, r3
 8008c9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008caa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008cae:	f04f 0200 	mov.w	r2, #0
 8008cb2:	f04f 0300 	mov.w	r3, #0
 8008cb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008cba:	4629      	mov	r1, r5
 8008cbc:	008b      	lsls	r3, r1, #2
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	008a      	lsls	r2, r1, #2
 8008cc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008ccc:	f7f7 ffdc 	bl	8000c88 <__aeabi_uldivmod>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4b60      	ldr	r3, [pc, #384]	@ (8008e58 <UART_SetConfig+0x4e4>)
 8008cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8008cda:	095b      	lsrs	r3, r3, #5
 8008cdc:	011c      	lsls	r4, r3, #4
 8008cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ce8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008cec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008cf0:	4642      	mov	r2, r8
 8008cf2:	464b      	mov	r3, r9
 8008cf4:	1891      	adds	r1, r2, r2
 8008cf6:	61b9      	str	r1, [r7, #24]
 8008cf8:	415b      	adcs	r3, r3
 8008cfa:	61fb      	str	r3, [r7, #28]
 8008cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d00:	4641      	mov	r1, r8
 8008d02:	1851      	adds	r1, r2, r1
 8008d04:	6139      	str	r1, [r7, #16]
 8008d06:	4649      	mov	r1, r9
 8008d08:	414b      	adcs	r3, r1
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	f04f 0300 	mov.w	r3, #0
 8008d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d18:	4659      	mov	r1, fp
 8008d1a:	00cb      	lsls	r3, r1, #3
 8008d1c:	4651      	mov	r1, sl
 8008d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d22:	4651      	mov	r1, sl
 8008d24:	00ca      	lsls	r2, r1, #3
 8008d26:	4610      	mov	r0, r2
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	4642      	mov	r2, r8
 8008d2e:	189b      	adds	r3, r3, r2
 8008d30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d34:	464b      	mov	r3, r9
 8008d36:	460a      	mov	r2, r1
 8008d38:	eb42 0303 	adc.w	r3, r2, r3
 8008d3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008d4c:	f04f 0200 	mov.w	r2, #0
 8008d50:	f04f 0300 	mov.w	r3, #0
 8008d54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008d58:	4649      	mov	r1, r9
 8008d5a:	008b      	lsls	r3, r1, #2
 8008d5c:	4641      	mov	r1, r8
 8008d5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d62:	4641      	mov	r1, r8
 8008d64:	008a      	lsls	r2, r1, #2
 8008d66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008d6a:	f7f7 ff8d 	bl	8000c88 <__aeabi_uldivmod>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	4611      	mov	r1, r2
 8008d74:	4b38      	ldr	r3, [pc, #224]	@ (8008e58 <UART_SetConfig+0x4e4>)
 8008d76:	fba3 2301 	umull	r2, r3, r3, r1
 8008d7a:	095b      	lsrs	r3, r3, #5
 8008d7c:	2264      	movs	r2, #100	@ 0x64
 8008d7e:	fb02 f303 	mul.w	r3, r2, r3
 8008d82:	1acb      	subs	r3, r1, r3
 8008d84:	011b      	lsls	r3, r3, #4
 8008d86:	3332      	adds	r3, #50	@ 0x32
 8008d88:	4a33      	ldr	r2, [pc, #204]	@ (8008e58 <UART_SetConfig+0x4e4>)
 8008d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d8e:	095b      	lsrs	r3, r3, #5
 8008d90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d94:	441c      	add	r4, r3
 8008d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008da0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008da4:	4642      	mov	r2, r8
 8008da6:	464b      	mov	r3, r9
 8008da8:	1891      	adds	r1, r2, r2
 8008daa:	60b9      	str	r1, [r7, #8]
 8008dac:	415b      	adcs	r3, r3
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008db4:	4641      	mov	r1, r8
 8008db6:	1851      	adds	r1, r2, r1
 8008db8:	6039      	str	r1, [r7, #0]
 8008dba:	4649      	mov	r1, r9
 8008dbc:	414b      	adcs	r3, r1
 8008dbe:	607b      	str	r3, [r7, #4]
 8008dc0:	f04f 0200 	mov.w	r2, #0
 8008dc4:	f04f 0300 	mov.w	r3, #0
 8008dc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008dcc:	4659      	mov	r1, fp
 8008dce:	00cb      	lsls	r3, r1, #3
 8008dd0:	4651      	mov	r1, sl
 8008dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dd6:	4651      	mov	r1, sl
 8008dd8:	00ca      	lsls	r2, r1, #3
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4619      	mov	r1, r3
 8008dde:	4603      	mov	r3, r0
 8008de0:	4642      	mov	r2, r8
 8008de2:	189b      	adds	r3, r3, r2
 8008de4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008de6:	464b      	mov	r3, r9
 8008de8:	460a      	mov	r2, r1
 8008dea:	eb42 0303 	adc.w	r3, r2, r3
 8008dee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008dfa:	667a      	str	r2, [r7, #100]	@ 0x64
 8008dfc:	f04f 0200 	mov.w	r2, #0
 8008e00:	f04f 0300 	mov.w	r3, #0
 8008e04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008e08:	4649      	mov	r1, r9
 8008e0a:	008b      	lsls	r3, r1, #2
 8008e0c:	4641      	mov	r1, r8
 8008e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e12:	4641      	mov	r1, r8
 8008e14:	008a      	lsls	r2, r1, #2
 8008e16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008e1a:	f7f7 ff35 	bl	8000c88 <__aeabi_uldivmod>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	4b0d      	ldr	r3, [pc, #52]	@ (8008e58 <UART_SetConfig+0x4e4>)
 8008e24:	fba3 1302 	umull	r1, r3, r3, r2
 8008e28:	095b      	lsrs	r3, r3, #5
 8008e2a:	2164      	movs	r1, #100	@ 0x64
 8008e2c:	fb01 f303 	mul.w	r3, r1, r3
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	3332      	adds	r3, #50	@ 0x32
 8008e36:	4a08      	ldr	r2, [pc, #32]	@ (8008e58 <UART_SetConfig+0x4e4>)
 8008e38:	fba2 2303 	umull	r2, r3, r2, r3
 8008e3c:	095b      	lsrs	r3, r3, #5
 8008e3e:	f003 020f 	and.w	r2, r3, #15
 8008e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4422      	add	r2, r4
 8008e4a:	609a      	str	r2, [r3, #8]
}
 8008e4c:	bf00      	nop
 8008e4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008e52:	46bd      	mov	sp, r7
 8008e54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e58:	51eb851f 	.word	0x51eb851f

08008e5c <__NVIC_SetPriority>:
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	4603      	mov	r3, r0
 8008e64:	6039      	str	r1, [r7, #0]
 8008e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	db0a      	blt.n	8008e86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	490c      	ldr	r1, [pc, #48]	@ (8008ea8 <__NVIC_SetPriority+0x4c>)
 8008e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e7a:	0112      	lsls	r2, r2, #4
 8008e7c:	b2d2      	uxtb	r2, r2
 8008e7e:	440b      	add	r3, r1
 8008e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008e84:	e00a      	b.n	8008e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	4908      	ldr	r1, [pc, #32]	@ (8008eac <__NVIC_SetPriority+0x50>)
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	f003 030f 	and.w	r3, r3, #15
 8008e92:	3b04      	subs	r3, #4
 8008e94:	0112      	lsls	r2, r2, #4
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	440b      	add	r3, r1
 8008e9a:	761a      	strb	r2, [r3, #24]
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	e000e100 	.word	0xe000e100
 8008eac:	e000ed00 	.word	0xe000ed00

08008eb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	f06f 0004 	mvn.w	r0, #4
 8008eba:	f7ff ffcf 	bl	8008e5c <__NVIC_SetPriority>
#endif
}
 8008ebe:	bf00      	nop
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eca:	f3ef 8305 	mrs	r3, IPSR
 8008ece:	603b      	str	r3, [r7, #0]
  return(result);
 8008ed0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d003      	beq.n	8008ede <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008ed6:	f06f 0305 	mvn.w	r3, #5
 8008eda:	607b      	str	r3, [r7, #4]
 8008edc:	e00c      	b.n	8008ef8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008ede:	4b0a      	ldr	r3, [pc, #40]	@ (8008f08 <osKernelInitialize+0x44>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d105      	bne.n	8008ef2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008ee6:	4b08      	ldr	r3, [pc, #32]	@ (8008f08 <osKernelInitialize+0x44>)
 8008ee8:	2201      	movs	r2, #1
 8008eea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	607b      	str	r3, [r7, #4]
 8008ef0:	e002      	b.n	8008ef8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ef8:	687b      	ldr	r3, [r7, #4]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	2000054c 	.word	0x2000054c

08008f0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f12:	f3ef 8305 	mrs	r3, IPSR
 8008f16:	603b      	str	r3, [r7, #0]
  return(result);
 8008f18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f1e:	f06f 0305 	mvn.w	r3, #5
 8008f22:	607b      	str	r3, [r7, #4]
 8008f24:	e010      	b.n	8008f48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f26:	4b0b      	ldr	r3, [pc, #44]	@ (8008f54 <osKernelStart+0x48>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d109      	bne.n	8008f42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f2e:	f7ff ffbf 	bl	8008eb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f32:	4b08      	ldr	r3, [pc, #32]	@ (8008f54 <osKernelStart+0x48>)
 8008f34:	2202      	movs	r2, #2
 8008f36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f38:	f001 f87a 	bl	800a030 <vTaskStartScheduler>
      stat = osOK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	607b      	str	r3, [r7, #4]
 8008f40:	e002      	b.n	8008f48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f42:	f04f 33ff 	mov.w	r3, #4294967295
 8008f46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f48:	687b      	ldr	r3, [r7, #4]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	2000054c 	.word	0x2000054c

08008f58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08e      	sub	sp, #56	@ 0x38
 8008f5c:	af04      	add	r7, sp, #16
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008f64:	2300      	movs	r3, #0
 8008f66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f68:	f3ef 8305 	mrs	r3, IPSR
 8008f6c:	617b      	str	r3, [r7, #20]
  return(result);
 8008f6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d17e      	bne.n	8009072 <osThreadNew+0x11a>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d07b      	beq.n	8009072 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008f7a:	2380      	movs	r3, #128	@ 0x80
 8008f7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008f7e:	2318      	movs	r3, #24
 8008f80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008f86:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d045      	beq.n	800901e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <osThreadNew+0x48>
        name = attr->name;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d002      	beq.n	8008fae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d008      	beq.n	8008fc6 <osThreadNew+0x6e>
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	2b38      	cmp	r3, #56	@ 0x38
 8008fb8:	d805      	bhi.n	8008fc6 <osThreadNew+0x6e>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <osThreadNew+0x72>
        return (NULL);
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	e054      	b.n	8009074 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	089b      	lsrs	r3, r3, #2
 8008fd8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00e      	beq.n	8009000 <osThreadNew+0xa8>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	2b5b      	cmp	r3, #91	@ 0x5b
 8008fe8:	d90a      	bls.n	8009000 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d006      	beq.n	8009000 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <osThreadNew+0xa8>
        mem = 1;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	61bb      	str	r3, [r7, #24]
 8008ffe:	e010      	b.n	8009022 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10c      	bne.n	8009022 <osThreadNew+0xca>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d108      	bne.n	8009022 <osThreadNew+0xca>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d104      	bne.n	8009022 <osThreadNew+0xca>
          mem = 0;
 8009018:	2300      	movs	r3, #0
 800901a:	61bb      	str	r3, [r7, #24]
 800901c:	e001      	b.n	8009022 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800901e:	2300      	movs	r3, #0
 8009020:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d110      	bne.n	800904a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009030:	9202      	str	r2, [sp, #8]
 8009032:	9301      	str	r3, [sp, #4]
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	6a3a      	ldr	r2, [r7, #32]
 800903c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f000 fe1a 	bl	8009c78 <xTaskCreateStatic>
 8009044:	4603      	mov	r3, r0
 8009046:	613b      	str	r3, [r7, #16]
 8009048:	e013      	b.n	8009072 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d110      	bne.n	8009072 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009050:	6a3b      	ldr	r3, [r7, #32]
 8009052:	b29a      	uxth	r2, r3
 8009054:	f107 0310 	add.w	r3, r7, #16
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 fe68 	bl	8009d38 <xTaskCreate>
 8009068:	4603      	mov	r3, r0
 800906a:	2b01      	cmp	r3, #1
 800906c:	d001      	beq.n	8009072 <osThreadNew+0x11a>
            hTask = NULL;
 800906e:	2300      	movs	r3, #0
 8009070:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009072:	693b      	ldr	r3, [r7, #16]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3728      	adds	r7, #40	@ 0x28
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009084:	f3ef 8305 	mrs	r3, IPSR
 8009088:	60bb      	str	r3, [r7, #8]
  return(result);
 800908a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800908c:	2b00      	cmp	r3, #0
 800908e:	d003      	beq.n	8009098 <osDelay+0x1c>
    stat = osErrorISR;
 8009090:	f06f 0305 	mvn.w	r3, #5
 8009094:	60fb      	str	r3, [r7, #12]
 8009096:	e007      	b.n	80090a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009098:	2300      	movs	r3, #0
 800909a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d002      	beq.n	80090a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 ff8e 	bl	8009fc4 <vTaskDelay>
    }
  }

  return (stat);
 80090a8:	68fb      	ldr	r3, [r7, #12]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4a07      	ldr	r2, [pc, #28]	@ (80090e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80090c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	4a06      	ldr	r2, [pc, #24]	@ (80090e4 <vApplicationGetIdleTaskMemory+0x30>)
 80090ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2280      	movs	r2, #128	@ 0x80
 80090d0:	601a      	str	r2, [r3, #0]
}
 80090d2:	bf00      	nop
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	20000550 	.word	0x20000550
 80090e4:	200005ac 	.word	0x200005ac

080090e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4a07      	ldr	r2, [pc, #28]	@ (8009114 <vApplicationGetTimerTaskMemory+0x2c>)
 80090f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	4a06      	ldr	r2, [pc, #24]	@ (8009118 <vApplicationGetTimerTaskMemory+0x30>)
 80090fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009106:	601a      	str	r2, [r3, #0]
}
 8009108:	bf00      	nop
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr
 8009114:	200007ac 	.word	0x200007ac
 8009118:	20000808 	.word	0x20000808

0800911c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f103 0208 	add.w	r2, r3, #8
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f04f 32ff 	mov.w	r2, #4294967295
 8009134:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f103 0208 	add.w	r2, r3, #8
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f103 0208 	add.w	r2, r3, #8
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800916a:	bf00      	nop
 800916c:	370c      	adds	r7, #12
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009176:	b480      	push	{r7}
 8009178:	b085      	sub	sp, #20
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	689a      	ldr	r2, [r3, #8]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	1c5a      	adds	r2, r3, #1
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	601a      	str	r2, [r3, #0]
}
 80091b2:	bf00      	nop
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091be:	b480      	push	{r7}
 80091c0:	b085      	sub	sp, #20
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d4:	d103      	bne.n	80091de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	60fb      	str	r3, [r7, #12]
 80091dc:	e00c      	b.n	80091f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3308      	adds	r3, #8
 80091e2:	60fb      	str	r3, [r7, #12]
 80091e4:	e002      	b.n	80091ec <vListInsert+0x2e>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d2f6      	bcs.n	80091e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	1c5a      	adds	r2, r3, #1
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	601a      	str	r2, [r3, #0]
}
 8009224:	bf00      	nop
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	6892      	ldr	r2, [r2, #8]
 8009246:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	6852      	ldr	r2, [r2, #4]
 8009250:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	429a      	cmp	r2, r3
 800925a:	d103      	bne.n	8009264 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	689a      	ldr	r2, [r3, #8]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	1e5a      	subs	r2, r3, #1
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3714      	adds	r7, #20
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10b      	bne.n	80092b0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929c:	f383 8811 	msr	BASEPRI, r3
 80092a0:	f3bf 8f6f 	isb	sy
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80092aa:	bf00      	nop
 80092ac:	bf00      	nop
 80092ae:	e7fd      	b.n	80092ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80092b0:	f002 f87a 	bl	800b3a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092bc:	68f9      	ldr	r1, [r7, #12]
 80092be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80092c0:	fb01 f303 	mul.w	r3, r1, r3
 80092c4:	441a      	add	r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092e0:	3b01      	subs	r3, #1
 80092e2:	68f9      	ldr	r1, [r7, #12]
 80092e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80092e6:	fb01 f303 	mul.w	r3, r1, r3
 80092ea:	441a      	add	r2, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	22ff      	movs	r2, #255	@ 0xff
 80092f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	22ff      	movs	r2, #255	@ 0xff
 80092fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d114      	bne.n	8009330 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d01a      	beq.n	8009344 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3310      	adds	r3, #16
 8009312:	4618      	mov	r0, r3
 8009314:	f001 f91a 	bl	800a54c <xTaskRemoveFromEventList>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d012      	beq.n	8009344 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800931e:	4b0d      	ldr	r3, [pc, #52]	@ (8009354 <xQueueGenericReset+0xd0>)
 8009320:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	e009      	b.n	8009344 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3310      	adds	r3, #16
 8009334:	4618      	mov	r0, r3
 8009336:	f7ff fef1 	bl	800911c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3324      	adds	r3, #36	@ 0x24
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff feec 	bl	800911c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009344:	f002 f862 	bl	800b40c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009348:	2301      	movs	r3, #1
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	e000ed04 	.word	0xe000ed04

08009358 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08e      	sub	sp, #56	@ 0x38
 800935c:	af02      	add	r7, sp, #8
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
 8009364:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10b      	bne.n	8009384 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800937e:	bf00      	nop
 8009380:	bf00      	nop
 8009382:	e7fd      	b.n	8009380 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10b      	bne.n	80093a2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800938a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800939c:	bf00      	nop
 800939e:	bf00      	nop
 80093a0:	e7fd      	b.n	800939e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <xQueueGenericCreateStatic+0x56>
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <xQueueGenericCreateStatic+0x5a>
 80093ae:	2301      	movs	r3, #1
 80093b0:	e000      	b.n	80093b4 <xQueueGenericCreateStatic+0x5c>
 80093b2:	2300      	movs	r3, #0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10b      	bne.n	80093d0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	623b      	str	r3, [r7, #32]
}
 80093ca:	bf00      	nop
 80093cc:	bf00      	nop
 80093ce:	e7fd      	b.n	80093cc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d102      	bne.n	80093dc <xQueueGenericCreateStatic+0x84>
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <xQueueGenericCreateStatic+0x88>
 80093dc:	2301      	movs	r3, #1
 80093de:	e000      	b.n	80093e2 <xQueueGenericCreateStatic+0x8a>
 80093e0:	2300      	movs	r3, #0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10b      	bne.n	80093fe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	61fb      	str	r3, [r7, #28]
}
 80093f8:	bf00      	nop
 80093fa:	bf00      	nop
 80093fc:	e7fd      	b.n	80093fa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80093fe:	2350      	movs	r3, #80	@ 0x50
 8009400:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	2b50      	cmp	r3, #80	@ 0x50
 8009406:	d00b      	beq.n	8009420 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940c:	f383 8811 	msr	BASEPRI, r3
 8009410:	f3bf 8f6f 	isb	sy
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	61bb      	str	r3, [r7, #24]
}
 800941a:	bf00      	nop
 800941c:	bf00      	nop
 800941e:	e7fd      	b.n	800941c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009420:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00d      	beq.n	8009448 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800942c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800942e:	2201      	movs	r2, #1
 8009430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009434:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	4613      	mov	r3, r2
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	68b9      	ldr	r1, [r7, #8]
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 f805 	bl	8009452 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800944a:	4618      	mov	r0, r3
 800944c:	3730      	adds	r7, #48	@ 0x30
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b084      	sub	sp, #16
 8009456:	af00      	add	r7, sp, #0
 8009458:	60f8      	str	r0, [r7, #12]
 800945a:	60b9      	str	r1, [r7, #8]
 800945c:	607a      	str	r2, [r7, #4]
 800945e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d103      	bne.n	800946e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	69ba      	ldr	r2, [r7, #24]
 800946a:	601a      	str	r2, [r3, #0]
 800946c:	e002      	b.n	8009474 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009480:	2101      	movs	r1, #1
 8009482:	69b8      	ldr	r0, [r7, #24]
 8009484:	f7ff fefe 	bl	8009284 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	78fa      	ldrb	r2, [r7, #3]
 800948c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009490:	bf00      	nop
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b08e      	sub	sp, #56	@ 0x38
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094a6:	2300      	movs	r3, #0
 80094a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80094ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10b      	bne.n	80094cc <xQueueGenericSend+0x34>
	__asm volatile
 80094b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80094c6:	bf00      	nop
 80094c8:	bf00      	nop
 80094ca:	e7fd      	b.n	80094c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d103      	bne.n	80094da <xQueueGenericSend+0x42>
 80094d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <xQueueGenericSend+0x46>
 80094da:	2301      	movs	r3, #1
 80094dc:	e000      	b.n	80094e0 <xQueueGenericSend+0x48>
 80094de:	2300      	movs	r3, #0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10b      	bne.n	80094fc <xQueueGenericSend+0x64>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80094f6:	bf00      	nop
 80094f8:	bf00      	nop
 80094fa:	e7fd      	b.n	80094f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d103      	bne.n	800950a <xQueueGenericSend+0x72>
 8009502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009506:	2b01      	cmp	r3, #1
 8009508:	d101      	bne.n	800950e <xQueueGenericSend+0x76>
 800950a:	2301      	movs	r3, #1
 800950c:	e000      	b.n	8009510 <xQueueGenericSend+0x78>
 800950e:	2300      	movs	r3, #0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10b      	bne.n	800952c <xQueueGenericSend+0x94>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	623b      	str	r3, [r7, #32]
}
 8009526:	bf00      	nop
 8009528:	bf00      	nop
 800952a:	e7fd      	b.n	8009528 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800952c:	f001 f9ce 	bl	800a8cc <xTaskGetSchedulerState>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d102      	bne.n	800953c <xQueueGenericSend+0xa4>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d101      	bne.n	8009540 <xQueueGenericSend+0xa8>
 800953c:	2301      	movs	r3, #1
 800953e:	e000      	b.n	8009542 <xQueueGenericSend+0xaa>
 8009540:	2300      	movs	r3, #0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10b      	bne.n	800955e <xQueueGenericSend+0xc6>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	61fb      	str	r3, [r7, #28]
}
 8009558:	bf00      	nop
 800955a:	bf00      	nop
 800955c:	e7fd      	b.n	800955a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800955e:	f001 ff23 	bl	800b3a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800956a:	429a      	cmp	r2, r3
 800956c:	d302      	bcc.n	8009574 <xQueueGenericSend+0xdc>
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2b02      	cmp	r3, #2
 8009572:	d129      	bne.n	80095c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	68b9      	ldr	r1, [r7, #8]
 8009578:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800957a:	f000 fa0f 	bl	800999c <prvCopyDataToQueue>
 800957e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009584:	2b00      	cmp	r3, #0
 8009586:	d010      	beq.n	80095aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958a:	3324      	adds	r3, #36	@ 0x24
 800958c:	4618      	mov	r0, r3
 800958e:	f000 ffdd 	bl	800a54c <xTaskRemoveFromEventList>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d013      	beq.n	80095c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009598:	4b3f      	ldr	r3, [pc, #252]	@ (8009698 <xQueueGenericSend+0x200>)
 800959a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800959e:	601a      	str	r2, [r3, #0]
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	e00a      	b.n	80095c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d007      	beq.n	80095c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095b0:	4b39      	ldr	r3, [pc, #228]	@ (8009698 <xQueueGenericSend+0x200>)
 80095b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095b6:	601a      	str	r2, [r3, #0]
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095c0:	f001 ff24 	bl	800b40c <vPortExitCritical>
				return pdPASS;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e063      	b.n	8009690 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d103      	bne.n	80095d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095ce:	f001 ff1d 	bl	800b40c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	e05c      	b.n	8009690 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d106      	bne.n	80095ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095dc:	f107 0314 	add.w	r3, r7, #20
 80095e0:	4618      	mov	r0, r3
 80095e2:	f001 f817 	bl	800a614 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095e6:	2301      	movs	r3, #1
 80095e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095ea:	f001 ff0f 	bl	800b40c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095ee:	f000 fd87 	bl	800a100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095f2:	f001 fed9 	bl	800b3a8 <vPortEnterCritical>
 80095f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095fc:	b25b      	sxtb	r3, r3
 80095fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009602:	d103      	bne.n	800960c <xQueueGenericSend+0x174>
 8009604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009606:	2200      	movs	r2, #0
 8009608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800960c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009612:	b25b      	sxtb	r3, r3
 8009614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009618:	d103      	bne.n	8009622 <xQueueGenericSend+0x18a>
 800961a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961c:	2200      	movs	r2, #0
 800961e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009622:	f001 fef3 	bl	800b40c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009626:	1d3a      	adds	r2, r7, #4
 8009628:	f107 0314 	add.w	r3, r7, #20
 800962c:	4611      	mov	r1, r2
 800962e:	4618      	mov	r0, r3
 8009630:	f001 f806 	bl	800a640 <xTaskCheckForTimeOut>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d124      	bne.n	8009684 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800963a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800963c:	f000 faa6 	bl	8009b8c <prvIsQueueFull>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d018      	beq.n	8009678 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009648:	3310      	adds	r3, #16
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f000 ff2a 	bl	800a4a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009654:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009656:	f000 fa31 	bl	8009abc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800965a:	f000 fd5f 	bl	800a11c <xTaskResumeAll>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	f47f af7c 	bne.w	800955e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009666:	4b0c      	ldr	r3, [pc, #48]	@ (8009698 <xQueueGenericSend+0x200>)
 8009668:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800966c:	601a      	str	r2, [r3, #0]
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	e772      	b.n	800955e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009678:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800967a:	f000 fa1f 	bl	8009abc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800967e:	f000 fd4d 	bl	800a11c <xTaskResumeAll>
 8009682:	e76c      	b.n	800955e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009684:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009686:	f000 fa19 	bl	8009abc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800968a:	f000 fd47 	bl	800a11c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800968e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009690:	4618      	mov	r0, r3
 8009692:	3738      	adds	r7, #56	@ 0x38
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	e000ed04 	.word	0xe000ed04

0800969c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b090      	sub	sp, #64	@ 0x40
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80096ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10b      	bne.n	80096cc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80096c6:	bf00      	nop
 80096c8:	bf00      	nop
 80096ca:	e7fd      	b.n	80096c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d103      	bne.n	80096da <xQueueGenericSendFromISR+0x3e>
 80096d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <xQueueGenericSendFromISR+0x42>
 80096da:	2301      	movs	r3, #1
 80096dc:	e000      	b.n	80096e0 <xQueueGenericSendFromISR+0x44>
 80096de:	2300      	movs	r3, #0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10b      	bne.n	80096fc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80096f6:	bf00      	nop
 80096f8:	bf00      	nop
 80096fa:	e7fd      	b.n	80096f8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d103      	bne.n	800970a <xQueueGenericSendFromISR+0x6e>
 8009702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009706:	2b01      	cmp	r3, #1
 8009708:	d101      	bne.n	800970e <xQueueGenericSendFromISR+0x72>
 800970a:	2301      	movs	r3, #1
 800970c:	e000      	b.n	8009710 <xQueueGenericSendFromISR+0x74>
 800970e:	2300      	movs	r3, #0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10b      	bne.n	800972c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	623b      	str	r3, [r7, #32]
}
 8009726:	bf00      	nop
 8009728:	bf00      	nop
 800972a:	e7fd      	b.n	8009728 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800972c:	f001 ff1c 	bl	800b568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009730:	f3ef 8211 	mrs	r2, BASEPRI
 8009734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	61fa      	str	r2, [r7, #28]
 8009746:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009748:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800974a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800974c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009754:	429a      	cmp	r2, r3
 8009756:	d302      	bcc.n	800975e <xQueueGenericSendFromISR+0xc2>
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	2b02      	cmp	r3, #2
 800975c:	d12f      	bne.n	80097be <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800975e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009760:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009764:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800976c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	68b9      	ldr	r1, [r7, #8]
 8009772:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009774:	f000 f912 	bl	800999c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009778:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800977c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009780:	d112      	bne.n	80097a8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009786:	2b00      	cmp	r3, #0
 8009788:	d016      	beq.n	80097b8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800978a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978c:	3324      	adds	r3, #36	@ 0x24
 800978e:	4618      	mov	r0, r3
 8009790:	f000 fedc 	bl	800a54c <xTaskRemoveFromEventList>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00e      	beq.n	80097b8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00b      	beq.n	80097b8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	e007      	b.n	80097b8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80097ac:	3301      	adds	r3, #1
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	b25a      	sxtb	r2, r3
 80097b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80097b8:	2301      	movs	r3, #1
 80097ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80097bc:	e001      	b.n	80097c2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3740      	adds	r7, #64	@ 0x40
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b08c      	sub	sp, #48	@ 0x30
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097e4:	2300      	movs	r3, #0
 80097e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10b      	bne.n	800980a <xQueueReceive+0x32>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	623b      	str	r3, [r7, #32]
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop
 8009808:	e7fd      	b.n	8009806 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d103      	bne.n	8009818 <xQueueReceive+0x40>
 8009810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <xQueueReceive+0x44>
 8009818:	2301      	movs	r3, #1
 800981a:	e000      	b.n	800981e <xQueueReceive+0x46>
 800981c:	2300      	movs	r3, #0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10b      	bne.n	800983a <xQueueReceive+0x62>
	__asm volatile
 8009822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	61fb      	str	r3, [r7, #28]
}
 8009834:	bf00      	nop
 8009836:	bf00      	nop
 8009838:	e7fd      	b.n	8009836 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800983a:	f001 f847 	bl	800a8cc <xTaskGetSchedulerState>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d102      	bne.n	800984a <xQueueReceive+0x72>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d101      	bne.n	800984e <xQueueReceive+0x76>
 800984a:	2301      	movs	r3, #1
 800984c:	e000      	b.n	8009850 <xQueueReceive+0x78>
 800984e:	2300      	movs	r3, #0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10b      	bne.n	800986c <xQueueReceive+0x94>
	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	61bb      	str	r3, [r7, #24]
}
 8009866:	bf00      	nop
 8009868:	bf00      	nop
 800986a:	e7fd      	b.n	8009868 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800986c:	f001 fd9c 	bl	800b3a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009874:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009878:	2b00      	cmp	r3, #0
 800987a:	d01f      	beq.n	80098bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800987c:	68b9      	ldr	r1, [r7, #8]
 800987e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009880:	f000 f8f6 	bl	8009a70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009886:	1e5a      	subs	r2, r3, #1
 8009888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800988c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00f      	beq.n	80098b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009896:	3310      	adds	r3, #16
 8009898:	4618      	mov	r0, r3
 800989a:	f000 fe57 	bl	800a54c <xTaskRemoveFromEventList>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d007      	beq.n	80098b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098a4:	4b3c      	ldr	r3, [pc, #240]	@ (8009998 <xQueueReceive+0x1c0>)
 80098a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098aa:	601a      	str	r2, [r3, #0]
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098b4:	f001 fdaa 	bl	800b40c <vPortExitCritical>
				return pdPASS;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e069      	b.n	8009990 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d103      	bne.n	80098ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098c2:	f001 fda3 	bl	800b40c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098c6:	2300      	movs	r3, #0
 80098c8:	e062      	b.n	8009990 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d106      	bne.n	80098de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098d0:	f107 0310 	add.w	r3, r7, #16
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 fe9d 	bl	800a614 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098da:	2301      	movs	r3, #1
 80098dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098de:	f001 fd95 	bl	800b40c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098e2:	f000 fc0d 	bl	800a100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098e6:	f001 fd5f 	bl	800b3a8 <vPortEnterCritical>
 80098ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098f0:	b25b      	sxtb	r3, r3
 80098f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f6:	d103      	bne.n	8009900 <xQueueReceive+0x128>
 80098f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009902:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009906:	b25b      	sxtb	r3, r3
 8009908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990c:	d103      	bne.n	8009916 <xQueueReceive+0x13e>
 800990e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009910:	2200      	movs	r2, #0
 8009912:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009916:	f001 fd79 	bl	800b40c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800991a:	1d3a      	adds	r2, r7, #4
 800991c:	f107 0310 	add.w	r3, r7, #16
 8009920:	4611      	mov	r1, r2
 8009922:	4618      	mov	r0, r3
 8009924:	f000 fe8c 	bl	800a640 <xTaskCheckForTimeOut>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d123      	bne.n	8009976 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800992e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009930:	f000 f916 	bl	8009b60 <prvIsQueueEmpty>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d017      	beq.n	800996a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800993a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993c:	3324      	adds	r3, #36	@ 0x24
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	4611      	mov	r1, r2
 8009942:	4618      	mov	r0, r3
 8009944:	f000 fdb0 	bl	800a4a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009948:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800994a:	f000 f8b7 	bl	8009abc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800994e:	f000 fbe5 	bl	800a11c <xTaskResumeAll>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d189      	bne.n	800986c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009958:	4b0f      	ldr	r3, [pc, #60]	@ (8009998 <xQueueReceive+0x1c0>)
 800995a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	e780      	b.n	800986c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800996a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800996c:	f000 f8a6 	bl	8009abc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009970:	f000 fbd4 	bl	800a11c <xTaskResumeAll>
 8009974:	e77a      	b.n	800986c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009978:	f000 f8a0 	bl	8009abc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800997c:	f000 fbce 	bl	800a11c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009980:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009982:	f000 f8ed 	bl	8009b60 <prvIsQueueEmpty>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	f43f af6f 	beq.w	800986c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800998e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009990:	4618      	mov	r0, r3
 8009992:	3730      	adds	r7, #48	@ 0x30
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	e000ed04 	.word	0xe000ed04

0800999c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099a8:	2300      	movs	r3, #0
 80099aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10d      	bne.n	80099d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d14d      	bne.n	8009a5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 ff9e 	bl	800a908 <xTaskPriorityDisinherit>
 80099cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	609a      	str	r2, [r3, #8]
 80099d4:	e043      	b.n	8009a5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d119      	bne.n	8009a10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6858      	ldr	r0, [r3, #4]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e4:	461a      	mov	r2, r3
 80099e6:	68b9      	ldr	r1, [r7, #8]
 80099e8:	f003 fb93 	bl	800d112 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	685a      	ldr	r2, [r3, #4]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f4:	441a      	add	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d32b      	bcc.n	8009a5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	605a      	str	r2, [r3, #4]
 8009a0e:	e026      	b.n	8009a5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	68d8      	ldr	r0, [r3, #12]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a18:	461a      	mov	r2, r3
 8009a1a:	68b9      	ldr	r1, [r7, #8]
 8009a1c:	f003 fb79 	bl	800d112 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	68da      	ldr	r2, [r3, #12]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a28:	425b      	negs	r3, r3
 8009a2a:	441a      	add	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	68da      	ldr	r2, [r3, #12]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d207      	bcs.n	8009a4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	689a      	ldr	r2, [r3, #8]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a44:	425b      	negs	r3, r3
 8009a46:	441a      	add	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d105      	bne.n	8009a5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d002      	beq.n	8009a5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009a66:	697b      	ldr	r3, [r7, #20]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3718      	adds	r7, #24
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d018      	beq.n	8009ab4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a8a:	441a      	add	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68da      	ldr	r2, [r3, #12]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d303      	bcc.n	8009aa4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	68d9      	ldr	r1, [r3, #12]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aac:	461a      	mov	r2, r3
 8009aae:	6838      	ldr	r0, [r7, #0]
 8009ab0:	f003 fb2f 	bl	800d112 <memcpy>
	}
}
 8009ab4:	bf00      	nop
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ac4:	f001 fc70 	bl	800b3a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ace:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ad0:	e011      	b.n	8009af6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d012      	beq.n	8009b00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	3324      	adds	r3, #36	@ 0x24
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 fd34 	bl	800a54c <xTaskRemoveFromEventList>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009aea:	f000 fe0d 	bl	800a708 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	dce9      	bgt.n	8009ad2 <prvUnlockQueue+0x16>
 8009afe:	e000      	b.n	8009b02 <prvUnlockQueue+0x46>
					break;
 8009b00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	22ff      	movs	r2, #255	@ 0xff
 8009b06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009b0a:	f001 fc7f 	bl	800b40c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b0e:	f001 fc4b 	bl	800b3a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b1a:	e011      	b.n	8009b40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d012      	beq.n	8009b4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3310      	adds	r3, #16
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f000 fd0f 	bl	800a54c <xTaskRemoveFromEventList>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b34:	f000 fde8 	bl	800a708 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	dce9      	bgt.n	8009b1c <prvUnlockQueue+0x60>
 8009b48:	e000      	b.n	8009b4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	22ff      	movs	r2, #255	@ 0xff
 8009b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009b54:	f001 fc5a 	bl	800b40c <vPortExitCritical>
}
 8009b58:	bf00      	nop
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b68:	f001 fc1e 	bl	800b3a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d102      	bne.n	8009b7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b74:	2301      	movs	r3, #1
 8009b76:	60fb      	str	r3, [r7, #12]
 8009b78:	e001      	b.n	8009b7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b7e:	f001 fc45 	bl	800b40c <vPortExitCritical>

	return xReturn;
 8009b82:	68fb      	ldr	r3, [r7, #12]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b94:	f001 fc08 	bl	800b3a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d102      	bne.n	8009baa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	60fb      	str	r3, [r7, #12]
 8009ba8:	e001      	b.n	8009bae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009baa:	2300      	movs	r3, #0
 8009bac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bae:	f001 fc2d 	bl	800b40c <vPortExitCritical>

	return xReturn;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60fb      	str	r3, [r7, #12]
 8009bca:	e014      	b.n	8009bf6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8009c0c <vQueueAddToRegistry+0x50>)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10b      	bne.n	8009bf0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009bd8:	490c      	ldr	r1, [pc, #48]	@ (8009c0c <vQueueAddToRegistry+0x50>)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	683a      	ldr	r2, [r7, #0]
 8009bde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009be2:	4a0a      	ldr	r2, [pc, #40]	@ (8009c0c <vQueueAddToRegistry+0x50>)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	00db      	lsls	r3, r3, #3
 8009be8:	4413      	add	r3, r2
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009bee:	e006      	b.n	8009bfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	60fb      	str	r3, [r7, #12]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2b07      	cmp	r3, #7
 8009bfa:	d9e7      	bls.n	8009bcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009bfc:	bf00      	nop
 8009bfe:	bf00      	nop
 8009c00:	3714      	adds	r7, #20
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	20000c08 	.word	0x20000c08

08009c10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c20:	f001 fbc2 	bl	800b3a8 <vPortEnterCritical>
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c2a:	b25b      	sxtb	r3, r3
 8009c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c30:	d103      	bne.n	8009c3a <vQueueWaitForMessageRestricted+0x2a>
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c40:	b25b      	sxtb	r3, r3
 8009c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c46:	d103      	bne.n	8009c50 <vQueueWaitForMessageRestricted+0x40>
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c50:	f001 fbdc 	bl	800b40c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d106      	bne.n	8009c6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	3324      	adds	r3, #36	@ 0x24
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	68b9      	ldr	r1, [r7, #8]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 fc45 	bl	800a4f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c6a:	6978      	ldr	r0, [r7, #20]
 8009c6c:	f7ff ff26 	bl	8009abc <prvUnlockQueue>
	}
 8009c70:	bf00      	nop
 8009c72:	3718      	adds	r7, #24
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08e      	sub	sp, #56	@ 0x38
 8009c7c:	af04      	add	r7, sp, #16
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
 8009c84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10b      	bne.n	8009ca4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	623b      	str	r3, [r7, #32]
}
 8009c9e:	bf00      	nop
 8009ca0:	bf00      	nop
 8009ca2:	e7fd      	b.n	8009ca0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10b      	bne.n	8009cc2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cae:	f383 8811 	msr	BASEPRI, r3
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	61fb      	str	r3, [r7, #28]
}
 8009cbc:	bf00      	nop
 8009cbe:	bf00      	nop
 8009cc0:	e7fd      	b.n	8009cbe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cc2:	235c      	movs	r3, #92	@ 0x5c
 8009cc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	2b5c      	cmp	r3, #92	@ 0x5c
 8009cca:	d00b      	beq.n	8009ce4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	61bb      	str	r3, [r7, #24]
}
 8009cde:	bf00      	nop
 8009ce0:	bf00      	nop
 8009ce2:	e7fd      	b.n	8009ce0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ce4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d01e      	beq.n	8009d2a <xTaskCreateStatic+0xb2>
 8009cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d01b      	beq.n	8009d2a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009cfa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d04:	2300      	movs	r3, #0
 8009d06:	9303      	str	r3, [sp, #12]
 8009d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0a:	9302      	str	r3, [sp, #8]
 8009d0c:	f107 0314 	add.w	r3, r7, #20
 8009d10:	9301      	str	r3, [sp, #4]
 8009d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	68b9      	ldr	r1, [r7, #8]
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f000 f850 	bl	8009dc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d24:	f000 f8de 	bl	8009ee4 <prvAddNewTaskToReadyList>
 8009d28:	e001      	b.n	8009d2e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d2e:	697b      	ldr	r3, [r7, #20]
	}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3728      	adds	r7, #40	@ 0x28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08c      	sub	sp, #48	@ 0x30
 8009d3c:	af04      	add	r7, sp, #16
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	603b      	str	r3, [r7, #0]
 8009d44:	4613      	mov	r3, r2
 8009d46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d48:	88fb      	ldrh	r3, [r7, #6]
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f001 fc4d 	bl	800b5ec <pvPortMalloc>
 8009d52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00e      	beq.n	8009d78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d5a:	205c      	movs	r0, #92	@ 0x5c
 8009d5c:	f001 fc46 	bl	800b5ec <pvPortMalloc>
 8009d60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d003      	beq.n	8009d70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8009d6e:	e005      	b.n	8009d7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d70:	6978      	ldr	r0, [r7, #20]
 8009d72:	f001 fd09 	bl	800b788 <vPortFree>
 8009d76:	e001      	b.n	8009d7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d017      	beq.n	8009db2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d8a:	88fa      	ldrh	r2, [r7, #6]
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	9303      	str	r3, [sp, #12]
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	9302      	str	r3, [sp, #8]
 8009d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d96:	9301      	str	r3, [sp, #4]
 8009d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 f80e 	bl	8009dc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009da6:	69f8      	ldr	r0, [r7, #28]
 8009da8:	f000 f89c 	bl	8009ee4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dac:	2301      	movs	r3, #1
 8009dae:	61bb      	str	r3, [r7, #24]
 8009db0:	e002      	b.n	8009db8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009db2:	f04f 33ff 	mov.w	r3, #4294967295
 8009db6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009db8:	69bb      	ldr	r3, [r7, #24]
	}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3720      	adds	r7, #32
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b088      	sub	sp, #32
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	60f8      	str	r0, [r7, #12]
 8009dca:	60b9      	str	r1, [r7, #8]
 8009dcc:	607a      	str	r2, [r7, #4]
 8009dce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	461a      	mov	r2, r3
 8009dda:	21a5      	movs	r1, #165	@ 0xa5
 8009ddc:	f003 f8f7 	bl	800cfce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009dea:	3b01      	subs	r3, #1
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4413      	add	r3, r2
 8009df0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	f023 0307 	bic.w	r3, r3, #7
 8009df8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	f003 0307 	and.w	r3, r3, #7
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00b      	beq.n	8009e1c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	617b      	str	r3, [r7, #20]
}
 8009e16:	bf00      	nop
 8009e18:	bf00      	nop
 8009e1a:	e7fd      	b.n	8009e18 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d01f      	beq.n	8009e62 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e22:	2300      	movs	r3, #0
 8009e24:	61fb      	str	r3, [r7, #28]
 8009e26:	e012      	b.n	8009e4e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	7819      	ldrb	r1, [r3, #0]
 8009e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	4413      	add	r3, r2
 8009e36:	3334      	adds	r3, #52	@ 0x34
 8009e38:	460a      	mov	r2, r1
 8009e3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	4413      	add	r3, r2
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d006      	beq.n	8009e56 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	61fb      	str	r3, [r7, #28]
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	2b0f      	cmp	r3, #15
 8009e52:	d9e9      	bls.n	8009e28 <prvInitialiseNewTask+0x66>
 8009e54:	e000      	b.n	8009e58 <prvInitialiseNewTask+0x96>
			{
				break;
 8009e56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e60:	e003      	b.n	8009e6a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e6c:	2b37      	cmp	r3, #55	@ 0x37
 8009e6e:	d901      	bls.n	8009e74 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e70:	2337      	movs	r3, #55	@ 0x37
 8009e72:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e78:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e7e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e82:	2200      	movs	r2, #0
 8009e84:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e88:	3304      	adds	r3, #4
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7ff f966 	bl	800915c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e92:	3318      	adds	r3, #24
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7ff f961 	bl	800915c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	68f9      	ldr	r1, [r7, #12]
 8009ec2:	69b8      	ldr	r0, [r7, #24]
 8009ec4:	f001 f93e 	bl	800b144 <pxPortInitialiseStack>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ecc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ed8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eda:	bf00      	nop
 8009edc:	3720      	adds	r7, #32
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
	...

08009ee4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009eec:	f001 fa5c 	bl	800b3a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8009fa8 <prvAddNewTaskToReadyList+0xc4>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8009fa8 <prvAddNewTaskToReadyList+0xc4>)
 8009ef8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009efa:	4b2c      	ldr	r3, [pc, #176]	@ (8009fac <prvAddNewTaskToReadyList+0xc8>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d109      	bne.n	8009f16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f02:	4a2a      	ldr	r2, [pc, #168]	@ (8009fac <prvAddNewTaskToReadyList+0xc8>)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f08:	4b27      	ldr	r3, [pc, #156]	@ (8009fa8 <prvAddNewTaskToReadyList+0xc4>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d110      	bne.n	8009f32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f10:	f000 fc1e 	bl	800a750 <prvInitialiseTaskLists>
 8009f14:	e00d      	b.n	8009f32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f16:	4b26      	ldr	r3, [pc, #152]	@ (8009fb0 <prvAddNewTaskToReadyList+0xcc>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d109      	bne.n	8009f32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f1e:	4b23      	ldr	r3, [pc, #140]	@ (8009fac <prvAddNewTaskToReadyList+0xc8>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d802      	bhi.n	8009f32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8009fac <prvAddNewTaskToReadyList+0xc8>)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f32:	4b20      	ldr	r3, [pc, #128]	@ (8009fb4 <prvAddNewTaskToReadyList+0xd0>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	3301      	adds	r3, #1
 8009f38:	4a1e      	ldr	r2, [pc, #120]	@ (8009fb4 <prvAddNewTaskToReadyList+0xd0>)
 8009f3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8009fb4 <prvAddNewTaskToReadyList+0xd0>)
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f48:	4b1b      	ldr	r3, [pc, #108]	@ (8009fb8 <prvAddNewTaskToReadyList+0xd4>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d903      	bls.n	8009f58 <prvAddNewTaskToReadyList+0x74>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f54:	4a18      	ldr	r2, [pc, #96]	@ (8009fb8 <prvAddNewTaskToReadyList+0xd4>)
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4a15      	ldr	r2, [pc, #84]	@ (8009fbc <prvAddNewTaskToReadyList+0xd8>)
 8009f66:	441a      	add	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	f7ff f901 	bl	8009176 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f74:	f001 fa4a 	bl	800b40c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f78:	4b0d      	ldr	r3, [pc, #52]	@ (8009fb0 <prvAddNewTaskToReadyList+0xcc>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00e      	beq.n	8009f9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f80:	4b0a      	ldr	r3, [pc, #40]	@ (8009fac <prvAddNewTaskToReadyList+0xc8>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d207      	bcs.n	8009f9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009fc0 <prvAddNewTaskToReadyList+0xdc>)
 8009f90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f9e:	bf00      	nop
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	2000111c 	.word	0x2000111c
 8009fac:	20000c48 	.word	0x20000c48
 8009fb0:	20001128 	.word	0x20001128
 8009fb4:	20001138 	.word	0x20001138
 8009fb8:	20001124 	.word	0x20001124
 8009fbc:	20000c4c 	.word	0x20000c4c
 8009fc0:	e000ed04 	.word	0xe000ed04

08009fc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d018      	beq.n	800a008 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009fd6:	4b14      	ldr	r3, [pc, #80]	@ (800a028 <vTaskDelay+0x64>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00b      	beq.n	8009ff6 <vTaskDelay+0x32>
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	60bb      	str	r3, [r7, #8]
}
 8009ff0:	bf00      	nop
 8009ff2:	bf00      	nop
 8009ff4:	e7fd      	b.n	8009ff2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ff6:	f000 f883 	bl	800a100 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fcf3 	bl	800a9e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a002:	f000 f88b 	bl	800a11c <xTaskResumeAll>
 800a006:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d107      	bne.n	800a01e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a00e:	4b07      	ldr	r3, [pc, #28]	@ (800a02c <vTaskDelay+0x68>)
 800a010:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a014:	601a      	str	r2, [r3, #0]
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	20001144 	.word	0x20001144
 800a02c:	e000ed04 	.word	0xe000ed04

0800a030 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08a      	sub	sp, #40	@ 0x28
 800a034:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a036:	2300      	movs	r3, #0
 800a038:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a03a:	2300      	movs	r3, #0
 800a03c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a03e:	463a      	mov	r2, r7
 800a040:	1d39      	adds	r1, r7, #4
 800a042:	f107 0308 	add.w	r3, r7, #8
 800a046:	4618      	mov	r0, r3
 800a048:	f7ff f834 	bl	80090b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	9202      	str	r2, [sp, #8]
 800a054:	9301      	str	r3, [sp, #4]
 800a056:	2300      	movs	r3, #0
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	2300      	movs	r3, #0
 800a05c:	460a      	mov	r2, r1
 800a05e:	4922      	ldr	r1, [pc, #136]	@ (800a0e8 <vTaskStartScheduler+0xb8>)
 800a060:	4822      	ldr	r0, [pc, #136]	@ (800a0ec <vTaskStartScheduler+0xbc>)
 800a062:	f7ff fe09 	bl	8009c78 <xTaskCreateStatic>
 800a066:	4603      	mov	r3, r0
 800a068:	4a21      	ldr	r2, [pc, #132]	@ (800a0f0 <vTaskStartScheduler+0xc0>)
 800a06a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a06c:	4b20      	ldr	r3, [pc, #128]	@ (800a0f0 <vTaskStartScheduler+0xc0>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a074:	2301      	movs	r3, #1
 800a076:	617b      	str	r3, [r7, #20]
 800a078:	e001      	b.n	800a07e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d102      	bne.n	800a08a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a084:	f000 fd04 	bl	800aa90 <xTimerCreateTimerTask>
 800a088:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d116      	bne.n	800a0be <vTaskStartScheduler+0x8e>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	613b      	str	r3, [r7, #16]
}
 800a0a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a0a4:	4b13      	ldr	r3, [pc, #76]	@ (800a0f4 <vTaskStartScheduler+0xc4>)
 800a0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a0ac:	4b12      	ldr	r3, [pc, #72]	@ (800a0f8 <vTaskStartScheduler+0xc8>)
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a0b2:	4b12      	ldr	r3, [pc, #72]	@ (800a0fc <vTaskStartScheduler+0xcc>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a0b8:	f001 f8d2 	bl	800b260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a0bc:	e00f      	b.n	800a0de <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c4:	d10b      	bne.n	800a0de <vTaskStartScheduler+0xae>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	60fb      	str	r3, [r7, #12]
}
 800a0d8:	bf00      	nop
 800a0da:	bf00      	nop
 800a0dc:	e7fd      	b.n	800a0da <vTaskStartScheduler+0xaa>
}
 800a0de:	bf00      	nop
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	080105c8 	.word	0x080105c8
 800a0ec:	0800a721 	.word	0x0800a721
 800a0f0:	20001140 	.word	0x20001140
 800a0f4:	2000113c 	.word	0x2000113c
 800a0f8:	20001128 	.word	0x20001128
 800a0fc:	20001120 	.word	0x20001120

0800a100 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a100:	b480      	push	{r7}
 800a102:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a104:	4b04      	ldr	r3, [pc, #16]	@ (800a118 <vTaskSuspendAll+0x18>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3301      	adds	r3, #1
 800a10a:	4a03      	ldr	r2, [pc, #12]	@ (800a118 <vTaskSuspendAll+0x18>)
 800a10c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a10e:	bf00      	nop
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	20001144 	.word	0x20001144

0800a11c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a122:	2300      	movs	r3, #0
 800a124:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a126:	2300      	movs	r3, #0
 800a128:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a12a:	4b42      	ldr	r3, [pc, #264]	@ (800a234 <xTaskResumeAll+0x118>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10b      	bne.n	800a14a <xTaskResumeAll+0x2e>
	__asm volatile
 800a132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	603b      	str	r3, [r7, #0]
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop
 800a148:	e7fd      	b.n	800a146 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a14a:	f001 f92d 	bl	800b3a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a14e:	4b39      	ldr	r3, [pc, #228]	@ (800a234 <xTaskResumeAll+0x118>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	3b01      	subs	r3, #1
 800a154:	4a37      	ldr	r2, [pc, #220]	@ (800a234 <xTaskResumeAll+0x118>)
 800a156:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a158:	4b36      	ldr	r3, [pc, #216]	@ (800a234 <xTaskResumeAll+0x118>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d162      	bne.n	800a226 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a160:	4b35      	ldr	r3, [pc, #212]	@ (800a238 <xTaskResumeAll+0x11c>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d05e      	beq.n	800a226 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a168:	e02f      	b.n	800a1ca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a16a:	4b34      	ldr	r3, [pc, #208]	@ (800a23c <xTaskResumeAll+0x120>)
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	3318      	adds	r3, #24
 800a176:	4618      	mov	r0, r3
 800a178:	f7ff f85a 	bl	8009230 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	3304      	adds	r3, #4
 800a180:	4618      	mov	r0, r3
 800a182:	f7ff f855 	bl	8009230 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a18a:	4b2d      	ldr	r3, [pc, #180]	@ (800a240 <xTaskResumeAll+0x124>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d903      	bls.n	800a19a <xTaskResumeAll+0x7e>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a196:	4a2a      	ldr	r2, [pc, #168]	@ (800a240 <xTaskResumeAll+0x124>)
 800a198:	6013      	str	r3, [r2, #0]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a19e:	4613      	mov	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4a27      	ldr	r2, [pc, #156]	@ (800a244 <xTaskResumeAll+0x128>)
 800a1a8:	441a      	add	r2, r3
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	f7fe ffe0 	bl	8009176 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1ba:	4b23      	ldr	r3, [pc, #140]	@ (800a248 <xTaskResumeAll+0x12c>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d302      	bcc.n	800a1ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a1c4:	4b21      	ldr	r3, [pc, #132]	@ (800a24c <xTaskResumeAll+0x130>)
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1ca:	4b1c      	ldr	r3, [pc, #112]	@ (800a23c <xTaskResumeAll+0x120>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1cb      	bne.n	800a16a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a1d8:	f000 fb58 	bl	800a88c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a1dc:	4b1c      	ldr	r3, [pc, #112]	@ (800a250 <xTaskResumeAll+0x134>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d010      	beq.n	800a20a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a1e8:	f000 f846 	bl	800a278 <xTaskIncrementTick>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d002      	beq.n	800a1f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a1f2:	4b16      	ldr	r3, [pc, #88]	@ (800a24c <xTaskResumeAll+0x130>)
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1f1      	bne.n	800a1e8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a204:	4b12      	ldr	r3, [pc, #72]	@ (800a250 <xTaskResumeAll+0x134>)
 800a206:	2200      	movs	r2, #0
 800a208:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a20a:	4b10      	ldr	r3, [pc, #64]	@ (800a24c <xTaskResumeAll+0x130>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d009      	beq.n	800a226 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a212:	2301      	movs	r3, #1
 800a214:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a216:	4b0f      	ldr	r3, [pc, #60]	@ (800a254 <xTaskResumeAll+0x138>)
 800a218:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a226:	f001 f8f1 	bl	800b40c <vPortExitCritical>

	return xAlreadyYielded;
 800a22a:	68bb      	ldr	r3, [r7, #8]
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3710      	adds	r7, #16
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	20001144 	.word	0x20001144
 800a238:	2000111c 	.word	0x2000111c
 800a23c:	200010dc 	.word	0x200010dc
 800a240:	20001124 	.word	0x20001124
 800a244:	20000c4c 	.word	0x20000c4c
 800a248:	20000c48 	.word	0x20000c48
 800a24c:	20001130 	.word	0x20001130
 800a250:	2000112c 	.word	0x2000112c
 800a254:	e000ed04 	.word	0xe000ed04

0800a258 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a25e:	4b05      	ldr	r3, [pc, #20]	@ (800a274 <xTaskGetTickCount+0x1c>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a264:	687b      	ldr	r3, [r7, #4]
}
 800a266:	4618      	mov	r0, r3
 800a268:	370c      	adds	r7, #12
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	20001120 	.word	0x20001120

0800a278 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a27e:	2300      	movs	r3, #0
 800a280:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a282:	4b4f      	ldr	r3, [pc, #316]	@ (800a3c0 <xTaskIncrementTick+0x148>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	f040 8090 	bne.w	800a3ac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a28c:	4b4d      	ldr	r3, [pc, #308]	@ (800a3c4 <xTaskIncrementTick+0x14c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3301      	adds	r3, #1
 800a292:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a294:	4a4b      	ldr	r2, [pc, #300]	@ (800a3c4 <xTaskIncrementTick+0x14c>)
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d121      	bne.n	800a2e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a2a0:	4b49      	ldr	r3, [pc, #292]	@ (800a3c8 <xTaskIncrementTick+0x150>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00b      	beq.n	800a2c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	603b      	str	r3, [r7, #0]
}
 800a2bc:	bf00      	nop
 800a2be:	bf00      	nop
 800a2c0:	e7fd      	b.n	800a2be <xTaskIncrementTick+0x46>
 800a2c2:	4b41      	ldr	r3, [pc, #260]	@ (800a3c8 <xTaskIncrementTick+0x150>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	60fb      	str	r3, [r7, #12]
 800a2c8:	4b40      	ldr	r3, [pc, #256]	@ (800a3cc <xTaskIncrementTick+0x154>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a3e      	ldr	r2, [pc, #248]	@ (800a3c8 <xTaskIncrementTick+0x150>)
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	4a3e      	ldr	r2, [pc, #248]	@ (800a3cc <xTaskIncrementTick+0x154>)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6013      	str	r3, [r2, #0]
 800a2d6:	4b3e      	ldr	r3, [pc, #248]	@ (800a3d0 <xTaskIncrementTick+0x158>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	4a3c      	ldr	r2, [pc, #240]	@ (800a3d0 <xTaskIncrementTick+0x158>)
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	f000 fad4 	bl	800a88c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2e4:	4b3b      	ldr	r3, [pc, #236]	@ (800a3d4 <xTaskIncrementTick+0x15c>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d349      	bcc.n	800a382 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2ee:	4b36      	ldr	r3, [pc, #216]	@ (800a3c8 <xTaskIncrementTick+0x150>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d104      	bne.n	800a302 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2f8:	4b36      	ldr	r3, [pc, #216]	@ (800a3d4 <xTaskIncrementTick+0x15c>)
 800a2fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a2fe:	601a      	str	r2, [r3, #0]
					break;
 800a300:	e03f      	b.n	800a382 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a302:	4b31      	ldr	r3, [pc, #196]	@ (800a3c8 <xTaskIncrementTick+0x150>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	429a      	cmp	r2, r3
 800a318:	d203      	bcs.n	800a322 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a31a:	4a2e      	ldr	r2, [pc, #184]	@ (800a3d4 <xTaskIncrementTick+0x15c>)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a320:	e02f      	b.n	800a382 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	3304      	adds	r3, #4
 800a326:	4618      	mov	r0, r3
 800a328:	f7fe ff82 	bl	8009230 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a330:	2b00      	cmp	r3, #0
 800a332:	d004      	beq.n	800a33e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	3318      	adds	r3, #24
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fe ff79 	bl	8009230 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a342:	4b25      	ldr	r3, [pc, #148]	@ (800a3d8 <xTaskIncrementTick+0x160>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	429a      	cmp	r2, r3
 800a348:	d903      	bls.n	800a352 <xTaskIncrementTick+0xda>
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a34e:	4a22      	ldr	r2, [pc, #136]	@ (800a3d8 <xTaskIncrementTick+0x160>)
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a356:	4613      	mov	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4413      	add	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4a1f      	ldr	r2, [pc, #124]	@ (800a3dc <xTaskIncrementTick+0x164>)
 800a360:	441a      	add	r2, r3
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	3304      	adds	r3, #4
 800a366:	4619      	mov	r1, r3
 800a368:	4610      	mov	r0, r2
 800a36a:	f7fe ff04 	bl	8009176 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a372:	4b1b      	ldr	r3, [pc, #108]	@ (800a3e0 <xTaskIncrementTick+0x168>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a378:	429a      	cmp	r2, r3
 800a37a:	d3b8      	bcc.n	800a2ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a37c:	2301      	movs	r3, #1
 800a37e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a380:	e7b5      	b.n	800a2ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a382:	4b17      	ldr	r3, [pc, #92]	@ (800a3e0 <xTaskIncrementTick+0x168>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a388:	4914      	ldr	r1, [pc, #80]	@ (800a3dc <xTaskIncrementTick+0x164>)
 800a38a:	4613      	mov	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	440b      	add	r3, r1
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d901      	bls.n	800a39e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a39a:	2301      	movs	r3, #1
 800a39c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a39e:	4b11      	ldr	r3, [pc, #68]	@ (800a3e4 <xTaskIncrementTick+0x16c>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d007      	beq.n	800a3b6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	617b      	str	r3, [r7, #20]
 800a3aa:	e004      	b.n	800a3b6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a3ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a3e8 <xTaskIncrementTick+0x170>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	4a0d      	ldr	r2, [pc, #52]	@ (800a3e8 <xTaskIncrementTick+0x170>)
 800a3b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a3b6:	697b      	ldr	r3, [r7, #20]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3718      	adds	r7, #24
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	20001144 	.word	0x20001144
 800a3c4:	20001120 	.word	0x20001120
 800a3c8:	200010d4 	.word	0x200010d4
 800a3cc:	200010d8 	.word	0x200010d8
 800a3d0:	20001134 	.word	0x20001134
 800a3d4:	2000113c 	.word	0x2000113c
 800a3d8:	20001124 	.word	0x20001124
 800a3dc:	20000c4c 	.word	0x20000c4c
 800a3e0:	20000c48 	.word	0x20000c48
 800a3e4:	20001130 	.word	0x20001130
 800a3e8:	2000112c 	.word	0x2000112c

0800a3ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3f2:	4b28      	ldr	r3, [pc, #160]	@ (800a494 <vTaskSwitchContext+0xa8>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d003      	beq.n	800a402 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3fa:	4b27      	ldr	r3, [pc, #156]	@ (800a498 <vTaskSwitchContext+0xac>)
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a400:	e042      	b.n	800a488 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a402:	4b25      	ldr	r3, [pc, #148]	@ (800a498 <vTaskSwitchContext+0xac>)
 800a404:	2200      	movs	r2, #0
 800a406:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a408:	4b24      	ldr	r3, [pc, #144]	@ (800a49c <vTaskSwitchContext+0xb0>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	60fb      	str	r3, [r7, #12]
 800a40e:	e011      	b.n	800a434 <vTaskSwitchContext+0x48>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10b      	bne.n	800a42e <vTaskSwitchContext+0x42>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	607b      	str	r3, [r7, #4]
}
 800a428:	bf00      	nop
 800a42a:	bf00      	nop
 800a42c:	e7fd      	b.n	800a42a <vTaskSwitchContext+0x3e>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	3b01      	subs	r3, #1
 800a432:	60fb      	str	r3, [r7, #12]
 800a434:	491a      	ldr	r1, [pc, #104]	@ (800a4a0 <vTaskSwitchContext+0xb4>)
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	4613      	mov	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	4413      	add	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	440b      	add	r3, r1
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d0e3      	beq.n	800a410 <vTaskSwitchContext+0x24>
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	4613      	mov	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4413      	add	r3, r2
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	4a13      	ldr	r2, [pc, #76]	@ (800a4a0 <vTaskSwitchContext+0xb4>)
 800a454:	4413      	add	r3, r2
 800a456:	60bb      	str	r3, [r7, #8]
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	685a      	ldr	r2, [r3, #4]
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	605a      	str	r2, [r3, #4]
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	3308      	adds	r3, #8
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d104      	bne.n	800a478 <vTaskSwitchContext+0x8c>
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	605a      	str	r2, [r3, #4]
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	4a09      	ldr	r2, [pc, #36]	@ (800a4a4 <vTaskSwitchContext+0xb8>)
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	4a06      	ldr	r2, [pc, #24]	@ (800a49c <vTaskSwitchContext+0xb0>)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6013      	str	r3, [r2, #0]
}
 800a488:	bf00      	nop
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr
 800a494:	20001144 	.word	0x20001144
 800a498:	20001130 	.word	0x20001130
 800a49c:	20001124 	.word	0x20001124
 800a4a0:	20000c4c 	.word	0x20000c4c
 800a4a4:	20000c48 	.word	0x20000c48

0800a4a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10b      	bne.n	800a4d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4bc:	f383 8811 	msr	BASEPRI, r3
 800a4c0:	f3bf 8f6f 	isb	sy
 800a4c4:	f3bf 8f4f 	dsb	sy
 800a4c8:	60fb      	str	r3, [r7, #12]
}
 800a4ca:	bf00      	nop
 800a4cc:	bf00      	nop
 800a4ce:	e7fd      	b.n	800a4cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4d0:	4b07      	ldr	r3, [pc, #28]	@ (800a4f0 <vTaskPlaceOnEventList+0x48>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	3318      	adds	r3, #24
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7fe fe70 	bl	80091be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4de:	2101      	movs	r1, #1
 800a4e0:	6838      	ldr	r0, [r7, #0]
 800a4e2:	f000 fa81 	bl	800a9e8 <prvAddCurrentTaskToDelayedList>
}
 800a4e6:	bf00      	nop
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	20000c48 	.word	0x20000c48

0800a4f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10b      	bne.n	800a51e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	617b      	str	r3, [r7, #20]
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	e7fd      	b.n	800a51a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a51e:	4b0a      	ldr	r3, [pc, #40]	@ (800a548 <vTaskPlaceOnEventListRestricted+0x54>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	3318      	adds	r3, #24
 800a524:	4619      	mov	r1, r3
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f7fe fe25 	bl	8009176 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d002      	beq.n	800a538 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a532:	f04f 33ff 	mov.w	r3, #4294967295
 800a536:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a538:	6879      	ldr	r1, [r7, #4]
 800a53a:	68b8      	ldr	r0, [r7, #8]
 800a53c:	f000 fa54 	bl	800a9e8 <prvAddCurrentTaskToDelayedList>
	}
 800a540:	bf00      	nop
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	20000c48 	.word	0x20000c48

0800a54c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10b      	bne.n	800a57a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	60fb      	str	r3, [r7, #12]
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop
 800a578:	e7fd      	b.n	800a576 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	3318      	adds	r3, #24
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fe fe56 	bl	8009230 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a584:	4b1d      	ldr	r3, [pc, #116]	@ (800a5fc <xTaskRemoveFromEventList+0xb0>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d11d      	bne.n	800a5c8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	3304      	adds	r3, #4
 800a590:	4618      	mov	r0, r3
 800a592:	f7fe fe4d 	bl	8009230 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a59a:	4b19      	ldr	r3, [pc, #100]	@ (800a600 <xTaskRemoveFromEventList+0xb4>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d903      	bls.n	800a5aa <xTaskRemoveFromEventList+0x5e>
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a6:	4a16      	ldr	r2, [pc, #88]	@ (800a600 <xTaskRemoveFromEventList+0xb4>)
 800a5a8:	6013      	str	r3, [r2, #0]
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	4413      	add	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4a13      	ldr	r2, [pc, #76]	@ (800a604 <xTaskRemoveFromEventList+0xb8>)
 800a5b8:	441a      	add	r2, r3
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	3304      	adds	r3, #4
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	f7fe fdd8 	bl	8009176 <vListInsertEnd>
 800a5c6:	e005      	b.n	800a5d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	3318      	adds	r3, #24
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	480e      	ldr	r0, [pc, #56]	@ (800a608 <xTaskRemoveFromEventList+0xbc>)
 800a5d0:	f7fe fdd1 	bl	8009176 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a60c <xTaskRemoveFromEventList+0xc0>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d905      	bls.n	800a5ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a5e6:	4b0a      	ldr	r3, [pc, #40]	@ (800a610 <xTaskRemoveFromEventList+0xc4>)
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	601a      	str	r2, [r3, #0]
 800a5ec:	e001      	b.n	800a5f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a5f2:	697b      	ldr	r3, [r7, #20]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3718      	adds	r7, #24
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	20001144 	.word	0x20001144
 800a600:	20001124 	.word	0x20001124
 800a604:	20000c4c 	.word	0x20000c4c
 800a608:	200010dc 	.word	0x200010dc
 800a60c:	20000c48 	.word	0x20000c48
 800a610:	20001130 	.word	0x20001130

0800a614 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a61c:	4b06      	ldr	r3, [pc, #24]	@ (800a638 <vTaskInternalSetTimeOutState+0x24>)
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a624:	4b05      	ldr	r3, [pc, #20]	@ (800a63c <vTaskInternalSetTimeOutState+0x28>)
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	605a      	str	r2, [r3, #4]
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	20001134 	.word	0x20001134
 800a63c:	20001120 	.word	0x20001120

0800a640 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b088      	sub	sp, #32
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10b      	bne.n	800a668 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	613b      	str	r3, [r7, #16]
}
 800a662:	bf00      	nop
 800a664:	bf00      	nop
 800a666:	e7fd      	b.n	800a664 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10b      	bne.n	800a686 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	60fb      	str	r3, [r7, #12]
}
 800a680:	bf00      	nop
 800a682:	bf00      	nop
 800a684:	e7fd      	b.n	800a682 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a686:	f000 fe8f 	bl	800b3a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a68a:	4b1d      	ldr	r3, [pc, #116]	@ (800a700 <xTaskCheckForTimeOut+0xc0>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	69ba      	ldr	r2, [r7, #24]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a2:	d102      	bne.n	800a6aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	61fb      	str	r3, [r7, #28]
 800a6a8:	e023      	b.n	800a6f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	4b15      	ldr	r3, [pc, #84]	@ (800a704 <xTaskCheckForTimeOut+0xc4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d007      	beq.n	800a6c6 <xTaskCheckForTimeOut+0x86>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	69ba      	ldr	r2, [r7, #24]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d302      	bcc.n	800a6c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	61fb      	str	r3, [r7, #28]
 800a6c4:	e015      	b.n	800a6f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	697a      	ldr	r2, [r7, #20]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d20b      	bcs.n	800a6e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	1ad2      	subs	r2, r2, r3
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7ff ff99 	bl	800a614 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	61fb      	str	r3, [r7, #28]
 800a6e6:	e004      	b.n	800a6f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a6f2:	f000 fe8b 	bl	800b40c <vPortExitCritical>

	return xReturn;
 800a6f6:	69fb      	ldr	r3, [r7, #28]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3720      	adds	r7, #32
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	20001120 	.word	0x20001120
 800a704:	20001134 	.word	0x20001134

0800a708 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a708:	b480      	push	{r7}
 800a70a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a70c:	4b03      	ldr	r3, [pc, #12]	@ (800a71c <vTaskMissedYield+0x14>)
 800a70e:	2201      	movs	r2, #1
 800a710:	601a      	str	r2, [r3, #0]
}
 800a712:	bf00      	nop
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	20001130 	.word	0x20001130

0800a720 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a728:	f000 f852 	bl	800a7d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a72c:	4b06      	ldr	r3, [pc, #24]	@ (800a748 <prvIdleTask+0x28>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d9f9      	bls.n	800a728 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a734:	4b05      	ldr	r3, [pc, #20]	@ (800a74c <prvIdleTask+0x2c>)
 800a736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a73a:	601a      	str	r2, [r3, #0]
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a744:	e7f0      	b.n	800a728 <prvIdleTask+0x8>
 800a746:	bf00      	nop
 800a748:	20000c4c 	.word	0x20000c4c
 800a74c:	e000ed04 	.word	0xe000ed04

0800a750 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a756:	2300      	movs	r3, #0
 800a758:	607b      	str	r3, [r7, #4]
 800a75a:	e00c      	b.n	800a776 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	4613      	mov	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4a12      	ldr	r2, [pc, #72]	@ (800a7b0 <prvInitialiseTaskLists+0x60>)
 800a768:	4413      	add	r3, r2
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe fcd6 	bl	800911c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	3301      	adds	r3, #1
 800a774:	607b      	str	r3, [r7, #4]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2b37      	cmp	r3, #55	@ 0x37
 800a77a:	d9ef      	bls.n	800a75c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a77c:	480d      	ldr	r0, [pc, #52]	@ (800a7b4 <prvInitialiseTaskLists+0x64>)
 800a77e:	f7fe fccd 	bl	800911c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a782:	480d      	ldr	r0, [pc, #52]	@ (800a7b8 <prvInitialiseTaskLists+0x68>)
 800a784:	f7fe fcca 	bl	800911c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a788:	480c      	ldr	r0, [pc, #48]	@ (800a7bc <prvInitialiseTaskLists+0x6c>)
 800a78a:	f7fe fcc7 	bl	800911c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a78e:	480c      	ldr	r0, [pc, #48]	@ (800a7c0 <prvInitialiseTaskLists+0x70>)
 800a790:	f7fe fcc4 	bl	800911c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a794:	480b      	ldr	r0, [pc, #44]	@ (800a7c4 <prvInitialiseTaskLists+0x74>)
 800a796:	f7fe fcc1 	bl	800911c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a79a:	4b0b      	ldr	r3, [pc, #44]	@ (800a7c8 <prvInitialiseTaskLists+0x78>)
 800a79c:	4a05      	ldr	r2, [pc, #20]	@ (800a7b4 <prvInitialiseTaskLists+0x64>)
 800a79e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a7cc <prvInitialiseTaskLists+0x7c>)
 800a7a2:	4a05      	ldr	r2, [pc, #20]	@ (800a7b8 <prvInitialiseTaskLists+0x68>)
 800a7a4:	601a      	str	r2, [r3, #0]
}
 800a7a6:	bf00      	nop
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20000c4c 	.word	0x20000c4c
 800a7b4:	200010ac 	.word	0x200010ac
 800a7b8:	200010c0 	.word	0x200010c0
 800a7bc:	200010dc 	.word	0x200010dc
 800a7c0:	200010f0 	.word	0x200010f0
 800a7c4:	20001108 	.word	0x20001108
 800a7c8:	200010d4 	.word	0x200010d4
 800a7cc:	200010d8 	.word	0x200010d8

0800a7d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7d6:	e019      	b.n	800a80c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a7d8:	f000 fde6 	bl	800b3a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7dc:	4b10      	ldr	r3, [pc, #64]	@ (800a820 <prvCheckTasksWaitingTermination+0x50>)
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fe fd21 	bl	8009230 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a7ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a824 <prvCheckTasksWaitingTermination+0x54>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	4a0b      	ldr	r2, [pc, #44]	@ (800a824 <prvCheckTasksWaitingTermination+0x54>)
 800a7f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a828 <prvCheckTasksWaitingTermination+0x58>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	4a0a      	ldr	r2, [pc, #40]	@ (800a828 <prvCheckTasksWaitingTermination+0x58>)
 800a800:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a802:	f000 fe03 	bl	800b40c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f810 	bl	800a82c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a80c:	4b06      	ldr	r3, [pc, #24]	@ (800a828 <prvCheckTasksWaitingTermination+0x58>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1e1      	bne.n	800a7d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a814:	bf00      	nop
 800a816:	bf00      	nop
 800a818:	3708      	adds	r7, #8
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	200010f0 	.word	0x200010f0
 800a824:	2000111c 	.word	0x2000111c
 800a828:	20001104 	.word	0x20001104

0800a82c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d108      	bne.n	800a850 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a842:	4618      	mov	r0, r3
 800a844:	f000 ffa0 	bl	800b788 <vPortFree>
				vPortFree( pxTCB );
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 ff9d 	bl	800b788 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a84e:	e019      	b.n	800a884 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a856:	2b01      	cmp	r3, #1
 800a858:	d103      	bne.n	800a862 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 ff94 	bl	800b788 <vPortFree>
	}
 800a860:	e010      	b.n	800a884 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d00b      	beq.n	800a884 <prvDeleteTCB+0x58>
	__asm volatile
 800a86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	60fb      	str	r3, [r7, #12]
}
 800a87e:	bf00      	nop
 800a880:	bf00      	nop
 800a882:	e7fd      	b.n	800a880 <prvDeleteTCB+0x54>
	}
 800a884:	bf00      	nop
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a892:	4b0c      	ldr	r3, [pc, #48]	@ (800a8c4 <prvResetNextTaskUnblockTime+0x38>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d104      	bne.n	800a8a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a89c:	4b0a      	ldr	r3, [pc, #40]	@ (800a8c8 <prvResetNextTaskUnblockTime+0x3c>)
 800a89e:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8a4:	e008      	b.n	800a8b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8a6:	4b07      	ldr	r3, [pc, #28]	@ (800a8c4 <prvResetNextTaskUnblockTime+0x38>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	4a04      	ldr	r2, [pc, #16]	@ (800a8c8 <prvResetNextTaskUnblockTime+0x3c>)
 800a8b6:	6013      	str	r3, [r2, #0]
}
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	200010d4 	.word	0x200010d4
 800a8c8:	2000113c 	.word	0x2000113c

0800a8cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a8d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a900 <xTaskGetSchedulerState+0x34>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d102      	bne.n	800a8e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	607b      	str	r3, [r7, #4]
 800a8de:	e008      	b.n	800a8f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8e0:	4b08      	ldr	r3, [pc, #32]	@ (800a904 <xTaskGetSchedulerState+0x38>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d102      	bne.n	800a8ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	607b      	str	r3, [r7, #4]
 800a8ec:	e001      	b.n	800a8f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a8f2:	687b      	ldr	r3, [r7, #4]
	}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	20001128 	.word	0x20001128
 800a904:	20001144 	.word	0x20001144

0800a908 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a914:	2300      	movs	r3, #0
 800a916:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d058      	beq.n	800a9d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a91e:	4b2f      	ldr	r3, [pc, #188]	@ (800a9dc <xTaskPriorityDisinherit+0xd4>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	693a      	ldr	r2, [r7, #16]
 800a924:	429a      	cmp	r2, r3
 800a926:	d00b      	beq.n	800a940 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	60fb      	str	r3, [r7, #12]
}
 800a93a:	bf00      	nop
 800a93c:	bf00      	nop
 800a93e:	e7fd      	b.n	800a93c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10b      	bne.n	800a960 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94c:	f383 8811 	msr	BASEPRI, r3
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	60bb      	str	r3, [r7, #8]
}
 800a95a:	bf00      	nop
 800a95c:	bf00      	nop
 800a95e:	e7fd      	b.n	800a95c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a964:	1e5a      	subs	r2, r3, #1
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a972:	429a      	cmp	r2, r3
 800a974:	d02c      	beq.n	800a9d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d128      	bne.n	800a9d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	3304      	adds	r3, #4
 800a982:	4618      	mov	r0, r3
 800a984:	f7fe fc54 	bl	8009230 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a994:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a9e0 <xTaskPriorityDisinherit+0xd8>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d903      	bls.n	800a9b0 <xTaskPriorityDisinherit+0xa8>
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ac:	4a0c      	ldr	r2, [pc, #48]	@ (800a9e0 <xTaskPriorityDisinherit+0xd8>)
 800a9ae:	6013      	str	r3, [r2, #0]
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4413      	add	r3, r2
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4a09      	ldr	r2, [pc, #36]	@ (800a9e4 <xTaskPriorityDisinherit+0xdc>)
 800a9be:	441a      	add	r2, r3
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4610      	mov	r0, r2
 800a9c8:	f7fe fbd5 	bl	8009176 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a9d0:	697b      	ldr	r3, [r7, #20]
	}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3718      	adds	r7, #24
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	20000c48 	.word	0x20000c48
 800a9e0:	20001124 	.word	0x20001124
 800a9e4:	20000c4c 	.word	0x20000c4c

0800a9e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a9f2:	4b21      	ldr	r3, [pc, #132]	@ (800aa78 <prvAddCurrentTaskToDelayedList+0x90>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9f8:	4b20      	ldr	r3, [pc, #128]	@ (800aa7c <prvAddCurrentTaskToDelayedList+0x94>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe fc16 	bl	8009230 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0a:	d10a      	bne.n	800aa22 <prvAddCurrentTaskToDelayedList+0x3a>
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d007      	beq.n	800aa22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa12:	4b1a      	ldr	r3, [pc, #104]	@ (800aa7c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	3304      	adds	r3, #4
 800aa18:	4619      	mov	r1, r3
 800aa1a:	4819      	ldr	r0, [pc, #100]	@ (800aa80 <prvAddCurrentTaskToDelayedList+0x98>)
 800aa1c:	f7fe fbab 	bl	8009176 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa20:	e026      	b.n	800aa70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4413      	add	r3, r2
 800aa28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa2a:	4b14      	ldr	r3, [pc, #80]	@ (800aa7c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d209      	bcs.n	800aa4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa3a:	4b12      	ldr	r3, [pc, #72]	@ (800aa84 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	4b0f      	ldr	r3, [pc, #60]	@ (800aa7c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3304      	adds	r3, #4
 800aa44:	4619      	mov	r1, r3
 800aa46:	4610      	mov	r0, r2
 800aa48:	f7fe fbb9 	bl	80091be <vListInsert>
}
 800aa4c:	e010      	b.n	800aa70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa4e:	4b0e      	ldr	r3, [pc, #56]	@ (800aa88 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	4b0a      	ldr	r3, [pc, #40]	@ (800aa7c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	3304      	adds	r3, #4
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4610      	mov	r0, r2
 800aa5c:	f7fe fbaf 	bl	80091be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa60:	4b0a      	ldr	r3, [pc, #40]	@ (800aa8c <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d202      	bcs.n	800aa70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa6a:	4a08      	ldr	r2, [pc, #32]	@ (800aa8c <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	6013      	str	r3, [r2, #0]
}
 800aa70:	bf00      	nop
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	20001120 	.word	0x20001120
 800aa7c:	20000c48 	.word	0x20000c48
 800aa80:	20001108 	.word	0x20001108
 800aa84:	200010d8 	.word	0x200010d8
 800aa88:	200010d4 	.word	0x200010d4
 800aa8c:	2000113c 	.word	0x2000113c

0800aa90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b08a      	sub	sp, #40	@ 0x28
 800aa94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa96:	2300      	movs	r3, #0
 800aa98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa9a:	f000 fb13 	bl	800b0c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa9e:	4b1d      	ldr	r3, [pc, #116]	@ (800ab14 <xTimerCreateTimerTask+0x84>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d021      	beq.n	800aaea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aaae:	1d3a      	adds	r2, r7, #4
 800aab0:	f107 0108 	add.w	r1, r7, #8
 800aab4:	f107 030c 	add.w	r3, r7, #12
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fe fb15 	bl	80090e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aabe:	6879      	ldr	r1, [r7, #4]
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	9202      	str	r2, [sp, #8]
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	2302      	movs	r3, #2
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	2300      	movs	r3, #0
 800aace:	460a      	mov	r2, r1
 800aad0:	4911      	ldr	r1, [pc, #68]	@ (800ab18 <xTimerCreateTimerTask+0x88>)
 800aad2:	4812      	ldr	r0, [pc, #72]	@ (800ab1c <xTimerCreateTimerTask+0x8c>)
 800aad4:	f7ff f8d0 	bl	8009c78 <xTaskCreateStatic>
 800aad8:	4603      	mov	r3, r0
 800aada:	4a11      	ldr	r2, [pc, #68]	@ (800ab20 <xTimerCreateTimerTask+0x90>)
 800aadc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aade:	4b10      	ldr	r3, [pc, #64]	@ (800ab20 <xTimerCreateTimerTask+0x90>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aae6:	2301      	movs	r3, #1
 800aae8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10b      	bne.n	800ab08 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	613b      	str	r3, [r7, #16]
}
 800ab02:	bf00      	nop
 800ab04:	bf00      	nop
 800ab06:	e7fd      	b.n	800ab04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ab08:	697b      	ldr	r3, [r7, #20]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3718      	adds	r7, #24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20001178 	.word	0x20001178
 800ab18:	080105d0 	.word	0x080105d0
 800ab1c:	0800ac5d 	.word	0x0800ac5d
 800ab20:	2000117c 	.word	0x2000117c

0800ab24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b08a      	sub	sp, #40	@ 0x28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
 800ab30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab32:	2300      	movs	r3, #0
 800ab34:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10b      	bne.n	800ab54 <xTimerGenericCommand+0x30>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	623b      	str	r3, [r7, #32]
}
 800ab4e:	bf00      	nop
 800ab50:	bf00      	nop
 800ab52:	e7fd      	b.n	800ab50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ab54:	4b19      	ldr	r3, [pc, #100]	@ (800abbc <xTimerGenericCommand+0x98>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d02a      	beq.n	800abb2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	2b05      	cmp	r3, #5
 800ab6c:	dc18      	bgt.n	800aba0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab6e:	f7ff fead 	bl	800a8cc <xTaskGetSchedulerState>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d109      	bne.n	800ab8c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab78:	4b10      	ldr	r3, [pc, #64]	@ (800abbc <xTimerGenericCommand+0x98>)
 800ab7a:	6818      	ldr	r0, [r3, #0]
 800ab7c:	f107 0110 	add.w	r1, r7, #16
 800ab80:	2300      	movs	r3, #0
 800ab82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab84:	f7fe fc88 	bl	8009498 <xQueueGenericSend>
 800ab88:	6278      	str	r0, [r7, #36]	@ 0x24
 800ab8a:	e012      	b.n	800abb2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab8c:	4b0b      	ldr	r3, [pc, #44]	@ (800abbc <xTimerGenericCommand+0x98>)
 800ab8e:	6818      	ldr	r0, [r3, #0]
 800ab90:	f107 0110 	add.w	r1, r7, #16
 800ab94:	2300      	movs	r3, #0
 800ab96:	2200      	movs	r2, #0
 800ab98:	f7fe fc7e 	bl	8009498 <xQueueGenericSend>
 800ab9c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ab9e:	e008      	b.n	800abb2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aba0:	4b06      	ldr	r3, [pc, #24]	@ (800abbc <xTimerGenericCommand+0x98>)
 800aba2:	6818      	ldr	r0, [r3, #0]
 800aba4:	f107 0110 	add.w	r1, r7, #16
 800aba8:	2300      	movs	r3, #0
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	f7fe fd76 	bl	800969c <xQueueGenericSendFromISR>
 800abb0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800abb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3728      	adds	r7, #40	@ 0x28
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	20001178 	.word	0x20001178

0800abc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b088      	sub	sp, #32
 800abc4:	af02      	add	r7, sp, #8
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abca:	4b23      	ldr	r3, [pc, #140]	@ (800ac58 <prvProcessExpiredTimer+0x98>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	3304      	adds	r3, #4
 800abd8:	4618      	mov	r0, r3
 800abda:	f7fe fb29 	bl	8009230 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abe4:	f003 0304 	and.w	r3, r3, #4
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d023      	beq.n	800ac34 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	699a      	ldr	r2, [r3, #24]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	18d1      	adds	r1, r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	6978      	ldr	r0, [r7, #20]
 800abfa:	f000 f8d5 	bl	800ada8 <prvInsertTimerInActiveList>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d020      	beq.n	800ac46 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac04:	2300      	movs	r3, #0
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	2300      	movs	r3, #0
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	6978      	ldr	r0, [r7, #20]
 800ac10:	f7ff ff88 	bl	800ab24 <xTimerGenericCommand>
 800ac14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d114      	bne.n	800ac46 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ac1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	60fb      	str	r3, [r7, #12]
}
 800ac2e:	bf00      	nop
 800ac30:	bf00      	nop
 800ac32:	e7fd      	b.n	800ac30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac3a:	f023 0301 	bic.w	r3, r3, #1
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	6978      	ldr	r0, [r7, #20]
 800ac4c:	4798      	blx	r3
}
 800ac4e:	bf00      	nop
 800ac50:	3718      	adds	r7, #24
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	20001170 	.word	0x20001170

0800ac5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac64:	f107 0308 	add.w	r3, r7, #8
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f000 f859 	bl	800ad20 <prvGetNextExpireTime>
 800ac6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	4619      	mov	r1, r3
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f000 f805 	bl	800ac84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac7a:	f000 f8d7 	bl	800ae2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac7e:	bf00      	nop
 800ac80:	e7f0      	b.n	800ac64 <prvTimerTask+0x8>
	...

0800ac84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac8e:	f7ff fa37 	bl	800a100 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac92:	f107 0308 	add.w	r3, r7, #8
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 f866 	bl	800ad68 <prvSampleTimeNow>
 800ac9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d130      	bne.n	800ad06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10a      	bne.n	800acc0 <prvProcessTimerOrBlockTask+0x3c>
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d806      	bhi.n	800acc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800acb2:	f7ff fa33 	bl	800a11c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800acb6:	68f9      	ldr	r1, [r7, #12]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f7ff ff81 	bl	800abc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800acbe:	e024      	b.n	800ad0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d008      	beq.n	800acd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800acc6:	4b13      	ldr	r3, [pc, #76]	@ (800ad14 <prvProcessTimerOrBlockTask+0x90>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d101      	bne.n	800acd4 <prvProcessTimerOrBlockTask+0x50>
 800acd0:	2301      	movs	r3, #1
 800acd2:	e000      	b.n	800acd6 <prvProcessTimerOrBlockTask+0x52>
 800acd4:	2300      	movs	r3, #0
 800acd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800acd8:	4b0f      	ldr	r3, [pc, #60]	@ (800ad18 <prvProcessTimerOrBlockTask+0x94>)
 800acda:	6818      	ldr	r0, [r3, #0]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	4619      	mov	r1, r3
 800ace6:	f7fe ff93 	bl	8009c10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800acea:	f7ff fa17 	bl	800a11c <xTaskResumeAll>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10a      	bne.n	800ad0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800acf4:	4b09      	ldr	r3, [pc, #36]	@ (800ad1c <prvProcessTimerOrBlockTask+0x98>)
 800acf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acfa:	601a      	str	r2, [r3, #0]
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	f3bf 8f6f 	isb	sy
}
 800ad04:	e001      	b.n	800ad0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ad06:	f7ff fa09 	bl	800a11c <xTaskResumeAll>
}
 800ad0a:	bf00      	nop
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	20001174 	.word	0x20001174
 800ad18:	20001178 	.word	0x20001178
 800ad1c:	e000ed04 	.word	0xe000ed04

0800ad20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad28:	4b0e      	ldr	r3, [pc, #56]	@ (800ad64 <prvGetNextExpireTime+0x44>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d101      	bne.n	800ad36 <prvGetNextExpireTime+0x16>
 800ad32:	2201      	movs	r2, #1
 800ad34:	e000      	b.n	800ad38 <prvGetNextExpireTime+0x18>
 800ad36:	2200      	movs	r2, #0
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d105      	bne.n	800ad50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad44:	4b07      	ldr	r3, [pc, #28]	@ (800ad64 <prvGetNextExpireTime+0x44>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	60fb      	str	r3, [r7, #12]
 800ad4e:	e001      	b.n	800ad54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad50:	2300      	movs	r3, #0
 800ad52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ad54:	68fb      	ldr	r3, [r7, #12]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	20001170 	.word	0x20001170

0800ad68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad70:	f7ff fa72 	bl	800a258 <xTaskGetTickCount>
 800ad74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad76:	4b0b      	ldr	r3, [pc, #44]	@ (800ada4 <prvSampleTimeNow+0x3c>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d205      	bcs.n	800ad8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad80:	f000 f93a 	bl	800aff8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2201      	movs	r2, #1
 800ad88:	601a      	str	r2, [r3, #0]
 800ad8a:	e002      	b.n	800ad92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad92:	4a04      	ldr	r2, [pc, #16]	@ (800ada4 <prvSampleTimeNow+0x3c>)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad98:	68fb      	ldr	r3, [r7, #12]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	20001180 	.word	0x20001180

0800ada8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800adb6:	2300      	movs	r3, #0
 800adb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d812      	bhi.n	800adf4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	1ad2      	subs	r2, r2, r3
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	429a      	cmp	r2, r3
 800adda:	d302      	bcc.n	800ade2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800addc:	2301      	movs	r3, #1
 800adde:	617b      	str	r3, [r7, #20]
 800ade0:	e01b      	b.n	800ae1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ade2:	4b10      	ldr	r3, [pc, #64]	@ (800ae24 <prvInsertTimerInActiveList+0x7c>)
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	3304      	adds	r3, #4
 800adea:	4619      	mov	r1, r3
 800adec:	4610      	mov	r0, r2
 800adee:	f7fe f9e6 	bl	80091be <vListInsert>
 800adf2:	e012      	b.n	800ae1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d206      	bcs.n	800ae0a <prvInsertTimerInActiveList+0x62>
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d302      	bcc.n	800ae0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ae04:	2301      	movs	r3, #1
 800ae06:	617b      	str	r3, [r7, #20]
 800ae08:	e007      	b.n	800ae1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae0a:	4b07      	ldr	r3, [pc, #28]	@ (800ae28 <prvInsertTimerInActiveList+0x80>)
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	3304      	adds	r3, #4
 800ae12:	4619      	mov	r1, r3
 800ae14:	4610      	mov	r0, r2
 800ae16:	f7fe f9d2 	bl	80091be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae1a:	697b      	ldr	r3, [r7, #20]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3718      	adds	r7, #24
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	20001174 	.word	0x20001174
 800ae28:	20001170 	.word	0x20001170

0800ae2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b08e      	sub	sp, #56	@ 0x38
 800ae30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae32:	e0ce      	b.n	800afd2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	da19      	bge.n	800ae6e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae3a:	1d3b      	adds	r3, r7, #4
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10b      	bne.n	800ae5e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ae46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae4a:	f383 8811 	msr	BASEPRI, r3
 800ae4e:	f3bf 8f6f 	isb	sy
 800ae52:	f3bf 8f4f 	dsb	sy
 800ae56:	61fb      	str	r3, [r7, #28]
}
 800ae58:	bf00      	nop
 800ae5a:	bf00      	nop
 800ae5c:	e7fd      	b.n	800ae5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ae5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae64:	6850      	ldr	r0, [r2, #4]
 800ae66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae68:	6892      	ldr	r2, [r2, #8]
 800ae6a:	4611      	mov	r1, r2
 800ae6c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f2c0 80ae 	blt.w	800afd2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae7c:	695b      	ldr	r3, [r3, #20]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d004      	beq.n	800ae8c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae84:	3304      	adds	r3, #4
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fe f9d2 	bl	8009230 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae8c:	463b      	mov	r3, r7
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7ff ff6a 	bl	800ad68 <prvSampleTimeNow>
 800ae94:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2b09      	cmp	r3, #9
 800ae9a:	f200 8097 	bhi.w	800afcc <prvProcessReceivedCommands+0x1a0>
 800ae9e:	a201      	add	r2, pc, #4	@ (adr r2, 800aea4 <prvProcessReceivedCommands+0x78>)
 800aea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea4:	0800aecd 	.word	0x0800aecd
 800aea8:	0800aecd 	.word	0x0800aecd
 800aeac:	0800aecd 	.word	0x0800aecd
 800aeb0:	0800af43 	.word	0x0800af43
 800aeb4:	0800af57 	.word	0x0800af57
 800aeb8:	0800afa3 	.word	0x0800afa3
 800aebc:	0800aecd 	.word	0x0800aecd
 800aec0:	0800aecd 	.word	0x0800aecd
 800aec4:	0800af43 	.word	0x0800af43
 800aec8:	0800af57 	.word	0x0800af57
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aece:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aed2:	f043 0301 	orr.w	r3, r3, #1
 800aed6:	b2da      	uxtb	r2, r3
 800aed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee2:	699b      	ldr	r3, [r3, #24]
 800aee4:	18d1      	adds	r1, r2, r3
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aeec:	f7ff ff5c 	bl	800ada8 <prvInsertTimerInActiveList>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d06c      	beq.n	800afd0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef8:	6a1b      	ldr	r3, [r3, #32]
 800aefa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aefc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af04:	f003 0304 	and.w	r3, r3, #4
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d061      	beq.n	800afd0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	441a      	add	r2, r3
 800af14:	2300      	movs	r3, #0
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	2300      	movs	r3, #0
 800af1a:	2100      	movs	r1, #0
 800af1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af1e:	f7ff fe01 	bl	800ab24 <xTimerGenericCommand>
 800af22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af24:	6a3b      	ldr	r3, [r7, #32]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d152      	bne.n	800afd0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	61bb      	str	r3, [r7, #24]
}
 800af3c:	bf00      	nop
 800af3e:	bf00      	nop
 800af40:	e7fd      	b.n	800af3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af48:	f023 0301 	bic.w	r3, r3, #1
 800af4c:	b2da      	uxtb	r2, r3
 800af4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800af54:	e03d      	b.n	800afd2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af5c:	f043 0301 	orr.w	r3, r3, #1
 800af60:	b2da      	uxtb	r2, r3
 800af62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10b      	bne.n	800af8e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	617b      	str	r3, [r7, #20]
}
 800af88:	bf00      	nop
 800af8a:	bf00      	nop
 800af8c:	e7fd      	b.n	800af8a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af90:	699a      	ldr	r2, [r3, #24]
 800af92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af94:	18d1      	adds	r1, r2, r3
 800af96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af9c:	f7ff ff04 	bl	800ada8 <prvInsertTimerInActiveList>
					break;
 800afa0:	e017      	b.n	800afd2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800afa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afa8:	f003 0302 	and.w	r3, r3, #2
 800afac:	2b00      	cmp	r3, #0
 800afae:	d103      	bne.n	800afb8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800afb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afb2:	f000 fbe9 	bl	800b788 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800afb6:	e00c      	b.n	800afd2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afbe:	f023 0301 	bic.w	r3, r3, #1
 800afc2:	b2da      	uxtb	r2, r3
 800afc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800afca:	e002      	b.n	800afd2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800afcc:	bf00      	nop
 800afce:	e000      	b.n	800afd2 <prvProcessReceivedCommands+0x1a6>
					break;
 800afd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afd2:	4b08      	ldr	r3, [pc, #32]	@ (800aff4 <prvProcessReceivedCommands+0x1c8>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	1d39      	adds	r1, r7, #4
 800afd8:	2200      	movs	r2, #0
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fe fbfc 	bl	80097d8 <xQueueReceive>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f47f af26 	bne.w	800ae34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800afe8:	bf00      	nop
 800afea:	bf00      	nop
 800afec:	3730      	adds	r7, #48	@ 0x30
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	20001178 	.word	0x20001178

0800aff8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b088      	sub	sp, #32
 800affc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800affe:	e049      	b.n	800b094 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b000:	4b2e      	ldr	r3, [pc, #184]	@ (800b0bc <prvSwitchTimerLists+0xc4>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b00a:	4b2c      	ldr	r3, [pc, #176]	@ (800b0bc <prvSwitchTimerLists+0xc4>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	3304      	adds	r3, #4
 800b018:	4618      	mov	r0, r3
 800b01a:	f7fe f909 	bl	8009230 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b02c:	f003 0304 	and.w	r3, r3, #4
 800b030:	2b00      	cmp	r3, #0
 800b032:	d02f      	beq.n	800b094 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	693a      	ldr	r2, [r7, #16]
 800b03a:	4413      	add	r3, r2
 800b03c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	429a      	cmp	r2, r3
 800b044:	d90e      	bls.n	800b064 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	68fa      	ldr	r2, [r7, #12]
 800b050:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b052:	4b1a      	ldr	r3, [pc, #104]	@ (800b0bc <prvSwitchTimerLists+0xc4>)
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	3304      	adds	r3, #4
 800b05a:	4619      	mov	r1, r3
 800b05c:	4610      	mov	r0, r2
 800b05e:	f7fe f8ae 	bl	80091be <vListInsert>
 800b062:	e017      	b.n	800b094 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b064:	2300      	movs	r3, #0
 800b066:	9300      	str	r3, [sp, #0]
 800b068:	2300      	movs	r3, #0
 800b06a:	693a      	ldr	r2, [r7, #16]
 800b06c:	2100      	movs	r1, #0
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f7ff fd58 	bl	800ab24 <xTimerGenericCommand>
 800b074:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10b      	bne.n	800b094 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b080:	f383 8811 	msr	BASEPRI, r3
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	603b      	str	r3, [r7, #0]
}
 800b08e:	bf00      	nop
 800b090:	bf00      	nop
 800b092:	e7fd      	b.n	800b090 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b094:	4b09      	ldr	r3, [pc, #36]	@ (800b0bc <prvSwitchTimerLists+0xc4>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1b0      	bne.n	800b000 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b09e:	4b07      	ldr	r3, [pc, #28]	@ (800b0bc <prvSwitchTimerLists+0xc4>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b0a4:	4b06      	ldr	r3, [pc, #24]	@ (800b0c0 <prvSwitchTimerLists+0xc8>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a04      	ldr	r2, [pc, #16]	@ (800b0bc <prvSwitchTimerLists+0xc4>)
 800b0aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b0ac:	4a04      	ldr	r2, [pc, #16]	@ (800b0c0 <prvSwitchTimerLists+0xc8>)
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	6013      	str	r3, [r2, #0]
}
 800b0b2:	bf00      	nop
 800b0b4:	3718      	adds	r7, #24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20001170 	.word	0x20001170
 800b0c0:	20001174 	.word	0x20001174

0800b0c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b0ca:	f000 f96d 	bl	800b3a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b0ce:	4b15      	ldr	r3, [pc, #84]	@ (800b124 <prvCheckForValidListAndQueue+0x60>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d120      	bne.n	800b118 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b0d6:	4814      	ldr	r0, [pc, #80]	@ (800b128 <prvCheckForValidListAndQueue+0x64>)
 800b0d8:	f7fe f820 	bl	800911c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b0dc:	4813      	ldr	r0, [pc, #76]	@ (800b12c <prvCheckForValidListAndQueue+0x68>)
 800b0de:	f7fe f81d 	bl	800911c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b0e2:	4b13      	ldr	r3, [pc, #76]	@ (800b130 <prvCheckForValidListAndQueue+0x6c>)
 800b0e4:	4a10      	ldr	r2, [pc, #64]	@ (800b128 <prvCheckForValidListAndQueue+0x64>)
 800b0e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b0e8:	4b12      	ldr	r3, [pc, #72]	@ (800b134 <prvCheckForValidListAndQueue+0x70>)
 800b0ea:	4a10      	ldr	r2, [pc, #64]	@ (800b12c <prvCheckForValidListAndQueue+0x68>)
 800b0ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	4b11      	ldr	r3, [pc, #68]	@ (800b138 <prvCheckForValidListAndQueue+0x74>)
 800b0f4:	4a11      	ldr	r2, [pc, #68]	@ (800b13c <prvCheckForValidListAndQueue+0x78>)
 800b0f6:	2110      	movs	r1, #16
 800b0f8:	200a      	movs	r0, #10
 800b0fa:	f7fe f92d 	bl	8009358 <xQueueGenericCreateStatic>
 800b0fe:	4603      	mov	r3, r0
 800b100:	4a08      	ldr	r2, [pc, #32]	@ (800b124 <prvCheckForValidListAndQueue+0x60>)
 800b102:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b104:	4b07      	ldr	r3, [pc, #28]	@ (800b124 <prvCheckForValidListAndQueue+0x60>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d005      	beq.n	800b118 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b10c:	4b05      	ldr	r3, [pc, #20]	@ (800b124 <prvCheckForValidListAndQueue+0x60>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	490b      	ldr	r1, [pc, #44]	@ (800b140 <prvCheckForValidListAndQueue+0x7c>)
 800b112:	4618      	mov	r0, r3
 800b114:	f7fe fd52 	bl	8009bbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b118:	f000 f978 	bl	800b40c <vPortExitCritical>
}
 800b11c:	bf00      	nop
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	20001178 	.word	0x20001178
 800b128:	20001148 	.word	0x20001148
 800b12c:	2000115c 	.word	0x2000115c
 800b130:	20001170 	.word	0x20001170
 800b134:	20001174 	.word	0x20001174
 800b138:	20001224 	.word	0x20001224
 800b13c:	20001184 	.word	0x20001184
 800b140:	080105d8 	.word	0x080105d8

0800b144 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	3b04      	subs	r3, #4
 800b154:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b15c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	3b04      	subs	r3, #4
 800b162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	f023 0201 	bic.w	r2, r3, #1
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	3b04      	subs	r3, #4
 800b172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b174:	4a0c      	ldr	r2, [pc, #48]	@ (800b1a8 <pxPortInitialiseStack+0x64>)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	3b14      	subs	r3, #20
 800b17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3b04      	subs	r3, #4
 800b18a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f06f 0202 	mvn.w	r2, #2
 800b192:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	3b20      	subs	r3, #32
 800b198:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b19a:	68fb      	ldr	r3, [r7, #12]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3714      	adds	r7, #20
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr
 800b1a8:	0800b1ad 	.word	0x0800b1ad

0800b1ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1b6:	4b13      	ldr	r3, [pc, #76]	@ (800b204 <prvTaskExitError+0x58>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1be:	d00b      	beq.n	800b1d8 <prvTaskExitError+0x2c>
	__asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	60fb      	str	r3, [r7, #12]
}
 800b1d2:	bf00      	nop
 800b1d4:	bf00      	nop
 800b1d6:	e7fd      	b.n	800b1d4 <prvTaskExitError+0x28>
	__asm volatile
 800b1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1dc:	f383 8811 	msr	BASEPRI, r3
 800b1e0:	f3bf 8f6f 	isb	sy
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	60bb      	str	r3, [r7, #8]
}
 800b1ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b1ec:	bf00      	nop
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d0fc      	beq.n	800b1ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b1f4:	bf00      	nop
 800b1f6:	bf00      	nop
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	20000014 	.word	0x20000014
	...

0800b210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b210:	4b07      	ldr	r3, [pc, #28]	@ (800b230 <pxCurrentTCBConst2>)
 800b212:	6819      	ldr	r1, [r3, #0]
 800b214:	6808      	ldr	r0, [r1, #0]
 800b216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21a:	f380 8809 	msr	PSP, r0
 800b21e:	f3bf 8f6f 	isb	sy
 800b222:	f04f 0000 	mov.w	r0, #0
 800b226:	f380 8811 	msr	BASEPRI, r0
 800b22a:	4770      	bx	lr
 800b22c:	f3af 8000 	nop.w

0800b230 <pxCurrentTCBConst2>:
 800b230:	20000c48 	.word	0x20000c48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b234:	bf00      	nop
 800b236:	bf00      	nop

0800b238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b238:	4808      	ldr	r0, [pc, #32]	@ (800b25c <prvPortStartFirstTask+0x24>)
 800b23a:	6800      	ldr	r0, [r0, #0]
 800b23c:	6800      	ldr	r0, [r0, #0]
 800b23e:	f380 8808 	msr	MSP, r0
 800b242:	f04f 0000 	mov.w	r0, #0
 800b246:	f380 8814 	msr	CONTROL, r0
 800b24a:	b662      	cpsie	i
 800b24c:	b661      	cpsie	f
 800b24e:	f3bf 8f4f 	dsb	sy
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	df00      	svc	0
 800b258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b25a:	bf00      	nop
 800b25c:	e000ed08 	.word	0xe000ed08

0800b260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b266:	4b47      	ldr	r3, [pc, #284]	@ (800b384 <xPortStartScheduler+0x124>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a47      	ldr	r2, [pc, #284]	@ (800b388 <xPortStartScheduler+0x128>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d10b      	bne.n	800b288 <xPortStartScheduler+0x28>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	613b      	str	r3, [r7, #16]
}
 800b282:	bf00      	nop
 800b284:	bf00      	nop
 800b286:	e7fd      	b.n	800b284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b288:	4b3e      	ldr	r3, [pc, #248]	@ (800b384 <xPortStartScheduler+0x124>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a3f      	ldr	r2, [pc, #252]	@ (800b38c <xPortStartScheduler+0x12c>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d10b      	bne.n	800b2aa <xPortStartScheduler+0x4a>
	__asm volatile
 800b292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b296:	f383 8811 	msr	BASEPRI, r3
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	60fb      	str	r3, [r7, #12]
}
 800b2a4:	bf00      	nop
 800b2a6:	bf00      	nop
 800b2a8:	e7fd      	b.n	800b2a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b2aa:	4b39      	ldr	r3, [pc, #228]	@ (800b390 <xPortStartScheduler+0x130>)
 800b2ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	22ff      	movs	r2, #255	@ 0xff
 800b2ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2c4:	78fb      	ldrb	r3, [r7, #3]
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b2cc:	b2da      	uxtb	r2, r3
 800b2ce:	4b31      	ldr	r3, [pc, #196]	@ (800b394 <xPortStartScheduler+0x134>)
 800b2d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b2d2:	4b31      	ldr	r3, [pc, #196]	@ (800b398 <xPortStartScheduler+0x138>)
 800b2d4:	2207      	movs	r2, #7
 800b2d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2d8:	e009      	b.n	800b2ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b2da:	4b2f      	ldr	r3, [pc, #188]	@ (800b398 <xPortStartScheduler+0x138>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	4a2d      	ldr	r2, [pc, #180]	@ (800b398 <xPortStartScheduler+0x138>)
 800b2e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2e4:	78fb      	ldrb	r3, [r7, #3]
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	005b      	lsls	r3, r3, #1
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2ee:	78fb      	ldrb	r3, [r7, #3]
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2f6:	2b80      	cmp	r3, #128	@ 0x80
 800b2f8:	d0ef      	beq.n	800b2da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2fa:	4b27      	ldr	r3, [pc, #156]	@ (800b398 <xPortStartScheduler+0x138>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f1c3 0307 	rsb	r3, r3, #7
 800b302:	2b04      	cmp	r3, #4
 800b304:	d00b      	beq.n	800b31e <xPortStartScheduler+0xbe>
	__asm volatile
 800b306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b30a:	f383 8811 	msr	BASEPRI, r3
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	f3bf 8f4f 	dsb	sy
 800b316:	60bb      	str	r3, [r7, #8]
}
 800b318:	bf00      	nop
 800b31a:	bf00      	nop
 800b31c:	e7fd      	b.n	800b31a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b31e:	4b1e      	ldr	r3, [pc, #120]	@ (800b398 <xPortStartScheduler+0x138>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	021b      	lsls	r3, r3, #8
 800b324:	4a1c      	ldr	r2, [pc, #112]	@ (800b398 <xPortStartScheduler+0x138>)
 800b326:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b328:	4b1b      	ldr	r3, [pc, #108]	@ (800b398 <xPortStartScheduler+0x138>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b330:	4a19      	ldr	r2, [pc, #100]	@ (800b398 <xPortStartScheduler+0x138>)
 800b332:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	b2da      	uxtb	r2, r3
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b33c:	4b17      	ldr	r3, [pc, #92]	@ (800b39c <xPortStartScheduler+0x13c>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a16      	ldr	r2, [pc, #88]	@ (800b39c <xPortStartScheduler+0x13c>)
 800b342:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b346:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b348:	4b14      	ldr	r3, [pc, #80]	@ (800b39c <xPortStartScheduler+0x13c>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a13      	ldr	r2, [pc, #76]	@ (800b39c <xPortStartScheduler+0x13c>)
 800b34e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b352:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b354:	f000 f8da 	bl	800b50c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b358:	4b11      	ldr	r3, [pc, #68]	@ (800b3a0 <xPortStartScheduler+0x140>)
 800b35a:	2200      	movs	r2, #0
 800b35c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b35e:	f000 f8f9 	bl	800b554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b362:	4b10      	ldr	r3, [pc, #64]	@ (800b3a4 <xPortStartScheduler+0x144>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a0f      	ldr	r2, [pc, #60]	@ (800b3a4 <xPortStartScheduler+0x144>)
 800b368:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b36c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b36e:	f7ff ff63 	bl	800b238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b372:	f7ff f83b 	bl	800a3ec <vTaskSwitchContext>
	prvTaskExitError();
 800b376:	f7ff ff19 	bl	800b1ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3718      	adds	r7, #24
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	e000ed00 	.word	0xe000ed00
 800b388:	410fc271 	.word	0x410fc271
 800b38c:	410fc270 	.word	0x410fc270
 800b390:	e000e400 	.word	0xe000e400
 800b394:	20001274 	.word	0x20001274
 800b398:	20001278 	.word	0x20001278
 800b39c:	e000ed20 	.word	0xe000ed20
 800b3a0:	20000014 	.word	0x20000014
 800b3a4:	e000ef34 	.word	0xe000ef34

0800b3a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b2:	f383 8811 	msr	BASEPRI, r3
 800b3b6:	f3bf 8f6f 	isb	sy
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	607b      	str	r3, [r7, #4]
}
 800b3c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b3c2:	4b10      	ldr	r3, [pc, #64]	@ (800b404 <vPortEnterCritical+0x5c>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	4a0e      	ldr	r2, [pc, #56]	@ (800b404 <vPortEnterCritical+0x5c>)
 800b3ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b3cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b404 <vPortEnterCritical+0x5c>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d110      	bne.n	800b3f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b408 <vPortEnterCritical+0x60>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00b      	beq.n	800b3f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	603b      	str	r3, [r7, #0]
}
 800b3f0:	bf00      	nop
 800b3f2:	bf00      	nop
 800b3f4:	e7fd      	b.n	800b3f2 <vPortEnterCritical+0x4a>
	}
}
 800b3f6:	bf00      	nop
 800b3f8:	370c      	adds	r7, #12
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	20000014 	.word	0x20000014
 800b408:	e000ed04 	.word	0xe000ed04

0800b40c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b412:	4b12      	ldr	r3, [pc, #72]	@ (800b45c <vPortExitCritical+0x50>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10b      	bne.n	800b432 <vPortExitCritical+0x26>
	__asm volatile
 800b41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	607b      	str	r3, [r7, #4]
}
 800b42c:	bf00      	nop
 800b42e:	bf00      	nop
 800b430:	e7fd      	b.n	800b42e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b432:	4b0a      	ldr	r3, [pc, #40]	@ (800b45c <vPortExitCritical+0x50>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	3b01      	subs	r3, #1
 800b438:	4a08      	ldr	r2, [pc, #32]	@ (800b45c <vPortExitCritical+0x50>)
 800b43a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b43c:	4b07      	ldr	r3, [pc, #28]	@ (800b45c <vPortExitCritical+0x50>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d105      	bne.n	800b450 <vPortExitCritical+0x44>
 800b444:	2300      	movs	r3, #0
 800b446:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	f383 8811 	msr	BASEPRI, r3
}
 800b44e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	20000014 	.word	0x20000014

0800b460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b460:	f3ef 8009 	mrs	r0, PSP
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	4b15      	ldr	r3, [pc, #84]	@ (800b4c0 <pxCurrentTCBConst>)
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	f01e 0f10 	tst.w	lr, #16
 800b470:	bf08      	it	eq
 800b472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b47a:	6010      	str	r0, [r2, #0]
 800b47c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b480:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b484:	f380 8811 	msr	BASEPRI, r0
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f7fe ffac 	bl	800a3ec <vTaskSwitchContext>
 800b494:	f04f 0000 	mov.w	r0, #0
 800b498:	f380 8811 	msr	BASEPRI, r0
 800b49c:	bc09      	pop	{r0, r3}
 800b49e:	6819      	ldr	r1, [r3, #0]
 800b4a0:	6808      	ldr	r0, [r1, #0]
 800b4a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a6:	f01e 0f10 	tst.w	lr, #16
 800b4aa:	bf08      	it	eq
 800b4ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b4b0:	f380 8809 	msr	PSP, r0
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	4770      	bx	lr
 800b4ba:	bf00      	nop
 800b4bc:	f3af 8000 	nop.w

0800b4c0 <pxCurrentTCBConst>:
 800b4c0:	20000c48 	.word	0x20000c48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b4c4:	bf00      	nop
 800b4c6:	bf00      	nop

0800b4c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d2:	f383 8811 	msr	BASEPRI, r3
 800b4d6:	f3bf 8f6f 	isb	sy
 800b4da:	f3bf 8f4f 	dsb	sy
 800b4de:	607b      	str	r3, [r7, #4]
}
 800b4e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4e2:	f7fe fec9 	bl	800a278 <xTaskIncrementTick>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d003      	beq.n	800b4f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4ec:	4b06      	ldr	r3, [pc, #24]	@ (800b508 <xPortSysTickHandler+0x40>)
 800b4ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4f2:	601a      	str	r2, [r3, #0]
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	f383 8811 	msr	BASEPRI, r3
}
 800b4fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b500:	bf00      	nop
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	e000ed04 	.word	0xe000ed04

0800b50c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b50c:	b480      	push	{r7}
 800b50e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b510:	4b0b      	ldr	r3, [pc, #44]	@ (800b540 <vPortSetupTimerInterrupt+0x34>)
 800b512:	2200      	movs	r2, #0
 800b514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b516:	4b0b      	ldr	r3, [pc, #44]	@ (800b544 <vPortSetupTimerInterrupt+0x38>)
 800b518:	2200      	movs	r2, #0
 800b51a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b51c:	4b0a      	ldr	r3, [pc, #40]	@ (800b548 <vPortSetupTimerInterrupt+0x3c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a0a      	ldr	r2, [pc, #40]	@ (800b54c <vPortSetupTimerInterrupt+0x40>)
 800b522:	fba2 2303 	umull	r2, r3, r2, r3
 800b526:	099b      	lsrs	r3, r3, #6
 800b528:	4a09      	ldr	r2, [pc, #36]	@ (800b550 <vPortSetupTimerInterrupt+0x44>)
 800b52a:	3b01      	subs	r3, #1
 800b52c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b52e:	4b04      	ldr	r3, [pc, #16]	@ (800b540 <vPortSetupTimerInterrupt+0x34>)
 800b530:	2207      	movs	r2, #7
 800b532:	601a      	str	r2, [r3, #0]
}
 800b534:	bf00      	nop
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	e000e010 	.word	0xe000e010
 800b544:	e000e018 	.word	0xe000e018
 800b548:	20000008 	.word	0x20000008
 800b54c:	10624dd3 	.word	0x10624dd3
 800b550:	e000e014 	.word	0xe000e014

0800b554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b554:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b564 <vPortEnableVFP+0x10>
 800b558:	6801      	ldr	r1, [r0, #0]
 800b55a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b55e:	6001      	str	r1, [r0, #0]
 800b560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b562:	bf00      	nop
 800b564:	e000ed88 	.word	0xe000ed88

0800b568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b56e:	f3ef 8305 	mrs	r3, IPSR
 800b572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2b0f      	cmp	r3, #15
 800b578:	d915      	bls.n	800b5a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b57a:	4a18      	ldr	r2, [pc, #96]	@ (800b5dc <vPortValidateInterruptPriority+0x74>)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	4413      	add	r3, r2
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b584:	4b16      	ldr	r3, [pc, #88]	@ (800b5e0 <vPortValidateInterruptPriority+0x78>)
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	7afa      	ldrb	r2, [r7, #11]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d20b      	bcs.n	800b5a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	607b      	str	r3, [r7, #4]
}
 800b5a0:	bf00      	nop
 800b5a2:	bf00      	nop
 800b5a4:	e7fd      	b.n	800b5a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b5a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b5e4 <vPortValidateInterruptPriority+0x7c>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b5ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b5e8 <vPortValidateInterruptPriority+0x80>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d90b      	bls.n	800b5ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	603b      	str	r3, [r7, #0]
}
 800b5c8:	bf00      	nop
 800b5ca:	bf00      	nop
 800b5cc:	e7fd      	b.n	800b5ca <vPortValidateInterruptPriority+0x62>
	}
 800b5ce:	bf00      	nop
 800b5d0:	3714      	adds	r7, #20
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	e000e3f0 	.word	0xe000e3f0
 800b5e0:	20001274 	.word	0x20001274
 800b5e4:	e000ed0c 	.word	0xe000ed0c
 800b5e8:	20001278 	.word	0x20001278

0800b5ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b08a      	sub	sp, #40	@ 0x28
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5f8:	f7fe fd82 	bl	800a100 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5fc:	4b5c      	ldr	r3, [pc, #368]	@ (800b770 <pvPortMalloc+0x184>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d101      	bne.n	800b608 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b604:	f000 f924 	bl	800b850 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b608:	4b5a      	ldr	r3, [pc, #360]	@ (800b774 <pvPortMalloc+0x188>)
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4013      	ands	r3, r2
 800b610:	2b00      	cmp	r3, #0
 800b612:	f040 8095 	bne.w	800b740 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d01e      	beq.n	800b65a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b61c:	2208      	movs	r2, #8
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4413      	add	r3, r2
 800b622:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f003 0307 	and.w	r3, r3, #7
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d015      	beq.n	800b65a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f023 0307 	bic.w	r3, r3, #7
 800b634:	3308      	adds	r3, #8
 800b636:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f003 0307 	and.w	r3, r3, #7
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00b      	beq.n	800b65a <pvPortMalloc+0x6e>
	__asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	617b      	str	r3, [r7, #20]
}
 800b654:	bf00      	nop
 800b656:	bf00      	nop
 800b658:	e7fd      	b.n	800b656 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d06f      	beq.n	800b740 <pvPortMalloc+0x154>
 800b660:	4b45      	ldr	r3, [pc, #276]	@ (800b778 <pvPortMalloc+0x18c>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	429a      	cmp	r2, r3
 800b668:	d86a      	bhi.n	800b740 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b66a:	4b44      	ldr	r3, [pc, #272]	@ (800b77c <pvPortMalloc+0x190>)
 800b66c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b66e:	4b43      	ldr	r3, [pc, #268]	@ (800b77c <pvPortMalloc+0x190>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b674:	e004      	b.n	800b680 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b678:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	429a      	cmp	r2, r3
 800b688:	d903      	bls.n	800b692 <pvPortMalloc+0xa6>
 800b68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1f1      	bne.n	800b676 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b692:	4b37      	ldr	r3, [pc, #220]	@ (800b770 <pvPortMalloc+0x184>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b698:	429a      	cmp	r2, r3
 800b69a:	d051      	beq.n	800b740 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b69c:	6a3b      	ldr	r3, [r7, #32]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2208      	movs	r2, #8
 800b6a2:	4413      	add	r3, r2
 800b6a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	6a3b      	ldr	r3, [r7, #32]
 800b6ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b0:	685a      	ldr	r2, [r3, #4]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	1ad2      	subs	r2, r2, r3
 800b6b6:	2308      	movs	r3, #8
 800b6b8:	005b      	lsls	r3, r3, #1
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d920      	bls.n	800b700 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b6be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	f003 0307 	and.w	r3, r3, #7
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d00b      	beq.n	800b6e8 <pvPortMalloc+0xfc>
	__asm volatile
 800b6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	613b      	str	r3, [r7, #16]
}
 800b6e2:	bf00      	nop
 800b6e4:	bf00      	nop
 800b6e6:	e7fd      	b.n	800b6e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ea:	685a      	ldr	r2, [r3, #4]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	1ad2      	subs	r2, r2, r3
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6fa:	69b8      	ldr	r0, [r7, #24]
 800b6fc:	f000 f90a 	bl	800b914 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b700:	4b1d      	ldr	r3, [pc, #116]	@ (800b778 <pvPortMalloc+0x18c>)
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	4a1b      	ldr	r2, [pc, #108]	@ (800b778 <pvPortMalloc+0x18c>)
 800b70c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b70e:	4b1a      	ldr	r3, [pc, #104]	@ (800b778 <pvPortMalloc+0x18c>)
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	4b1b      	ldr	r3, [pc, #108]	@ (800b780 <pvPortMalloc+0x194>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	429a      	cmp	r2, r3
 800b718:	d203      	bcs.n	800b722 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b71a:	4b17      	ldr	r3, [pc, #92]	@ (800b778 <pvPortMalloc+0x18c>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a18      	ldr	r2, [pc, #96]	@ (800b780 <pvPortMalloc+0x194>)
 800b720:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b724:	685a      	ldr	r2, [r3, #4]
 800b726:	4b13      	ldr	r3, [pc, #76]	@ (800b774 <pvPortMalloc+0x188>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	431a      	orrs	r2, r3
 800b72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b72e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b732:	2200      	movs	r2, #0
 800b734:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b736:	4b13      	ldr	r3, [pc, #76]	@ (800b784 <pvPortMalloc+0x198>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3301      	adds	r3, #1
 800b73c:	4a11      	ldr	r2, [pc, #68]	@ (800b784 <pvPortMalloc+0x198>)
 800b73e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b740:	f7fe fcec 	bl	800a11c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	f003 0307 	and.w	r3, r3, #7
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00b      	beq.n	800b766 <pvPortMalloc+0x17a>
	__asm volatile
 800b74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	60fb      	str	r3, [r7, #12]
}
 800b760:	bf00      	nop
 800b762:	bf00      	nop
 800b764:	e7fd      	b.n	800b762 <pvPortMalloc+0x176>
	return pvReturn;
 800b766:	69fb      	ldr	r3, [r7, #28]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3728      	adds	r7, #40	@ 0x28
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	20004e84 	.word	0x20004e84
 800b774:	20004e98 	.word	0x20004e98
 800b778:	20004e88 	.word	0x20004e88
 800b77c:	20004e7c 	.word	0x20004e7c
 800b780:	20004e8c 	.word	0x20004e8c
 800b784:	20004e90 	.word	0x20004e90

0800b788 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b086      	sub	sp, #24
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d04f      	beq.n	800b83a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b79a:	2308      	movs	r3, #8
 800b79c:	425b      	negs	r3, r3
 800b79e:	697a      	ldr	r2, [r7, #20]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	685a      	ldr	r2, [r3, #4]
 800b7ac:	4b25      	ldr	r3, [pc, #148]	@ (800b844 <vPortFree+0xbc>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d10b      	bne.n	800b7ce <vPortFree+0x46>
	__asm volatile
 800b7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ba:	f383 8811 	msr	BASEPRI, r3
 800b7be:	f3bf 8f6f 	isb	sy
 800b7c2:	f3bf 8f4f 	dsb	sy
 800b7c6:	60fb      	str	r3, [r7, #12]
}
 800b7c8:	bf00      	nop
 800b7ca:	bf00      	nop
 800b7cc:	e7fd      	b.n	800b7ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00b      	beq.n	800b7ee <vPortFree+0x66>
	__asm volatile
 800b7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	60bb      	str	r3, [r7, #8]
}
 800b7e8:	bf00      	nop
 800b7ea:	bf00      	nop
 800b7ec:	e7fd      	b.n	800b7ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	685a      	ldr	r2, [r3, #4]
 800b7f2:	4b14      	ldr	r3, [pc, #80]	@ (800b844 <vPortFree+0xbc>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4013      	ands	r3, r2
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d01e      	beq.n	800b83a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d11a      	bne.n	800b83a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	685a      	ldr	r2, [r3, #4]
 800b808:	4b0e      	ldr	r3, [pc, #56]	@ (800b844 <vPortFree+0xbc>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	43db      	mvns	r3, r3
 800b80e:	401a      	ands	r2, r3
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b814:	f7fe fc74 	bl	800a100 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	685a      	ldr	r2, [r3, #4]
 800b81c:	4b0a      	ldr	r3, [pc, #40]	@ (800b848 <vPortFree+0xc0>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4413      	add	r3, r2
 800b822:	4a09      	ldr	r2, [pc, #36]	@ (800b848 <vPortFree+0xc0>)
 800b824:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b826:	6938      	ldr	r0, [r7, #16]
 800b828:	f000 f874 	bl	800b914 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b82c:	4b07      	ldr	r3, [pc, #28]	@ (800b84c <vPortFree+0xc4>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	3301      	adds	r3, #1
 800b832:	4a06      	ldr	r2, [pc, #24]	@ (800b84c <vPortFree+0xc4>)
 800b834:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b836:	f7fe fc71 	bl	800a11c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b83a:	bf00      	nop
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	20004e98 	.word	0x20004e98
 800b848:	20004e88 	.word	0x20004e88
 800b84c:	20004e94 	.word	0x20004e94

0800b850 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b856:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b85a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b85c:	4b27      	ldr	r3, [pc, #156]	@ (800b8fc <prvHeapInit+0xac>)
 800b85e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f003 0307 	and.w	r3, r3, #7
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00c      	beq.n	800b884 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	3307      	adds	r3, #7
 800b86e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f023 0307 	bic.w	r3, r3, #7
 800b876:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	4a1f      	ldr	r2, [pc, #124]	@ (800b8fc <prvHeapInit+0xac>)
 800b880:	4413      	add	r3, r2
 800b882:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b888:	4a1d      	ldr	r2, [pc, #116]	@ (800b900 <prvHeapInit+0xb0>)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b88e:	4b1c      	ldr	r3, [pc, #112]	@ (800b900 <prvHeapInit+0xb0>)
 800b890:	2200      	movs	r2, #0
 800b892:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	68ba      	ldr	r2, [r7, #8]
 800b898:	4413      	add	r3, r2
 800b89a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b89c:	2208      	movs	r2, #8
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	1a9b      	subs	r3, r3, r2
 800b8a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f023 0307 	bic.w	r3, r3, #7
 800b8aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	4a15      	ldr	r2, [pc, #84]	@ (800b904 <prvHeapInit+0xb4>)
 800b8b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8b2:	4b14      	ldr	r3, [pc, #80]	@ (800b904 <prvHeapInit+0xb4>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b8ba:	4b12      	ldr	r3, [pc, #72]	@ (800b904 <prvHeapInit+0xb4>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	1ad2      	subs	r2, r2, r3
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b904 <prvHeapInit+0xb4>)
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	4a0a      	ldr	r2, [pc, #40]	@ (800b908 <prvHeapInit+0xb8>)
 800b8de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	4a09      	ldr	r2, [pc, #36]	@ (800b90c <prvHeapInit+0xbc>)
 800b8e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8e8:	4b09      	ldr	r3, [pc, #36]	@ (800b910 <prvHeapInit+0xc0>)
 800b8ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b8ee:	601a      	str	r2, [r3, #0]
}
 800b8f0:	bf00      	nop
 800b8f2:	3714      	adds	r7, #20
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr
 800b8fc:	2000127c 	.word	0x2000127c
 800b900:	20004e7c 	.word	0x20004e7c
 800b904:	20004e84 	.word	0x20004e84
 800b908:	20004e8c 	.word	0x20004e8c
 800b90c:	20004e88 	.word	0x20004e88
 800b910:	20004e98 	.word	0x20004e98

0800b914 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b91c:	4b28      	ldr	r3, [pc, #160]	@ (800b9c0 <prvInsertBlockIntoFreeList+0xac>)
 800b91e:	60fb      	str	r3, [r7, #12]
 800b920:	e002      	b.n	800b928 <prvInsertBlockIntoFreeList+0x14>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	60fb      	str	r3, [r7, #12]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d8f7      	bhi.n	800b922 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	4413      	add	r3, r2
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	429a      	cmp	r2, r3
 800b942:	d108      	bne.n	800b956 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	685a      	ldr	r2, [r3, #4]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	441a      	add	r2, r3
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	441a      	add	r2, r3
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	429a      	cmp	r2, r3
 800b968:	d118      	bne.n	800b99c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	4b15      	ldr	r3, [pc, #84]	@ (800b9c4 <prvInsertBlockIntoFreeList+0xb0>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	429a      	cmp	r2, r3
 800b974:	d00d      	beq.n	800b992 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	685a      	ldr	r2, [r3, #4]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	441a      	add	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	601a      	str	r2, [r3, #0]
 800b990:	e008      	b.n	800b9a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b992:	4b0c      	ldr	r3, [pc, #48]	@ (800b9c4 <prvInsertBlockIntoFreeList+0xb0>)
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	601a      	str	r2, [r3, #0]
 800b99a:	e003      	b.n	800b9a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d002      	beq.n	800b9b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9b2:	bf00      	nop
 800b9b4:	3714      	adds	r7, #20
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	20004e7c 	.word	0x20004e7c
 800b9c4:	20004e84 	.word	0x20004e84

0800b9c8 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	71fb      	strb	r3, [r7, #7]
 800b9d2:	e026      	b.n	800ba22 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800b9d4:	79fb      	ldrb	r3, [r7, #7]
 800b9d6:	3b50      	subs	r3, #80	@ 0x50
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2100      	movs	r1, #0
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 f82b 	bl	800ba38 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	f000 f827 	bl	800ba38 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	2010      	movs	r0, #16
 800b9ee:	f000 f823 	bl	800ba38 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	71bb      	strb	r3, [r7, #6]
 800b9f6:	e00d      	b.n	800ba14 <OLED_Refresh_Gram+0x4c>
 800b9f8:	79ba      	ldrb	r2, [r7, #6]
 800b9fa:	79fb      	ldrb	r3, [r7, #7]
 800b9fc:	490d      	ldr	r1, [pc, #52]	@ (800ba34 <OLED_Refresh_Gram+0x6c>)
 800b9fe:	00d2      	lsls	r2, r2, #3
 800ba00:	440a      	add	r2, r1
 800ba02:	4413      	add	r3, r2
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	2101      	movs	r1, #1
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f000 f815 	bl	800ba38 <OLED_WR_Byte>
 800ba0e:	79bb      	ldrb	r3, [r7, #6]
 800ba10:	3301      	adds	r3, #1
 800ba12:	71bb      	strb	r3, [r7, #6]
 800ba14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	daed      	bge.n	800b9f8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800ba1c:	79fb      	ldrb	r3, [r7, #7]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	71fb      	strb	r3, [r7, #7]
 800ba22:	79fb      	ldrb	r3, [r7, #7]
 800ba24:	2b07      	cmp	r3, #7
 800ba26:	d9d5      	bls.n	800b9d4 <OLED_Refresh_Gram+0xc>
	}   
}
 800ba28:	bf00      	nop
 800ba2a:	bf00      	nop
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	20004e9c 	.word	0x20004e9c

0800ba38 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	460a      	mov	r2, r1
 800ba42:	71fb      	strb	r3, [r7, #7]
 800ba44:	4613      	mov	r3, r2
 800ba46:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800ba48:	79bb      	ldrb	r3, [r7, #6]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d006      	beq.n	800ba5c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ba54:	481c      	ldr	r0, [pc, #112]	@ (800bac8 <OLED_WR_Byte+0x90>)
 800ba56:	f7f9 f831 	bl	8004abc <HAL_GPIO_WritePin>
 800ba5a:	e005      	b.n	800ba68 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ba62:	4819      	ldr	r0, [pc, #100]	@ (800bac8 <OLED_WR_Byte+0x90>)
 800ba64:	f7f9 f82a 	bl	8004abc <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800ba68:	2300      	movs	r3, #0
 800ba6a:	73fb      	strb	r3, [r7, #15]
 800ba6c:	e01e      	b.n	800baac <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800ba6e:	2200      	movs	r2, #0
 800ba70:	2120      	movs	r1, #32
 800ba72:	4815      	ldr	r0, [pc, #84]	@ (800bac8 <OLED_WR_Byte+0x90>)
 800ba74:	f7f9 f822 	bl	8004abc <HAL_GPIO_WritePin>
		if(dat&0x80)
 800ba78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	da05      	bge.n	800ba8c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800ba80:	2201      	movs	r2, #1
 800ba82:	2140      	movs	r1, #64	@ 0x40
 800ba84:	4810      	ldr	r0, [pc, #64]	@ (800bac8 <OLED_WR_Byte+0x90>)
 800ba86:	f7f9 f819 	bl	8004abc <HAL_GPIO_WritePin>
 800ba8a:	e004      	b.n	800ba96 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	2140      	movs	r1, #64	@ 0x40
 800ba90:	480d      	ldr	r0, [pc, #52]	@ (800bac8 <OLED_WR_Byte+0x90>)
 800ba92:	f7f9 f813 	bl	8004abc <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800ba96:	2201      	movs	r2, #1
 800ba98:	2120      	movs	r1, #32
 800ba9a:	480b      	ldr	r0, [pc, #44]	@ (800bac8 <OLED_WR_Byte+0x90>)
 800ba9c:	f7f9 f80e 	bl	8004abc <HAL_GPIO_WritePin>
		dat<<=1;   
 800baa0:	79fb      	ldrb	r3, [r7, #7]
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800baa6:	7bfb      	ldrb	r3, [r7, #15]
 800baa8:	3301      	adds	r3, #1
 800baaa:	73fb      	strb	r3, [r7, #15]
 800baac:	7bfb      	ldrb	r3, [r7, #15]
 800baae:	2b07      	cmp	r3, #7
 800bab0:	d9dd      	bls.n	800ba6e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800bab2:	2201      	movs	r2, #1
 800bab4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bab8:	4803      	ldr	r0, [pc, #12]	@ (800bac8 <OLED_WR_Byte+0x90>)
 800baba:	f7f8 ffff 	bl	8004abc <HAL_GPIO_WritePin>
} 
 800babe:	bf00      	nop
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	40021000 	.word	0x40021000

0800bacc <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800bad2:	2300      	movs	r3, #0
 800bad4:	71fb      	strb	r3, [r7, #7]
 800bad6:	e014      	b.n	800bb02 <OLED_Clear+0x36>
 800bad8:	2300      	movs	r3, #0
 800bada:	71bb      	strb	r3, [r7, #6]
 800badc:	e00a      	b.n	800baf4 <OLED_Clear+0x28>
 800bade:	79ba      	ldrb	r2, [r7, #6]
 800bae0:	79fb      	ldrb	r3, [r7, #7]
 800bae2:	490c      	ldr	r1, [pc, #48]	@ (800bb14 <OLED_Clear+0x48>)
 800bae4:	00d2      	lsls	r2, r2, #3
 800bae6:	440a      	add	r2, r1
 800bae8:	4413      	add	r3, r2
 800baea:	2200      	movs	r2, #0
 800baec:	701a      	strb	r2, [r3, #0]
 800baee:	79bb      	ldrb	r3, [r7, #6]
 800baf0:	3301      	adds	r3, #1
 800baf2:	71bb      	strb	r3, [r7, #6]
 800baf4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	daf0      	bge.n	800bade <OLED_Clear+0x12>
 800bafc:	79fb      	ldrb	r3, [r7, #7]
 800bafe:	3301      	adds	r3, #1
 800bb00:	71fb      	strb	r3, [r7, #7]
 800bb02:	79fb      	ldrb	r3, [r7, #7]
 800bb04:	2b07      	cmp	r3, #7
 800bb06:	d9e7      	bls.n	800bad8 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800bb08:	f7ff ff5e 	bl	800b9c8 <OLED_Refresh_Gram>
}
 800bb0c:	bf00      	nop
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	20004e9c 	.word	0x20004e9c

0800bb18 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	4603      	mov	r3, r0
 800bb20:	71fb      	strb	r3, [r7, #7]
 800bb22:	460b      	mov	r3, r1
 800bb24:	71bb      	strb	r3, [r7, #6]
 800bb26:	4613      	mov	r3, r2
 800bb28:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800bb2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	db41      	blt.n	800bbba <OLED_DrawPoint+0xa2>
 800bb36:	79bb      	ldrb	r3, [r7, #6]
 800bb38:	2b3f      	cmp	r3, #63	@ 0x3f
 800bb3a:	d83e      	bhi.n	800bbba <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800bb3c:	79bb      	ldrb	r3, [r7, #6]
 800bb3e:	08db      	lsrs	r3, r3, #3
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	f1c3 0307 	rsb	r3, r3, #7
 800bb46:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800bb48:	79bb      	ldrb	r3, [r7, #6]
 800bb4a:	f003 0307 	and.w	r3, r3, #7
 800bb4e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800bb50:	7b7b      	ldrb	r3, [r7, #13]
 800bb52:	f1c3 0307 	rsb	r3, r3, #7
 800bb56:	2201      	movs	r2, #1
 800bb58:	fa02 f303 	lsl.w	r3, r2, r3
 800bb5c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800bb5e:	797b      	ldrb	r3, [r7, #5]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d012      	beq.n	800bb8a <OLED_DrawPoint+0x72>
 800bb64:	79fa      	ldrb	r2, [r7, #7]
 800bb66:	7bbb      	ldrb	r3, [r7, #14]
 800bb68:	4917      	ldr	r1, [pc, #92]	@ (800bbc8 <OLED_DrawPoint+0xb0>)
 800bb6a:	00d2      	lsls	r2, r2, #3
 800bb6c:	440a      	add	r2, r1
 800bb6e:	4413      	add	r3, r2
 800bb70:	7818      	ldrb	r0, [r3, #0]
 800bb72:	79fa      	ldrb	r2, [r7, #7]
 800bb74:	7bbb      	ldrb	r3, [r7, #14]
 800bb76:	7bf9      	ldrb	r1, [r7, #15]
 800bb78:	4301      	orrs	r1, r0
 800bb7a:	b2c8      	uxtb	r0, r1
 800bb7c:	4912      	ldr	r1, [pc, #72]	@ (800bbc8 <OLED_DrawPoint+0xb0>)
 800bb7e:	00d2      	lsls	r2, r2, #3
 800bb80:	440a      	add	r2, r1
 800bb82:	4413      	add	r3, r2
 800bb84:	4602      	mov	r2, r0
 800bb86:	701a      	strb	r2, [r3, #0]
 800bb88:	e018      	b.n	800bbbc <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800bb8a:	79fa      	ldrb	r2, [r7, #7]
 800bb8c:	7bbb      	ldrb	r3, [r7, #14]
 800bb8e:	490e      	ldr	r1, [pc, #56]	@ (800bbc8 <OLED_DrawPoint+0xb0>)
 800bb90:	00d2      	lsls	r2, r2, #3
 800bb92:	440a      	add	r2, r1
 800bb94:	4413      	add	r3, r2
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	b25a      	sxtb	r2, r3
 800bb9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb9e:	43db      	mvns	r3, r3
 800bba0:	b25b      	sxtb	r3, r3
 800bba2:	4013      	ands	r3, r2
 800bba4:	b259      	sxtb	r1, r3
 800bba6:	79fa      	ldrb	r2, [r7, #7]
 800bba8:	7bbb      	ldrb	r3, [r7, #14]
 800bbaa:	b2c8      	uxtb	r0, r1
 800bbac:	4906      	ldr	r1, [pc, #24]	@ (800bbc8 <OLED_DrawPoint+0xb0>)
 800bbae:	00d2      	lsls	r2, r2, #3
 800bbb0:	440a      	add	r2, r1
 800bbb2:	4413      	add	r3, r2
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	701a      	strb	r2, [r3, #0]
 800bbb8:	e000      	b.n	800bbbc <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800bbba:	bf00      	nop
}
 800bbbc:	3714      	adds	r7, #20
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	20004e9c 	.word	0x20004e9c

0800bbcc <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800bbcc:	b590      	push	{r4, r7, lr}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	4608      	mov	r0, r1
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	461a      	mov	r2, r3
 800bbda:	4623      	mov	r3, r4
 800bbdc:	71fb      	strb	r3, [r7, #7]
 800bbde:	4603      	mov	r3, r0
 800bbe0:	71bb      	strb	r3, [r7, #6]
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	717b      	strb	r3, [r7, #5]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800bbea:	79bb      	ldrb	r3, [r7, #6]
 800bbec:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800bbee:	797b      	ldrb	r3, [r7, #5]
 800bbf0:	3b20      	subs	r3, #32
 800bbf2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	73bb      	strb	r3, [r7, #14]
 800bbf8:	e04d      	b.n	800bc96 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800bbfa:	793b      	ldrb	r3, [r7, #4]
 800bbfc:	2b0c      	cmp	r3, #12
 800bbfe:	d10b      	bne.n	800bc18 <OLED_ShowChar+0x4c>
 800bc00:	797a      	ldrb	r2, [r7, #5]
 800bc02:	7bb9      	ldrb	r1, [r7, #14]
 800bc04:	4828      	ldr	r0, [pc, #160]	@ (800bca8 <OLED_ShowChar+0xdc>)
 800bc06:	4613      	mov	r3, r2
 800bc08:	005b      	lsls	r3, r3, #1
 800bc0a:	4413      	add	r3, r2
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	4403      	add	r3, r0
 800bc10:	440b      	add	r3, r1
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	73fb      	strb	r3, [r7, #15]
 800bc16:	e007      	b.n	800bc28 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800bc18:	797a      	ldrb	r2, [r7, #5]
 800bc1a:	7bbb      	ldrb	r3, [r7, #14]
 800bc1c:	4923      	ldr	r1, [pc, #140]	@ (800bcac <OLED_ShowChar+0xe0>)
 800bc1e:	0112      	lsls	r2, r2, #4
 800bc20:	440a      	add	r2, r1
 800bc22:	4413      	add	r3, r2
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800bc28:	2300      	movs	r3, #0
 800bc2a:	737b      	strb	r3, [r7, #13]
 800bc2c:	e02d      	b.n	800bc8a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800bc2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	da07      	bge.n	800bc46 <OLED_ShowChar+0x7a>
 800bc36:	f897 2020 	ldrb.w	r2, [r7, #32]
 800bc3a:	79b9      	ldrb	r1, [r7, #6]
 800bc3c:	79fb      	ldrb	r3, [r7, #7]
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7ff ff6a 	bl	800bb18 <OLED_DrawPoint>
 800bc44:	e00c      	b.n	800bc60 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800bc46:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	bf0c      	ite	eq
 800bc4e:	2301      	moveq	r3, #1
 800bc50:	2300      	movne	r3, #0
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	461a      	mov	r2, r3
 800bc56:	79b9      	ldrb	r1, [r7, #6]
 800bc58:	79fb      	ldrb	r3, [r7, #7]
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7ff ff5c 	bl	800bb18 <OLED_DrawPoint>
			temp<<=1;
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
 800bc62:	005b      	lsls	r3, r3, #1
 800bc64:	73fb      	strb	r3, [r7, #15]
			y++;
 800bc66:	79bb      	ldrb	r3, [r7, #6]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800bc6c:	79ba      	ldrb	r2, [r7, #6]
 800bc6e:	7b3b      	ldrb	r3, [r7, #12]
 800bc70:	1ad2      	subs	r2, r2, r3
 800bc72:	793b      	ldrb	r3, [r7, #4]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d105      	bne.n	800bc84 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800bc78:	7b3b      	ldrb	r3, [r7, #12]
 800bc7a:	71bb      	strb	r3, [r7, #6]
				x++;
 800bc7c:	79fb      	ldrb	r3, [r7, #7]
 800bc7e:	3301      	adds	r3, #1
 800bc80:	71fb      	strb	r3, [r7, #7]
				break;
 800bc82:	e005      	b.n	800bc90 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800bc84:	7b7b      	ldrb	r3, [r7, #13]
 800bc86:	3301      	adds	r3, #1
 800bc88:	737b      	strb	r3, [r7, #13]
 800bc8a:	7b7b      	ldrb	r3, [r7, #13]
 800bc8c:	2b07      	cmp	r3, #7
 800bc8e:	d9ce      	bls.n	800bc2e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800bc90:	7bbb      	ldrb	r3, [r7, #14]
 800bc92:	3301      	adds	r3, #1
 800bc94:	73bb      	strb	r3, [r7, #14]
 800bc96:	7bba      	ldrb	r2, [r7, #14]
 800bc98:	793b      	ldrb	r3, [r7, #4]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d3ad      	bcc.n	800bbfa <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800bc9e:	bf00      	nop
 800bca0:	bf00      	nop
 800bca2:	3714      	adds	r7, #20
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd90      	pop	{r4, r7, pc}
 800bca8:	08010688 	.word	0x08010688
 800bcac:	08010afc 	.word	0x08010afc

0800bcb0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af02      	add	r7, sp, #8
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	603a      	str	r2, [r7, #0]
 800bcba:	71fb      	strb	r3, [r7, #7]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800bcc0:	e01f      	b.n	800bd02 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800bcc2:	79fb      	ldrb	r3, [r7, #7]
 800bcc4:	2b7a      	cmp	r3, #122	@ 0x7a
 800bcc6:	d904      	bls.n	800bcd2 <OLED_ShowString+0x22>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	71fb      	strb	r3, [r7, #7]
 800bccc:	79bb      	ldrb	r3, [r7, #6]
 800bcce:	3310      	adds	r3, #16
 800bcd0:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800bcd2:	79bb      	ldrb	r3, [r7, #6]
 800bcd4:	2b3a      	cmp	r3, #58	@ 0x3a
 800bcd6:	d905      	bls.n	800bce4 <OLED_ShowString+0x34>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	71fb      	strb	r3, [r7, #7]
 800bcdc:	79fb      	ldrb	r3, [r7, #7]
 800bcde:	71bb      	strb	r3, [r7, #6]
 800bce0:	f7ff fef4 	bl	800bacc <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	781a      	ldrb	r2, [r3, #0]
 800bce8:	79b9      	ldrb	r1, [r7, #6]
 800bcea:	79f8      	ldrb	r0, [r7, #7]
 800bcec:	2301      	movs	r3, #1
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	230c      	movs	r3, #12
 800bcf2:	f7ff ff6b 	bl	800bbcc <OLED_ShowChar>
        x+=8;
 800bcf6:	79fb      	ldrb	r3, [r7, #7]
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	71fb      	strb	r3, [r7, #7]
        p++;
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1db      	bne.n	800bcc2 <OLED_ShowString+0x12>
    }  
}	 
 800bd0a:	bf00      	nop
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <OLED_Init>:

void OLED_Init(void)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800bd18:	f7f9 ff0e 	bl	8005b38 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800bd1c:	4b41      	ldr	r3, [pc, #260]	@ (800be24 <OLED_Init+0x110>)
 800bd1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd20:	4a40      	ldr	r2, [pc, #256]	@ (800be24 <OLED_Init+0x110>)
 800bd22:	f023 0301 	bic.w	r3, r3, #1
 800bd26:	6713      	str	r3, [r2, #112]	@ 0x70
 800bd28:	4b3e      	ldr	r3, [pc, #248]	@ (800be24 <OLED_Init+0x110>)
 800bd2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd2c:	4a3d      	ldr	r2, [pc, #244]	@ (800be24 <OLED_Init+0x110>)
 800bd2e:	f023 0304 	bic.w	r3, r3, #4
 800bd32:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800bd34:	f7f9 ff14 	bl	8005b60 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800bd38:	2200      	movs	r2, #0
 800bd3a:	2180      	movs	r1, #128	@ 0x80
 800bd3c:	483a      	ldr	r0, [pc, #232]	@ (800be28 <OLED_Init+0x114>)
 800bd3e:	f7f8 febd 	bl	8004abc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800bd42:	2064      	movs	r0, #100	@ 0x64
 800bd44:	f7f8 f8f4 	bl	8003f30 <HAL_Delay>
	OLED_RST_Set();
 800bd48:	2201      	movs	r2, #1
 800bd4a:	2180      	movs	r1, #128	@ 0x80
 800bd4c:	4836      	ldr	r0, [pc, #216]	@ (800be28 <OLED_Init+0x114>)
 800bd4e:	f7f8 feb5 	bl	8004abc <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800bd52:	2100      	movs	r1, #0
 800bd54:	20ae      	movs	r0, #174	@ 0xae
 800bd56:	f7ff fe6f 	bl	800ba38 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	20d5      	movs	r0, #213	@ 0xd5
 800bd5e:	f7ff fe6b 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800bd62:	2100      	movs	r1, #0
 800bd64:	2050      	movs	r0, #80	@ 0x50
 800bd66:	f7ff fe67 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	20a8      	movs	r0, #168	@ 0xa8
 800bd6e:	f7ff fe63 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800bd72:	2100      	movs	r1, #0
 800bd74:	203f      	movs	r0, #63	@ 0x3f
 800bd76:	f7ff fe5f 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	20d3      	movs	r0, #211	@ 0xd3
 800bd7e:	f7ff fe5b 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800bd82:	2100      	movs	r1, #0
 800bd84:	2000      	movs	r0, #0
 800bd86:	f7ff fe57 	bl	800ba38 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	2040      	movs	r0, #64	@ 0x40
 800bd8e:	f7ff fe53 	bl	800ba38 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800bd92:	2100      	movs	r1, #0
 800bd94:	208d      	movs	r0, #141	@ 0x8d
 800bd96:	f7ff fe4f 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	2014      	movs	r0, #20
 800bd9e:	f7ff fe4b 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800bda2:	2100      	movs	r1, #0
 800bda4:	2020      	movs	r0, #32
 800bda6:	f7ff fe47 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800bdaa:	2100      	movs	r1, #0
 800bdac:	2002      	movs	r0, #2
 800bdae:	f7ff fe43 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	20a1      	movs	r0, #161	@ 0xa1
 800bdb6:	f7ff fe3f 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800bdba:	2100      	movs	r1, #0
 800bdbc:	20c0      	movs	r0, #192	@ 0xc0
 800bdbe:	f7ff fe3b 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	20da      	movs	r0, #218	@ 0xda
 800bdc6:	f7ff fe37 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800bdca:	2100      	movs	r1, #0
 800bdcc:	2012      	movs	r0, #18
 800bdce:	f7ff fe33 	bl	800ba38 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800bdd2:	2100      	movs	r1, #0
 800bdd4:	2081      	movs	r0, #129	@ 0x81
 800bdd6:	f7ff fe2f 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800bdda:	2100      	movs	r1, #0
 800bddc:	20ef      	movs	r0, #239	@ 0xef
 800bdde:	f7ff fe2b 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800bde2:	2100      	movs	r1, #0
 800bde4:	20d9      	movs	r0, #217	@ 0xd9
 800bde6:	f7ff fe27 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800bdea:	2100      	movs	r1, #0
 800bdec:	20f1      	movs	r0, #241	@ 0xf1
 800bdee:	f7ff fe23 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	20db      	movs	r0, #219	@ 0xdb
 800bdf6:	f7ff fe1f 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	2030      	movs	r0, #48	@ 0x30
 800bdfe:	f7ff fe1b 	bl	800ba38 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800be02:	2100      	movs	r1, #0
 800be04:	20a4      	movs	r0, #164	@ 0xa4
 800be06:	f7ff fe17 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800be0a:	2100      	movs	r1, #0
 800be0c:	20a6      	movs	r0, #166	@ 0xa6
 800be0e:	f7ff fe13 	bl	800ba38 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800be12:	2100      	movs	r1, #0
 800be14:	20af      	movs	r0, #175	@ 0xaf
 800be16:	f7ff fe0f 	bl	800ba38 <OLED_WR_Byte>
	OLED_Clear(); 
 800be1a:	f7ff fe57 	bl	800bacc <OLED_Clear>
 800be1e:	bf00      	nop
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	40023800 	.word	0x40023800
 800be28:	40021000 	.word	0x40021000

0800be2c <atoi>:
 800be2c:	220a      	movs	r2, #10
 800be2e:	2100      	movs	r1, #0
 800be30:	f000 b932 	b.w	800c098 <strtol>

0800be34 <malloc>:
 800be34:	4b02      	ldr	r3, [pc, #8]	@ (800be40 <malloc+0xc>)
 800be36:	4601      	mov	r1, r0
 800be38:	6818      	ldr	r0, [r3, #0]
 800be3a:	f000 b825 	b.w	800be88 <_malloc_r>
 800be3e:	bf00      	nop
 800be40:	20000024 	.word	0x20000024

0800be44 <sbrk_aligned>:
 800be44:	b570      	push	{r4, r5, r6, lr}
 800be46:	4e0f      	ldr	r6, [pc, #60]	@ (800be84 <sbrk_aligned+0x40>)
 800be48:	460c      	mov	r4, r1
 800be4a:	6831      	ldr	r1, [r6, #0]
 800be4c:	4605      	mov	r5, r0
 800be4e:	b911      	cbnz	r1, 800be56 <sbrk_aligned+0x12>
 800be50:	f001 f910 	bl	800d074 <_sbrk_r>
 800be54:	6030      	str	r0, [r6, #0]
 800be56:	4621      	mov	r1, r4
 800be58:	4628      	mov	r0, r5
 800be5a:	f001 f90b 	bl	800d074 <_sbrk_r>
 800be5e:	1c43      	adds	r3, r0, #1
 800be60:	d103      	bne.n	800be6a <sbrk_aligned+0x26>
 800be62:	f04f 34ff 	mov.w	r4, #4294967295
 800be66:	4620      	mov	r0, r4
 800be68:	bd70      	pop	{r4, r5, r6, pc}
 800be6a:	1cc4      	adds	r4, r0, #3
 800be6c:	f024 0403 	bic.w	r4, r4, #3
 800be70:	42a0      	cmp	r0, r4
 800be72:	d0f8      	beq.n	800be66 <sbrk_aligned+0x22>
 800be74:	1a21      	subs	r1, r4, r0
 800be76:	4628      	mov	r0, r5
 800be78:	f001 f8fc 	bl	800d074 <_sbrk_r>
 800be7c:	3001      	adds	r0, #1
 800be7e:	d1f2      	bne.n	800be66 <sbrk_aligned+0x22>
 800be80:	e7ef      	b.n	800be62 <sbrk_aligned+0x1e>
 800be82:	bf00      	nop
 800be84:	2000529c 	.word	0x2000529c

0800be88 <_malloc_r>:
 800be88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be8c:	1ccd      	adds	r5, r1, #3
 800be8e:	f025 0503 	bic.w	r5, r5, #3
 800be92:	3508      	adds	r5, #8
 800be94:	2d0c      	cmp	r5, #12
 800be96:	bf38      	it	cc
 800be98:	250c      	movcc	r5, #12
 800be9a:	2d00      	cmp	r5, #0
 800be9c:	4606      	mov	r6, r0
 800be9e:	db01      	blt.n	800bea4 <_malloc_r+0x1c>
 800bea0:	42a9      	cmp	r1, r5
 800bea2:	d904      	bls.n	800beae <_malloc_r+0x26>
 800bea4:	230c      	movs	r3, #12
 800bea6:	6033      	str	r3, [r6, #0]
 800bea8:	2000      	movs	r0, #0
 800beaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf84 <_malloc_r+0xfc>
 800beb2:	f000 f869 	bl	800bf88 <__malloc_lock>
 800beb6:	f8d8 3000 	ldr.w	r3, [r8]
 800beba:	461c      	mov	r4, r3
 800bebc:	bb44      	cbnz	r4, 800bf10 <_malloc_r+0x88>
 800bebe:	4629      	mov	r1, r5
 800bec0:	4630      	mov	r0, r6
 800bec2:	f7ff ffbf 	bl	800be44 <sbrk_aligned>
 800bec6:	1c43      	adds	r3, r0, #1
 800bec8:	4604      	mov	r4, r0
 800beca:	d158      	bne.n	800bf7e <_malloc_r+0xf6>
 800becc:	f8d8 4000 	ldr.w	r4, [r8]
 800bed0:	4627      	mov	r7, r4
 800bed2:	2f00      	cmp	r7, #0
 800bed4:	d143      	bne.n	800bf5e <_malloc_r+0xd6>
 800bed6:	2c00      	cmp	r4, #0
 800bed8:	d04b      	beq.n	800bf72 <_malloc_r+0xea>
 800beda:	6823      	ldr	r3, [r4, #0]
 800bedc:	4639      	mov	r1, r7
 800bede:	4630      	mov	r0, r6
 800bee0:	eb04 0903 	add.w	r9, r4, r3
 800bee4:	f001 f8c6 	bl	800d074 <_sbrk_r>
 800bee8:	4581      	cmp	r9, r0
 800beea:	d142      	bne.n	800bf72 <_malloc_r+0xea>
 800beec:	6821      	ldr	r1, [r4, #0]
 800beee:	1a6d      	subs	r5, r5, r1
 800bef0:	4629      	mov	r1, r5
 800bef2:	4630      	mov	r0, r6
 800bef4:	f7ff ffa6 	bl	800be44 <sbrk_aligned>
 800bef8:	3001      	adds	r0, #1
 800befa:	d03a      	beq.n	800bf72 <_malloc_r+0xea>
 800befc:	6823      	ldr	r3, [r4, #0]
 800befe:	442b      	add	r3, r5
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	f8d8 3000 	ldr.w	r3, [r8]
 800bf06:	685a      	ldr	r2, [r3, #4]
 800bf08:	bb62      	cbnz	r2, 800bf64 <_malloc_r+0xdc>
 800bf0a:	f8c8 7000 	str.w	r7, [r8]
 800bf0e:	e00f      	b.n	800bf30 <_malloc_r+0xa8>
 800bf10:	6822      	ldr	r2, [r4, #0]
 800bf12:	1b52      	subs	r2, r2, r5
 800bf14:	d420      	bmi.n	800bf58 <_malloc_r+0xd0>
 800bf16:	2a0b      	cmp	r2, #11
 800bf18:	d917      	bls.n	800bf4a <_malloc_r+0xc2>
 800bf1a:	1961      	adds	r1, r4, r5
 800bf1c:	42a3      	cmp	r3, r4
 800bf1e:	6025      	str	r5, [r4, #0]
 800bf20:	bf18      	it	ne
 800bf22:	6059      	strne	r1, [r3, #4]
 800bf24:	6863      	ldr	r3, [r4, #4]
 800bf26:	bf08      	it	eq
 800bf28:	f8c8 1000 	streq.w	r1, [r8]
 800bf2c:	5162      	str	r2, [r4, r5]
 800bf2e:	604b      	str	r3, [r1, #4]
 800bf30:	4630      	mov	r0, r6
 800bf32:	f000 f82f 	bl	800bf94 <__malloc_unlock>
 800bf36:	f104 000b 	add.w	r0, r4, #11
 800bf3a:	1d23      	adds	r3, r4, #4
 800bf3c:	f020 0007 	bic.w	r0, r0, #7
 800bf40:	1ac2      	subs	r2, r0, r3
 800bf42:	bf1c      	itt	ne
 800bf44:	1a1b      	subne	r3, r3, r0
 800bf46:	50a3      	strne	r3, [r4, r2]
 800bf48:	e7af      	b.n	800beaa <_malloc_r+0x22>
 800bf4a:	6862      	ldr	r2, [r4, #4]
 800bf4c:	42a3      	cmp	r3, r4
 800bf4e:	bf0c      	ite	eq
 800bf50:	f8c8 2000 	streq.w	r2, [r8]
 800bf54:	605a      	strne	r2, [r3, #4]
 800bf56:	e7eb      	b.n	800bf30 <_malloc_r+0xa8>
 800bf58:	4623      	mov	r3, r4
 800bf5a:	6864      	ldr	r4, [r4, #4]
 800bf5c:	e7ae      	b.n	800bebc <_malloc_r+0x34>
 800bf5e:	463c      	mov	r4, r7
 800bf60:	687f      	ldr	r7, [r7, #4]
 800bf62:	e7b6      	b.n	800bed2 <_malloc_r+0x4a>
 800bf64:	461a      	mov	r2, r3
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	42a3      	cmp	r3, r4
 800bf6a:	d1fb      	bne.n	800bf64 <_malloc_r+0xdc>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	6053      	str	r3, [r2, #4]
 800bf70:	e7de      	b.n	800bf30 <_malloc_r+0xa8>
 800bf72:	230c      	movs	r3, #12
 800bf74:	6033      	str	r3, [r6, #0]
 800bf76:	4630      	mov	r0, r6
 800bf78:	f000 f80c 	bl	800bf94 <__malloc_unlock>
 800bf7c:	e794      	b.n	800bea8 <_malloc_r+0x20>
 800bf7e:	6005      	str	r5, [r0, #0]
 800bf80:	e7d6      	b.n	800bf30 <_malloc_r+0xa8>
 800bf82:	bf00      	nop
 800bf84:	200052a0 	.word	0x200052a0

0800bf88 <__malloc_lock>:
 800bf88:	4801      	ldr	r0, [pc, #4]	@ (800bf90 <__malloc_lock+0x8>)
 800bf8a:	f001 b8c0 	b.w	800d10e <__retarget_lock_acquire_recursive>
 800bf8e:	bf00      	nop
 800bf90:	200053e4 	.word	0x200053e4

0800bf94 <__malloc_unlock>:
 800bf94:	4801      	ldr	r0, [pc, #4]	@ (800bf9c <__malloc_unlock+0x8>)
 800bf96:	f001 b8bb 	b.w	800d110 <__retarget_lock_release_recursive>
 800bf9a:	bf00      	nop
 800bf9c:	200053e4 	.word	0x200053e4

0800bfa0 <_strtol_l.constprop.0>:
 800bfa0:	2b24      	cmp	r3, #36	@ 0x24
 800bfa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa6:	4686      	mov	lr, r0
 800bfa8:	4690      	mov	r8, r2
 800bfaa:	d801      	bhi.n	800bfb0 <_strtol_l.constprop.0+0x10>
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d106      	bne.n	800bfbe <_strtol_l.constprop.0+0x1e>
 800bfb0:	f001 f882 	bl	800d0b8 <__errno>
 800bfb4:	2316      	movs	r3, #22
 800bfb6:	6003      	str	r3, [r0, #0]
 800bfb8:	2000      	movs	r0, #0
 800bfba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfbe:	4834      	ldr	r0, [pc, #208]	@ (800c090 <_strtol_l.constprop.0+0xf0>)
 800bfc0:	460d      	mov	r5, r1
 800bfc2:	462a      	mov	r2, r5
 800bfc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfc8:	5d06      	ldrb	r6, [r0, r4]
 800bfca:	f016 0608 	ands.w	r6, r6, #8
 800bfce:	d1f8      	bne.n	800bfc2 <_strtol_l.constprop.0+0x22>
 800bfd0:	2c2d      	cmp	r4, #45	@ 0x2d
 800bfd2:	d12d      	bne.n	800c030 <_strtol_l.constprop.0+0x90>
 800bfd4:	782c      	ldrb	r4, [r5, #0]
 800bfd6:	2601      	movs	r6, #1
 800bfd8:	1c95      	adds	r5, r2, #2
 800bfda:	f033 0210 	bics.w	r2, r3, #16
 800bfde:	d109      	bne.n	800bff4 <_strtol_l.constprop.0+0x54>
 800bfe0:	2c30      	cmp	r4, #48	@ 0x30
 800bfe2:	d12a      	bne.n	800c03a <_strtol_l.constprop.0+0x9a>
 800bfe4:	782a      	ldrb	r2, [r5, #0]
 800bfe6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bfea:	2a58      	cmp	r2, #88	@ 0x58
 800bfec:	d125      	bne.n	800c03a <_strtol_l.constprop.0+0x9a>
 800bfee:	786c      	ldrb	r4, [r5, #1]
 800bff0:	2310      	movs	r3, #16
 800bff2:	3502      	adds	r5, #2
 800bff4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bff8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bffc:	2200      	movs	r2, #0
 800bffe:	fbbc f9f3 	udiv	r9, ip, r3
 800c002:	4610      	mov	r0, r2
 800c004:	fb03 ca19 	mls	sl, r3, r9, ip
 800c008:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c00c:	2f09      	cmp	r7, #9
 800c00e:	d81b      	bhi.n	800c048 <_strtol_l.constprop.0+0xa8>
 800c010:	463c      	mov	r4, r7
 800c012:	42a3      	cmp	r3, r4
 800c014:	dd27      	ble.n	800c066 <_strtol_l.constprop.0+0xc6>
 800c016:	1c57      	adds	r7, r2, #1
 800c018:	d007      	beq.n	800c02a <_strtol_l.constprop.0+0x8a>
 800c01a:	4581      	cmp	r9, r0
 800c01c:	d320      	bcc.n	800c060 <_strtol_l.constprop.0+0xc0>
 800c01e:	d101      	bne.n	800c024 <_strtol_l.constprop.0+0x84>
 800c020:	45a2      	cmp	sl, r4
 800c022:	db1d      	blt.n	800c060 <_strtol_l.constprop.0+0xc0>
 800c024:	fb00 4003 	mla	r0, r0, r3, r4
 800c028:	2201      	movs	r2, #1
 800c02a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c02e:	e7eb      	b.n	800c008 <_strtol_l.constprop.0+0x68>
 800c030:	2c2b      	cmp	r4, #43	@ 0x2b
 800c032:	bf04      	itt	eq
 800c034:	782c      	ldrbeq	r4, [r5, #0]
 800c036:	1c95      	addeq	r5, r2, #2
 800c038:	e7cf      	b.n	800bfda <_strtol_l.constprop.0+0x3a>
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1da      	bne.n	800bff4 <_strtol_l.constprop.0+0x54>
 800c03e:	2c30      	cmp	r4, #48	@ 0x30
 800c040:	bf0c      	ite	eq
 800c042:	2308      	moveq	r3, #8
 800c044:	230a      	movne	r3, #10
 800c046:	e7d5      	b.n	800bff4 <_strtol_l.constprop.0+0x54>
 800c048:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c04c:	2f19      	cmp	r7, #25
 800c04e:	d801      	bhi.n	800c054 <_strtol_l.constprop.0+0xb4>
 800c050:	3c37      	subs	r4, #55	@ 0x37
 800c052:	e7de      	b.n	800c012 <_strtol_l.constprop.0+0x72>
 800c054:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c058:	2f19      	cmp	r7, #25
 800c05a:	d804      	bhi.n	800c066 <_strtol_l.constprop.0+0xc6>
 800c05c:	3c57      	subs	r4, #87	@ 0x57
 800c05e:	e7d8      	b.n	800c012 <_strtol_l.constprop.0+0x72>
 800c060:	f04f 32ff 	mov.w	r2, #4294967295
 800c064:	e7e1      	b.n	800c02a <_strtol_l.constprop.0+0x8a>
 800c066:	1c53      	adds	r3, r2, #1
 800c068:	d108      	bne.n	800c07c <_strtol_l.constprop.0+0xdc>
 800c06a:	2322      	movs	r3, #34	@ 0x22
 800c06c:	f8ce 3000 	str.w	r3, [lr]
 800c070:	4660      	mov	r0, ip
 800c072:	f1b8 0f00 	cmp.w	r8, #0
 800c076:	d0a0      	beq.n	800bfba <_strtol_l.constprop.0+0x1a>
 800c078:	1e69      	subs	r1, r5, #1
 800c07a:	e006      	b.n	800c08a <_strtol_l.constprop.0+0xea>
 800c07c:	b106      	cbz	r6, 800c080 <_strtol_l.constprop.0+0xe0>
 800c07e:	4240      	negs	r0, r0
 800c080:	f1b8 0f00 	cmp.w	r8, #0
 800c084:	d099      	beq.n	800bfba <_strtol_l.constprop.0+0x1a>
 800c086:	2a00      	cmp	r2, #0
 800c088:	d1f6      	bne.n	800c078 <_strtol_l.constprop.0+0xd8>
 800c08a:	f8c8 1000 	str.w	r1, [r8]
 800c08e:	e794      	b.n	800bfba <_strtol_l.constprop.0+0x1a>
 800c090:	080110ed 	.word	0x080110ed

0800c094 <_strtol_r>:
 800c094:	f7ff bf84 	b.w	800bfa0 <_strtol_l.constprop.0>

0800c098 <strtol>:
 800c098:	4613      	mov	r3, r2
 800c09a:	460a      	mov	r2, r1
 800c09c:	4601      	mov	r1, r0
 800c09e:	4802      	ldr	r0, [pc, #8]	@ (800c0a8 <strtol+0x10>)
 800c0a0:	6800      	ldr	r0, [r0, #0]
 800c0a2:	f7ff bf7d 	b.w	800bfa0 <_strtol_l.constprop.0>
 800c0a6:	bf00      	nop
 800c0a8:	20000024 	.word	0x20000024

0800c0ac <__cvt>:
 800c0ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b0:	ec57 6b10 	vmov	r6, r7, d0
 800c0b4:	2f00      	cmp	r7, #0
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	463b      	mov	r3, r7
 800c0bc:	bfbb      	ittet	lt
 800c0be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c0c2:	461f      	movlt	r7, r3
 800c0c4:	2300      	movge	r3, #0
 800c0c6:	232d      	movlt	r3, #45	@ 0x2d
 800c0c8:	700b      	strb	r3, [r1, #0]
 800c0ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c0cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c0d0:	4691      	mov	r9, r2
 800c0d2:	f023 0820 	bic.w	r8, r3, #32
 800c0d6:	bfbc      	itt	lt
 800c0d8:	4632      	movlt	r2, r6
 800c0da:	4616      	movlt	r6, r2
 800c0dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c0e0:	d005      	beq.n	800c0ee <__cvt+0x42>
 800c0e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c0e6:	d100      	bne.n	800c0ea <__cvt+0x3e>
 800c0e8:	3401      	adds	r4, #1
 800c0ea:	2102      	movs	r1, #2
 800c0ec:	e000      	b.n	800c0f0 <__cvt+0x44>
 800c0ee:	2103      	movs	r1, #3
 800c0f0:	ab03      	add	r3, sp, #12
 800c0f2:	9301      	str	r3, [sp, #4]
 800c0f4:	ab02      	add	r3, sp, #8
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	ec47 6b10 	vmov	d0, r6, r7
 800c0fc:	4653      	mov	r3, sl
 800c0fe:	4622      	mov	r2, r4
 800c100:	f001 f8a6 	bl	800d250 <_dtoa_r>
 800c104:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c108:	4605      	mov	r5, r0
 800c10a:	d119      	bne.n	800c140 <__cvt+0x94>
 800c10c:	f019 0f01 	tst.w	r9, #1
 800c110:	d00e      	beq.n	800c130 <__cvt+0x84>
 800c112:	eb00 0904 	add.w	r9, r0, r4
 800c116:	2200      	movs	r2, #0
 800c118:	2300      	movs	r3, #0
 800c11a:	4630      	mov	r0, r6
 800c11c:	4639      	mov	r1, r7
 800c11e:	f7f4 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c122:	b108      	cbz	r0, 800c128 <__cvt+0x7c>
 800c124:	f8cd 900c 	str.w	r9, [sp, #12]
 800c128:	2230      	movs	r2, #48	@ 0x30
 800c12a:	9b03      	ldr	r3, [sp, #12]
 800c12c:	454b      	cmp	r3, r9
 800c12e:	d31e      	bcc.n	800c16e <__cvt+0xc2>
 800c130:	9b03      	ldr	r3, [sp, #12]
 800c132:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c134:	1b5b      	subs	r3, r3, r5
 800c136:	4628      	mov	r0, r5
 800c138:	6013      	str	r3, [r2, #0]
 800c13a:	b004      	add	sp, #16
 800c13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c140:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c144:	eb00 0904 	add.w	r9, r0, r4
 800c148:	d1e5      	bne.n	800c116 <__cvt+0x6a>
 800c14a:	7803      	ldrb	r3, [r0, #0]
 800c14c:	2b30      	cmp	r3, #48	@ 0x30
 800c14e:	d10a      	bne.n	800c166 <__cvt+0xba>
 800c150:	2200      	movs	r2, #0
 800c152:	2300      	movs	r3, #0
 800c154:	4630      	mov	r0, r6
 800c156:	4639      	mov	r1, r7
 800c158:	f7f4 fcb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800c15c:	b918      	cbnz	r0, 800c166 <__cvt+0xba>
 800c15e:	f1c4 0401 	rsb	r4, r4, #1
 800c162:	f8ca 4000 	str.w	r4, [sl]
 800c166:	f8da 3000 	ldr.w	r3, [sl]
 800c16a:	4499      	add	r9, r3
 800c16c:	e7d3      	b.n	800c116 <__cvt+0x6a>
 800c16e:	1c59      	adds	r1, r3, #1
 800c170:	9103      	str	r1, [sp, #12]
 800c172:	701a      	strb	r2, [r3, #0]
 800c174:	e7d9      	b.n	800c12a <__cvt+0x7e>

0800c176 <__exponent>:
 800c176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c178:	2900      	cmp	r1, #0
 800c17a:	bfba      	itte	lt
 800c17c:	4249      	neglt	r1, r1
 800c17e:	232d      	movlt	r3, #45	@ 0x2d
 800c180:	232b      	movge	r3, #43	@ 0x2b
 800c182:	2909      	cmp	r1, #9
 800c184:	7002      	strb	r2, [r0, #0]
 800c186:	7043      	strb	r3, [r0, #1]
 800c188:	dd29      	ble.n	800c1de <__exponent+0x68>
 800c18a:	f10d 0307 	add.w	r3, sp, #7
 800c18e:	461d      	mov	r5, r3
 800c190:	270a      	movs	r7, #10
 800c192:	461a      	mov	r2, r3
 800c194:	fbb1 f6f7 	udiv	r6, r1, r7
 800c198:	fb07 1416 	mls	r4, r7, r6, r1
 800c19c:	3430      	adds	r4, #48	@ 0x30
 800c19e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	2c63      	cmp	r4, #99	@ 0x63
 800c1a6:	f103 33ff 	add.w	r3, r3, #4294967295
 800c1aa:	4631      	mov	r1, r6
 800c1ac:	dcf1      	bgt.n	800c192 <__exponent+0x1c>
 800c1ae:	3130      	adds	r1, #48	@ 0x30
 800c1b0:	1e94      	subs	r4, r2, #2
 800c1b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c1b6:	1c41      	adds	r1, r0, #1
 800c1b8:	4623      	mov	r3, r4
 800c1ba:	42ab      	cmp	r3, r5
 800c1bc:	d30a      	bcc.n	800c1d4 <__exponent+0x5e>
 800c1be:	f10d 0309 	add.w	r3, sp, #9
 800c1c2:	1a9b      	subs	r3, r3, r2
 800c1c4:	42ac      	cmp	r4, r5
 800c1c6:	bf88      	it	hi
 800c1c8:	2300      	movhi	r3, #0
 800c1ca:	3302      	adds	r3, #2
 800c1cc:	4403      	add	r3, r0
 800c1ce:	1a18      	subs	r0, r3, r0
 800c1d0:	b003      	add	sp, #12
 800c1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c1d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c1dc:	e7ed      	b.n	800c1ba <__exponent+0x44>
 800c1de:	2330      	movs	r3, #48	@ 0x30
 800c1e0:	3130      	adds	r1, #48	@ 0x30
 800c1e2:	7083      	strb	r3, [r0, #2]
 800c1e4:	70c1      	strb	r1, [r0, #3]
 800c1e6:	1d03      	adds	r3, r0, #4
 800c1e8:	e7f1      	b.n	800c1ce <__exponent+0x58>
	...

0800c1ec <_printf_float>:
 800c1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f0:	b08d      	sub	sp, #52	@ 0x34
 800c1f2:	460c      	mov	r4, r1
 800c1f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c1f8:	4616      	mov	r6, r2
 800c1fa:	461f      	mov	r7, r3
 800c1fc:	4605      	mov	r5, r0
 800c1fe:	f000 ff01 	bl	800d004 <_localeconv_r>
 800c202:	6803      	ldr	r3, [r0, #0]
 800c204:	9304      	str	r3, [sp, #16]
 800c206:	4618      	mov	r0, r3
 800c208:	f7f4 f832 	bl	8000270 <strlen>
 800c20c:	2300      	movs	r3, #0
 800c20e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c210:	f8d8 3000 	ldr.w	r3, [r8]
 800c214:	9005      	str	r0, [sp, #20]
 800c216:	3307      	adds	r3, #7
 800c218:	f023 0307 	bic.w	r3, r3, #7
 800c21c:	f103 0208 	add.w	r2, r3, #8
 800c220:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c224:	f8d4 b000 	ldr.w	fp, [r4]
 800c228:	f8c8 2000 	str.w	r2, [r8]
 800c22c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c230:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c234:	9307      	str	r3, [sp, #28]
 800c236:	f8cd 8018 	str.w	r8, [sp, #24]
 800c23a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c23e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c242:	4b9c      	ldr	r3, [pc, #624]	@ (800c4b4 <_printf_float+0x2c8>)
 800c244:	f04f 32ff 	mov.w	r2, #4294967295
 800c248:	f7f4 fc70 	bl	8000b2c <__aeabi_dcmpun>
 800c24c:	bb70      	cbnz	r0, 800c2ac <_printf_float+0xc0>
 800c24e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c252:	4b98      	ldr	r3, [pc, #608]	@ (800c4b4 <_printf_float+0x2c8>)
 800c254:	f04f 32ff 	mov.w	r2, #4294967295
 800c258:	f7f4 fc4a 	bl	8000af0 <__aeabi_dcmple>
 800c25c:	bb30      	cbnz	r0, 800c2ac <_printf_float+0xc0>
 800c25e:	2200      	movs	r2, #0
 800c260:	2300      	movs	r3, #0
 800c262:	4640      	mov	r0, r8
 800c264:	4649      	mov	r1, r9
 800c266:	f7f4 fc39 	bl	8000adc <__aeabi_dcmplt>
 800c26a:	b110      	cbz	r0, 800c272 <_printf_float+0x86>
 800c26c:	232d      	movs	r3, #45	@ 0x2d
 800c26e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c272:	4a91      	ldr	r2, [pc, #580]	@ (800c4b8 <_printf_float+0x2cc>)
 800c274:	4b91      	ldr	r3, [pc, #580]	@ (800c4bc <_printf_float+0x2d0>)
 800c276:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c27a:	bf94      	ite	ls
 800c27c:	4690      	movls	r8, r2
 800c27e:	4698      	movhi	r8, r3
 800c280:	2303      	movs	r3, #3
 800c282:	6123      	str	r3, [r4, #16]
 800c284:	f02b 0304 	bic.w	r3, fp, #4
 800c288:	6023      	str	r3, [r4, #0]
 800c28a:	f04f 0900 	mov.w	r9, #0
 800c28e:	9700      	str	r7, [sp, #0]
 800c290:	4633      	mov	r3, r6
 800c292:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c294:	4621      	mov	r1, r4
 800c296:	4628      	mov	r0, r5
 800c298:	f000 f9d2 	bl	800c640 <_printf_common>
 800c29c:	3001      	adds	r0, #1
 800c29e:	f040 808d 	bne.w	800c3bc <_printf_float+0x1d0>
 800c2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a6:	b00d      	add	sp, #52	@ 0x34
 800c2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ac:	4642      	mov	r2, r8
 800c2ae:	464b      	mov	r3, r9
 800c2b0:	4640      	mov	r0, r8
 800c2b2:	4649      	mov	r1, r9
 800c2b4:	f7f4 fc3a 	bl	8000b2c <__aeabi_dcmpun>
 800c2b8:	b140      	cbz	r0, 800c2cc <_printf_float+0xe0>
 800c2ba:	464b      	mov	r3, r9
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	bfbc      	itt	lt
 800c2c0:	232d      	movlt	r3, #45	@ 0x2d
 800c2c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c2c6:	4a7e      	ldr	r2, [pc, #504]	@ (800c4c0 <_printf_float+0x2d4>)
 800c2c8:	4b7e      	ldr	r3, [pc, #504]	@ (800c4c4 <_printf_float+0x2d8>)
 800c2ca:	e7d4      	b.n	800c276 <_printf_float+0x8a>
 800c2cc:	6863      	ldr	r3, [r4, #4]
 800c2ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c2d2:	9206      	str	r2, [sp, #24]
 800c2d4:	1c5a      	adds	r2, r3, #1
 800c2d6:	d13b      	bne.n	800c350 <_printf_float+0x164>
 800c2d8:	2306      	movs	r3, #6
 800c2da:	6063      	str	r3, [r4, #4]
 800c2dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	6022      	str	r2, [r4, #0]
 800c2e4:	9303      	str	r3, [sp, #12]
 800c2e6:	ab0a      	add	r3, sp, #40	@ 0x28
 800c2e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c2ec:	ab09      	add	r3, sp, #36	@ 0x24
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	6861      	ldr	r1, [r4, #4]
 800c2f2:	ec49 8b10 	vmov	d0, r8, r9
 800c2f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	f7ff fed6 	bl	800c0ac <__cvt>
 800c300:	9b06      	ldr	r3, [sp, #24]
 800c302:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c304:	2b47      	cmp	r3, #71	@ 0x47
 800c306:	4680      	mov	r8, r0
 800c308:	d129      	bne.n	800c35e <_printf_float+0x172>
 800c30a:	1cc8      	adds	r0, r1, #3
 800c30c:	db02      	blt.n	800c314 <_printf_float+0x128>
 800c30e:	6863      	ldr	r3, [r4, #4]
 800c310:	4299      	cmp	r1, r3
 800c312:	dd41      	ble.n	800c398 <_printf_float+0x1ac>
 800c314:	f1aa 0a02 	sub.w	sl, sl, #2
 800c318:	fa5f fa8a 	uxtb.w	sl, sl
 800c31c:	3901      	subs	r1, #1
 800c31e:	4652      	mov	r2, sl
 800c320:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c324:	9109      	str	r1, [sp, #36]	@ 0x24
 800c326:	f7ff ff26 	bl	800c176 <__exponent>
 800c32a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c32c:	1813      	adds	r3, r2, r0
 800c32e:	2a01      	cmp	r2, #1
 800c330:	4681      	mov	r9, r0
 800c332:	6123      	str	r3, [r4, #16]
 800c334:	dc02      	bgt.n	800c33c <_printf_float+0x150>
 800c336:	6822      	ldr	r2, [r4, #0]
 800c338:	07d2      	lsls	r2, r2, #31
 800c33a:	d501      	bpl.n	800c340 <_printf_float+0x154>
 800c33c:	3301      	adds	r3, #1
 800c33e:	6123      	str	r3, [r4, #16]
 800c340:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c344:	2b00      	cmp	r3, #0
 800c346:	d0a2      	beq.n	800c28e <_printf_float+0xa2>
 800c348:	232d      	movs	r3, #45	@ 0x2d
 800c34a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c34e:	e79e      	b.n	800c28e <_printf_float+0xa2>
 800c350:	9a06      	ldr	r2, [sp, #24]
 800c352:	2a47      	cmp	r2, #71	@ 0x47
 800c354:	d1c2      	bne.n	800c2dc <_printf_float+0xf0>
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1c0      	bne.n	800c2dc <_printf_float+0xf0>
 800c35a:	2301      	movs	r3, #1
 800c35c:	e7bd      	b.n	800c2da <_printf_float+0xee>
 800c35e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c362:	d9db      	bls.n	800c31c <_printf_float+0x130>
 800c364:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c368:	d118      	bne.n	800c39c <_printf_float+0x1b0>
 800c36a:	2900      	cmp	r1, #0
 800c36c:	6863      	ldr	r3, [r4, #4]
 800c36e:	dd0b      	ble.n	800c388 <_printf_float+0x19c>
 800c370:	6121      	str	r1, [r4, #16]
 800c372:	b913      	cbnz	r3, 800c37a <_printf_float+0x18e>
 800c374:	6822      	ldr	r2, [r4, #0]
 800c376:	07d0      	lsls	r0, r2, #31
 800c378:	d502      	bpl.n	800c380 <_printf_float+0x194>
 800c37a:	3301      	adds	r3, #1
 800c37c:	440b      	add	r3, r1
 800c37e:	6123      	str	r3, [r4, #16]
 800c380:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c382:	f04f 0900 	mov.w	r9, #0
 800c386:	e7db      	b.n	800c340 <_printf_float+0x154>
 800c388:	b913      	cbnz	r3, 800c390 <_printf_float+0x1a4>
 800c38a:	6822      	ldr	r2, [r4, #0]
 800c38c:	07d2      	lsls	r2, r2, #31
 800c38e:	d501      	bpl.n	800c394 <_printf_float+0x1a8>
 800c390:	3302      	adds	r3, #2
 800c392:	e7f4      	b.n	800c37e <_printf_float+0x192>
 800c394:	2301      	movs	r3, #1
 800c396:	e7f2      	b.n	800c37e <_printf_float+0x192>
 800c398:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c39c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c39e:	4299      	cmp	r1, r3
 800c3a0:	db05      	blt.n	800c3ae <_printf_float+0x1c2>
 800c3a2:	6823      	ldr	r3, [r4, #0]
 800c3a4:	6121      	str	r1, [r4, #16]
 800c3a6:	07d8      	lsls	r0, r3, #31
 800c3a8:	d5ea      	bpl.n	800c380 <_printf_float+0x194>
 800c3aa:	1c4b      	adds	r3, r1, #1
 800c3ac:	e7e7      	b.n	800c37e <_printf_float+0x192>
 800c3ae:	2900      	cmp	r1, #0
 800c3b0:	bfd4      	ite	le
 800c3b2:	f1c1 0202 	rsble	r2, r1, #2
 800c3b6:	2201      	movgt	r2, #1
 800c3b8:	4413      	add	r3, r2
 800c3ba:	e7e0      	b.n	800c37e <_printf_float+0x192>
 800c3bc:	6823      	ldr	r3, [r4, #0]
 800c3be:	055a      	lsls	r2, r3, #21
 800c3c0:	d407      	bmi.n	800c3d2 <_printf_float+0x1e6>
 800c3c2:	6923      	ldr	r3, [r4, #16]
 800c3c4:	4642      	mov	r2, r8
 800c3c6:	4631      	mov	r1, r6
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	47b8      	blx	r7
 800c3cc:	3001      	adds	r0, #1
 800c3ce:	d12b      	bne.n	800c428 <_printf_float+0x23c>
 800c3d0:	e767      	b.n	800c2a2 <_printf_float+0xb6>
 800c3d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c3d6:	f240 80dd 	bls.w	800c594 <_printf_float+0x3a8>
 800c3da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c3de:	2200      	movs	r2, #0
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f7f4 fb71 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d033      	beq.n	800c452 <_printf_float+0x266>
 800c3ea:	4a37      	ldr	r2, [pc, #220]	@ (800c4c8 <_printf_float+0x2dc>)
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	4631      	mov	r1, r6
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	47b8      	blx	r7
 800c3f4:	3001      	adds	r0, #1
 800c3f6:	f43f af54 	beq.w	800c2a2 <_printf_float+0xb6>
 800c3fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c3fe:	4543      	cmp	r3, r8
 800c400:	db02      	blt.n	800c408 <_printf_float+0x21c>
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	07d8      	lsls	r0, r3, #31
 800c406:	d50f      	bpl.n	800c428 <_printf_float+0x23c>
 800c408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c40c:	4631      	mov	r1, r6
 800c40e:	4628      	mov	r0, r5
 800c410:	47b8      	blx	r7
 800c412:	3001      	adds	r0, #1
 800c414:	f43f af45 	beq.w	800c2a2 <_printf_float+0xb6>
 800c418:	f04f 0900 	mov.w	r9, #0
 800c41c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c420:	f104 0a1a 	add.w	sl, r4, #26
 800c424:	45c8      	cmp	r8, r9
 800c426:	dc09      	bgt.n	800c43c <_printf_float+0x250>
 800c428:	6823      	ldr	r3, [r4, #0]
 800c42a:	079b      	lsls	r3, r3, #30
 800c42c:	f100 8103 	bmi.w	800c636 <_printf_float+0x44a>
 800c430:	68e0      	ldr	r0, [r4, #12]
 800c432:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c434:	4298      	cmp	r0, r3
 800c436:	bfb8      	it	lt
 800c438:	4618      	movlt	r0, r3
 800c43a:	e734      	b.n	800c2a6 <_printf_float+0xba>
 800c43c:	2301      	movs	r3, #1
 800c43e:	4652      	mov	r2, sl
 800c440:	4631      	mov	r1, r6
 800c442:	4628      	mov	r0, r5
 800c444:	47b8      	blx	r7
 800c446:	3001      	adds	r0, #1
 800c448:	f43f af2b 	beq.w	800c2a2 <_printf_float+0xb6>
 800c44c:	f109 0901 	add.w	r9, r9, #1
 800c450:	e7e8      	b.n	800c424 <_printf_float+0x238>
 800c452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c454:	2b00      	cmp	r3, #0
 800c456:	dc39      	bgt.n	800c4cc <_printf_float+0x2e0>
 800c458:	4a1b      	ldr	r2, [pc, #108]	@ (800c4c8 <_printf_float+0x2dc>)
 800c45a:	2301      	movs	r3, #1
 800c45c:	4631      	mov	r1, r6
 800c45e:	4628      	mov	r0, r5
 800c460:	47b8      	blx	r7
 800c462:	3001      	adds	r0, #1
 800c464:	f43f af1d 	beq.w	800c2a2 <_printf_float+0xb6>
 800c468:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c46c:	ea59 0303 	orrs.w	r3, r9, r3
 800c470:	d102      	bne.n	800c478 <_printf_float+0x28c>
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	07d9      	lsls	r1, r3, #31
 800c476:	d5d7      	bpl.n	800c428 <_printf_float+0x23c>
 800c478:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c47c:	4631      	mov	r1, r6
 800c47e:	4628      	mov	r0, r5
 800c480:	47b8      	blx	r7
 800c482:	3001      	adds	r0, #1
 800c484:	f43f af0d 	beq.w	800c2a2 <_printf_float+0xb6>
 800c488:	f04f 0a00 	mov.w	sl, #0
 800c48c:	f104 0b1a 	add.w	fp, r4, #26
 800c490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c492:	425b      	negs	r3, r3
 800c494:	4553      	cmp	r3, sl
 800c496:	dc01      	bgt.n	800c49c <_printf_float+0x2b0>
 800c498:	464b      	mov	r3, r9
 800c49a:	e793      	b.n	800c3c4 <_printf_float+0x1d8>
 800c49c:	2301      	movs	r3, #1
 800c49e:	465a      	mov	r2, fp
 800c4a0:	4631      	mov	r1, r6
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	47b8      	blx	r7
 800c4a6:	3001      	adds	r0, #1
 800c4a8:	f43f aefb 	beq.w	800c2a2 <_printf_float+0xb6>
 800c4ac:	f10a 0a01 	add.w	sl, sl, #1
 800c4b0:	e7ee      	b.n	800c490 <_printf_float+0x2a4>
 800c4b2:	bf00      	nop
 800c4b4:	7fefffff 	.word	0x7fefffff
 800c4b8:	080111ed 	.word	0x080111ed
 800c4bc:	080111f1 	.word	0x080111f1
 800c4c0:	080111f5 	.word	0x080111f5
 800c4c4:	080111f9 	.word	0x080111f9
 800c4c8:	080111fd 	.word	0x080111fd
 800c4cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c4ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c4d2:	4553      	cmp	r3, sl
 800c4d4:	bfa8      	it	ge
 800c4d6:	4653      	movge	r3, sl
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	4699      	mov	r9, r3
 800c4dc:	dc36      	bgt.n	800c54c <_printf_float+0x360>
 800c4de:	f04f 0b00 	mov.w	fp, #0
 800c4e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4e6:	f104 021a 	add.w	r2, r4, #26
 800c4ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c4ec:	9306      	str	r3, [sp, #24]
 800c4ee:	eba3 0309 	sub.w	r3, r3, r9
 800c4f2:	455b      	cmp	r3, fp
 800c4f4:	dc31      	bgt.n	800c55a <_printf_float+0x36e>
 800c4f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4f8:	459a      	cmp	sl, r3
 800c4fa:	dc3a      	bgt.n	800c572 <_printf_float+0x386>
 800c4fc:	6823      	ldr	r3, [r4, #0]
 800c4fe:	07da      	lsls	r2, r3, #31
 800c500:	d437      	bmi.n	800c572 <_printf_float+0x386>
 800c502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c504:	ebaa 0903 	sub.w	r9, sl, r3
 800c508:	9b06      	ldr	r3, [sp, #24]
 800c50a:	ebaa 0303 	sub.w	r3, sl, r3
 800c50e:	4599      	cmp	r9, r3
 800c510:	bfa8      	it	ge
 800c512:	4699      	movge	r9, r3
 800c514:	f1b9 0f00 	cmp.w	r9, #0
 800c518:	dc33      	bgt.n	800c582 <_printf_float+0x396>
 800c51a:	f04f 0800 	mov.w	r8, #0
 800c51e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c522:	f104 0b1a 	add.w	fp, r4, #26
 800c526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c528:	ebaa 0303 	sub.w	r3, sl, r3
 800c52c:	eba3 0309 	sub.w	r3, r3, r9
 800c530:	4543      	cmp	r3, r8
 800c532:	f77f af79 	ble.w	800c428 <_printf_float+0x23c>
 800c536:	2301      	movs	r3, #1
 800c538:	465a      	mov	r2, fp
 800c53a:	4631      	mov	r1, r6
 800c53c:	4628      	mov	r0, r5
 800c53e:	47b8      	blx	r7
 800c540:	3001      	adds	r0, #1
 800c542:	f43f aeae 	beq.w	800c2a2 <_printf_float+0xb6>
 800c546:	f108 0801 	add.w	r8, r8, #1
 800c54a:	e7ec      	b.n	800c526 <_printf_float+0x33a>
 800c54c:	4642      	mov	r2, r8
 800c54e:	4631      	mov	r1, r6
 800c550:	4628      	mov	r0, r5
 800c552:	47b8      	blx	r7
 800c554:	3001      	adds	r0, #1
 800c556:	d1c2      	bne.n	800c4de <_printf_float+0x2f2>
 800c558:	e6a3      	b.n	800c2a2 <_printf_float+0xb6>
 800c55a:	2301      	movs	r3, #1
 800c55c:	4631      	mov	r1, r6
 800c55e:	4628      	mov	r0, r5
 800c560:	9206      	str	r2, [sp, #24]
 800c562:	47b8      	blx	r7
 800c564:	3001      	adds	r0, #1
 800c566:	f43f ae9c 	beq.w	800c2a2 <_printf_float+0xb6>
 800c56a:	9a06      	ldr	r2, [sp, #24]
 800c56c:	f10b 0b01 	add.w	fp, fp, #1
 800c570:	e7bb      	b.n	800c4ea <_printf_float+0x2fe>
 800c572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c576:	4631      	mov	r1, r6
 800c578:	4628      	mov	r0, r5
 800c57a:	47b8      	blx	r7
 800c57c:	3001      	adds	r0, #1
 800c57e:	d1c0      	bne.n	800c502 <_printf_float+0x316>
 800c580:	e68f      	b.n	800c2a2 <_printf_float+0xb6>
 800c582:	9a06      	ldr	r2, [sp, #24]
 800c584:	464b      	mov	r3, r9
 800c586:	4442      	add	r2, r8
 800c588:	4631      	mov	r1, r6
 800c58a:	4628      	mov	r0, r5
 800c58c:	47b8      	blx	r7
 800c58e:	3001      	adds	r0, #1
 800c590:	d1c3      	bne.n	800c51a <_printf_float+0x32e>
 800c592:	e686      	b.n	800c2a2 <_printf_float+0xb6>
 800c594:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c598:	f1ba 0f01 	cmp.w	sl, #1
 800c59c:	dc01      	bgt.n	800c5a2 <_printf_float+0x3b6>
 800c59e:	07db      	lsls	r3, r3, #31
 800c5a0:	d536      	bpl.n	800c610 <_printf_float+0x424>
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	4642      	mov	r2, r8
 800c5a6:	4631      	mov	r1, r6
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	47b8      	blx	r7
 800c5ac:	3001      	adds	r0, #1
 800c5ae:	f43f ae78 	beq.w	800c2a2 <_printf_float+0xb6>
 800c5b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5b6:	4631      	mov	r1, r6
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	47b8      	blx	r7
 800c5bc:	3001      	adds	r0, #1
 800c5be:	f43f ae70 	beq.w	800c2a2 <_printf_float+0xb6>
 800c5c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c5ce:	f7f4 fa7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5d2:	b9c0      	cbnz	r0, 800c606 <_printf_float+0x41a>
 800c5d4:	4653      	mov	r3, sl
 800c5d6:	f108 0201 	add.w	r2, r8, #1
 800c5da:	4631      	mov	r1, r6
 800c5dc:	4628      	mov	r0, r5
 800c5de:	47b8      	blx	r7
 800c5e0:	3001      	adds	r0, #1
 800c5e2:	d10c      	bne.n	800c5fe <_printf_float+0x412>
 800c5e4:	e65d      	b.n	800c2a2 <_printf_float+0xb6>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	465a      	mov	r2, fp
 800c5ea:	4631      	mov	r1, r6
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	47b8      	blx	r7
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	f43f ae56 	beq.w	800c2a2 <_printf_float+0xb6>
 800c5f6:	f108 0801 	add.w	r8, r8, #1
 800c5fa:	45d0      	cmp	r8, sl
 800c5fc:	dbf3      	blt.n	800c5e6 <_printf_float+0x3fa>
 800c5fe:	464b      	mov	r3, r9
 800c600:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c604:	e6df      	b.n	800c3c6 <_printf_float+0x1da>
 800c606:	f04f 0800 	mov.w	r8, #0
 800c60a:	f104 0b1a 	add.w	fp, r4, #26
 800c60e:	e7f4      	b.n	800c5fa <_printf_float+0x40e>
 800c610:	2301      	movs	r3, #1
 800c612:	4642      	mov	r2, r8
 800c614:	e7e1      	b.n	800c5da <_printf_float+0x3ee>
 800c616:	2301      	movs	r3, #1
 800c618:	464a      	mov	r2, r9
 800c61a:	4631      	mov	r1, r6
 800c61c:	4628      	mov	r0, r5
 800c61e:	47b8      	blx	r7
 800c620:	3001      	adds	r0, #1
 800c622:	f43f ae3e 	beq.w	800c2a2 <_printf_float+0xb6>
 800c626:	f108 0801 	add.w	r8, r8, #1
 800c62a:	68e3      	ldr	r3, [r4, #12]
 800c62c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c62e:	1a5b      	subs	r3, r3, r1
 800c630:	4543      	cmp	r3, r8
 800c632:	dcf0      	bgt.n	800c616 <_printf_float+0x42a>
 800c634:	e6fc      	b.n	800c430 <_printf_float+0x244>
 800c636:	f04f 0800 	mov.w	r8, #0
 800c63a:	f104 0919 	add.w	r9, r4, #25
 800c63e:	e7f4      	b.n	800c62a <_printf_float+0x43e>

0800c640 <_printf_common>:
 800c640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c644:	4616      	mov	r6, r2
 800c646:	4698      	mov	r8, r3
 800c648:	688a      	ldr	r2, [r1, #8]
 800c64a:	690b      	ldr	r3, [r1, #16]
 800c64c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c650:	4293      	cmp	r3, r2
 800c652:	bfb8      	it	lt
 800c654:	4613      	movlt	r3, r2
 800c656:	6033      	str	r3, [r6, #0]
 800c658:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c65c:	4607      	mov	r7, r0
 800c65e:	460c      	mov	r4, r1
 800c660:	b10a      	cbz	r2, 800c666 <_printf_common+0x26>
 800c662:	3301      	adds	r3, #1
 800c664:	6033      	str	r3, [r6, #0]
 800c666:	6823      	ldr	r3, [r4, #0]
 800c668:	0699      	lsls	r1, r3, #26
 800c66a:	bf42      	ittt	mi
 800c66c:	6833      	ldrmi	r3, [r6, #0]
 800c66e:	3302      	addmi	r3, #2
 800c670:	6033      	strmi	r3, [r6, #0]
 800c672:	6825      	ldr	r5, [r4, #0]
 800c674:	f015 0506 	ands.w	r5, r5, #6
 800c678:	d106      	bne.n	800c688 <_printf_common+0x48>
 800c67a:	f104 0a19 	add.w	sl, r4, #25
 800c67e:	68e3      	ldr	r3, [r4, #12]
 800c680:	6832      	ldr	r2, [r6, #0]
 800c682:	1a9b      	subs	r3, r3, r2
 800c684:	42ab      	cmp	r3, r5
 800c686:	dc26      	bgt.n	800c6d6 <_printf_common+0x96>
 800c688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c68c:	6822      	ldr	r2, [r4, #0]
 800c68e:	3b00      	subs	r3, #0
 800c690:	bf18      	it	ne
 800c692:	2301      	movne	r3, #1
 800c694:	0692      	lsls	r2, r2, #26
 800c696:	d42b      	bmi.n	800c6f0 <_printf_common+0xb0>
 800c698:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c69c:	4641      	mov	r1, r8
 800c69e:	4638      	mov	r0, r7
 800c6a0:	47c8      	blx	r9
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	d01e      	beq.n	800c6e4 <_printf_common+0xa4>
 800c6a6:	6823      	ldr	r3, [r4, #0]
 800c6a8:	6922      	ldr	r2, [r4, #16]
 800c6aa:	f003 0306 	and.w	r3, r3, #6
 800c6ae:	2b04      	cmp	r3, #4
 800c6b0:	bf02      	ittt	eq
 800c6b2:	68e5      	ldreq	r5, [r4, #12]
 800c6b4:	6833      	ldreq	r3, [r6, #0]
 800c6b6:	1aed      	subeq	r5, r5, r3
 800c6b8:	68a3      	ldr	r3, [r4, #8]
 800c6ba:	bf0c      	ite	eq
 800c6bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6c0:	2500      	movne	r5, #0
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	bfc4      	itt	gt
 800c6c6:	1a9b      	subgt	r3, r3, r2
 800c6c8:	18ed      	addgt	r5, r5, r3
 800c6ca:	2600      	movs	r6, #0
 800c6cc:	341a      	adds	r4, #26
 800c6ce:	42b5      	cmp	r5, r6
 800c6d0:	d11a      	bne.n	800c708 <_printf_common+0xc8>
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	e008      	b.n	800c6e8 <_printf_common+0xa8>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	4652      	mov	r2, sl
 800c6da:	4641      	mov	r1, r8
 800c6dc:	4638      	mov	r0, r7
 800c6de:	47c8      	blx	r9
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	d103      	bne.n	800c6ec <_printf_common+0xac>
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ec:	3501      	adds	r5, #1
 800c6ee:	e7c6      	b.n	800c67e <_printf_common+0x3e>
 800c6f0:	18e1      	adds	r1, r4, r3
 800c6f2:	1c5a      	adds	r2, r3, #1
 800c6f4:	2030      	movs	r0, #48	@ 0x30
 800c6f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c6fa:	4422      	add	r2, r4
 800c6fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c704:	3302      	adds	r3, #2
 800c706:	e7c7      	b.n	800c698 <_printf_common+0x58>
 800c708:	2301      	movs	r3, #1
 800c70a:	4622      	mov	r2, r4
 800c70c:	4641      	mov	r1, r8
 800c70e:	4638      	mov	r0, r7
 800c710:	47c8      	blx	r9
 800c712:	3001      	adds	r0, #1
 800c714:	d0e6      	beq.n	800c6e4 <_printf_common+0xa4>
 800c716:	3601      	adds	r6, #1
 800c718:	e7d9      	b.n	800c6ce <_printf_common+0x8e>
	...

0800c71c <_printf_i>:
 800c71c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c720:	7e0f      	ldrb	r7, [r1, #24]
 800c722:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c724:	2f78      	cmp	r7, #120	@ 0x78
 800c726:	4691      	mov	r9, r2
 800c728:	4680      	mov	r8, r0
 800c72a:	460c      	mov	r4, r1
 800c72c:	469a      	mov	sl, r3
 800c72e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c732:	d807      	bhi.n	800c744 <_printf_i+0x28>
 800c734:	2f62      	cmp	r7, #98	@ 0x62
 800c736:	d80a      	bhi.n	800c74e <_printf_i+0x32>
 800c738:	2f00      	cmp	r7, #0
 800c73a:	f000 80d2 	beq.w	800c8e2 <_printf_i+0x1c6>
 800c73e:	2f58      	cmp	r7, #88	@ 0x58
 800c740:	f000 80b9 	beq.w	800c8b6 <_printf_i+0x19a>
 800c744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c74c:	e03a      	b.n	800c7c4 <_printf_i+0xa8>
 800c74e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c752:	2b15      	cmp	r3, #21
 800c754:	d8f6      	bhi.n	800c744 <_printf_i+0x28>
 800c756:	a101      	add	r1, pc, #4	@ (adr r1, 800c75c <_printf_i+0x40>)
 800c758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c75c:	0800c7b5 	.word	0x0800c7b5
 800c760:	0800c7c9 	.word	0x0800c7c9
 800c764:	0800c745 	.word	0x0800c745
 800c768:	0800c745 	.word	0x0800c745
 800c76c:	0800c745 	.word	0x0800c745
 800c770:	0800c745 	.word	0x0800c745
 800c774:	0800c7c9 	.word	0x0800c7c9
 800c778:	0800c745 	.word	0x0800c745
 800c77c:	0800c745 	.word	0x0800c745
 800c780:	0800c745 	.word	0x0800c745
 800c784:	0800c745 	.word	0x0800c745
 800c788:	0800c8c9 	.word	0x0800c8c9
 800c78c:	0800c7f3 	.word	0x0800c7f3
 800c790:	0800c883 	.word	0x0800c883
 800c794:	0800c745 	.word	0x0800c745
 800c798:	0800c745 	.word	0x0800c745
 800c79c:	0800c8eb 	.word	0x0800c8eb
 800c7a0:	0800c745 	.word	0x0800c745
 800c7a4:	0800c7f3 	.word	0x0800c7f3
 800c7a8:	0800c745 	.word	0x0800c745
 800c7ac:	0800c745 	.word	0x0800c745
 800c7b0:	0800c88b 	.word	0x0800c88b
 800c7b4:	6833      	ldr	r3, [r6, #0]
 800c7b6:	1d1a      	adds	r2, r3, #4
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	6032      	str	r2, [r6, #0]
 800c7bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c7c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e09d      	b.n	800c904 <_printf_i+0x1e8>
 800c7c8:	6833      	ldr	r3, [r6, #0]
 800c7ca:	6820      	ldr	r0, [r4, #0]
 800c7cc:	1d19      	adds	r1, r3, #4
 800c7ce:	6031      	str	r1, [r6, #0]
 800c7d0:	0606      	lsls	r6, r0, #24
 800c7d2:	d501      	bpl.n	800c7d8 <_printf_i+0xbc>
 800c7d4:	681d      	ldr	r5, [r3, #0]
 800c7d6:	e003      	b.n	800c7e0 <_printf_i+0xc4>
 800c7d8:	0645      	lsls	r5, r0, #25
 800c7da:	d5fb      	bpl.n	800c7d4 <_printf_i+0xb8>
 800c7dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c7e0:	2d00      	cmp	r5, #0
 800c7e2:	da03      	bge.n	800c7ec <_printf_i+0xd0>
 800c7e4:	232d      	movs	r3, #45	@ 0x2d
 800c7e6:	426d      	negs	r5, r5
 800c7e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7ec:	4859      	ldr	r0, [pc, #356]	@ (800c954 <_printf_i+0x238>)
 800c7ee:	230a      	movs	r3, #10
 800c7f0:	e011      	b.n	800c816 <_printf_i+0xfa>
 800c7f2:	6821      	ldr	r1, [r4, #0]
 800c7f4:	6833      	ldr	r3, [r6, #0]
 800c7f6:	0608      	lsls	r0, r1, #24
 800c7f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c7fc:	d402      	bmi.n	800c804 <_printf_i+0xe8>
 800c7fe:	0649      	lsls	r1, r1, #25
 800c800:	bf48      	it	mi
 800c802:	b2ad      	uxthmi	r5, r5
 800c804:	2f6f      	cmp	r7, #111	@ 0x6f
 800c806:	4853      	ldr	r0, [pc, #332]	@ (800c954 <_printf_i+0x238>)
 800c808:	6033      	str	r3, [r6, #0]
 800c80a:	bf14      	ite	ne
 800c80c:	230a      	movne	r3, #10
 800c80e:	2308      	moveq	r3, #8
 800c810:	2100      	movs	r1, #0
 800c812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c816:	6866      	ldr	r6, [r4, #4]
 800c818:	60a6      	str	r6, [r4, #8]
 800c81a:	2e00      	cmp	r6, #0
 800c81c:	bfa2      	ittt	ge
 800c81e:	6821      	ldrge	r1, [r4, #0]
 800c820:	f021 0104 	bicge.w	r1, r1, #4
 800c824:	6021      	strge	r1, [r4, #0]
 800c826:	b90d      	cbnz	r5, 800c82c <_printf_i+0x110>
 800c828:	2e00      	cmp	r6, #0
 800c82a:	d04b      	beq.n	800c8c4 <_printf_i+0x1a8>
 800c82c:	4616      	mov	r6, r2
 800c82e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c832:	fb03 5711 	mls	r7, r3, r1, r5
 800c836:	5dc7      	ldrb	r7, [r0, r7]
 800c838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c83c:	462f      	mov	r7, r5
 800c83e:	42bb      	cmp	r3, r7
 800c840:	460d      	mov	r5, r1
 800c842:	d9f4      	bls.n	800c82e <_printf_i+0x112>
 800c844:	2b08      	cmp	r3, #8
 800c846:	d10b      	bne.n	800c860 <_printf_i+0x144>
 800c848:	6823      	ldr	r3, [r4, #0]
 800c84a:	07df      	lsls	r7, r3, #31
 800c84c:	d508      	bpl.n	800c860 <_printf_i+0x144>
 800c84e:	6923      	ldr	r3, [r4, #16]
 800c850:	6861      	ldr	r1, [r4, #4]
 800c852:	4299      	cmp	r1, r3
 800c854:	bfde      	ittt	le
 800c856:	2330      	movle	r3, #48	@ 0x30
 800c858:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c85c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c860:	1b92      	subs	r2, r2, r6
 800c862:	6122      	str	r2, [r4, #16]
 800c864:	f8cd a000 	str.w	sl, [sp]
 800c868:	464b      	mov	r3, r9
 800c86a:	aa03      	add	r2, sp, #12
 800c86c:	4621      	mov	r1, r4
 800c86e:	4640      	mov	r0, r8
 800c870:	f7ff fee6 	bl	800c640 <_printf_common>
 800c874:	3001      	adds	r0, #1
 800c876:	d14a      	bne.n	800c90e <_printf_i+0x1f2>
 800c878:	f04f 30ff 	mov.w	r0, #4294967295
 800c87c:	b004      	add	sp, #16
 800c87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c882:	6823      	ldr	r3, [r4, #0]
 800c884:	f043 0320 	orr.w	r3, r3, #32
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	4833      	ldr	r0, [pc, #204]	@ (800c958 <_printf_i+0x23c>)
 800c88c:	2778      	movs	r7, #120	@ 0x78
 800c88e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	6831      	ldr	r1, [r6, #0]
 800c896:	061f      	lsls	r7, r3, #24
 800c898:	f851 5b04 	ldr.w	r5, [r1], #4
 800c89c:	d402      	bmi.n	800c8a4 <_printf_i+0x188>
 800c89e:	065f      	lsls	r7, r3, #25
 800c8a0:	bf48      	it	mi
 800c8a2:	b2ad      	uxthmi	r5, r5
 800c8a4:	6031      	str	r1, [r6, #0]
 800c8a6:	07d9      	lsls	r1, r3, #31
 800c8a8:	bf44      	itt	mi
 800c8aa:	f043 0320 	orrmi.w	r3, r3, #32
 800c8ae:	6023      	strmi	r3, [r4, #0]
 800c8b0:	b11d      	cbz	r5, 800c8ba <_printf_i+0x19e>
 800c8b2:	2310      	movs	r3, #16
 800c8b4:	e7ac      	b.n	800c810 <_printf_i+0xf4>
 800c8b6:	4827      	ldr	r0, [pc, #156]	@ (800c954 <_printf_i+0x238>)
 800c8b8:	e7e9      	b.n	800c88e <_printf_i+0x172>
 800c8ba:	6823      	ldr	r3, [r4, #0]
 800c8bc:	f023 0320 	bic.w	r3, r3, #32
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	e7f6      	b.n	800c8b2 <_printf_i+0x196>
 800c8c4:	4616      	mov	r6, r2
 800c8c6:	e7bd      	b.n	800c844 <_printf_i+0x128>
 800c8c8:	6833      	ldr	r3, [r6, #0]
 800c8ca:	6825      	ldr	r5, [r4, #0]
 800c8cc:	6961      	ldr	r1, [r4, #20]
 800c8ce:	1d18      	adds	r0, r3, #4
 800c8d0:	6030      	str	r0, [r6, #0]
 800c8d2:	062e      	lsls	r6, r5, #24
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	d501      	bpl.n	800c8dc <_printf_i+0x1c0>
 800c8d8:	6019      	str	r1, [r3, #0]
 800c8da:	e002      	b.n	800c8e2 <_printf_i+0x1c6>
 800c8dc:	0668      	lsls	r0, r5, #25
 800c8de:	d5fb      	bpl.n	800c8d8 <_printf_i+0x1bc>
 800c8e0:	8019      	strh	r1, [r3, #0]
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	6123      	str	r3, [r4, #16]
 800c8e6:	4616      	mov	r6, r2
 800c8e8:	e7bc      	b.n	800c864 <_printf_i+0x148>
 800c8ea:	6833      	ldr	r3, [r6, #0]
 800c8ec:	1d1a      	adds	r2, r3, #4
 800c8ee:	6032      	str	r2, [r6, #0]
 800c8f0:	681e      	ldr	r6, [r3, #0]
 800c8f2:	6862      	ldr	r2, [r4, #4]
 800c8f4:	2100      	movs	r1, #0
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	f7f3 fc6a 	bl	80001d0 <memchr>
 800c8fc:	b108      	cbz	r0, 800c902 <_printf_i+0x1e6>
 800c8fe:	1b80      	subs	r0, r0, r6
 800c900:	6060      	str	r0, [r4, #4]
 800c902:	6863      	ldr	r3, [r4, #4]
 800c904:	6123      	str	r3, [r4, #16]
 800c906:	2300      	movs	r3, #0
 800c908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c90c:	e7aa      	b.n	800c864 <_printf_i+0x148>
 800c90e:	6923      	ldr	r3, [r4, #16]
 800c910:	4632      	mov	r2, r6
 800c912:	4649      	mov	r1, r9
 800c914:	4640      	mov	r0, r8
 800c916:	47d0      	blx	sl
 800c918:	3001      	adds	r0, #1
 800c91a:	d0ad      	beq.n	800c878 <_printf_i+0x15c>
 800c91c:	6823      	ldr	r3, [r4, #0]
 800c91e:	079b      	lsls	r3, r3, #30
 800c920:	d413      	bmi.n	800c94a <_printf_i+0x22e>
 800c922:	68e0      	ldr	r0, [r4, #12]
 800c924:	9b03      	ldr	r3, [sp, #12]
 800c926:	4298      	cmp	r0, r3
 800c928:	bfb8      	it	lt
 800c92a:	4618      	movlt	r0, r3
 800c92c:	e7a6      	b.n	800c87c <_printf_i+0x160>
 800c92e:	2301      	movs	r3, #1
 800c930:	4632      	mov	r2, r6
 800c932:	4649      	mov	r1, r9
 800c934:	4640      	mov	r0, r8
 800c936:	47d0      	blx	sl
 800c938:	3001      	adds	r0, #1
 800c93a:	d09d      	beq.n	800c878 <_printf_i+0x15c>
 800c93c:	3501      	adds	r5, #1
 800c93e:	68e3      	ldr	r3, [r4, #12]
 800c940:	9903      	ldr	r1, [sp, #12]
 800c942:	1a5b      	subs	r3, r3, r1
 800c944:	42ab      	cmp	r3, r5
 800c946:	dcf2      	bgt.n	800c92e <_printf_i+0x212>
 800c948:	e7eb      	b.n	800c922 <_printf_i+0x206>
 800c94a:	2500      	movs	r5, #0
 800c94c:	f104 0619 	add.w	r6, r4, #25
 800c950:	e7f5      	b.n	800c93e <_printf_i+0x222>
 800c952:	bf00      	nop
 800c954:	080111ff 	.word	0x080111ff
 800c958:	08011210 	.word	0x08011210

0800c95c <_scanf_float>:
 800c95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c960:	b087      	sub	sp, #28
 800c962:	4617      	mov	r7, r2
 800c964:	9303      	str	r3, [sp, #12]
 800c966:	688b      	ldr	r3, [r1, #8]
 800c968:	1e5a      	subs	r2, r3, #1
 800c96a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c96e:	bf81      	itttt	hi
 800c970:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c974:	eb03 0b05 	addhi.w	fp, r3, r5
 800c978:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c97c:	608b      	strhi	r3, [r1, #8]
 800c97e:	680b      	ldr	r3, [r1, #0]
 800c980:	460a      	mov	r2, r1
 800c982:	f04f 0500 	mov.w	r5, #0
 800c986:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c98a:	f842 3b1c 	str.w	r3, [r2], #28
 800c98e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c992:	4680      	mov	r8, r0
 800c994:	460c      	mov	r4, r1
 800c996:	bf98      	it	ls
 800c998:	f04f 0b00 	movls.w	fp, #0
 800c99c:	9201      	str	r2, [sp, #4]
 800c99e:	4616      	mov	r6, r2
 800c9a0:	46aa      	mov	sl, r5
 800c9a2:	46a9      	mov	r9, r5
 800c9a4:	9502      	str	r5, [sp, #8]
 800c9a6:	68a2      	ldr	r2, [r4, #8]
 800c9a8:	b152      	cbz	r2, 800c9c0 <_scanf_float+0x64>
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	2b4e      	cmp	r3, #78	@ 0x4e
 800c9b0:	d864      	bhi.n	800ca7c <_scanf_float+0x120>
 800c9b2:	2b40      	cmp	r3, #64	@ 0x40
 800c9b4:	d83c      	bhi.n	800ca30 <_scanf_float+0xd4>
 800c9b6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c9ba:	b2c8      	uxtb	r0, r1
 800c9bc:	280e      	cmp	r0, #14
 800c9be:	d93a      	bls.n	800ca36 <_scanf_float+0xda>
 800c9c0:	f1b9 0f00 	cmp.w	r9, #0
 800c9c4:	d003      	beq.n	800c9ce <_scanf_float+0x72>
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9cc:	6023      	str	r3, [r4, #0]
 800c9ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c9d2:	f1ba 0f01 	cmp.w	sl, #1
 800c9d6:	f200 8117 	bhi.w	800cc08 <_scanf_float+0x2ac>
 800c9da:	9b01      	ldr	r3, [sp, #4]
 800c9dc:	429e      	cmp	r6, r3
 800c9de:	f200 8108 	bhi.w	800cbf2 <_scanf_float+0x296>
 800c9e2:	2001      	movs	r0, #1
 800c9e4:	b007      	add	sp, #28
 800c9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ea:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c9ee:	2a0d      	cmp	r2, #13
 800c9f0:	d8e6      	bhi.n	800c9c0 <_scanf_float+0x64>
 800c9f2:	a101      	add	r1, pc, #4	@ (adr r1, 800c9f8 <_scanf_float+0x9c>)
 800c9f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c9f8:	0800cb3f 	.word	0x0800cb3f
 800c9fc:	0800c9c1 	.word	0x0800c9c1
 800ca00:	0800c9c1 	.word	0x0800c9c1
 800ca04:	0800c9c1 	.word	0x0800c9c1
 800ca08:	0800cb9f 	.word	0x0800cb9f
 800ca0c:	0800cb77 	.word	0x0800cb77
 800ca10:	0800c9c1 	.word	0x0800c9c1
 800ca14:	0800c9c1 	.word	0x0800c9c1
 800ca18:	0800cb4d 	.word	0x0800cb4d
 800ca1c:	0800c9c1 	.word	0x0800c9c1
 800ca20:	0800c9c1 	.word	0x0800c9c1
 800ca24:	0800c9c1 	.word	0x0800c9c1
 800ca28:	0800c9c1 	.word	0x0800c9c1
 800ca2c:	0800cb05 	.word	0x0800cb05
 800ca30:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ca34:	e7db      	b.n	800c9ee <_scanf_float+0x92>
 800ca36:	290e      	cmp	r1, #14
 800ca38:	d8c2      	bhi.n	800c9c0 <_scanf_float+0x64>
 800ca3a:	a001      	add	r0, pc, #4	@ (adr r0, 800ca40 <_scanf_float+0xe4>)
 800ca3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ca40:	0800caf5 	.word	0x0800caf5
 800ca44:	0800c9c1 	.word	0x0800c9c1
 800ca48:	0800caf5 	.word	0x0800caf5
 800ca4c:	0800cb8b 	.word	0x0800cb8b
 800ca50:	0800c9c1 	.word	0x0800c9c1
 800ca54:	0800ca9d 	.word	0x0800ca9d
 800ca58:	0800cadb 	.word	0x0800cadb
 800ca5c:	0800cadb 	.word	0x0800cadb
 800ca60:	0800cadb 	.word	0x0800cadb
 800ca64:	0800cadb 	.word	0x0800cadb
 800ca68:	0800cadb 	.word	0x0800cadb
 800ca6c:	0800cadb 	.word	0x0800cadb
 800ca70:	0800cadb 	.word	0x0800cadb
 800ca74:	0800cadb 	.word	0x0800cadb
 800ca78:	0800cadb 	.word	0x0800cadb
 800ca7c:	2b6e      	cmp	r3, #110	@ 0x6e
 800ca7e:	d809      	bhi.n	800ca94 <_scanf_float+0x138>
 800ca80:	2b60      	cmp	r3, #96	@ 0x60
 800ca82:	d8b2      	bhi.n	800c9ea <_scanf_float+0x8e>
 800ca84:	2b54      	cmp	r3, #84	@ 0x54
 800ca86:	d07b      	beq.n	800cb80 <_scanf_float+0x224>
 800ca88:	2b59      	cmp	r3, #89	@ 0x59
 800ca8a:	d199      	bne.n	800c9c0 <_scanf_float+0x64>
 800ca8c:	2d07      	cmp	r5, #7
 800ca8e:	d197      	bne.n	800c9c0 <_scanf_float+0x64>
 800ca90:	2508      	movs	r5, #8
 800ca92:	e02c      	b.n	800caee <_scanf_float+0x192>
 800ca94:	2b74      	cmp	r3, #116	@ 0x74
 800ca96:	d073      	beq.n	800cb80 <_scanf_float+0x224>
 800ca98:	2b79      	cmp	r3, #121	@ 0x79
 800ca9a:	e7f6      	b.n	800ca8a <_scanf_float+0x12e>
 800ca9c:	6821      	ldr	r1, [r4, #0]
 800ca9e:	05c8      	lsls	r0, r1, #23
 800caa0:	d51b      	bpl.n	800cada <_scanf_float+0x17e>
 800caa2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800caa6:	6021      	str	r1, [r4, #0]
 800caa8:	f109 0901 	add.w	r9, r9, #1
 800caac:	f1bb 0f00 	cmp.w	fp, #0
 800cab0:	d003      	beq.n	800caba <_scanf_float+0x15e>
 800cab2:	3201      	adds	r2, #1
 800cab4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cab8:	60a2      	str	r2, [r4, #8]
 800caba:	68a3      	ldr	r3, [r4, #8]
 800cabc:	3b01      	subs	r3, #1
 800cabe:	60a3      	str	r3, [r4, #8]
 800cac0:	6923      	ldr	r3, [r4, #16]
 800cac2:	3301      	adds	r3, #1
 800cac4:	6123      	str	r3, [r4, #16]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	3b01      	subs	r3, #1
 800caca:	2b00      	cmp	r3, #0
 800cacc:	607b      	str	r3, [r7, #4]
 800cace:	f340 8087 	ble.w	800cbe0 <_scanf_float+0x284>
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	3301      	adds	r3, #1
 800cad6:	603b      	str	r3, [r7, #0]
 800cad8:	e765      	b.n	800c9a6 <_scanf_float+0x4a>
 800cada:	eb1a 0105 	adds.w	r1, sl, r5
 800cade:	f47f af6f 	bne.w	800c9c0 <_scanf_float+0x64>
 800cae2:	6822      	ldr	r2, [r4, #0]
 800cae4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cae8:	6022      	str	r2, [r4, #0]
 800caea:	460d      	mov	r5, r1
 800caec:	468a      	mov	sl, r1
 800caee:	f806 3b01 	strb.w	r3, [r6], #1
 800caf2:	e7e2      	b.n	800caba <_scanf_float+0x15e>
 800caf4:	6822      	ldr	r2, [r4, #0]
 800caf6:	0610      	lsls	r0, r2, #24
 800caf8:	f57f af62 	bpl.w	800c9c0 <_scanf_float+0x64>
 800cafc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cb00:	6022      	str	r2, [r4, #0]
 800cb02:	e7f4      	b.n	800caee <_scanf_float+0x192>
 800cb04:	f1ba 0f00 	cmp.w	sl, #0
 800cb08:	d10e      	bne.n	800cb28 <_scanf_float+0x1cc>
 800cb0a:	f1b9 0f00 	cmp.w	r9, #0
 800cb0e:	d10e      	bne.n	800cb2e <_scanf_float+0x1d2>
 800cb10:	6822      	ldr	r2, [r4, #0]
 800cb12:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cb16:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cb1a:	d108      	bne.n	800cb2e <_scanf_float+0x1d2>
 800cb1c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cb20:	6022      	str	r2, [r4, #0]
 800cb22:	f04f 0a01 	mov.w	sl, #1
 800cb26:	e7e2      	b.n	800caee <_scanf_float+0x192>
 800cb28:	f1ba 0f02 	cmp.w	sl, #2
 800cb2c:	d055      	beq.n	800cbda <_scanf_float+0x27e>
 800cb2e:	2d01      	cmp	r5, #1
 800cb30:	d002      	beq.n	800cb38 <_scanf_float+0x1dc>
 800cb32:	2d04      	cmp	r5, #4
 800cb34:	f47f af44 	bne.w	800c9c0 <_scanf_float+0x64>
 800cb38:	3501      	adds	r5, #1
 800cb3a:	b2ed      	uxtb	r5, r5
 800cb3c:	e7d7      	b.n	800caee <_scanf_float+0x192>
 800cb3e:	f1ba 0f01 	cmp.w	sl, #1
 800cb42:	f47f af3d 	bne.w	800c9c0 <_scanf_float+0x64>
 800cb46:	f04f 0a02 	mov.w	sl, #2
 800cb4a:	e7d0      	b.n	800caee <_scanf_float+0x192>
 800cb4c:	b97d      	cbnz	r5, 800cb6e <_scanf_float+0x212>
 800cb4e:	f1b9 0f00 	cmp.w	r9, #0
 800cb52:	f47f af38 	bne.w	800c9c6 <_scanf_float+0x6a>
 800cb56:	6822      	ldr	r2, [r4, #0]
 800cb58:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cb5c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cb60:	f040 8108 	bne.w	800cd74 <_scanf_float+0x418>
 800cb64:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cb68:	6022      	str	r2, [r4, #0]
 800cb6a:	2501      	movs	r5, #1
 800cb6c:	e7bf      	b.n	800caee <_scanf_float+0x192>
 800cb6e:	2d03      	cmp	r5, #3
 800cb70:	d0e2      	beq.n	800cb38 <_scanf_float+0x1dc>
 800cb72:	2d05      	cmp	r5, #5
 800cb74:	e7de      	b.n	800cb34 <_scanf_float+0x1d8>
 800cb76:	2d02      	cmp	r5, #2
 800cb78:	f47f af22 	bne.w	800c9c0 <_scanf_float+0x64>
 800cb7c:	2503      	movs	r5, #3
 800cb7e:	e7b6      	b.n	800caee <_scanf_float+0x192>
 800cb80:	2d06      	cmp	r5, #6
 800cb82:	f47f af1d 	bne.w	800c9c0 <_scanf_float+0x64>
 800cb86:	2507      	movs	r5, #7
 800cb88:	e7b1      	b.n	800caee <_scanf_float+0x192>
 800cb8a:	6822      	ldr	r2, [r4, #0]
 800cb8c:	0591      	lsls	r1, r2, #22
 800cb8e:	f57f af17 	bpl.w	800c9c0 <_scanf_float+0x64>
 800cb92:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cb96:	6022      	str	r2, [r4, #0]
 800cb98:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb9c:	e7a7      	b.n	800caee <_scanf_float+0x192>
 800cb9e:	6822      	ldr	r2, [r4, #0]
 800cba0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cba4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cba8:	d006      	beq.n	800cbb8 <_scanf_float+0x25c>
 800cbaa:	0550      	lsls	r0, r2, #21
 800cbac:	f57f af08 	bpl.w	800c9c0 <_scanf_float+0x64>
 800cbb0:	f1b9 0f00 	cmp.w	r9, #0
 800cbb4:	f000 80de 	beq.w	800cd74 <_scanf_float+0x418>
 800cbb8:	0591      	lsls	r1, r2, #22
 800cbba:	bf58      	it	pl
 800cbbc:	9902      	ldrpl	r1, [sp, #8]
 800cbbe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cbc2:	bf58      	it	pl
 800cbc4:	eba9 0101 	subpl.w	r1, r9, r1
 800cbc8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cbcc:	bf58      	it	pl
 800cbce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cbd2:	6022      	str	r2, [r4, #0]
 800cbd4:	f04f 0900 	mov.w	r9, #0
 800cbd8:	e789      	b.n	800caee <_scanf_float+0x192>
 800cbda:	f04f 0a03 	mov.w	sl, #3
 800cbde:	e786      	b.n	800caee <_scanf_float+0x192>
 800cbe0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cbe4:	4639      	mov	r1, r7
 800cbe6:	4640      	mov	r0, r8
 800cbe8:	4798      	blx	r3
 800cbea:	2800      	cmp	r0, #0
 800cbec:	f43f aedb 	beq.w	800c9a6 <_scanf_float+0x4a>
 800cbf0:	e6e6      	b.n	800c9c0 <_scanf_float+0x64>
 800cbf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cbfa:	463a      	mov	r2, r7
 800cbfc:	4640      	mov	r0, r8
 800cbfe:	4798      	blx	r3
 800cc00:	6923      	ldr	r3, [r4, #16]
 800cc02:	3b01      	subs	r3, #1
 800cc04:	6123      	str	r3, [r4, #16]
 800cc06:	e6e8      	b.n	800c9da <_scanf_float+0x7e>
 800cc08:	1e6b      	subs	r3, r5, #1
 800cc0a:	2b06      	cmp	r3, #6
 800cc0c:	d824      	bhi.n	800cc58 <_scanf_float+0x2fc>
 800cc0e:	2d02      	cmp	r5, #2
 800cc10:	d836      	bhi.n	800cc80 <_scanf_float+0x324>
 800cc12:	9b01      	ldr	r3, [sp, #4]
 800cc14:	429e      	cmp	r6, r3
 800cc16:	f67f aee4 	bls.w	800c9e2 <_scanf_float+0x86>
 800cc1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc22:	463a      	mov	r2, r7
 800cc24:	4640      	mov	r0, r8
 800cc26:	4798      	blx	r3
 800cc28:	6923      	ldr	r3, [r4, #16]
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	6123      	str	r3, [r4, #16]
 800cc2e:	e7f0      	b.n	800cc12 <_scanf_float+0x2b6>
 800cc30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc34:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cc38:	463a      	mov	r2, r7
 800cc3a:	4640      	mov	r0, r8
 800cc3c:	4798      	blx	r3
 800cc3e:	6923      	ldr	r3, [r4, #16]
 800cc40:	3b01      	subs	r3, #1
 800cc42:	6123      	str	r3, [r4, #16]
 800cc44:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc48:	fa5f fa8a 	uxtb.w	sl, sl
 800cc4c:	f1ba 0f02 	cmp.w	sl, #2
 800cc50:	d1ee      	bne.n	800cc30 <_scanf_float+0x2d4>
 800cc52:	3d03      	subs	r5, #3
 800cc54:	b2ed      	uxtb	r5, r5
 800cc56:	1b76      	subs	r6, r6, r5
 800cc58:	6823      	ldr	r3, [r4, #0]
 800cc5a:	05da      	lsls	r2, r3, #23
 800cc5c:	d530      	bpl.n	800ccc0 <_scanf_float+0x364>
 800cc5e:	055b      	lsls	r3, r3, #21
 800cc60:	d511      	bpl.n	800cc86 <_scanf_float+0x32a>
 800cc62:	9b01      	ldr	r3, [sp, #4]
 800cc64:	429e      	cmp	r6, r3
 800cc66:	f67f aebc 	bls.w	800c9e2 <_scanf_float+0x86>
 800cc6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc72:	463a      	mov	r2, r7
 800cc74:	4640      	mov	r0, r8
 800cc76:	4798      	blx	r3
 800cc78:	6923      	ldr	r3, [r4, #16]
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	6123      	str	r3, [r4, #16]
 800cc7e:	e7f0      	b.n	800cc62 <_scanf_float+0x306>
 800cc80:	46aa      	mov	sl, r5
 800cc82:	46b3      	mov	fp, r6
 800cc84:	e7de      	b.n	800cc44 <_scanf_float+0x2e8>
 800cc86:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cc8a:	6923      	ldr	r3, [r4, #16]
 800cc8c:	2965      	cmp	r1, #101	@ 0x65
 800cc8e:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc92:	f106 35ff 	add.w	r5, r6, #4294967295
 800cc96:	6123      	str	r3, [r4, #16]
 800cc98:	d00c      	beq.n	800ccb4 <_scanf_float+0x358>
 800cc9a:	2945      	cmp	r1, #69	@ 0x45
 800cc9c:	d00a      	beq.n	800ccb4 <_scanf_float+0x358>
 800cc9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cca2:	463a      	mov	r2, r7
 800cca4:	4640      	mov	r0, r8
 800cca6:	4798      	blx	r3
 800cca8:	6923      	ldr	r3, [r4, #16]
 800ccaa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	1eb5      	subs	r5, r6, #2
 800ccb2:	6123      	str	r3, [r4, #16]
 800ccb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccb8:	463a      	mov	r2, r7
 800ccba:	4640      	mov	r0, r8
 800ccbc:	4798      	blx	r3
 800ccbe:	462e      	mov	r6, r5
 800ccc0:	6822      	ldr	r2, [r4, #0]
 800ccc2:	f012 0210 	ands.w	r2, r2, #16
 800ccc6:	d001      	beq.n	800cccc <_scanf_float+0x370>
 800ccc8:	2000      	movs	r0, #0
 800ccca:	e68b      	b.n	800c9e4 <_scanf_float+0x88>
 800cccc:	7032      	strb	r2, [r6, #0]
 800ccce:	6823      	ldr	r3, [r4, #0]
 800ccd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ccd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccd8:	d11c      	bne.n	800cd14 <_scanf_float+0x3b8>
 800ccda:	9b02      	ldr	r3, [sp, #8]
 800ccdc:	454b      	cmp	r3, r9
 800ccde:	eba3 0209 	sub.w	r2, r3, r9
 800cce2:	d123      	bne.n	800cd2c <_scanf_float+0x3d0>
 800cce4:	9901      	ldr	r1, [sp, #4]
 800cce6:	2200      	movs	r2, #0
 800cce8:	4640      	mov	r0, r8
 800ccea:	f002 fb75 	bl	800f3d8 <_strtod_r>
 800ccee:	9b03      	ldr	r3, [sp, #12]
 800ccf0:	6821      	ldr	r1, [r4, #0]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f011 0f02 	tst.w	r1, #2
 800ccf8:	ec57 6b10 	vmov	r6, r7, d0
 800ccfc:	f103 0204 	add.w	r2, r3, #4
 800cd00:	d01f      	beq.n	800cd42 <_scanf_float+0x3e6>
 800cd02:	9903      	ldr	r1, [sp, #12]
 800cd04:	600a      	str	r2, [r1, #0]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	e9c3 6700 	strd	r6, r7, [r3]
 800cd0c:	68e3      	ldr	r3, [r4, #12]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	60e3      	str	r3, [r4, #12]
 800cd12:	e7d9      	b.n	800ccc8 <_scanf_float+0x36c>
 800cd14:	9b04      	ldr	r3, [sp, #16]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d0e4      	beq.n	800cce4 <_scanf_float+0x388>
 800cd1a:	9905      	ldr	r1, [sp, #20]
 800cd1c:	230a      	movs	r3, #10
 800cd1e:	3101      	adds	r1, #1
 800cd20:	4640      	mov	r0, r8
 800cd22:	f7ff f9b7 	bl	800c094 <_strtol_r>
 800cd26:	9b04      	ldr	r3, [sp, #16]
 800cd28:	9e05      	ldr	r6, [sp, #20]
 800cd2a:	1ac2      	subs	r2, r0, r3
 800cd2c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cd30:	429e      	cmp	r6, r3
 800cd32:	bf28      	it	cs
 800cd34:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cd38:	4910      	ldr	r1, [pc, #64]	@ (800cd7c <_scanf_float+0x420>)
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	f000 f8e4 	bl	800cf08 <siprintf>
 800cd40:	e7d0      	b.n	800cce4 <_scanf_float+0x388>
 800cd42:	f011 0f04 	tst.w	r1, #4
 800cd46:	9903      	ldr	r1, [sp, #12]
 800cd48:	600a      	str	r2, [r1, #0]
 800cd4a:	d1dc      	bne.n	800cd06 <_scanf_float+0x3aa>
 800cd4c:	681d      	ldr	r5, [r3, #0]
 800cd4e:	4632      	mov	r2, r6
 800cd50:	463b      	mov	r3, r7
 800cd52:	4630      	mov	r0, r6
 800cd54:	4639      	mov	r1, r7
 800cd56:	f7f3 fee9 	bl	8000b2c <__aeabi_dcmpun>
 800cd5a:	b128      	cbz	r0, 800cd68 <_scanf_float+0x40c>
 800cd5c:	4808      	ldr	r0, [pc, #32]	@ (800cd80 <_scanf_float+0x424>)
 800cd5e:	f000 f9e7 	bl	800d130 <nanf>
 800cd62:	ed85 0a00 	vstr	s0, [r5]
 800cd66:	e7d1      	b.n	800cd0c <_scanf_float+0x3b0>
 800cd68:	4630      	mov	r0, r6
 800cd6a:	4639      	mov	r1, r7
 800cd6c:	f7f3 ff3c 	bl	8000be8 <__aeabi_d2f>
 800cd70:	6028      	str	r0, [r5, #0]
 800cd72:	e7cb      	b.n	800cd0c <_scanf_float+0x3b0>
 800cd74:	f04f 0900 	mov.w	r9, #0
 800cd78:	e629      	b.n	800c9ce <_scanf_float+0x72>
 800cd7a:	bf00      	nop
 800cd7c:	08011221 	.word	0x08011221
 800cd80:	080114b4 	.word	0x080114b4

0800cd84 <std>:
 800cd84:	2300      	movs	r3, #0
 800cd86:	b510      	push	{r4, lr}
 800cd88:	4604      	mov	r4, r0
 800cd8a:	e9c0 3300 	strd	r3, r3, [r0]
 800cd8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd92:	6083      	str	r3, [r0, #8]
 800cd94:	8181      	strh	r1, [r0, #12]
 800cd96:	6643      	str	r3, [r0, #100]	@ 0x64
 800cd98:	81c2      	strh	r2, [r0, #14]
 800cd9a:	6183      	str	r3, [r0, #24]
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	2208      	movs	r2, #8
 800cda0:	305c      	adds	r0, #92	@ 0x5c
 800cda2:	f000 f914 	bl	800cfce <memset>
 800cda6:	4b0d      	ldr	r3, [pc, #52]	@ (800cddc <std+0x58>)
 800cda8:	6263      	str	r3, [r4, #36]	@ 0x24
 800cdaa:	4b0d      	ldr	r3, [pc, #52]	@ (800cde0 <std+0x5c>)
 800cdac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cdae:	4b0d      	ldr	r3, [pc, #52]	@ (800cde4 <std+0x60>)
 800cdb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cdb2:	4b0d      	ldr	r3, [pc, #52]	@ (800cde8 <std+0x64>)
 800cdb4:	6323      	str	r3, [r4, #48]	@ 0x30
 800cdb6:	4b0d      	ldr	r3, [pc, #52]	@ (800cdec <std+0x68>)
 800cdb8:	6224      	str	r4, [r4, #32]
 800cdba:	429c      	cmp	r4, r3
 800cdbc:	d006      	beq.n	800cdcc <std+0x48>
 800cdbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cdc2:	4294      	cmp	r4, r2
 800cdc4:	d002      	beq.n	800cdcc <std+0x48>
 800cdc6:	33d0      	adds	r3, #208	@ 0xd0
 800cdc8:	429c      	cmp	r4, r3
 800cdca:	d105      	bne.n	800cdd8 <std+0x54>
 800cdcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cdd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdd4:	f000 b99a 	b.w	800d10c <__retarget_lock_init_recursive>
 800cdd8:	bd10      	pop	{r4, pc}
 800cdda:	bf00      	nop
 800cddc:	0800cf49 	.word	0x0800cf49
 800cde0:	0800cf6b 	.word	0x0800cf6b
 800cde4:	0800cfa3 	.word	0x0800cfa3
 800cde8:	0800cfc7 	.word	0x0800cfc7
 800cdec:	200052a4 	.word	0x200052a4

0800cdf0 <stdio_exit_handler>:
 800cdf0:	4a02      	ldr	r2, [pc, #8]	@ (800cdfc <stdio_exit_handler+0xc>)
 800cdf2:	4903      	ldr	r1, [pc, #12]	@ (800ce00 <stdio_exit_handler+0x10>)
 800cdf4:	4803      	ldr	r0, [pc, #12]	@ (800ce04 <stdio_exit_handler+0x14>)
 800cdf6:	f000 b869 	b.w	800cecc <_fwalk_sglue>
 800cdfa:	bf00      	nop
 800cdfc:	20000018 	.word	0x20000018
 800ce00:	0800f79d 	.word	0x0800f79d
 800ce04:	20000028 	.word	0x20000028

0800ce08 <cleanup_stdio>:
 800ce08:	6841      	ldr	r1, [r0, #4]
 800ce0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ce3c <cleanup_stdio+0x34>)
 800ce0c:	4299      	cmp	r1, r3
 800ce0e:	b510      	push	{r4, lr}
 800ce10:	4604      	mov	r4, r0
 800ce12:	d001      	beq.n	800ce18 <cleanup_stdio+0x10>
 800ce14:	f002 fcc2 	bl	800f79c <_fflush_r>
 800ce18:	68a1      	ldr	r1, [r4, #8]
 800ce1a:	4b09      	ldr	r3, [pc, #36]	@ (800ce40 <cleanup_stdio+0x38>)
 800ce1c:	4299      	cmp	r1, r3
 800ce1e:	d002      	beq.n	800ce26 <cleanup_stdio+0x1e>
 800ce20:	4620      	mov	r0, r4
 800ce22:	f002 fcbb 	bl	800f79c <_fflush_r>
 800ce26:	68e1      	ldr	r1, [r4, #12]
 800ce28:	4b06      	ldr	r3, [pc, #24]	@ (800ce44 <cleanup_stdio+0x3c>)
 800ce2a:	4299      	cmp	r1, r3
 800ce2c:	d004      	beq.n	800ce38 <cleanup_stdio+0x30>
 800ce2e:	4620      	mov	r0, r4
 800ce30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce34:	f002 bcb2 	b.w	800f79c <_fflush_r>
 800ce38:	bd10      	pop	{r4, pc}
 800ce3a:	bf00      	nop
 800ce3c:	200052a4 	.word	0x200052a4
 800ce40:	2000530c 	.word	0x2000530c
 800ce44:	20005374 	.word	0x20005374

0800ce48 <global_stdio_init.part.0>:
 800ce48:	b510      	push	{r4, lr}
 800ce4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ce78 <global_stdio_init.part.0+0x30>)
 800ce4c:	4c0b      	ldr	r4, [pc, #44]	@ (800ce7c <global_stdio_init.part.0+0x34>)
 800ce4e:	4a0c      	ldr	r2, [pc, #48]	@ (800ce80 <global_stdio_init.part.0+0x38>)
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	4620      	mov	r0, r4
 800ce54:	2200      	movs	r2, #0
 800ce56:	2104      	movs	r1, #4
 800ce58:	f7ff ff94 	bl	800cd84 <std>
 800ce5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ce60:	2201      	movs	r2, #1
 800ce62:	2109      	movs	r1, #9
 800ce64:	f7ff ff8e 	bl	800cd84 <std>
 800ce68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ce6c:	2202      	movs	r2, #2
 800ce6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce72:	2112      	movs	r1, #18
 800ce74:	f7ff bf86 	b.w	800cd84 <std>
 800ce78:	200053dc 	.word	0x200053dc
 800ce7c:	200052a4 	.word	0x200052a4
 800ce80:	0800cdf1 	.word	0x0800cdf1

0800ce84 <__sfp_lock_acquire>:
 800ce84:	4801      	ldr	r0, [pc, #4]	@ (800ce8c <__sfp_lock_acquire+0x8>)
 800ce86:	f000 b942 	b.w	800d10e <__retarget_lock_acquire_recursive>
 800ce8a:	bf00      	nop
 800ce8c:	200053e5 	.word	0x200053e5

0800ce90 <__sfp_lock_release>:
 800ce90:	4801      	ldr	r0, [pc, #4]	@ (800ce98 <__sfp_lock_release+0x8>)
 800ce92:	f000 b93d 	b.w	800d110 <__retarget_lock_release_recursive>
 800ce96:	bf00      	nop
 800ce98:	200053e5 	.word	0x200053e5

0800ce9c <__sinit>:
 800ce9c:	b510      	push	{r4, lr}
 800ce9e:	4604      	mov	r4, r0
 800cea0:	f7ff fff0 	bl	800ce84 <__sfp_lock_acquire>
 800cea4:	6a23      	ldr	r3, [r4, #32]
 800cea6:	b11b      	cbz	r3, 800ceb0 <__sinit+0x14>
 800cea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceac:	f7ff bff0 	b.w	800ce90 <__sfp_lock_release>
 800ceb0:	4b04      	ldr	r3, [pc, #16]	@ (800cec4 <__sinit+0x28>)
 800ceb2:	6223      	str	r3, [r4, #32]
 800ceb4:	4b04      	ldr	r3, [pc, #16]	@ (800cec8 <__sinit+0x2c>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d1f5      	bne.n	800cea8 <__sinit+0xc>
 800cebc:	f7ff ffc4 	bl	800ce48 <global_stdio_init.part.0>
 800cec0:	e7f2      	b.n	800cea8 <__sinit+0xc>
 800cec2:	bf00      	nop
 800cec4:	0800ce09 	.word	0x0800ce09
 800cec8:	200053dc 	.word	0x200053dc

0800cecc <_fwalk_sglue>:
 800cecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ced0:	4607      	mov	r7, r0
 800ced2:	4688      	mov	r8, r1
 800ced4:	4614      	mov	r4, r2
 800ced6:	2600      	movs	r6, #0
 800ced8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cedc:	f1b9 0901 	subs.w	r9, r9, #1
 800cee0:	d505      	bpl.n	800ceee <_fwalk_sglue+0x22>
 800cee2:	6824      	ldr	r4, [r4, #0]
 800cee4:	2c00      	cmp	r4, #0
 800cee6:	d1f7      	bne.n	800ced8 <_fwalk_sglue+0xc>
 800cee8:	4630      	mov	r0, r6
 800ceea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceee:	89ab      	ldrh	r3, [r5, #12]
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d907      	bls.n	800cf04 <_fwalk_sglue+0x38>
 800cef4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cef8:	3301      	adds	r3, #1
 800cefa:	d003      	beq.n	800cf04 <_fwalk_sglue+0x38>
 800cefc:	4629      	mov	r1, r5
 800cefe:	4638      	mov	r0, r7
 800cf00:	47c0      	blx	r8
 800cf02:	4306      	orrs	r6, r0
 800cf04:	3568      	adds	r5, #104	@ 0x68
 800cf06:	e7e9      	b.n	800cedc <_fwalk_sglue+0x10>

0800cf08 <siprintf>:
 800cf08:	b40e      	push	{r1, r2, r3}
 800cf0a:	b500      	push	{lr}
 800cf0c:	b09c      	sub	sp, #112	@ 0x70
 800cf0e:	ab1d      	add	r3, sp, #116	@ 0x74
 800cf10:	9002      	str	r0, [sp, #8]
 800cf12:	9006      	str	r0, [sp, #24]
 800cf14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cf18:	4809      	ldr	r0, [pc, #36]	@ (800cf40 <siprintf+0x38>)
 800cf1a:	9107      	str	r1, [sp, #28]
 800cf1c:	9104      	str	r1, [sp, #16]
 800cf1e:	4909      	ldr	r1, [pc, #36]	@ (800cf44 <siprintf+0x3c>)
 800cf20:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf24:	9105      	str	r1, [sp, #20]
 800cf26:	6800      	ldr	r0, [r0, #0]
 800cf28:	9301      	str	r3, [sp, #4]
 800cf2a:	a902      	add	r1, sp, #8
 800cf2c:	f002 fab6 	bl	800f49c <_svfiprintf_r>
 800cf30:	9b02      	ldr	r3, [sp, #8]
 800cf32:	2200      	movs	r2, #0
 800cf34:	701a      	strb	r2, [r3, #0]
 800cf36:	b01c      	add	sp, #112	@ 0x70
 800cf38:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf3c:	b003      	add	sp, #12
 800cf3e:	4770      	bx	lr
 800cf40:	20000024 	.word	0x20000024
 800cf44:	ffff0208 	.word	0xffff0208

0800cf48 <__sread>:
 800cf48:	b510      	push	{r4, lr}
 800cf4a:	460c      	mov	r4, r1
 800cf4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf50:	f000 f87e 	bl	800d050 <_read_r>
 800cf54:	2800      	cmp	r0, #0
 800cf56:	bfab      	itete	ge
 800cf58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cf5a:	89a3      	ldrhlt	r3, [r4, #12]
 800cf5c:	181b      	addge	r3, r3, r0
 800cf5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cf62:	bfac      	ite	ge
 800cf64:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cf66:	81a3      	strhlt	r3, [r4, #12]
 800cf68:	bd10      	pop	{r4, pc}

0800cf6a <__swrite>:
 800cf6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf6e:	461f      	mov	r7, r3
 800cf70:	898b      	ldrh	r3, [r1, #12]
 800cf72:	05db      	lsls	r3, r3, #23
 800cf74:	4605      	mov	r5, r0
 800cf76:	460c      	mov	r4, r1
 800cf78:	4616      	mov	r6, r2
 800cf7a:	d505      	bpl.n	800cf88 <__swrite+0x1e>
 800cf7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf80:	2302      	movs	r3, #2
 800cf82:	2200      	movs	r2, #0
 800cf84:	f000 f852 	bl	800d02c <_lseek_r>
 800cf88:	89a3      	ldrh	r3, [r4, #12]
 800cf8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cf92:	81a3      	strh	r3, [r4, #12]
 800cf94:	4632      	mov	r2, r6
 800cf96:	463b      	mov	r3, r7
 800cf98:	4628      	mov	r0, r5
 800cf9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf9e:	f000 b879 	b.w	800d094 <_write_r>

0800cfa2 <__sseek>:
 800cfa2:	b510      	push	{r4, lr}
 800cfa4:	460c      	mov	r4, r1
 800cfa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfaa:	f000 f83f 	bl	800d02c <_lseek_r>
 800cfae:	1c43      	adds	r3, r0, #1
 800cfb0:	89a3      	ldrh	r3, [r4, #12]
 800cfb2:	bf15      	itete	ne
 800cfb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cfb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cfba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cfbe:	81a3      	strheq	r3, [r4, #12]
 800cfc0:	bf18      	it	ne
 800cfc2:	81a3      	strhne	r3, [r4, #12]
 800cfc4:	bd10      	pop	{r4, pc}

0800cfc6 <__sclose>:
 800cfc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfca:	f000 b81f 	b.w	800d00c <_close_r>

0800cfce <memset>:
 800cfce:	4402      	add	r2, r0
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d100      	bne.n	800cfd8 <memset+0xa>
 800cfd6:	4770      	bx	lr
 800cfd8:	f803 1b01 	strb.w	r1, [r3], #1
 800cfdc:	e7f9      	b.n	800cfd2 <memset+0x4>

0800cfde <strncpy>:
 800cfde:	b510      	push	{r4, lr}
 800cfe0:	3901      	subs	r1, #1
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	b132      	cbz	r2, 800cff4 <strncpy+0x16>
 800cfe6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cfea:	f803 4b01 	strb.w	r4, [r3], #1
 800cfee:	3a01      	subs	r2, #1
 800cff0:	2c00      	cmp	r4, #0
 800cff2:	d1f7      	bne.n	800cfe4 <strncpy+0x6>
 800cff4:	441a      	add	r2, r3
 800cff6:	2100      	movs	r1, #0
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d100      	bne.n	800cffe <strncpy+0x20>
 800cffc:	bd10      	pop	{r4, pc}
 800cffe:	f803 1b01 	strb.w	r1, [r3], #1
 800d002:	e7f9      	b.n	800cff8 <strncpy+0x1a>

0800d004 <_localeconv_r>:
 800d004:	4800      	ldr	r0, [pc, #0]	@ (800d008 <_localeconv_r+0x4>)
 800d006:	4770      	bx	lr
 800d008:	20000164 	.word	0x20000164

0800d00c <_close_r>:
 800d00c:	b538      	push	{r3, r4, r5, lr}
 800d00e:	4d06      	ldr	r5, [pc, #24]	@ (800d028 <_close_r+0x1c>)
 800d010:	2300      	movs	r3, #0
 800d012:	4604      	mov	r4, r0
 800d014:	4608      	mov	r0, r1
 800d016:	602b      	str	r3, [r5, #0]
 800d018:	f7f6 fe72 	bl	8003d00 <_close>
 800d01c:	1c43      	adds	r3, r0, #1
 800d01e:	d102      	bne.n	800d026 <_close_r+0x1a>
 800d020:	682b      	ldr	r3, [r5, #0]
 800d022:	b103      	cbz	r3, 800d026 <_close_r+0x1a>
 800d024:	6023      	str	r3, [r4, #0]
 800d026:	bd38      	pop	{r3, r4, r5, pc}
 800d028:	200053e0 	.word	0x200053e0

0800d02c <_lseek_r>:
 800d02c:	b538      	push	{r3, r4, r5, lr}
 800d02e:	4d07      	ldr	r5, [pc, #28]	@ (800d04c <_lseek_r+0x20>)
 800d030:	4604      	mov	r4, r0
 800d032:	4608      	mov	r0, r1
 800d034:	4611      	mov	r1, r2
 800d036:	2200      	movs	r2, #0
 800d038:	602a      	str	r2, [r5, #0]
 800d03a:	461a      	mov	r2, r3
 800d03c:	f7f6 fe87 	bl	8003d4e <_lseek>
 800d040:	1c43      	adds	r3, r0, #1
 800d042:	d102      	bne.n	800d04a <_lseek_r+0x1e>
 800d044:	682b      	ldr	r3, [r5, #0]
 800d046:	b103      	cbz	r3, 800d04a <_lseek_r+0x1e>
 800d048:	6023      	str	r3, [r4, #0]
 800d04a:	bd38      	pop	{r3, r4, r5, pc}
 800d04c:	200053e0 	.word	0x200053e0

0800d050 <_read_r>:
 800d050:	b538      	push	{r3, r4, r5, lr}
 800d052:	4d07      	ldr	r5, [pc, #28]	@ (800d070 <_read_r+0x20>)
 800d054:	4604      	mov	r4, r0
 800d056:	4608      	mov	r0, r1
 800d058:	4611      	mov	r1, r2
 800d05a:	2200      	movs	r2, #0
 800d05c:	602a      	str	r2, [r5, #0]
 800d05e:	461a      	mov	r2, r3
 800d060:	f7f6 fe15 	bl	8003c8e <_read>
 800d064:	1c43      	adds	r3, r0, #1
 800d066:	d102      	bne.n	800d06e <_read_r+0x1e>
 800d068:	682b      	ldr	r3, [r5, #0]
 800d06a:	b103      	cbz	r3, 800d06e <_read_r+0x1e>
 800d06c:	6023      	str	r3, [r4, #0]
 800d06e:	bd38      	pop	{r3, r4, r5, pc}
 800d070:	200053e0 	.word	0x200053e0

0800d074 <_sbrk_r>:
 800d074:	b538      	push	{r3, r4, r5, lr}
 800d076:	4d06      	ldr	r5, [pc, #24]	@ (800d090 <_sbrk_r+0x1c>)
 800d078:	2300      	movs	r3, #0
 800d07a:	4604      	mov	r4, r0
 800d07c:	4608      	mov	r0, r1
 800d07e:	602b      	str	r3, [r5, #0]
 800d080:	f7f6 fe72 	bl	8003d68 <_sbrk>
 800d084:	1c43      	adds	r3, r0, #1
 800d086:	d102      	bne.n	800d08e <_sbrk_r+0x1a>
 800d088:	682b      	ldr	r3, [r5, #0]
 800d08a:	b103      	cbz	r3, 800d08e <_sbrk_r+0x1a>
 800d08c:	6023      	str	r3, [r4, #0]
 800d08e:	bd38      	pop	{r3, r4, r5, pc}
 800d090:	200053e0 	.word	0x200053e0

0800d094 <_write_r>:
 800d094:	b538      	push	{r3, r4, r5, lr}
 800d096:	4d07      	ldr	r5, [pc, #28]	@ (800d0b4 <_write_r+0x20>)
 800d098:	4604      	mov	r4, r0
 800d09a:	4608      	mov	r0, r1
 800d09c:	4611      	mov	r1, r2
 800d09e:	2200      	movs	r2, #0
 800d0a0:	602a      	str	r2, [r5, #0]
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	f7f6 fe10 	bl	8003cc8 <_write>
 800d0a8:	1c43      	adds	r3, r0, #1
 800d0aa:	d102      	bne.n	800d0b2 <_write_r+0x1e>
 800d0ac:	682b      	ldr	r3, [r5, #0]
 800d0ae:	b103      	cbz	r3, 800d0b2 <_write_r+0x1e>
 800d0b0:	6023      	str	r3, [r4, #0]
 800d0b2:	bd38      	pop	{r3, r4, r5, pc}
 800d0b4:	200053e0 	.word	0x200053e0

0800d0b8 <__errno>:
 800d0b8:	4b01      	ldr	r3, [pc, #4]	@ (800d0c0 <__errno+0x8>)
 800d0ba:	6818      	ldr	r0, [r3, #0]
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop
 800d0c0:	20000024 	.word	0x20000024

0800d0c4 <__libc_init_array>:
 800d0c4:	b570      	push	{r4, r5, r6, lr}
 800d0c6:	4d0d      	ldr	r5, [pc, #52]	@ (800d0fc <__libc_init_array+0x38>)
 800d0c8:	4c0d      	ldr	r4, [pc, #52]	@ (800d100 <__libc_init_array+0x3c>)
 800d0ca:	1b64      	subs	r4, r4, r5
 800d0cc:	10a4      	asrs	r4, r4, #2
 800d0ce:	2600      	movs	r6, #0
 800d0d0:	42a6      	cmp	r6, r4
 800d0d2:	d109      	bne.n	800d0e8 <__libc_init_array+0x24>
 800d0d4:	4d0b      	ldr	r5, [pc, #44]	@ (800d104 <__libc_init_array+0x40>)
 800d0d6:	4c0c      	ldr	r4, [pc, #48]	@ (800d108 <__libc_init_array+0x44>)
 800d0d8:	f003 fa34 	bl	8010544 <_init>
 800d0dc:	1b64      	subs	r4, r4, r5
 800d0de:	10a4      	asrs	r4, r4, #2
 800d0e0:	2600      	movs	r6, #0
 800d0e2:	42a6      	cmp	r6, r4
 800d0e4:	d105      	bne.n	800d0f2 <__libc_init_array+0x2e>
 800d0e6:	bd70      	pop	{r4, r5, r6, pc}
 800d0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ec:	4798      	blx	r3
 800d0ee:	3601      	adds	r6, #1
 800d0f0:	e7ee      	b.n	800d0d0 <__libc_init_array+0xc>
 800d0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0f6:	4798      	blx	r3
 800d0f8:	3601      	adds	r6, #1
 800d0fa:	e7f2      	b.n	800d0e2 <__libc_init_array+0x1e>
 800d0fc:	08011520 	.word	0x08011520
 800d100:	08011520 	.word	0x08011520
 800d104:	08011520 	.word	0x08011520
 800d108:	08011524 	.word	0x08011524

0800d10c <__retarget_lock_init_recursive>:
 800d10c:	4770      	bx	lr

0800d10e <__retarget_lock_acquire_recursive>:
 800d10e:	4770      	bx	lr

0800d110 <__retarget_lock_release_recursive>:
 800d110:	4770      	bx	lr

0800d112 <memcpy>:
 800d112:	440a      	add	r2, r1
 800d114:	4291      	cmp	r1, r2
 800d116:	f100 33ff 	add.w	r3, r0, #4294967295
 800d11a:	d100      	bne.n	800d11e <memcpy+0xc>
 800d11c:	4770      	bx	lr
 800d11e:	b510      	push	{r4, lr}
 800d120:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d124:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d128:	4291      	cmp	r1, r2
 800d12a:	d1f9      	bne.n	800d120 <memcpy+0xe>
 800d12c:	bd10      	pop	{r4, pc}
	...

0800d130 <nanf>:
 800d130:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d138 <nanf+0x8>
 800d134:	4770      	bx	lr
 800d136:	bf00      	nop
 800d138:	7fc00000 	.word	0x7fc00000

0800d13c <quorem>:
 800d13c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d140:	6903      	ldr	r3, [r0, #16]
 800d142:	690c      	ldr	r4, [r1, #16]
 800d144:	42a3      	cmp	r3, r4
 800d146:	4607      	mov	r7, r0
 800d148:	db7e      	blt.n	800d248 <quorem+0x10c>
 800d14a:	3c01      	subs	r4, #1
 800d14c:	f101 0814 	add.w	r8, r1, #20
 800d150:	00a3      	lsls	r3, r4, #2
 800d152:	f100 0514 	add.w	r5, r0, #20
 800d156:	9300      	str	r3, [sp, #0]
 800d158:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d15c:	9301      	str	r3, [sp, #4]
 800d15e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d166:	3301      	adds	r3, #1
 800d168:	429a      	cmp	r2, r3
 800d16a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d16e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d172:	d32e      	bcc.n	800d1d2 <quorem+0x96>
 800d174:	f04f 0a00 	mov.w	sl, #0
 800d178:	46c4      	mov	ip, r8
 800d17a:	46ae      	mov	lr, r5
 800d17c:	46d3      	mov	fp, sl
 800d17e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d182:	b298      	uxth	r0, r3
 800d184:	fb06 a000 	mla	r0, r6, r0, sl
 800d188:	0c02      	lsrs	r2, r0, #16
 800d18a:	0c1b      	lsrs	r3, r3, #16
 800d18c:	fb06 2303 	mla	r3, r6, r3, r2
 800d190:	f8de 2000 	ldr.w	r2, [lr]
 800d194:	b280      	uxth	r0, r0
 800d196:	b292      	uxth	r2, r2
 800d198:	1a12      	subs	r2, r2, r0
 800d19a:	445a      	add	r2, fp
 800d19c:	f8de 0000 	ldr.w	r0, [lr]
 800d1a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d1aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d1ae:	b292      	uxth	r2, r2
 800d1b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d1b4:	45e1      	cmp	r9, ip
 800d1b6:	f84e 2b04 	str.w	r2, [lr], #4
 800d1ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d1be:	d2de      	bcs.n	800d17e <quorem+0x42>
 800d1c0:	9b00      	ldr	r3, [sp, #0]
 800d1c2:	58eb      	ldr	r3, [r5, r3]
 800d1c4:	b92b      	cbnz	r3, 800d1d2 <quorem+0x96>
 800d1c6:	9b01      	ldr	r3, [sp, #4]
 800d1c8:	3b04      	subs	r3, #4
 800d1ca:	429d      	cmp	r5, r3
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	d32f      	bcc.n	800d230 <quorem+0xf4>
 800d1d0:	613c      	str	r4, [r7, #16]
 800d1d2:	4638      	mov	r0, r7
 800d1d4:	f001 f90e 	bl	800e3f4 <__mcmp>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	db25      	blt.n	800d228 <quorem+0xec>
 800d1dc:	4629      	mov	r1, r5
 800d1de:	2000      	movs	r0, #0
 800d1e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800d1e4:	f8d1 c000 	ldr.w	ip, [r1]
 800d1e8:	fa1f fe82 	uxth.w	lr, r2
 800d1ec:	fa1f f38c 	uxth.w	r3, ip
 800d1f0:	eba3 030e 	sub.w	r3, r3, lr
 800d1f4:	4403      	add	r3, r0
 800d1f6:	0c12      	lsrs	r2, r2, #16
 800d1f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d1fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d200:	b29b      	uxth	r3, r3
 800d202:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d206:	45c1      	cmp	r9, r8
 800d208:	f841 3b04 	str.w	r3, [r1], #4
 800d20c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d210:	d2e6      	bcs.n	800d1e0 <quorem+0xa4>
 800d212:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d216:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d21a:	b922      	cbnz	r2, 800d226 <quorem+0xea>
 800d21c:	3b04      	subs	r3, #4
 800d21e:	429d      	cmp	r5, r3
 800d220:	461a      	mov	r2, r3
 800d222:	d30b      	bcc.n	800d23c <quorem+0x100>
 800d224:	613c      	str	r4, [r7, #16]
 800d226:	3601      	adds	r6, #1
 800d228:	4630      	mov	r0, r6
 800d22a:	b003      	add	sp, #12
 800d22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d230:	6812      	ldr	r2, [r2, #0]
 800d232:	3b04      	subs	r3, #4
 800d234:	2a00      	cmp	r2, #0
 800d236:	d1cb      	bne.n	800d1d0 <quorem+0x94>
 800d238:	3c01      	subs	r4, #1
 800d23a:	e7c6      	b.n	800d1ca <quorem+0x8e>
 800d23c:	6812      	ldr	r2, [r2, #0]
 800d23e:	3b04      	subs	r3, #4
 800d240:	2a00      	cmp	r2, #0
 800d242:	d1ef      	bne.n	800d224 <quorem+0xe8>
 800d244:	3c01      	subs	r4, #1
 800d246:	e7ea      	b.n	800d21e <quorem+0xe2>
 800d248:	2000      	movs	r0, #0
 800d24a:	e7ee      	b.n	800d22a <quorem+0xee>
 800d24c:	0000      	movs	r0, r0
	...

0800d250 <_dtoa_r>:
 800d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d254:	69c7      	ldr	r7, [r0, #28]
 800d256:	b099      	sub	sp, #100	@ 0x64
 800d258:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d25c:	ec55 4b10 	vmov	r4, r5, d0
 800d260:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d262:	9109      	str	r1, [sp, #36]	@ 0x24
 800d264:	4683      	mov	fp, r0
 800d266:	920e      	str	r2, [sp, #56]	@ 0x38
 800d268:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d26a:	b97f      	cbnz	r7, 800d28c <_dtoa_r+0x3c>
 800d26c:	2010      	movs	r0, #16
 800d26e:	f7fe fde1 	bl	800be34 <malloc>
 800d272:	4602      	mov	r2, r0
 800d274:	f8cb 001c 	str.w	r0, [fp, #28]
 800d278:	b920      	cbnz	r0, 800d284 <_dtoa_r+0x34>
 800d27a:	4ba7      	ldr	r3, [pc, #668]	@ (800d518 <_dtoa_r+0x2c8>)
 800d27c:	21ef      	movs	r1, #239	@ 0xef
 800d27e:	48a7      	ldr	r0, [pc, #668]	@ (800d51c <_dtoa_r+0x2cc>)
 800d280:	f002 faea 	bl	800f858 <__assert_func>
 800d284:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d288:	6007      	str	r7, [r0, #0]
 800d28a:	60c7      	str	r7, [r0, #12]
 800d28c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d290:	6819      	ldr	r1, [r3, #0]
 800d292:	b159      	cbz	r1, 800d2ac <_dtoa_r+0x5c>
 800d294:	685a      	ldr	r2, [r3, #4]
 800d296:	604a      	str	r2, [r1, #4]
 800d298:	2301      	movs	r3, #1
 800d29a:	4093      	lsls	r3, r2
 800d29c:	608b      	str	r3, [r1, #8]
 800d29e:	4658      	mov	r0, fp
 800d2a0:	f000 fe24 	bl	800deec <_Bfree>
 800d2a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	601a      	str	r2, [r3, #0]
 800d2ac:	1e2b      	subs	r3, r5, #0
 800d2ae:	bfb9      	ittee	lt
 800d2b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d2b4:	9303      	strlt	r3, [sp, #12]
 800d2b6:	2300      	movge	r3, #0
 800d2b8:	6033      	strge	r3, [r6, #0]
 800d2ba:	9f03      	ldr	r7, [sp, #12]
 800d2bc:	4b98      	ldr	r3, [pc, #608]	@ (800d520 <_dtoa_r+0x2d0>)
 800d2be:	bfbc      	itt	lt
 800d2c0:	2201      	movlt	r2, #1
 800d2c2:	6032      	strlt	r2, [r6, #0]
 800d2c4:	43bb      	bics	r3, r7
 800d2c6:	d112      	bne.n	800d2ee <_dtoa_r+0x9e>
 800d2c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d2ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d2ce:	6013      	str	r3, [r2, #0]
 800d2d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d2d4:	4323      	orrs	r3, r4
 800d2d6:	f000 854d 	beq.w	800dd74 <_dtoa_r+0xb24>
 800d2da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d2dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d534 <_dtoa_r+0x2e4>
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f000 854f 	beq.w	800dd84 <_dtoa_r+0xb34>
 800d2e6:	f10a 0303 	add.w	r3, sl, #3
 800d2ea:	f000 bd49 	b.w	800dd80 <_dtoa_r+0xb30>
 800d2ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	ec51 0b17 	vmov	r0, r1, d7
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d2fe:	f7f3 fbe3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d302:	4680      	mov	r8, r0
 800d304:	b158      	cbz	r0, 800d31e <_dtoa_r+0xce>
 800d306:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d308:	2301      	movs	r3, #1
 800d30a:	6013      	str	r3, [r2, #0]
 800d30c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d30e:	b113      	cbz	r3, 800d316 <_dtoa_r+0xc6>
 800d310:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d312:	4b84      	ldr	r3, [pc, #528]	@ (800d524 <_dtoa_r+0x2d4>)
 800d314:	6013      	str	r3, [r2, #0]
 800d316:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d538 <_dtoa_r+0x2e8>
 800d31a:	f000 bd33 	b.w	800dd84 <_dtoa_r+0xb34>
 800d31e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d322:	aa16      	add	r2, sp, #88	@ 0x58
 800d324:	a917      	add	r1, sp, #92	@ 0x5c
 800d326:	4658      	mov	r0, fp
 800d328:	f001 f984 	bl	800e634 <__d2b>
 800d32c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d330:	4681      	mov	r9, r0
 800d332:	2e00      	cmp	r6, #0
 800d334:	d077      	beq.n	800d426 <_dtoa_r+0x1d6>
 800d336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d338:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d33c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d344:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d348:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d34c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d350:	4619      	mov	r1, r3
 800d352:	2200      	movs	r2, #0
 800d354:	4b74      	ldr	r3, [pc, #464]	@ (800d528 <_dtoa_r+0x2d8>)
 800d356:	f7f2 ff97 	bl	8000288 <__aeabi_dsub>
 800d35a:	a369      	add	r3, pc, #420	@ (adr r3, 800d500 <_dtoa_r+0x2b0>)
 800d35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d360:	f7f3 f94a 	bl	80005f8 <__aeabi_dmul>
 800d364:	a368      	add	r3, pc, #416	@ (adr r3, 800d508 <_dtoa_r+0x2b8>)
 800d366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36a:	f7f2 ff8f 	bl	800028c <__adddf3>
 800d36e:	4604      	mov	r4, r0
 800d370:	4630      	mov	r0, r6
 800d372:	460d      	mov	r5, r1
 800d374:	f7f3 f8d6 	bl	8000524 <__aeabi_i2d>
 800d378:	a365      	add	r3, pc, #404	@ (adr r3, 800d510 <_dtoa_r+0x2c0>)
 800d37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37e:	f7f3 f93b 	bl	80005f8 <__aeabi_dmul>
 800d382:	4602      	mov	r2, r0
 800d384:	460b      	mov	r3, r1
 800d386:	4620      	mov	r0, r4
 800d388:	4629      	mov	r1, r5
 800d38a:	f7f2 ff7f 	bl	800028c <__adddf3>
 800d38e:	4604      	mov	r4, r0
 800d390:	460d      	mov	r5, r1
 800d392:	f7f3 fbe1 	bl	8000b58 <__aeabi_d2iz>
 800d396:	2200      	movs	r2, #0
 800d398:	4607      	mov	r7, r0
 800d39a:	2300      	movs	r3, #0
 800d39c:	4620      	mov	r0, r4
 800d39e:	4629      	mov	r1, r5
 800d3a0:	f7f3 fb9c 	bl	8000adc <__aeabi_dcmplt>
 800d3a4:	b140      	cbz	r0, 800d3b8 <_dtoa_r+0x168>
 800d3a6:	4638      	mov	r0, r7
 800d3a8:	f7f3 f8bc 	bl	8000524 <__aeabi_i2d>
 800d3ac:	4622      	mov	r2, r4
 800d3ae:	462b      	mov	r3, r5
 800d3b0:	f7f3 fb8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3b4:	b900      	cbnz	r0, 800d3b8 <_dtoa_r+0x168>
 800d3b6:	3f01      	subs	r7, #1
 800d3b8:	2f16      	cmp	r7, #22
 800d3ba:	d851      	bhi.n	800d460 <_dtoa_r+0x210>
 800d3bc:	4b5b      	ldr	r3, [pc, #364]	@ (800d52c <_dtoa_r+0x2dc>)
 800d3be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3ca:	f7f3 fb87 	bl	8000adc <__aeabi_dcmplt>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d048      	beq.n	800d464 <_dtoa_r+0x214>
 800d3d2:	3f01      	subs	r7, #1
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	9312      	str	r3, [sp, #72]	@ 0x48
 800d3d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d3da:	1b9b      	subs	r3, r3, r6
 800d3dc:	1e5a      	subs	r2, r3, #1
 800d3de:	bf44      	itt	mi
 800d3e0:	f1c3 0801 	rsbmi	r8, r3, #1
 800d3e4:	2300      	movmi	r3, #0
 800d3e6:	9208      	str	r2, [sp, #32]
 800d3e8:	bf54      	ite	pl
 800d3ea:	f04f 0800 	movpl.w	r8, #0
 800d3ee:	9308      	strmi	r3, [sp, #32]
 800d3f0:	2f00      	cmp	r7, #0
 800d3f2:	db39      	blt.n	800d468 <_dtoa_r+0x218>
 800d3f4:	9b08      	ldr	r3, [sp, #32]
 800d3f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d3f8:	443b      	add	r3, r7
 800d3fa:	9308      	str	r3, [sp, #32]
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800d400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d402:	2b09      	cmp	r3, #9
 800d404:	d864      	bhi.n	800d4d0 <_dtoa_r+0x280>
 800d406:	2b05      	cmp	r3, #5
 800d408:	bfc4      	itt	gt
 800d40a:	3b04      	subgt	r3, #4
 800d40c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d410:	f1a3 0302 	sub.w	r3, r3, #2
 800d414:	bfcc      	ite	gt
 800d416:	2400      	movgt	r4, #0
 800d418:	2401      	movle	r4, #1
 800d41a:	2b03      	cmp	r3, #3
 800d41c:	d863      	bhi.n	800d4e6 <_dtoa_r+0x296>
 800d41e:	e8df f003 	tbb	[pc, r3]
 800d422:	372a      	.short	0x372a
 800d424:	5535      	.short	0x5535
 800d426:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d42a:	441e      	add	r6, r3
 800d42c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d430:	2b20      	cmp	r3, #32
 800d432:	bfc1      	itttt	gt
 800d434:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d438:	409f      	lslgt	r7, r3
 800d43a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d43e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d442:	bfd6      	itet	le
 800d444:	f1c3 0320 	rsble	r3, r3, #32
 800d448:	ea47 0003 	orrgt.w	r0, r7, r3
 800d44c:	fa04 f003 	lslle.w	r0, r4, r3
 800d450:	f7f3 f858 	bl	8000504 <__aeabi_ui2d>
 800d454:	2201      	movs	r2, #1
 800d456:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d45a:	3e01      	subs	r6, #1
 800d45c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d45e:	e777      	b.n	800d350 <_dtoa_r+0x100>
 800d460:	2301      	movs	r3, #1
 800d462:	e7b8      	b.n	800d3d6 <_dtoa_r+0x186>
 800d464:	9012      	str	r0, [sp, #72]	@ 0x48
 800d466:	e7b7      	b.n	800d3d8 <_dtoa_r+0x188>
 800d468:	427b      	negs	r3, r7
 800d46a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d46c:	2300      	movs	r3, #0
 800d46e:	eba8 0807 	sub.w	r8, r8, r7
 800d472:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d474:	e7c4      	b.n	800d400 <_dtoa_r+0x1b0>
 800d476:	2300      	movs	r3, #0
 800d478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d47a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	dc35      	bgt.n	800d4ec <_dtoa_r+0x29c>
 800d480:	2301      	movs	r3, #1
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	9307      	str	r3, [sp, #28]
 800d486:	461a      	mov	r2, r3
 800d488:	920e      	str	r2, [sp, #56]	@ 0x38
 800d48a:	e00b      	b.n	800d4a4 <_dtoa_r+0x254>
 800d48c:	2301      	movs	r3, #1
 800d48e:	e7f3      	b.n	800d478 <_dtoa_r+0x228>
 800d490:	2300      	movs	r3, #0
 800d492:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d496:	18fb      	adds	r3, r7, r3
 800d498:	9300      	str	r3, [sp, #0]
 800d49a:	3301      	adds	r3, #1
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	9307      	str	r3, [sp, #28]
 800d4a0:	bfb8      	it	lt
 800d4a2:	2301      	movlt	r3, #1
 800d4a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	2204      	movs	r2, #4
 800d4ac:	f102 0514 	add.w	r5, r2, #20
 800d4b0:	429d      	cmp	r5, r3
 800d4b2:	d91f      	bls.n	800d4f4 <_dtoa_r+0x2a4>
 800d4b4:	6041      	str	r1, [r0, #4]
 800d4b6:	4658      	mov	r0, fp
 800d4b8:	f000 fcd8 	bl	800de6c <_Balloc>
 800d4bc:	4682      	mov	sl, r0
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d13c      	bne.n	800d53c <_dtoa_r+0x2ec>
 800d4c2:	4b1b      	ldr	r3, [pc, #108]	@ (800d530 <_dtoa_r+0x2e0>)
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d4ca:	e6d8      	b.n	800d27e <_dtoa_r+0x2e>
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e7e0      	b.n	800d492 <_dtoa_r+0x242>
 800d4d0:	2401      	movs	r4, #1
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	9307      	str	r3, [sp, #28]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	2312      	movs	r3, #18
 800d4e4:	e7d0      	b.n	800d488 <_dtoa_r+0x238>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4ea:	e7f5      	b.n	800d4d8 <_dtoa_r+0x288>
 800d4ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4ee:	9300      	str	r3, [sp, #0]
 800d4f0:	9307      	str	r3, [sp, #28]
 800d4f2:	e7d7      	b.n	800d4a4 <_dtoa_r+0x254>
 800d4f4:	3101      	adds	r1, #1
 800d4f6:	0052      	lsls	r2, r2, #1
 800d4f8:	e7d8      	b.n	800d4ac <_dtoa_r+0x25c>
 800d4fa:	bf00      	nop
 800d4fc:	f3af 8000 	nop.w
 800d500:	636f4361 	.word	0x636f4361
 800d504:	3fd287a7 	.word	0x3fd287a7
 800d508:	8b60c8b3 	.word	0x8b60c8b3
 800d50c:	3fc68a28 	.word	0x3fc68a28
 800d510:	509f79fb 	.word	0x509f79fb
 800d514:	3fd34413 	.word	0x3fd34413
 800d518:	08011233 	.word	0x08011233
 800d51c:	0801124a 	.word	0x0801124a
 800d520:	7ff00000 	.word	0x7ff00000
 800d524:	080111fe 	.word	0x080111fe
 800d528:	3ff80000 	.word	0x3ff80000
 800d52c:	08011340 	.word	0x08011340
 800d530:	080112a2 	.word	0x080112a2
 800d534:	0801122f 	.word	0x0801122f
 800d538:	080111fd 	.word	0x080111fd
 800d53c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d540:	6018      	str	r0, [r3, #0]
 800d542:	9b07      	ldr	r3, [sp, #28]
 800d544:	2b0e      	cmp	r3, #14
 800d546:	f200 80a4 	bhi.w	800d692 <_dtoa_r+0x442>
 800d54a:	2c00      	cmp	r4, #0
 800d54c:	f000 80a1 	beq.w	800d692 <_dtoa_r+0x442>
 800d550:	2f00      	cmp	r7, #0
 800d552:	dd33      	ble.n	800d5bc <_dtoa_r+0x36c>
 800d554:	4bad      	ldr	r3, [pc, #692]	@ (800d80c <_dtoa_r+0x5bc>)
 800d556:	f007 020f 	and.w	r2, r7, #15
 800d55a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d55e:	ed93 7b00 	vldr	d7, [r3]
 800d562:	05f8      	lsls	r0, r7, #23
 800d564:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d568:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d56c:	d516      	bpl.n	800d59c <_dtoa_r+0x34c>
 800d56e:	4ba8      	ldr	r3, [pc, #672]	@ (800d810 <_dtoa_r+0x5c0>)
 800d570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d578:	f7f3 f968 	bl	800084c <__aeabi_ddiv>
 800d57c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d580:	f004 040f 	and.w	r4, r4, #15
 800d584:	2603      	movs	r6, #3
 800d586:	4da2      	ldr	r5, [pc, #648]	@ (800d810 <_dtoa_r+0x5c0>)
 800d588:	b954      	cbnz	r4, 800d5a0 <_dtoa_r+0x350>
 800d58a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d592:	f7f3 f95b 	bl	800084c <__aeabi_ddiv>
 800d596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d59a:	e028      	b.n	800d5ee <_dtoa_r+0x39e>
 800d59c:	2602      	movs	r6, #2
 800d59e:	e7f2      	b.n	800d586 <_dtoa_r+0x336>
 800d5a0:	07e1      	lsls	r1, r4, #31
 800d5a2:	d508      	bpl.n	800d5b6 <_dtoa_r+0x366>
 800d5a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5ac:	f7f3 f824 	bl	80005f8 <__aeabi_dmul>
 800d5b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5b4:	3601      	adds	r6, #1
 800d5b6:	1064      	asrs	r4, r4, #1
 800d5b8:	3508      	adds	r5, #8
 800d5ba:	e7e5      	b.n	800d588 <_dtoa_r+0x338>
 800d5bc:	f000 80d2 	beq.w	800d764 <_dtoa_r+0x514>
 800d5c0:	427c      	negs	r4, r7
 800d5c2:	4b92      	ldr	r3, [pc, #584]	@ (800d80c <_dtoa_r+0x5bc>)
 800d5c4:	4d92      	ldr	r5, [pc, #584]	@ (800d810 <_dtoa_r+0x5c0>)
 800d5c6:	f004 020f 	and.w	r2, r4, #15
 800d5ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5d6:	f7f3 f80f 	bl	80005f8 <__aeabi_dmul>
 800d5da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5de:	1124      	asrs	r4, r4, #4
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	2602      	movs	r6, #2
 800d5e4:	2c00      	cmp	r4, #0
 800d5e6:	f040 80b2 	bne.w	800d74e <_dtoa_r+0x4fe>
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d1d3      	bne.n	800d596 <_dtoa_r+0x346>
 800d5ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d5f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f000 80b7 	beq.w	800d768 <_dtoa_r+0x518>
 800d5fa:	4b86      	ldr	r3, [pc, #536]	@ (800d814 <_dtoa_r+0x5c4>)
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	4620      	mov	r0, r4
 800d600:	4629      	mov	r1, r5
 800d602:	f7f3 fa6b 	bl	8000adc <__aeabi_dcmplt>
 800d606:	2800      	cmp	r0, #0
 800d608:	f000 80ae 	beq.w	800d768 <_dtoa_r+0x518>
 800d60c:	9b07      	ldr	r3, [sp, #28]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	f000 80aa 	beq.w	800d768 <_dtoa_r+0x518>
 800d614:	9b00      	ldr	r3, [sp, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	dd37      	ble.n	800d68a <_dtoa_r+0x43a>
 800d61a:	1e7b      	subs	r3, r7, #1
 800d61c:	9304      	str	r3, [sp, #16]
 800d61e:	4620      	mov	r0, r4
 800d620:	4b7d      	ldr	r3, [pc, #500]	@ (800d818 <_dtoa_r+0x5c8>)
 800d622:	2200      	movs	r2, #0
 800d624:	4629      	mov	r1, r5
 800d626:	f7f2 ffe7 	bl	80005f8 <__aeabi_dmul>
 800d62a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d62e:	9c00      	ldr	r4, [sp, #0]
 800d630:	3601      	adds	r6, #1
 800d632:	4630      	mov	r0, r6
 800d634:	f7f2 ff76 	bl	8000524 <__aeabi_i2d>
 800d638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d63c:	f7f2 ffdc 	bl	80005f8 <__aeabi_dmul>
 800d640:	4b76      	ldr	r3, [pc, #472]	@ (800d81c <_dtoa_r+0x5cc>)
 800d642:	2200      	movs	r2, #0
 800d644:	f7f2 fe22 	bl	800028c <__adddf3>
 800d648:	4605      	mov	r5, r0
 800d64a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d64e:	2c00      	cmp	r4, #0
 800d650:	f040 808d 	bne.w	800d76e <_dtoa_r+0x51e>
 800d654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d658:	4b71      	ldr	r3, [pc, #452]	@ (800d820 <_dtoa_r+0x5d0>)
 800d65a:	2200      	movs	r2, #0
 800d65c:	f7f2 fe14 	bl	8000288 <__aeabi_dsub>
 800d660:	4602      	mov	r2, r0
 800d662:	460b      	mov	r3, r1
 800d664:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d668:	462a      	mov	r2, r5
 800d66a:	4633      	mov	r3, r6
 800d66c:	f7f3 fa54 	bl	8000b18 <__aeabi_dcmpgt>
 800d670:	2800      	cmp	r0, #0
 800d672:	f040 828b 	bne.w	800db8c <_dtoa_r+0x93c>
 800d676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d67a:	462a      	mov	r2, r5
 800d67c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d680:	f7f3 fa2c 	bl	8000adc <__aeabi_dcmplt>
 800d684:	2800      	cmp	r0, #0
 800d686:	f040 8128 	bne.w	800d8da <_dtoa_r+0x68a>
 800d68a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d68e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d692:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d694:	2b00      	cmp	r3, #0
 800d696:	f2c0 815a 	blt.w	800d94e <_dtoa_r+0x6fe>
 800d69a:	2f0e      	cmp	r7, #14
 800d69c:	f300 8157 	bgt.w	800d94e <_dtoa_r+0x6fe>
 800d6a0:	4b5a      	ldr	r3, [pc, #360]	@ (800d80c <_dtoa_r+0x5bc>)
 800d6a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d6a6:	ed93 7b00 	vldr	d7, [r3]
 800d6aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	ed8d 7b00 	vstr	d7, [sp]
 800d6b2:	da03      	bge.n	800d6bc <_dtoa_r+0x46c>
 800d6b4:	9b07      	ldr	r3, [sp, #28]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f340 8101 	ble.w	800d8be <_dtoa_r+0x66e>
 800d6bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d6c0:	4656      	mov	r6, sl
 800d6c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	f7f3 f8bf 	bl	800084c <__aeabi_ddiv>
 800d6ce:	f7f3 fa43 	bl	8000b58 <__aeabi_d2iz>
 800d6d2:	4680      	mov	r8, r0
 800d6d4:	f7f2 ff26 	bl	8000524 <__aeabi_i2d>
 800d6d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6dc:	f7f2 ff8c 	bl	80005f8 <__aeabi_dmul>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	4629      	mov	r1, r5
 800d6e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d6ec:	f7f2 fdcc 	bl	8000288 <__aeabi_dsub>
 800d6f0:	f806 4b01 	strb.w	r4, [r6], #1
 800d6f4:	9d07      	ldr	r5, [sp, #28]
 800d6f6:	eba6 040a 	sub.w	r4, r6, sl
 800d6fa:	42a5      	cmp	r5, r4
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	460b      	mov	r3, r1
 800d700:	f040 8117 	bne.w	800d932 <_dtoa_r+0x6e2>
 800d704:	f7f2 fdc2 	bl	800028c <__adddf3>
 800d708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d70c:	4604      	mov	r4, r0
 800d70e:	460d      	mov	r5, r1
 800d710:	f7f3 fa02 	bl	8000b18 <__aeabi_dcmpgt>
 800d714:	2800      	cmp	r0, #0
 800d716:	f040 80f9 	bne.w	800d90c <_dtoa_r+0x6bc>
 800d71a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d71e:	4620      	mov	r0, r4
 800d720:	4629      	mov	r1, r5
 800d722:	f7f3 f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d726:	b118      	cbz	r0, 800d730 <_dtoa_r+0x4e0>
 800d728:	f018 0f01 	tst.w	r8, #1
 800d72c:	f040 80ee 	bne.w	800d90c <_dtoa_r+0x6bc>
 800d730:	4649      	mov	r1, r9
 800d732:	4658      	mov	r0, fp
 800d734:	f000 fbda 	bl	800deec <_Bfree>
 800d738:	2300      	movs	r3, #0
 800d73a:	7033      	strb	r3, [r6, #0]
 800d73c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d73e:	3701      	adds	r7, #1
 800d740:	601f      	str	r7, [r3, #0]
 800d742:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d744:	2b00      	cmp	r3, #0
 800d746:	f000 831d 	beq.w	800dd84 <_dtoa_r+0xb34>
 800d74a:	601e      	str	r6, [r3, #0]
 800d74c:	e31a      	b.n	800dd84 <_dtoa_r+0xb34>
 800d74e:	07e2      	lsls	r2, r4, #31
 800d750:	d505      	bpl.n	800d75e <_dtoa_r+0x50e>
 800d752:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d756:	f7f2 ff4f 	bl	80005f8 <__aeabi_dmul>
 800d75a:	3601      	adds	r6, #1
 800d75c:	2301      	movs	r3, #1
 800d75e:	1064      	asrs	r4, r4, #1
 800d760:	3508      	adds	r5, #8
 800d762:	e73f      	b.n	800d5e4 <_dtoa_r+0x394>
 800d764:	2602      	movs	r6, #2
 800d766:	e742      	b.n	800d5ee <_dtoa_r+0x39e>
 800d768:	9c07      	ldr	r4, [sp, #28]
 800d76a:	9704      	str	r7, [sp, #16]
 800d76c:	e761      	b.n	800d632 <_dtoa_r+0x3e2>
 800d76e:	4b27      	ldr	r3, [pc, #156]	@ (800d80c <_dtoa_r+0x5bc>)
 800d770:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d772:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d776:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d77a:	4454      	add	r4, sl
 800d77c:	2900      	cmp	r1, #0
 800d77e:	d053      	beq.n	800d828 <_dtoa_r+0x5d8>
 800d780:	4928      	ldr	r1, [pc, #160]	@ (800d824 <_dtoa_r+0x5d4>)
 800d782:	2000      	movs	r0, #0
 800d784:	f7f3 f862 	bl	800084c <__aeabi_ddiv>
 800d788:	4633      	mov	r3, r6
 800d78a:	462a      	mov	r2, r5
 800d78c:	f7f2 fd7c 	bl	8000288 <__aeabi_dsub>
 800d790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d794:	4656      	mov	r6, sl
 800d796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d79a:	f7f3 f9dd 	bl	8000b58 <__aeabi_d2iz>
 800d79e:	4605      	mov	r5, r0
 800d7a0:	f7f2 fec0 	bl	8000524 <__aeabi_i2d>
 800d7a4:	4602      	mov	r2, r0
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ac:	f7f2 fd6c 	bl	8000288 <__aeabi_dsub>
 800d7b0:	3530      	adds	r5, #48	@ 0x30
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7ba:	f806 5b01 	strb.w	r5, [r6], #1
 800d7be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7c2:	f7f3 f98b 	bl	8000adc <__aeabi_dcmplt>
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	d171      	bne.n	800d8ae <_dtoa_r+0x65e>
 800d7ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7ce:	4911      	ldr	r1, [pc, #68]	@ (800d814 <_dtoa_r+0x5c4>)
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	f7f2 fd59 	bl	8000288 <__aeabi_dsub>
 800d7d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7da:	f7f3 f97f 	bl	8000adc <__aeabi_dcmplt>
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	f040 8095 	bne.w	800d90e <_dtoa_r+0x6be>
 800d7e4:	42a6      	cmp	r6, r4
 800d7e6:	f43f af50 	beq.w	800d68a <_dtoa_r+0x43a>
 800d7ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d7ee:	4b0a      	ldr	r3, [pc, #40]	@ (800d818 <_dtoa_r+0x5c8>)
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f7f2 ff01 	bl	80005f8 <__aeabi_dmul>
 800d7f6:	4b08      	ldr	r3, [pc, #32]	@ (800d818 <_dtoa_r+0x5c8>)
 800d7f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d802:	f7f2 fef9 	bl	80005f8 <__aeabi_dmul>
 800d806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d80a:	e7c4      	b.n	800d796 <_dtoa_r+0x546>
 800d80c:	08011340 	.word	0x08011340
 800d810:	08011318 	.word	0x08011318
 800d814:	3ff00000 	.word	0x3ff00000
 800d818:	40240000 	.word	0x40240000
 800d81c:	401c0000 	.word	0x401c0000
 800d820:	40140000 	.word	0x40140000
 800d824:	3fe00000 	.word	0x3fe00000
 800d828:	4631      	mov	r1, r6
 800d82a:	4628      	mov	r0, r5
 800d82c:	f7f2 fee4 	bl	80005f8 <__aeabi_dmul>
 800d830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d834:	9415      	str	r4, [sp, #84]	@ 0x54
 800d836:	4656      	mov	r6, sl
 800d838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d83c:	f7f3 f98c 	bl	8000b58 <__aeabi_d2iz>
 800d840:	4605      	mov	r5, r0
 800d842:	f7f2 fe6f 	bl	8000524 <__aeabi_i2d>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d84e:	f7f2 fd1b 	bl	8000288 <__aeabi_dsub>
 800d852:	3530      	adds	r5, #48	@ 0x30
 800d854:	f806 5b01 	strb.w	r5, [r6], #1
 800d858:	4602      	mov	r2, r0
 800d85a:	460b      	mov	r3, r1
 800d85c:	42a6      	cmp	r6, r4
 800d85e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d862:	f04f 0200 	mov.w	r2, #0
 800d866:	d124      	bne.n	800d8b2 <_dtoa_r+0x662>
 800d868:	4bac      	ldr	r3, [pc, #688]	@ (800db1c <_dtoa_r+0x8cc>)
 800d86a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d86e:	f7f2 fd0d 	bl	800028c <__adddf3>
 800d872:	4602      	mov	r2, r0
 800d874:	460b      	mov	r3, r1
 800d876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d87a:	f7f3 f94d 	bl	8000b18 <__aeabi_dcmpgt>
 800d87e:	2800      	cmp	r0, #0
 800d880:	d145      	bne.n	800d90e <_dtoa_r+0x6be>
 800d882:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d886:	49a5      	ldr	r1, [pc, #660]	@ (800db1c <_dtoa_r+0x8cc>)
 800d888:	2000      	movs	r0, #0
 800d88a:	f7f2 fcfd 	bl	8000288 <__aeabi_dsub>
 800d88e:	4602      	mov	r2, r0
 800d890:	460b      	mov	r3, r1
 800d892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d896:	f7f3 f921 	bl	8000adc <__aeabi_dcmplt>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	f43f aef5 	beq.w	800d68a <_dtoa_r+0x43a>
 800d8a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d8a2:	1e73      	subs	r3, r6, #1
 800d8a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d8a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d8aa:	2b30      	cmp	r3, #48	@ 0x30
 800d8ac:	d0f8      	beq.n	800d8a0 <_dtoa_r+0x650>
 800d8ae:	9f04      	ldr	r7, [sp, #16]
 800d8b0:	e73e      	b.n	800d730 <_dtoa_r+0x4e0>
 800d8b2:	4b9b      	ldr	r3, [pc, #620]	@ (800db20 <_dtoa_r+0x8d0>)
 800d8b4:	f7f2 fea0 	bl	80005f8 <__aeabi_dmul>
 800d8b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8bc:	e7bc      	b.n	800d838 <_dtoa_r+0x5e8>
 800d8be:	d10c      	bne.n	800d8da <_dtoa_r+0x68a>
 800d8c0:	4b98      	ldr	r3, [pc, #608]	@ (800db24 <_dtoa_r+0x8d4>)
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8c8:	f7f2 fe96 	bl	80005f8 <__aeabi_dmul>
 800d8cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8d0:	f7f3 f918 	bl	8000b04 <__aeabi_dcmpge>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	f000 8157 	beq.w	800db88 <_dtoa_r+0x938>
 800d8da:	2400      	movs	r4, #0
 800d8dc:	4625      	mov	r5, r4
 800d8de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8e0:	43db      	mvns	r3, r3
 800d8e2:	9304      	str	r3, [sp, #16]
 800d8e4:	4656      	mov	r6, sl
 800d8e6:	2700      	movs	r7, #0
 800d8e8:	4621      	mov	r1, r4
 800d8ea:	4658      	mov	r0, fp
 800d8ec:	f000 fafe 	bl	800deec <_Bfree>
 800d8f0:	2d00      	cmp	r5, #0
 800d8f2:	d0dc      	beq.n	800d8ae <_dtoa_r+0x65e>
 800d8f4:	b12f      	cbz	r7, 800d902 <_dtoa_r+0x6b2>
 800d8f6:	42af      	cmp	r7, r5
 800d8f8:	d003      	beq.n	800d902 <_dtoa_r+0x6b2>
 800d8fa:	4639      	mov	r1, r7
 800d8fc:	4658      	mov	r0, fp
 800d8fe:	f000 faf5 	bl	800deec <_Bfree>
 800d902:	4629      	mov	r1, r5
 800d904:	4658      	mov	r0, fp
 800d906:	f000 faf1 	bl	800deec <_Bfree>
 800d90a:	e7d0      	b.n	800d8ae <_dtoa_r+0x65e>
 800d90c:	9704      	str	r7, [sp, #16]
 800d90e:	4633      	mov	r3, r6
 800d910:	461e      	mov	r6, r3
 800d912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d916:	2a39      	cmp	r2, #57	@ 0x39
 800d918:	d107      	bne.n	800d92a <_dtoa_r+0x6da>
 800d91a:	459a      	cmp	sl, r3
 800d91c:	d1f8      	bne.n	800d910 <_dtoa_r+0x6c0>
 800d91e:	9a04      	ldr	r2, [sp, #16]
 800d920:	3201      	adds	r2, #1
 800d922:	9204      	str	r2, [sp, #16]
 800d924:	2230      	movs	r2, #48	@ 0x30
 800d926:	f88a 2000 	strb.w	r2, [sl]
 800d92a:	781a      	ldrb	r2, [r3, #0]
 800d92c:	3201      	adds	r2, #1
 800d92e:	701a      	strb	r2, [r3, #0]
 800d930:	e7bd      	b.n	800d8ae <_dtoa_r+0x65e>
 800d932:	4b7b      	ldr	r3, [pc, #492]	@ (800db20 <_dtoa_r+0x8d0>)
 800d934:	2200      	movs	r2, #0
 800d936:	f7f2 fe5f 	bl	80005f8 <__aeabi_dmul>
 800d93a:	2200      	movs	r2, #0
 800d93c:	2300      	movs	r3, #0
 800d93e:	4604      	mov	r4, r0
 800d940:	460d      	mov	r5, r1
 800d942:	f7f3 f8c1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d946:	2800      	cmp	r0, #0
 800d948:	f43f aebb 	beq.w	800d6c2 <_dtoa_r+0x472>
 800d94c:	e6f0      	b.n	800d730 <_dtoa_r+0x4e0>
 800d94e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d950:	2a00      	cmp	r2, #0
 800d952:	f000 80db 	beq.w	800db0c <_dtoa_r+0x8bc>
 800d956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d958:	2a01      	cmp	r2, #1
 800d95a:	f300 80bf 	bgt.w	800dadc <_dtoa_r+0x88c>
 800d95e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d960:	2a00      	cmp	r2, #0
 800d962:	f000 80b7 	beq.w	800dad4 <_dtoa_r+0x884>
 800d966:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d96a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d96c:	4646      	mov	r6, r8
 800d96e:	9a08      	ldr	r2, [sp, #32]
 800d970:	2101      	movs	r1, #1
 800d972:	441a      	add	r2, r3
 800d974:	4658      	mov	r0, fp
 800d976:	4498      	add	r8, r3
 800d978:	9208      	str	r2, [sp, #32]
 800d97a:	f000 fbb5 	bl	800e0e8 <__i2b>
 800d97e:	4605      	mov	r5, r0
 800d980:	b15e      	cbz	r6, 800d99a <_dtoa_r+0x74a>
 800d982:	9b08      	ldr	r3, [sp, #32]
 800d984:	2b00      	cmp	r3, #0
 800d986:	dd08      	ble.n	800d99a <_dtoa_r+0x74a>
 800d988:	42b3      	cmp	r3, r6
 800d98a:	9a08      	ldr	r2, [sp, #32]
 800d98c:	bfa8      	it	ge
 800d98e:	4633      	movge	r3, r6
 800d990:	eba8 0803 	sub.w	r8, r8, r3
 800d994:	1af6      	subs	r6, r6, r3
 800d996:	1ad3      	subs	r3, r2, r3
 800d998:	9308      	str	r3, [sp, #32]
 800d99a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d99c:	b1f3      	cbz	r3, 800d9dc <_dtoa_r+0x78c>
 800d99e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	f000 80b7 	beq.w	800db14 <_dtoa_r+0x8c4>
 800d9a6:	b18c      	cbz	r4, 800d9cc <_dtoa_r+0x77c>
 800d9a8:	4629      	mov	r1, r5
 800d9aa:	4622      	mov	r2, r4
 800d9ac:	4658      	mov	r0, fp
 800d9ae:	f000 fc5b 	bl	800e268 <__pow5mult>
 800d9b2:	464a      	mov	r2, r9
 800d9b4:	4601      	mov	r1, r0
 800d9b6:	4605      	mov	r5, r0
 800d9b8:	4658      	mov	r0, fp
 800d9ba:	f000 fbab 	bl	800e114 <__multiply>
 800d9be:	4649      	mov	r1, r9
 800d9c0:	9004      	str	r0, [sp, #16]
 800d9c2:	4658      	mov	r0, fp
 800d9c4:	f000 fa92 	bl	800deec <_Bfree>
 800d9c8:	9b04      	ldr	r3, [sp, #16]
 800d9ca:	4699      	mov	r9, r3
 800d9cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9ce:	1b1a      	subs	r2, r3, r4
 800d9d0:	d004      	beq.n	800d9dc <_dtoa_r+0x78c>
 800d9d2:	4649      	mov	r1, r9
 800d9d4:	4658      	mov	r0, fp
 800d9d6:	f000 fc47 	bl	800e268 <__pow5mult>
 800d9da:	4681      	mov	r9, r0
 800d9dc:	2101      	movs	r1, #1
 800d9de:	4658      	mov	r0, fp
 800d9e0:	f000 fb82 	bl	800e0e8 <__i2b>
 800d9e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f000 81cf 	beq.w	800dd8c <_dtoa_r+0xb3c>
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	4601      	mov	r1, r0
 800d9f2:	4658      	mov	r0, fp
 800d9f4:	f000 fc38 	bl	800e268 <__pow5mult>
 800d9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	f300 8095 	bgt.w	800db2c <_dtoa_r+0x8dc>
 800da02:	9b02      	ldr	r3, [sp, #8]
 800da04:	2b00      	cmp	r3, #0
 800da06:	f040 8087 	bne.w	800db18 <_dtoa_r+0x8c8>
 800da0a:	9b03      	ldr	r3, [sp, #12]
 800da0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da10:	2b00      	cmp	r3, #0
 800da12:	f040 8089 	bne.w	800db28 <_dtoa_r+0x8d8>
 800da16:	9b03      	ldr	r3, [sp, #12]
 800da18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800da1c:	0d1b      	lsrs	r3, r3, #20
 800da1e:	051b      	lsls	r3, r3, #20
 800da20:	b12b      	cbz	r3, 800da2e <_dtoa_r+0x7de>
 800da22:	9b08      	ldr	r3, [sp, #32]
 800da24:	3301      	adds	r3, #1
 800da26:	9308      	str	r3, [sp, #32]
 800da28:	f108 0801 	add.w	r8, r8, #1
 800da2c:	2301      	movs	r3, #1
 800da2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800da30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da32:	2b00      	cmp	r3, #0
 800da34:	f000 81b0 	beq.w	800dd98 <_dtoa_r+0xb48>
 800da38:	6923      	ldr	r3, [r4, #16]
 800da3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da3e:	6918      	ldr	r0, [r3, #16]
 800da40:	f000 fb06 	bl	800e050 <__hi0bits>
 800da44:	f1c0 0020 	rsb	r0, r0, #32
 800da48:	9b08      	ldr	r3, [sp, #32]
 800da4a:	4418      	add	r0, r3
 800da4c:	f010 001f 	ands.w	r0, r0, #31
 800da50:	d077      	beq.n	800db42 <_dtoa_r+0x8f2>
 800da52:	f1c0 0320 	rsb	r3, r0, #32
 800da56:	2b04      	cmp	r3, #4
 800da58:	dd6b      	ble.n	800db32 <_dtoa_r+0x8e2>
 800da5a:	9b08      	ldr	r3, [sp, #32]
 800da5c:	f1c0 001c 	rsb	r0, r0, #28
 800da60:	4403      	add	r3, r0
 800da62:	4480      	add	r8, r0
 800da64:	4406      	add	r6, r0
 800da66:	9308      	str	r3, [sp, #32]
 800da68:	f1b8 0f00 	cmp.w	r8, #0
 800da6c:	dd05      	ble.n	800da7a <_dtoa_r+0x82a>
 800da6e:	4649      	mov	r1, r9
 800da70:	4642      	mov	r2, r8
 800da72:	4658      	mov	r0, fp
 800da74:	f000 fc52 	bl	800e31c <__lshift>
 800da78:	4681      	mov	r9, r0
 800da7a:	9b08      	ldr	r3, [sp, #32]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	dd05      	ble.n	800da8c <_dtoa_r+0x83c>
 800da80:	4621      	mov	r1, r4
 800da82:	461a      	mov	r2, r3
 800da84:	4658      	mov	r0, fp
 800da86:	f000 fc49 	bl	800e31c <__lshift>
 800da8a:	4604      	mov	r4, r0
 800da8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d059      	beq.n	800db46 <_dtoa_r+0x8f6>
 800da92:	4621      	mov	r1, r4
 800da94:	4648      	mov	r0, r9
 800da96:	f000 fcad 	bl	800e3f4 <__mcmp>
 800da9a:	2800      	cmp	r0, #0
 800da9c:	da53      	bge.n	800db46 <_dtoa_r+0x8f6>
 800da9e:	1e7b      	subs	r3, r7, #1
 800daa0:	9304      	str	r3, [sp, #16]
 800daa2:	4649      	mov	r1, r9
 800daa4:	2300      	movs	r3, #0
 800daa6:	220a      	movs	r2, #10
 800daa8:	4658      	mov	r0, fp
 800daaa:	f000 fa41 	bl	800df30 <__multadd>
 800daae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dab0:	4681      	mov	r9, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	f000 8172 	beq.w	800dd9c <_dtoa_r+0xb4c>
 800dab8:	2300      	movs	r3, #0
 800daba:	4629      	mov	r1, r5
 800dabc:	220a      	movs	r2, #10
 800dabe:	4658      	mov	r0, fp
 800dac0:	f000 fa36 	bl	800df30 <__multadd>
 800dac4:	9b00      	ldr	r3, [sp, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	4605      	mov	r5, r0
 800daca:	dc67      	bgt.n	800db9c <_dtoa_r+0x94c>
 800dacc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dace:	2b02      	cmp	r3, #2
 800dad0:	dc41      	bgt.n	800db56 <_dtoa_r+0x906>
 800dad2:	e063      	b.n	800db9c <_dtoa_r+0x94c>
 800dad4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dad6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dada:	e746      	b.n	800d96a <_dtoa_r+0x71a>
 800dadc:	9b07      	ldr	r3, [sp, #28]
 800dade:	1e5c      	subs	r4, r3, #1
 800dae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dae2:	42a3      	cmp	r3, r4
 800dae4:	bfbf      	itttt	lt
 800dae6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dae8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800daea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800daec:	1ae3      	sublt	r3, r4, r3
 800daee:	bfb4      	ite	lt
 800daf0:	18d2      	addlt	r2, r2, r3
 800daf2:	1b1c      	subge	r4, r3, r4
 800daf4:	9b07      	ldr	r3, [sp, #28]
 800daf6:	bfbc      	itt	lt
 800daf8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dafa:	2400      	movlt	r4, #0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	bfb5      	itete	lt
 800db00:	eba8 0603 	sublt.w	r6, r8, r3
 800db04:	9b07      	ldrge	r3, [sp, #28]
 800db06:	2300      	movlt	r3, #0
 800db08:	4646      	movge	r6, r8
 800db0a:	e730      	b.n	800d96e <_dtoa_r+0x71e>
 800db0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800db10:	4646      	mov	r6, r8
 800db12:	e735      	b.n	800d980 <_dtoa_r+0x730>
 800db14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db16:	e75c      	b.n	800d9d2 <_dtoa_r+0x782>
 800db18:	2300      	movs	r3, #0
 800db1a:	e788      	b.n	800da2e <_dtoa_r+0x7de>
 800db1c:	3fe00000 	.word	0x3fe00000
 800db20:	40240000 	.word	0x40240000
 800db24:	40140000 	.word	0x40140000
 800db28:	9b02      	ldr	r3, [sp, #8]
 800db2a:	e780      	b.n	800da2e <_dtoa_r+0x7de>
 800db2c:	2300      	movs	r3, #0
 800db2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800db30:	e782      	b.n	800da38 <_dtoa_r+0x7e8>
 800db32:	d099      	beq.n	800da68 <_dtoa_r+0x818>
 800db34:	9a08      	ldr	r2, [sp, #32]
 800db36:	331c      	adds	r3, #28
 800db38:	441a      	add	r2, r3
 800db3a:	4498      	add	r8, r3
 800db3c:	441e      	add	r6, r3
 800db3e:	9208      	str	r2, [sp, #32]
 800db40:	e792      	b.n	800da68 <_dtoa_r+0x818>
 800db42:	4603      	mov	r3, r0
 800db44:	e7f6      	b.n	800db34 <_dtoa_r+0x8e4>
 800db46:	9b07      	ldr	r3, [sp, #28]
 800db48:	9704      	str	r7, [sp, #16]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	dc20      	bgt.n	800db90 <_dtoa_r+0x940>
 800db4e:	9300      	str	r3, [sp, #0]
 800db50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db52:	2b02      	cmp	r3, #2
 800db54:	dd1e      	ble.n	800db94 <_dtoa_r+0x944>
 800db56:	9b00      	ldr	r3, [sp, #0]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f47f aec0 	bne.w	800d8de <_dtoa_r+0x68e>
 800db5e:	4621      	mov	r1, r4
 800db60:	2205      	movs	r2, #5
 800db62:	4658      	mov	r0, fp
 800db64:	f000 f9e4 	bl	800df30 <__multadd>
 800db68:	4601      	mov	r1, r0
 800db6a:	4604      	mov	r4, r0
 800db6c:	4648      	mov	r0, r9
 800db6e:	f000 fc41 	bl	800e3f4 <__mcmp>
 800db72:	2800      	cmp	r0, #0
 800db74:	f77f aeb3 	ble.w	800d8de <_dtoa_r+0x68e>
 800db78:	4656      	mov	r6, sl
 800db7a:	2331      	movs	r3, #49	@ 0x31
 800db7c:	f806 3b01 	strb.w	r3, [r6], #1
 800db80:	9b04      	ldr	r3, [sp, #16]
 800db82:	3301      	adds	r3, #1
 800db84:	9304      	str	r3, [sp, #16]
 800db86:	e6ae      	b.n	800d8e6 <_dtoa_r+0x696>
 800db88:	9c07      	ldr	r4, [sp, #28]
 800db8a:	9704      	str	r7, [sp, #16]
 800db8c:	4625      	mov	r5, r4
 800db8e:	e7f3      	b.n	800db78 <_dtoa_r+0x928>
 800db90:	9b07      	ldr	r3, [sp, #28]
 800db92:	9300      	str	r3, [sp, #0]
 800db94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db96:	2b00      	cmp	r3, #0
 800db98:	f000 8104 	beq.w	800dda4 <_dtoa_r+0xb54>
 800db9c:	2e00      	cmp	r6, #0
 800db9e:	dd05      	ble.n	800dbac <_dtoa_r+0x95c>
 800dba0:	4629      	mov	r1, r5
 800dba2:	4632      	mov	r2, r6
 800dba4:	4658      	mov	r0, fp
 800dba6:	f000 fbb9 	bl	800e31c <__lshift>
 800dbaa:	4605      	mov	r5, r0
 800dbac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d05a      	beq.n	800dc68 <_dtoa_r+0xa18>
 800dbb2:	6869      	ldr	r1, [r5, #4]
 800dbb4:	4658      	mov	r0, fp
 800dbb6:	f000 f959 	bl	800de6c <_Balloc>
 800dbba:	4606      	mov	r6, r0
 800dbbc:	b928      	cbnz	r0, 800dbca <_dtoa_r+0x97a>
 800dbbe:	4b84      	ldr	r3, [pc, #528]	@ (800ddd0 <_dtoa_r+0xb80>)
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dbc6:	f7ff bb5a 	b.w	800d27e <_dtoa_r+0x2e>
 800dbca:	692a      	ldr	r2, [r5, #16]
 800dbcc:	3202      	adds	r2, #2
 800dbce:	0092      	lsls	r2, r2, #2
 800dbd0:	f105 010c 	add.w	r1, r5, #12
 800dbd4:	300c      	adds	r0, #12
 800dbd6:	f7ff fa9c 	bl	800d112 <memcpy>
 800dbda:	2201      	movs	r2, #1
 800dbdc:	4631      	mov	r1, r6
 800dbde:	4658      	mov	r0, fp
 800dbe0:	f000 fb9c 	bl	800e31c <__lshift>
 800dbe4:	f10a 0301 	add.w	r3, sl, #1
 800dbe8:	9307      	str	r3, [sp, #28]
 800dbea:	9b00      	ldr	r3, [sp, #0]
 800dbec:	4453      	add	r3, sl
 800dbee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbf0:	9b02      	ldr	r3, [sp, #8]
 800dbf2:	f003 0301 	and.w	r3, r3, #1
 800dbf6:	462f      	mov	r7, r5
 800dbf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbfa:	4605      	mov	r5, r0
 800dbfc:	9b07      	ldr	r3, [sp, #28]
 800dbfe:	4621      	mov	r1, r4
 800dc00:	3b01      	subs	r3, #1
 800dc02:	4648      	mov	r0, r9
 800dc04:	9300      	str	r3, [sp, #0]
 800dc06:	f7ff fa99 	bl	800d13c <quorem>
 800dc0a:	4639      	mov	r1, r7
 800dc0c:	9002      	str	r0, [sp, #8]
 800dc0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dc12:	4648      	mov	r0, r9
 800dc14:	f000 fbee 	bl	800e3f4 <__mcmp>
 800dc18:	462a      	mov	r2, r5
 800dc1a:	9008      	str	r0, [sp, #32]
 800dc1c:	4621      	mov	r1, r4
 800dc1e:	4658      	mov	r0, fp
 800dc20:	f000 fc04 	bl	800e42c <__mdiff>
 800dc24:	68c2      	ldr	r2, [r0, #12]
 800dc26:	4606      	mov	r6, r0
 800dc28:	bb02      	cbnz	r2, 800dc6c <_dtoa_r+0xa1c>
 800dc2a:	4601      	mov	r1, r0
 800dc2c:	4648      	mov	r0, r9
 800dc2e:	f000 fbe1 	bl	800e3f4 <__mcmp>
 800dc32:	4602      	mov	r2, r0
 800dc34:	4631      	mov	r1, r6
 800dc36:	4658      	mov	r0, fp
 800dc38:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc3a:	f000 f957 	bl	800deec <_Bfree>
 800dc3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc42:	9e07      	ldr	r6, [sp, #28]
 800dc44:	ea43 0102 	orr.w	r1, r3, r2
 800dc48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc4a:	4319      	orrs	r1, r3
 800dc4c:	d110      	bne.n	800dc70 <_dtoa_r+0xa20>
 800dc4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc52:	d029      	beq.n	800dca8 <_dtoa_r+0xa58>
 800dc54:	9b08      	ldr	r3, [sp, #32]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	dd02      	ble.n	800dc60 <_dtoa_r+0xa10>
 800dc5a:	9b02      	ldr	r3, [sp, #8]
 800dc5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dc60:	9b00      	ldr	r3, [sp, #0]
 800dc62:	f883 8000 	strb.w	r8, [r3]
 800dc66:	e63f      	b.n	800d8e8 <_dtoa_r+0x698>
 800dc68:	4628      	mov	r0, r5
 800dc6a:	e7bb      	b.n	800dbe4 <_dtoa_r+0x994>
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	e7e1      	b.n	800dc34 <_dtoa_r+0x9e4>
 800dc70:	9b08      	ldr	r3, [sp, #32]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	db04      	blt.n	800dc80 <_dtoa_r+0xa30>
 800dc76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc78:	430b      	orrs	r3, r1
 800dc7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc7c:	430b      	orrs	r3, r1
 800dc7e:	d120      	bne.n	800dcc2 <_dtoa_r+0xa72>
 800dc80:	2a00      	cmp	r2, #0
 800dc82:	dded      	ble.n	800dc60 <_dtoa_r+0xa10>
 800dc84:	4649      	mov	r1, r9
 800dc86:	2201      	movs	r2, #1
 800dc88:	4658      	mov	r0, fp
 800dc8a:	f000 fb47 	bl	800e31c <__lshift>
 800dc8e:	4621      	mov	r1, r4
 800dc90:	4681      	mov	r9, r0
 800dc92:	f000 fbaf 	bl	800e3f4 <__mcmp>
 800dc96:	2800      	cmp	r0, #0
 800dc98:	dc03      	bgt.n	800dca2 <_dtoa_r+0xa52>
 800dc9a:	d1e1      	bne.n	800dc60 <_dtoa_r+0xa10>
 800dc9c:	f018 0f01 	tst.w	r8, #1
 800dca0:	d0de      	beq.n	800dc60 <_dtoa_r+0xa10>
 800dca2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dca6:	d1d8      	bne.n	800dc5a <_dtoa_r+0xa0a>
 800dca8:	9a00      	ldr	r2, [sp, #0]
 800dcaa:	2339      	movs	r3, #57	@ 0x39
 800dcac:	7013      	strb	r3, [r2, #0]
 800dcae:	4633      	mov	r3, r6
 800dcb0:	461e      	mov	r6, r3
 800dcb2:	3b01      	subs	r3, #1
 800dcb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dcb8:	2a39      	cmp	r2, #57	@ 0x39
 800dcba:	d052      	beq.n	800dd62 <_dtoa_r+0xb12>
 800dcbc:	3201      	adds	r2, #1
 800dcbe:	701a      	strb	r2, [r3, #0]
 800dcc0:	e612      	b.n	800d8e8 <_dtoa_r+0x698>
 800dcc2:	2a00      	cmp	r2, #0
 800dcc4:	dd07      	ble.n	800dcd6 <_dtoa_r+0xa86>
 800dcc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dcca:	d0ed      	beq.n	800dca8 <_dtoa_r+0xa58>
 800dccc:	9a00      	ldr	r2, [sp, #0]
 800dcce:	f108 0301 	add.w	r3, r8, #1
 800dcd2:	7013      	strb	r3, [r2, #0]
 800dcd4:	e608      	b.n	800d8e8 <_dtoa_r+0x698>
 800dcd6:	9b07      	ldr	r3, [sp, #28]
 800dcd8:	9a07      	ldr	r2, [sp, #28]
 800dcda:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dcde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d028      	beq.n	800dd36 <_dtoa_r+0xae6>
 800dce4:	4649      	mov	r1, r9
 800dce6:	2300      	movs	r3, #0
 800dce8:	220a      	movs	r2, #10
 800dcea:	4658      	mov	r0, fp
 800dcec:	f000 f920 	bl	800df30 <__multadd>
 800dcf0:	42af      	cmp	r7, r5
 800dcf2:	4681      	mov	r9, r0
 800dcf4:	f04f 0300 	mov.w	r3, #0
 800dcf8:	f04f 020a 	mov.w	r2, #10
 800dcfc:	4639      	mov	r1, r7
 800dcfe:	4658      	mov	r0, fp
 800dd00:	d107      	bne.n	800dd12 <_dtoa_r+0xac2>
 800dd02:	f000 f915 	bl	800df30 <__multadd>
 800dd06:	4607      	mov	r7, r0
 800dd08:	4605      	mov	r5, r0
 800dd0a:	9b07      	ldr	r3, [sp, #28]
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	9307      	str	r3, [sp, #28]
 800dd10:	e774      	b.n	800dbfc <_dtoa_r+0x9ac>
 800dd12:	f000 f90d 	bl	800df30 <__multadd>
 800dd16:	4629      	mov	r1, r5
 800dd18:	4607      	mov	r7, r0
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	220a      	movs	r2, #10
 800dd1e:	4658      	mov	r0, fp
 800dd20:	f000 f906 	bl	800df30 <__multadd>
 800dd24:	4605      	mov	r5, r0
 800dd26:	e7f0      	b.n	800dd0a <_dtoa_r+0xaba>
 800dd28:	9b00      	ldr	r3, [sp, #0]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	bfcc      	ite	gt
 800dd2e:	461e      	movgt	r6, r3
 800dd30:	2601      	movle	r6, #1
 800dd32:	4456      	add	r6, sl
 800dd34:	2700      	movs	r7, #0
 800dd36:	4649      	mov	r1, r9
 800dd38:	2201      	movs	r2, #1
 800dd3a:	4658      	mov	r0, fp
 800dd3c:	f000 faee 	bl	800e31c <__lshift>
 800dd40:	4621      	mov	r1, r4
 800dd42:	4681      	mov	r9, r0
 800dd44:	f000 fb56 	bl	800e3f4 <__mcmp>
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	dcb0      	bgt.n	800dcae <_dtoa_r+0xa5e>
 800dd4c:	d102      	bne.n	800dd54 <_dtoa_r+0xb04>
 800dd4e:	f018 0f01 	tst.w	r8, #1
 800dd52:	d1ac      	bne.n	800dcae <_dtoa_r+0xa5e>
 800dd54:	4633      	mov	r3, r6
 800dd56:	461e      	mov	r6, r3
 800dd58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd5c:	2a30      	cmp	r2, #48	@ 0x30
 800dd5e:	d0fa      	beq.n	800dd56 <_dtoa_r+0xb06>
 800dd60:	e5c2      	b.n	800d8e8 <_dtoa_r+0x698>
 800dd62:	459a      	cmp	sl, r3
 800dd64:	d1a4      	bne.n	800dcb0 <_dtoa_r+0xa60>
 800dd66:	9b04      	ldr	r3, [sp, #16]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	9304      	str	r3, [sp, #16]
 800dd6c:	2331      	movs	r3, #49	@ 0x31
 800dd6e:	f88a 3000 	strb.w	r3, [sl]
 800dd72:	e5b9      	b.n	800d8e8 <_dtoa_r+0x698>
 800dd74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dd76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ddd4 <_dtoa_r+0xb84>
 800dd7a:	b11b      	cbz	r3, 800dd84 <_dtoa_r+0xb34>
 800dd7c:	f10a 0308 	add.w	r3, sl, #8
 800dd80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dd82:	6013      	str	r3, [r2, #0]
 800dd84:	4650      	mov	r0, sl
 800dd86:	b019      	add	sp, #100	@ 0x64
 800dd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	f77f ae37 	ble.w	800da02 <_dtoa_r+0x7b2>
 800dd94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd96:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd98:	2001      	movs	r0, #1
 800dd9a:	e655      	b.n	800da48 <_dtoa_r+0x7f8>
 800dd9c:	9b00      	ldr	r3, [sp, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	f77f aed6 	ble.w	800db50 <_dtoa_r+0x900>
 800dda4:	4656      	mov	r6, sl
 800dda6:	4621      	mov	r1, r4
 800dda8:	4648      	mov	r0, r9
 800ddaa:	f7ff f9c7 	bl	800d13c <quorem>
 800ddae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ddb2:	f806 8b01 	strb.w	r8, [r6], #1
 800ddb6:	9b00      	ldr	r3, [sp, #0]
 800ddb8:	eba6 020a 	sub.w	r2, r6, sl
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	ddb3      	ble.n	800dd28 <_dtoa_r+0xad8>
 800ddc0:	4649      	mov	r1, r9
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	220a      	movs	r2, #10
 800ddc6:	4658      	mov	r0, fp
 800ddc8:	f000 f8b2 	bl	800df30 <__multadd>
 800ddcc:	4681      	mov	r9, r0
 800ddce:	e7ea      	b.n	800dda6 <_dtoa_r+0xb56>
 800ddd0:	080112a2 	.word	0x080112a2
 800ddd4:	08011226 	.word	0x08011226

0800ddd8 <_free_r>:
 800ddd8:	b538      	push	{r3, r4, r5, lr}
 800ddda:	4605      	mov	r5, r0
 800dddc:	2900      	cmp	r1, #0
 800ddde:	d041      	beq.n	800de64 <_free_r+0x8c>
 800dde0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dde4:	1f0c      	subs	r4, r1, #4
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	bfb8      	it	lt
 800ddea:	18e4      	addlt	r4, r4, r3
 800ddec:	f7fe f8cc 	bl	800bf88 <__malloc_lock>
 800ddf0:	4a1d      	ldr	r2, [pc, #116]	@ (800de68 <_free_r+0x90>)
 800ddf2:	6813      	ldr	r3, [r2, #0]
 800ddf4:	b933      	cbnz	r3, 800de04 <_free_r+0x2c>
 800ddf6:	6063      	str	r3, [r4, #4]
 800ddf8:	6014      	str	r4, [r2, #0]
 800ddfa:	4628      	mov	r0, r5
 800ddfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de00:	f7fe b8c8 	b.w	800bf94 <__malloc_unlock>
 800de04:	42a3      	cmp	r3, r4
 800de06:	d908      	bls.n	800de1a <_free_r+0x42>
 800de08:	6820      	ldr	r0, [r4, #0]
 800de0a:	1821      	adds	r1, r4, r0
 800de0c:	428b      	cmp	r3, r1
 800de0e:	bf01      	itttt	eq
 800de10:	6819      	ldreq	r1, [r3, #0]
 800de12:	685b      	ldreq	r3, [r3, #4]
 800de14:	1809      	addeq	r1, r1, r0
 800de16:	6021      	streq	r1, [r4, #0]
 800de18:	e7ed      	b.n	800ddf6 <_free_r+0x1e>
 800de1a:	461a      	mov	r2, r3
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	b10b      	cbz	r3, 800de24 <_free_r+0x4c>
 800de20:	42a3      	cmp	r3, r4
 800de22:	d9fa      	bls.n	800de1a <_free_r+0x42>
 800de24:	6811      	ldr	r1, [r2, #0]
 800de26:	1850      	adds	r0, r2, r1
 800de28:	42a0      	cmp	r0, r4
 800de2a:	d10b      	bne.n	800de44 <_free_r+0x6c>
 800de2c:	6820      	ldr	r0, [r4, #0]
 800de2e:	4401      	add	r1, r0
 800de30:	1850      	adds	r0, r2, r1
 800de32:	4283      	cmp	r3, r0
 800de34:	6011      	str	r1, [r2, #0]
 800de36:	d1e0      	bne.n	800ddfa <_free_r+0x22>
 800de38:	6818      	ldr	r0, [r3, #0]
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	6053      	str	r3, [r2, #4]
 800de3e:	4408      	add	r0, r1
 800de40:	6010      	str	r0, [r2, #0]
 800de42:	e7da      	b.n	800ddfa <_free_r+0x22>
 800de44:	d902      	bls.n	800de4c <_free_r+0x74>
 800de46:	230c      	movs	r3, #12
 800de48:	602b      	str	r3, [r5, #0]
 800de4a:	e7d6      	b.n	800ddfa <_free_r+0x22>
 800de4c:	6820      	ldr	r0, [r4, #0]
 800de4e:	1821      	adds	r1, r4, r0
 800de50:	428b      	cmp	r3, r1
 800de52:	bf04      	itt	eq
 800de54:	6819      	ldreq	r1, [r3, #0]
 800de56:	685b      	ldreq	r3, [r3, #4]
 800de58:	6063      	str	r3, [r4, #4]
 800de5a:	bf04      	itt	eq
 800de5c:	1809      	addeq	r1, r1, r0
 800de5e:	6021      	streq	r1, [r4, #0]
 800de60:	6054      	str	r4, [r2, #4]
 800de62:	e7ca      	b.n	800ddfa <_free_r+0x22>
 800de64:	bd38      	pop	{r3, r4, r5, pc}
 800de66:	bf00      	nop
 800de68:	200052a0 	.word	0x200052a0

0800de6c <_Balloc>:
 800de6c:	b570      	push	{r4, r5, r6, lr}
 800de6e:	69c6      	ldr	r6, [r0, #28]
 800de70:	4604      	mov	r4, r0
 800de72:	460d      	mov	r5, r1
 800de74:	b976      	cbnz	r6, 800de94 <_Balloc+0x28>
 800de76:	2010      	movs	r0, #16
 800de78:	f7fd ffdc 	bl	800be34 <malloc>
 800de7c:	4602      	mov	r2, r0
 800de7e:	61e0      	str	r0, [r4, #28]
 800de80:	b920      	cbnz	r0, 800de8c <_Balloc+0x20>
 800de82:	4b18      	ldr	r3, [pc, #96]	@ (800dee4 <_Balloc+0x78>)
 800de84:	4818      	ldr	r0, [pc, #96]	@ (800dee8 <_Balloc+0x7c>)
 800de86:	216b      	movs	r1, #107	@ 0x6b
 800de88:	f001 fce6 	bl	800f858 <__assert_func>
 800de8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de90:	6006      	str	r6, [r0, #0]
 800de92:	60c6      	str	r6, [r0, #12]
 800de94:	69e6      	ldr	r6, [r4, #28]
 800de96:	68f3      	ldr	r3, [r6, #12]
 800de98:	b183      	cbz	r3, 800debc <_Balloc+0x50>
 800de9a:	69e3      	ldr	r3, [r4, #28]
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dea2:	b9b8      	cbnz	r0, 800ded4 <_Balloc+0x68>
 800dea4:	2101      	movs	r1, #1
 800dea6:	fa01 f605 	lsl.w	r6, r1, r5
 800deaa:	1d72      	adds	r2, r6, #5
 800deac:	0092      	lsls	r2, r2, #2
 800deae:	4620      	mov	r0, r4
 800deb0:	f001 fcf0 	bl	800f894 <_calloc_r>
 800deb4:	b160      	cbz	r0, 800ded0 <_Balloc+0x64>
 800deb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800deba:	e00e      	b.n	800deda <_Balloc+0x6e>
 800debc:	2221      	movs	r2, #33	@ 0x21
 800debe:	2104      	movs	r1, #4
 800dec0:	4620      	mov	r0, r4
 800dec2:	f001 fce7 	bl	800f894 <_calloc_r>
 800dec6:	69e3      	ldr	r3, [r4, #28]
 800dec8:	60f0      	str	r0, [r6, #12]
 800deca:	68db      	ldr	r3, [r3, #12]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d1e4      	bne.n	800de9a <_Balloc+0x2e>
 800ded0:	2000      	movs	r0, #0
 800ded2:	bd70      	pop	{r4, r5, r6, pc}
 800ded4:	6802      	ldr	r2, [r0, #0]
 800ded6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800deda:	2300      	movs	r3, #0
 800dedc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dee0:	e7f7      	b.n	800ded2 <_Balloc+0x66>
 800dee2:	bf00      	nop
 800dee4:	08011233 	.word	0x08011233
 800dee8:	080112b3 	.word	0x080112b3

0800deec <_Bfree>:
 800deec:	b570      	push	{r4, r5, r6, lr}
 800deee:	69c6      	ldr	r6, [r0, #28]
 800def0:	4605      	mov	r5, r0
 800def2:	460c      	mov	r4, r1
 800def4:	b976      	cbnz	r6, 800df14 <_Bfree+0x28>
 800def6:	2010      	movs	r0, #16
 800def8:	f7fd ff9c 	bl	800be34 <malloc>
 800defc:	4602      	mov	r2, r0
 800defe:	61e8      	str	r0, [r5, #28]
 800df00:	b920      	cbnz	r0, 800df0c <_Bfree+0x20>
 800df02:	4b09      	ldr	r3, [pc, #36]	@ (800df28 <_Bfree+0x3c>)
 800df04:	4809      	ldr	r0, [pc, #36]	@ (800df2c <_Bfree+0x40>)
 800df06:	218f      	movs	r1, #143	@ 0x8f
 800df08:	f001 fca6 	bl	800f858 <__assert_func>
 800df0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df10:	6006      	str	r6, [r0, #0]
 800df12:	60c6      	str	r6, [r0, #12]
 800df14:	b13c      	cbz	r4, 800df26 <_Bfree+0x3a>
 800df16:	69eb      	ldr	r3, [r5, #28]
 800df18:	6862      	ldr	r2, [r4, #4]
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df20:	6021      	str	r1, [r4, #0]
 800df22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df26:	bd70      	pop	{r4, r5, r6, pc}
 800df28:	08011233 	.word	0x08011233
 800df2c:	080112b3 	.word	0x080112b3

0800df30 <__multadd>:
 800df30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df34:	690d      	ldr	r5, [r1, #16]
 800df36:	4607      	mov	r7, r0
 800df38:	460c      	mov	r4, r1
 800df3a:	461e      	mov	r6, r3
 800df3c:	f101 0c14 	add.w	ip, r1, #20
 800df40:	2000      	movs	r0, #0
 800df42:	f8dc 3000 	ldr.w	r3, [ip]
 800df46:	b299      	uxth	r1, r3
 800df48:	fb02 6101 	mla	r1, r2, r1, r6
 800df4c:	0c1e      	lsrs	r6, r3, #16
 800df4e:	0c0b      	lsrs	r3, r1, #16
 800df50:	fb02 3306 	mla	r3, r2, r6, r3
 800df54:	b289      	uxth	r1, r1
 800df56:	3001      	adds	r0, #1
 800df58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800df5c:	4285      	cmp	r5, r0
 800df5e:	f84c 1b04 	str.w	r1, [ip], #4
 800df62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800df66:	dcec      	bgt.n	800df42 <__multadd+0x12>
 800df68:	b30e      	cbz	r6, 800dfae <__multadd+0x7e>
 800df6a:	68a3      	ldr	r3, [r4, #8]
 800df6c:	42ab      	cmp	r3, r5
 800df6e:	dc19      	bgt.n	800dfa4 <__multadd+0x74>
 800df70:	6861      	ldr	r1, [r4, #4]
 800df72:	4638      	mov	r0, r7
 800df74:	3101      	adds	r1, #1
 800df76:	f7ff ff79 	bl	800de6c <_Balloc>
 800df7a:	4680      	mov	r8, r0
 800df7c:	b928      	cbnz	r0, 800df8a <__multadd+0x5a>
 800df7e:	4602      	mov	r2, r0
 800df80:	4b0c      	ldr	r3, [pc, #48]	@ (800dfb4 <__multadd+0x84>)
 800df82:	480d      	ldr	r0, [pc, #52]	@ (800dfb8 <__multadd+0x88>)
 800df84:	21ba      	movs	r1, #186	@ 0xba
 800df86:	f001 fc67 	bl	800f858 <__assert_func>
 800df8a:	6922      	ldr	r2, [r4, #16]
 800df8c:	3202      	adds	r2, #2
 800df8e:	f104 010c 	add.w	r1, r4, #12
 800df92:	0092      	lsls	r2, r2, #2
 800df94:	300c      	adds	r0, #12
 800df96:	f7ff f8bc 	bl	800d112 <memcpy>
 800df9a:	4621      	mov	r1, r4
 800df9c:	4638      	mov	r0, r7
 800df9e:	f7ff ffa5 	bl	800deec <_Bfree>
 800dfa2:	4644      	mov	r4, r8
 800dfa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dfa8:	3501      	adds	r5, #1
 800dfaa:	615e      	str	r6, [r3, #20]
 800dfac:	6125      	str	r5, [r4, #16]
 800dfae:	4620      	mov	r0, r4
 800dfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfb4:	080112a2 	.word	0x080112a2
 800dfb8:	080112b3 	.word	0x080112b3

0800dfbc <__s2b>:
 800dfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfc0:	460c      	mov	r4, r1
 800dfc2:	4615      	mov	r5, r2
 800dfc4:	461f      	mov	r7, r3
 800dfc6:	2209      	movs	r2, #9
 800dfc8:	3308      	adds	r3, #8
 800dfca:	4606      	mov	r6, r0
 800dfcc:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfd0:	2100      	movs	r1, #0
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	db09      	blt.n	800dfec <__s2b+0x30>
 800dfd8:	4630      	mov	r0, r6
 800dfda:	f7ff ff47 	bl	800de6c <_Balloc>
 800dfde:	b940      	cbnz	r0, 800dff2 <__s2b+0x36>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	4b19      	ldr	r3, [pc, #100]	@ (800e048 <__s2b+0x8c>)
 800dfe4:	4819      	ldr	r0, [pc, #100]	@ (800e04c <__s2b+0x90>)
 800dfe6:	21d3      	movs	r1, #211	@ 0xd3
 800dfe8:	f001 fc36 	bl	800f858 <__assert_func>
 800dfec:	0052      	lsls	r2, r2, #1
 800dfee:	3101      	adds	r1, #1
 800dff0:	e7f0      	b.n	800dfd4 <__s2b+0x18>
 800dff2:	9b08      	ldr	r3, [sp, #32]
 800dff4:	6143      	str	r3, [r0, #20]
 800dff6:	2d09      	cmp	r5, #9
 800dff8:	f04f 0301 	mov.w	r3, #1
 800dffc:	6103      	str	r3, [r0, #16]
 800dffe:	dd16      	ble.n	800e02e <__s2b+0x72>
 800e000:	f104 0909 	add.w	r9, r4, #9
 800e004:	46c8      	mov	r8, r9
 800e006:	442c      	add	r4, r5
 800e008:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e00c:	4601      	mov	r1, r0
 800e00e:	3b30      	subs	r3, #48	@ 0x30
 800e010:	220a      	movs	r2, #10
 800e012:	4630      	mov	r0, r6
 800e014:	f7ff ff8c 	bl	800df30 <__multadd>
 800e018:	45a0      	cmp	r8, r4
 800e01a:	d1f5      	bne.n	800e008 <__s2b+0x4c>
 800e01c:	f1a5 0408 	sub.w	r4, r5, #8
 800e020:	444c      	add	r4, r9
 800e022:	1b2d      	subs	r5, r5, r4
 800e024:	1963      	adds	r3, r4, r5
 800e026:	42bb      	cmp	r3, r7
 800e028:	db04      	blt.n	800e034 <__s2b+0x78>
 800e02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e02e:	340a      	adds	r4, #10
 800e030:	2509      	movs	r5, #9
 800e032:	e7f6      	b.n	800e022 <__s2b+0x66>
 800e034:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e038:	4601      	mov	r1, r0
 800e03a:	3b30      	subs	r3, #48	@ 0x30
 800e03c:	220a      	movs	r2, #10
 800e03e:	4630      	mov	r0, r6
 800e040:	f7ff ff76 	bl	800df30 <__multadd>
 800e044:	e7ee      	b.n	800e024 <__s2b+0x68>
 800e046:	bf00      	nop
 800e048:	080112a2 	.word	0x080112a2
 800e04c:	080112b3 	.word	0x080112b3

0800e050 <__hi0bits>:
 800e050:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e054:	4603      	mov	r3, r0
 800e056:	bf36      	itet	cc
 800e058:	0403      	lslcc	r3, r0, #16
 800e05a:	2000      	movcs	r0, #0
 800e05c:	2010      	movcc	r0, #16
 800e05e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e062:	bf3c      	itt	cc
 800e064:	021b      	lslcc	r3, r3, #8
 800e066:	3008      	addcc	r0, #8
 800e068:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e06c:	bf3c      	itt	cc
 800e06e:	011b      	lslcc	r3, r3, #4
 800e070:	3004      	addcc	r0, #4
 800e072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e076:	bf3c      	itt	cc
 800e078:	009b      	lslcc	r3, r3, #2
 800e07a:	3002      	addcc	r0, #2
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	db05      	blt.n	800e08c <__hi0bits+0x3c>
 800e080:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e084:	f100 0001 	add.w	r0, r0, #1
 800e088:	bf08      	it	eq
 800e08a:	2020      	moveq	r0, #32
 800e08c:	4770      	bx	lr

0800e08e <__lo0bits>:
 800e08e:	6803      	ldr	r3, [r0, #0]
 800e090:	4602      	mov	r2, r0
 800e092:	f013 0007 	ands.w	r0, r3, #7
 800e096:	d00b      	beq.n	800e0b0 <__lo0bits+0x22>
 800e098:	07d9      	lsls	r1, r3, #31
 800e09a:	d421      	bmi.n	800e0e0 <__lo0bits+0x52>
 800e09c:	0798      	lsls	r0, r3, #30
 800e09e:	bf49      	itett	mi
 800e0a0:	085b      	lsrmi	r3, r3, #1
 800e0a2:	089b      	lsrpl	r3, r3, #2
 800e0a4:	2001      	movmi	r0, #1
 800e0a6:	6013      	strmi	r3, [r2, #0]
 800e0a8:	bf5c      	itt	pl
 800e0aa:	6013      	strpl	r3, [r2, #0]
 800e0ac:	2002      	movpl	r0, #2
 800e0ae:	4770      	bx	lr
 800e0b0:	b299      	uxth	r1, r3
 800e0b2:	b909      	cbnz	r1, 800e0b8 <__lo0bits+0x2a>
 800e0b4:	0c1b      	lsrs	r3, r3, #16
 800e0b6:	2010      	movs	r0, #16
 800e0b8:	b2d9      	uxtb	r1, r3
 800e0ba:	b909      	cbnz	r1, 800e0c0 <__lo0bits+0x32>
 800e0bc:	3008      	adds	r0, #8
 800e0be:	0a1b      	lsrs	r3, r3, #8
 800e0c0:	0719      	lsls	r1, r3, #28
 800e0c2:	bf04      	itt	eq
 800e0c4:	091b      	lsreq	r3, r3, #4
 800e0c6:	3004      	addeq	r0, #4
 800e0c8:	0799      	lsls	r1, r3, #30
 800e0ca:	bf04      	itt	eq
 800e0cc:	089b      	lsreq	r3, r3, #2
 800e0ce:	3002      	addeq	r0, #2
 800e0d0:	07d9      	lsls	r1, r3, #31
 800e0d2:	d403      	bmi.n	800e0dc <__lo0bits+0x4e>
 800e0d4:	085b      	lsrs	r3, r3, #1
 800e0d6:	f100 0001 	add.w	r0, r0, #1
 800e0da:	d003      	beq.n	800e0e4 <__lo0bits+0x56>
 800e0dc:	6013      	str	r3, [r2, #0]
 800e0de:	4770      	bx	lr
 800e0e0:	2000      	movs	r0, #0
 800e0e2:	4770      	bx	lr
 800e0e4:	2020      	movs	r0, #32
 800e0e6:	4770      	bx	lr

0800e0e8 <__i2b>:
 800e0e8:	b510      	push	{r4, lr}
 800e0ea:	460c      	mov	r4, r1
 800e0ec:	2101      	movs	r1, #1
 800e0ee:	f7ff febd 	bl	800de6c <_Balloc>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	b928      	cbnz	r0, 800e102 <__i2b+0x1a>
 800e0f6:	4b05      	ldr	r3, [pc, #20]	@ (800e10c <__i2b+0x24>)
 800e0f8:	4805      	ldr	r0, [pc, #20]	@ (800e110 <__i2b+0x28>)
 800e0fa:	f240 1145 	movw	r1, #325	@ 0x145
 800e0fe:	f001 fbab 	bl	800f858 <__assert_func>
 800e102:	2301      	movs	r3, #1
 800e104:	6144      	str	r4, [r0, #20]
 800e106:	6103      	str	r3, [r0, #16]
 800e108:	bd10      	pop	{r4, pc}
 800e10a:	bf00      	nop
 800e10c:	080112a2 	.word	0x080112a2
 800e110:	080112b3 	.word	0x080112b3

0800e114 <__multiply>:
 800e114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e118:	4614      	mov	r4, r2
 800e11a:	690a      	ldr	r2, [r1, #16]
 800e11c:	6923      	ldr	r3, [r4, #16]
 800e11e:	429a      	cmp	r2, r3
 800e120:	bfa8      	it	ge
 800e122:	4623      	movge	r3, r4
 800e124:	460f      	mov	r7, r1
 800e126:	bfa4      	itt	ge
 800e128:	460c      	movge	r4, r1
 800e12a:	461f      	movge	r7, r3
 800e12c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e130:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e134:	68a3      	ldr	r3, [r4, #8]
 800e136:	6861      	ldr	r1, [r4, #4]
 800e138:	eb0a 0609 	add.w	r6, sl, r9
 800e13c:	42b3      	cmp	r3, r6
 800e13e:	b085      	sub	sp, #20
 800e140:	bfb8      	it	lt
 800e142:	3101      	addlt	r1, #1
 800e144:	f7ff fe92 	bl	800de6c <_Balloc>
 800e148:	b930      	cbnz	r0, 800e158 <__multiply+0x44>
 800e14a:	4602      	mov	r2, r0
 800e14c:	4b44      	ldr	r3, [pc, #272]	@ (800e260 <__multiply+0x14c>)
 800e14e:	4845      	ldr	r0, [pc, #276]	@ (800e264 <__multiply+0x150>)
 800e150:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e154:	f001 fb80 	bl	800f858 <__assert_func>
 800e158:	f100 0514 	add.w	r5, r0, #20
 800e15c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e160:	462b      	mov	r3, r5
 800e162:	2200      	movs	r2, #0
 800e164:	4543      	cmp	r3, r8
 800e166:	d321      	bcc.n	800e1ac <__multiply+0x98>
 800e168:	f107 0114 	add.w	r1, r7, #20
 800e16c:	f104 0214 	add.w	r2, r4, #20
 800e170:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e174:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e178:	9302      	str	r3, [sp, #8]
 800e17a:	1b13      	subs	r3, r2, r4
 800e17c:	3b15      	subs	r3, #21
 800e17e:	f023 0303 	bic.w	r3, r3, #3
 800e182:	3304      	adds	r3, #4
 800e184:	f104 0715 	add.w	r7, r4, #21
 800e188:	42ba      	cmp	r2, r7
 800e18a:	bf38      	it	cc
 800e18c:	2304      	movcc	r3, #4
 800e18e:	9301      	str	r3, [sp, #4]
 800e190:	9b02      	ldr	r3, [sp, #8]
 800e192:	9103      	str	r1, [sp, #12]
 800e194:	428b      	cmp	r3, r1
 800e196:	d80c      	bhi.n	800e1b2 <__multiply+0x9e>
 800e198:	2e00      	cmp	r6, #0
 800e19a:	dd03      	ble.n	800e1a4 <__multiply+0x90>
 800e19c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d05b      	beq.n	800e25c <__multiply+0x148>
 800e1a4:	6106      	str	r6, [r0, #16]
 800e1a6:	b005      	add	sp, #20
 800e1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ac:	f843 2b04 	str.w	r2, [r3], #4
 800e1b0:	e7d8      	b.n	800e164 <__multiply+0x50>
 800e1b2:	f8b1 a000 	ldrh.w	sl, [r1]
 800e1b6:	f1ba 0f00 	cmp.w	sl, #0
 800e1ba:	d024      	beq.n	800e206 <__multiply+0xf2>
 800e1bc:	f104 0e14 	add.w	lr, r4, #20
 800e1c0:	46a9      	mov	r9, r5
 800e1c2:	f04f 0c00 	mov.w	ip, #0
 800e1c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e1ca:	f8d9 3000 	ldr.w	r3, [r9]
 800e1ce:	fa1f fb87 	uxth.w	fp, r7
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	fb0a 330b 	mla	r3, sl, fp, r3
 800e1d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e1dc:	f8d9 7000 	ldr.w	r7, [r9]
 800e1e0:	4463      	add	r3, ip
 800e1e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e1e6:	fb0a c70b 	mla	r7, sl, fp, ip
 800e1ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e1f4:	4572      	cmp	r2, lr
 800e1f6:	f849 3b04 	str.w	r3, [r9], #4
 800e1fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e1fe:	d8e2      	bhi.n	800e1c6 <__multiply+0xb2>
 800e200:	9b01      	ldr	r3, [sp, #4]
 800e202:	f845 c003 	str.w	ip, [r5, r3]
 800e206:	9b03      	ldr	r3, [sp, #12]
 800e208:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e20c:	3104      	adds	r1, #4
 800e20e:	f1b9 0f00 	cmp.w	r9, #0
 800e212:	d021      	beq.n	800e258 <__multiply+0x144>
 800e214:	682b      	ldr	r3, [r5, #0]
 800e216:	f104 0c14 	add.w	ip, r4, #20
 800e21a:	46ae      	mov	lr, r5
 800e21c:	f04f 0a00 	mov.w	sl, #0
 800e220:	f8bc b000 	ldrh.w	fp, [ip]
 800e224:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e228:	fb09 770b 	mla	r7, r9, fp, r7
 800e22c:	4457      	add	r7, sl
 800e22e:	b29b      	uxth	r3, r3
 800e230:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e234:	f84e 3b04 	str.w	r3, [lr], #4
 800e238:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e23c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e240:	f8be 3000 	ldrh.w	r3, [lr]
 800e244:	fb09 330a 	mla	r3, r9, sl, r3
 800e248:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e24c:	4562      	cmp	r2, ip
 800e24e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e252:	d8e5      	bhi.n	800e220 <__multiply+0x10c>
 800e254:	9f01      	ldr	r7, [sp, #4]
 800e256:	51eb      	str	r3, [r5, r7]
 800e258:	3504      	adds	r5, #4
 800e25a:	e799      	b.n	800e190 <__multiply+0x7c>
 800e25c:	3e01      	subs	r6, #1
 800e25e:	e79b      	b.n	800e198 <__multiply+0x84>
 800e260:	080112a2 	.word	0x080112a2
 800e264:	080112b3 	.word	0x080112b3

0800e268 <__pow5mult>:
 800e268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e26c:	4615      	mov	r5, r2
 800e26e:	f012 0203 	ands.w	r2, r2, #3
 800e272:	4607      	mov	r7, r0
 800e274:	460e      	mov	r6, r1
 800e276:	d007      	beq.n	800e288 <__pow5mult+0x20>
 800e278:	4c25      	ldr	r4, [pc, #148]	@ (800e310 <__pow5mult+0xa8>)
 800e27a:	3a01      	subs	r2, #1
 800e27c:	2300      	movs	r3, #0
 800e27e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e282:	f7ff fe55 	bl	800df30 <__multadd>
 800e286:	4606      	mov	r6, r0
 800e288:	10ad      	asrs	r5, r5, #2
 800e28a:	d03d      	beq.n	800e308 <__pow5mult+0xa0>
 800e28c:	69fc      	ldr	r4, [r7, #28]
 800e28e:	b97c      	cbnz	r4, 800e2b0 <__pow5mult+0x48>
 800e290:	2010      	movs	r0, #16
 800e292:	f7fd fdcf 	bl	800be34 <malloc>
 800e296:	4602      	mov	r2, r0
 800e298:	61f8      	str	r0, [r7, #28]
 800e29a:	b928      	cbnz	r0, 800e2a8 <__pow5mult+0x40>
 800e29c:	4b1d      	ldr	r3, [pc, #116]	@ (800e314 <__pow5mult+0xac>)
 800e29e:	481e      	ldr	r0, [pc, #120]	@ (800e318 <__pow5mult+0xb0>)
 800e2a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e2a4:	f001 fad8 	bl	800f858 <__assert_func>
 800e2a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2ac:	6004      	str	r4, [r0, #0]
 800e2ae:	60c4      	str	r4, [r0, #12]
 800e2b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e2b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e2b8:	b94c      	cbnz	r4, 800e2ce <__pow5mult+0x66>
 800e2ba:	f240 2171 	movw	r1, #625	@ 0x271
 800e2be:	4638      	mov	r0, r7
 800e2c0:	f7ff ff12 	bl	800e0e8 <__i2b>
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	6003      	str	r3, [r0, #0]
 800e2ce:	f04f 0900 	mov.w	r9, #0
 800e2d2:	07eb      	lsls	r3, r5, #31
 800e2d4:	d50a      	bpl.n	800e2ec <__pow5mult+0x84>
 800e2d6:	4631      	mov	r1, r6
 800e2d8:	4622      	mov	r2, r4
 800e2da:	4638      	mov	r0, r7
 800e2dc:	f7ff ff1a 	bl	800e114 <__multiply>
 800e2e0:	4631      	mov	r1, r6
 800e2e2:	4680      	mov	r8, r0
 800e2e4:	4638      	mov	r0, r7
 800e2e6:	f7ff fe01 	bl	800deec <_Bfree>
 800e2ea:	4646      	mov	r6, r8
 800e2ec:	106d      	asrs	r5, r5, #1
 800e2ee:	d00b      	beq.n	800e308 <__pow5mult+0xa0>
 800e2f0:	6820      	ldr	r0, [r4, #0]
 800e2f2:	b938      	cbnz	r0, 800e304 <__pow5mult+0x9c>
 800e2f4:	4622      	mov	r2, r4
 800e2f6:	4621      	mov	r1, r4
 800e2f8:	4638      	mov	r0, r7
 800e2fa:	f7ff ff0b 	bl	800e114 <__multiply>
 800e2fe:	6020      	str	r0, [r4, #0]
 800e300:	f8c0 9000 	str.w	r9, [r0]
 800e304:	4604      	mov	r4, r0
 800e306:	e7e4      	b.n	800e2d2 <__pow5mult+0x6a>
 800e308:	4630      	mov	r0, r6
 800e30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e30e:	bf00      	nop
 800e310:	0801130c 	.word	0x0801130c
 800e314:	08011233 	.word	0x08011233
 800e318:	080112b3 	.word	0x080112b3

0800e31c <__lshift>:
 800e31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e320:	460c      	mov	r4, r1
 800e322:	6849      	ldr	r1, [r1, #4]
 800e324:	6923      	ldr	r3, [r4, #16]
 800e326:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e32a:	68a3      	ldr	r3, [r4, #8]
 800e32c:	4607      	mov	r7, r0
 800e32e:	4691      	mov	r9, r2
 800e330:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e334:	f108 0601 	add.w	r6, r8, #1
 800e338:	42b3      	cmp	r3, r6
 800e33a:	db0b      	blt.n	800e354 <__lshift+0x38>
 800e33c:	4638      	mov	r0, r7
 800e33e:	f7ff fd95 	bl	800de6c <_Balloc>
 800e342:	4605      	mov	r5, r0
 800e344:	b948      	cbnz	r0, 800e35a <__lshift+0x3e>
 800e346:	4602      	mov	r2, r0
 800e348:	4b28      	ldr	r3, [pc, #160]	@ (800e3ec <__lshift+0xd0>)
 800e34a:	4829      	ldr	r0, [pc, #164]	@ (800e3f0 <__lshift+0xd4>)
 800e34c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e350:	f001 fa82 	bl	800f858 <__assert_func>
 800e354:	3101      	adds	r1, #1
 800e356:	005b      	lsls	r3, r3, #1
 800e358:	e7ee      	b.n	800e338 <__lshift+0x1c>
 800e35a:	2300      	movs	r3, #0
 800e35c:	f100 0114 	add.w	r1, r0, #20
 800e360:	f100 0210 	add.w	r2, r0, #16
 800e364:	4618      	mov	r0, r3
 800e366:	4553      	cmp	r3, sl
 800e368:	db33      	blt.n	800e3d2 <__lshift+0xb6>
 800e36a:	6920      	ldr	r0, [r4, #16]
 800e36c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e370:	f104 0314 	add.w	r3, r4, #20
 800e374:	f019 091f 	ands.w	r9, r9, #31
 800e378:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e37c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e380:	d02b      	beq.n	800e3da <__lshift+0xbe>
 800e382:	f1c9 0e20 	rsb	lr, r9, #32
 800e386:	468a      	mov	sl, r1
 800e388:	2200      	movs	r2, #0
 800e38a:	6818      	ldr	r0, [r3, #0]
 800e38c:	fa00 f009 	lsl.w	r0, r0, r9
 800e390:	4310      	orrs	r0, r2
 800e392:	f84a 0b04 	str.w	r0, [sl], #4
 800e396:	f853 2b04 	ldr.w	r2, [r3], #4
 800e39a:	459c      	cmp	ip, r3
 800e39c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e3a0:	d8f3      	bhi.n	800e38a <__lshift+0x6e>
 800e3a2:	ebac 0304 	sub.w	r3, ip, r4
 800e3a6:	3b15      	subs	r3, #21
 800e3a8:	f023 0303 	bic.w	r3, r3, #3
 800e3ac:	3304      	adds	r3, #4
 800e3ae:	f104 0015 	add.w	r0, r4, #21
 800e3b2:	4584      	cmp	ip, r0
 800e3b4:	bf38      	it	cc
 800e3b6:	2304      	movcc	r3, #4
 800e3b8:	50ca      	str	r2, [r1, r3]
 800e3ba:	b10a      	cbz	r2, 800e3c0 <__lshift+0xa4>
 800e3bc:	f108 0602 	add.w	r6, r8, #2
 800e3c0:	3e01      	subs	r6, #1
 800e3c2:	4638      	mov	r0, r7
 800e3c4:	612e      	str	r6, [r5, #16]
 800e3c6:	4621      	mov	r1, r4
 800e3c8:	f7ff fd90 	bl	800deec <_Bfree>
 800e3cc:	4628      	mov	r0, r5
 800e3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	e7c5      	b.n	800e366 <__lshift+0x4a>
 800e3da:	3904      	subs	r1, #4
 800e3dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e3e4:	459c      	cmp	ip, r3
 800e3e6:	d8f9      	bhi.n	800e3dc <__lshift+0xc0>
 800e3e8:	e7ea      	b.n	800e3c0 <__lshift+0xa4>
 800e3ea:	bf00      	nop
 800e3ec:	080112a2 	.word	0x080112a2
 800e3f0:	080112b3 	.word	0x080112b3

0800e3f4 <__mcmp>:
 800e3f4:	690a      	ldr	r2, [r1, #16]
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	6900      	ldr	r0, [r0, #16]
 800e3fa:	1a80      	subs	r0, r0, r2
 800e3fc:	b530      	push	{r4, r5, lr}
 800e3fe:	d10e      	bne.n	800e41e <__mcmp+0x2a>
 800e400:	3314      	adds	r3, #20
 800e402:	3114      	adds	r1, #20
 800e404:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e408:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e40c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e410:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e414:	4295      	cmp	r5, r2
 800e416:	d003      	beq.n	800e420 <__mcmp+0x2c>
 800e418:	d205      	bcs.n	800e426 <__mcmp+0x32>
 800e41a:	f04f 30ff 	mov.w	r0, #4294967295
 800e41e:	bd30      	pop	{r4, r5, pc}
 800e420:	42a3      	cmp	r3, r4
 800e422:	d3f3      	bcc.n	800e40c <__mcmp+0x18>
 800e424:	e7fb      	b.n	800e41e <__mcmp+0x2a>
 800e426:	2001      	movs	r0, #1
 800e428:	e7f9      	b.n	800e41e <__mcmp+0x2a>
	...

0800e42c <__mdiff>:
 800e42c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e430:	4689      	mov	r9, r1
 800e432:	4606      	mov	r6, r0
 800e434:	4611      	mov	r1, r2
 800e436:	4648      	mov	r0, r9
 800e438:	4614      	mov	r4, r2
 800e43a:	f7ff ffdb 	bl	800e3f4 <__mcmp>
 800e43e:	1e05      	subs	r5, r0, #0
 800e440:	d112      	bne.n	800e468 <__mdiff+0x3c>
 800e442:	4629      	mov	r1, r5
 800e444:	4630      	mov	r0, r6
 800e446:	f7ff fd11 	bl	800de6c <_Balloc>
 800e44a:	4602      	mov	r2, r0
 800e44c:	b928      	cbnz	r0, 800e45a <__mdiff+0x2e>
 800e44e:	4b3f      	ldr	r3, [pc, #252]	@ (800e54c <__mdiff+0x120>)
 800e450:	f240 2137 	movw	r1, #567	@ 0x237
 800e454:	483e      	ldr	r0, [pc, #248]	@ (800e550 <__mdiff+0x124>)
 800e456:	f001 f9ff 	bl	800f858 <__assert_func>
 800e45a:	2301      	movs	r3, #1
 800e45c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e460:	4610      	mov	r0, r2
 800e462:	b003      	add	sp, #12
 800e464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e468:	bfbc      	itt	lt
 800e46a:	464b      	movlt	r3, r9
 800e46c:	46a1      	movlt	r9, r4
 800e46e:	4630      	mov	r0, r6
 800e470:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e474:	bfba      	itte	lt
 800e476:	461c      	movlt	r4, r3
 800e478:	2501      	movlt	r5, #1
 800e47a:	2500      	movge	r5, #0
 800e47c:	f7ff fcf6 	bl	800de6c <_Balloc>
 800e480:	4602      	mov	r2, r0
 800e482:	b918      	cbnz	r0, 800e48c <__mdiff+0x60>
 800e484:	4b31      	ldr	r3, [pc, #196]	@ (800e54c <__mdiff+0x120>)
 800e486:	f240 2145 	movw	r1, #581	@ 0x245
 800e48a:	e7e3      	b.n	800e454 <__mdiff+0x28>
 800e48c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e490:	6926      	ldr	r6, [r4, #16]
 800e492:	60c5      	str	r5, [r0, #12]
 800e494:	f109 0310 	add.w	r3, r9, #16
 800e498:	f109 0514 	add.w	r5, r9, #20
 800e49c:	f104 0e14 	add.w	lr, r4, #20
 800e4a0:	f100 0b14 	add.w	fp, r0, #20
 800e4a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e4a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e4ac:	9301      	str	r3, [sp, #4]
 800e4ae:	46d9      	mov	r9, fp
 800e4b0:	f04f 0c00 	mov.w	ip, #0
 800e4b4:	9b01      	ldr	r3, [sp, #4]
 800e4b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e4ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e4be:	9301      	str	r3, [sp, #4]
 800e4c0:	fa1f f38a 	uxth.w	r3, sl
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	b283      	uxth	r3, r0
 800e4c8:	1acb      	subs	r3, r1, r3
 800e4ca:	0c00      	lsrs	r0, r0, #16
 800e4cc:	4463      	add	r3, ip
 800e4ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e4d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e4dc:	4576      	cmp	r6, lr
 800e4de:	f849 3b04 	str.w	r3, [r9], #4
 800e4e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e4e6:	d8e5      	bhi.n	800e4b4 <__mdiff+0x88>
 800e4e8:	1b33      	subs	r3, r6, r4
 800e4ea:	3b15      	subs	r3, #21
 800e4ec:	f023 0303 	bic.w	r3, r3, #3
 800e4f0:	3415      	adds	r4, #21
 800e4f2:	3304      	adds	r3, #4
 800e4f4:	42a6      	cmp	r6, r4
 800e4f6:	bf38      	it	cc
 800e4f8:	2304      	movcc	r3, #4
 800e4fa:	441d      	add	r5, r3
 800e4fc:	445b      	add	r3, fp
 800e4fe:	461e      	mov	r6, r3
 800e500:	462c      	mov	r4, r5
 800e502:	4544      	cmp	r4, r8
 800e504:	d30e      	bcc.n	800e524 <__mdiff+0xf8>
 800e506:	f108 0103 	add.w	r1, r8, #3
 800e50a:	1b49      	subs	r1, r1, r5
 800e50c:	f021 0103 	bic.w	r1, r1, #3
 800e510:	3d03      	subs	r5, #3
 800e512:	45a8      	cmp	r8, r5
 800e514:	bf38      	it	cc
 800e516:	2100      	movcc	r1, #0
 800e518:	440b      	add	r3, r1
 800e51a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e51e:	b191      	cbz	r1, 800e546 <__mdiff+0x11a>
 800e520:	6117      	str	r7, [r2, #16]
 800e522:	e79d      	b.n	800e460 <__mdiff+0x34>
 800e524:	f854 1b04 	ldr.w	r1, [r4], #4
 800e528:	46e6      	mov	lr, ip
 800e52a:	0c08      	lsrs	r0, r1, #16
 800e52c:	fa1c fc81 	uxtah	ip, ip, r1
 800e530:	4471      	add	r1, lr
 800e532:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e536:	b289      	uxth	r1, r1
 800e538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e53c:	f846 1b04 	str.w	r1, [r6], #4
 800e540:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e544:	e7dd      	b.n	800e502 <__mdiff+0xd6>
 800e546:	3f01      	subs	r7, #1
 800e548:	e7e7      	b.n	800e51a <__mdiff+0xee>
 800e54a:	bf00      	nop
 800e54c:	080112a2 	.word	0x080112a2
 800e550:	080112b3 	.word	0x080112b3

0800e554 <__ulp>:
 800e554:	b082      	sub	sp, #8
 800e556:	ed8d 0b00 	vstr	d0, [sp]
 800e55a:	9a01      	ldr	r2, [sp, #4]
 800e55c:	4b0f      	ldr	r3, [pc, #60]	@ (800e59c <__ulp+0x48>)
 800e55e:	4013      	ands	r3, r2
 800e560:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e564:	2b00      	cmp	r3, #0
 800e566:	dc08      	bgt.n	800e57a <__ulp+0x26>
 800e568:	425b      	negs	r3, r3
 800e56a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e56e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e572:	da04      	bge.n	800e57e <__ulp+0x2a>
 800e574:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e578:	4113      	asrs	r3, r2
 800e57a:	2200      	movs	r2, #0
 800e57c:	e008      	b.n	800e590 <__ulp+0x3c>
 800e57e:	f1a2 0314 	sub.w	r3, r2, #20
 800e582:	2b1e      	cmp	r3, #30
 800e584:	bfda      	itte	le
 800e586:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e58a:	40da      	lsrle	r2, r3
 800e58c:	2201      	movgt	r2, #1
 800e58e:	2300      	movs	r3, #0
 800e590:	4619      	mov	r1, r3
 800e592:	4610      	mov	r0, r2
 800e594:	ec41 0b10 	vmov	d0, r0, r1
 800e598:	b002      	add	sp, #8
 800e59a:	4770      	bx	lr
 800e59c:	7ff00000 	.word	0x7ff00000

0800e5a0 <__b2d>:
 800e5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a4:	6906      	ldr	r6, [r0, #16]
 800e5a6:	f100 0814 	add.w	r8, r0, #20
 800e5aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e5ae:	1f37      	subs	r7, r6, #4
 800e5b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e5b4:	4610      	mov	r0, r2
 800e5b6:	f7ff fd4b 	bl	800e050 <__hi0bits>
 800e5ba:	f1c0 0320 	rsb	r3, r0, #32
 800e5be:	280a      	cmp	r0, #10
 800e5c0:	600b      	str	r3, [r1, #0]
 800e5c2:	491b      	ldr	r1, [pc, #108]	@ (800e630 <__b2d+0x90>)
 800e5c4:	dc15      	bgt.n	800e5f2 <__b2d+0x52>
 800e5c6:	f1c0 0c0b 	rsb	ip, r0, #11
 800e5ca:	fa22 f30c 	lsr.w	r3, r2, ip
 800e5ce:	45b8      	cmp	r8, r7
 800e5d0:	ea43 0501 	orr.w	r5, r3, r1
 800e5d4:	bf34      	ite	cc
 800e5d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e5da:	2300      	movcs	r3, #0
 800e5dc:	3015      	adds	r0, #21
 800e5de:	fa02 f000 	lsl.w	r0, r2, r0
 800e5e2:	fa23 f30c 	lsr.w	r3, r3, ip
 800e5e6:	4303      	orrs	r3, r0
 800e5e8:	461c      	mov	r4, r3
 800e5ea:	ec45 4b10 	vmov	d0, r4, r5
 800e5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5f2:	45b8      	cmp	r8, r7
 800e5f4:	bf3a      	itte	cc
 800e5f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e5fa:	f1a6 0708 	subcc.w	r7, r6, #8
 800e5fe:	2300      	movcs	r3, #0
 800e600:	380b      	subs	r0, #11
 800e602:	d012      	beq.n	800e62a <__b2d+0x8a>
 800e604:	f1c0 0120 	rsb	r1, r0, #32
 800e608:	fa23 f401 	lsr.w	r4, r3, r1
 800e60c:	4082      	lsls	r2, r0
 800e60e:	4322      	orrs	r2, r4
 800e610:	4547      	cmp	r7, r8
 800e612:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e616:	bf8c      	ite	hi
 800e618:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e61c:	2200      	movls	r2, #0
 800e61e:	4083      	lsls	r3, r0
 800e620:	40ca      	lsrs	r2, r1
 800e622:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e626:	4313      	orrs	r3, r2
 800e628:	e7de      	b.n	800e5e8 <__b2d+0x48>
 800e62a:	ea42 0501 	orr.w	r5, r2, r1
 800e62e:	e7db      	b.n	800e5e8 <__b2d+0x48>
 800e630:	3ff00000 	.word	0x3ff00000

0800e634 <__d2b>:
 800e634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e638:	460f      	mov	r7, r1
 800e63a:	2101      	movs	r1, #1
 800e63c:	ec59 8b10 	vmov	r8, r9, d0
 800e640:	4616      	mov	r6, r2
 800e642:	f7ff fc13 	bl	800de6c <_Balloc>
 800e646:	4604      	mov	r4, r0
 800e648:	b930      	cbnz	r0, 800e658 <__d2b+0x24>
 800e64a:	4602      	mov	r2, r0
 800e64c:	4b23      	ldr	r3, [pc, #140]	@ (800e6dc <__d2b+0xa8>)
 800e64e:	4824      	ldr	r0, [pc, #144]	@ (800e6e0 <__d2b+0xac>)
 800e650:	f240 310f 	movw	r1, #783	@ 0x30f
 800e654:	f001 f900 	bl	800f858 <__assert_func>
 800e658:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e65c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e660:	b10d      	cbz	r5, 800e666 <__d2b+0x32>
 800e662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e666:	9301      	str	r3, [sp, #4]
 800e668:	f1b8 0300 	subs.w	r3, r8, #0
 800e66c:	d023      	beq.n	800e6b6 <__d2b+0x82>
 800e66e:	4668      	mov	r0, sp
 800e670:	9300      	str	r3, [sp, #0]
 800e672:	f7ff fd0c 	bl	800e08e <__lo0bits>
 800e676:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e67a:	b1d0      	cbz	r0, 800e6b2 <__d2b+0x7e>
 800e67c:	f1c0 0320 	rsb	r3, r0, #32
 800e680:	fa02 f303 	lsl.w	r3, r2, r3
 800e684:	430b      	orrs	r3, r1
 800e686:	40c2      	lsrs	r2, r0
 800e688:	6163      	str	r3, [r4, #20]
 800e68a:	9201      	str	r2, [sp, #4]
 800e68c:	9b01      	ldr	r3, [sp, #4]
 800e68e:	61a3      	str	r3, [r4, #24]
 800e690:	2b00      	cmp	r3, #0
 800e692:	bf0c      	ite	eq
 800e694:	2201      	moveq	r2, #1
 800e696:	2202      	movne	r2, #2
 800e698:	6122      	str	r2, [r4, #16]
 800e69a:	b1a5      	cbz	r5, 800e6c6 <__d2b+0x92>
 800e69c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e6a0:	4405      	add	r5, r0
 800e6a2:	603d      	str	r5, [r7, #0]
 800e6a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e6a8:	6030      	str	r0, [r6, #0]
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	b003      	add	sp, #12
 800e6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6b2:	6161      	str	r1, [r4, #20]
 800e6b4:	e7ea      	b.n	800e68c <__d2b+0x58>
 800e6b6:	a801      	add	r0, sp, #4
 800e6b8:	f7ff fce9 	bl	800e08e <__lo0bits>
 800e6bc:	9b01      	ldr	r3, [sp, #4]
 800e6be:	6163      	str	r3, [r4, #20]
 800e6c0:	3020      	adds	r0, #32
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	e7e8      	b.n	800e698 <__d2b+0x64>
 800e6c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e6ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e6ce:	6038      	str	r0, [r7, #0]
 800e6d0:	6918      	ldr	r0, [r3, #16]
 800e6d2:	f7ff fcbd 	bl	800e050 <__hi0bits>
 800e6d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e6da:	e7e5      	b.n	800e6a8 <__d2b+0x74>
 800e6dc:	080112a2 	.word	0x080112a2
 800e6e0:	080112b3 	.word	0x080112b3

0800e6e4 <__ratio>:
 800e6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e8:	b085      	sub	sp, #20
 800e6ea:	e9cd 1000 	strd	r1, r0, [sp]
 800e6ee:	a902      	add	r1, sp, #8
 800e6f0:	f7ff ff56 	bl	800e5a0 <__b2d>
 800e6f4:	9800      	ldr	r0, [sp, #0]
 800e6f6:	a903      	add	r1, sp, #12
 800e6f8:	ec55 4b10 	vmov	r4, r5, d0
 800e6fc:	f7ff ff50 	bl	800e5a0 <__b2d>
 800e700:	9b01      	ldr	r3, [sp, #4]
 800e702:	6919      	ldr	r1, [r3, #16]
 800e704:	9b00      	ldr	r3, [sp, #0]
 800e706:	691b      	ldr	r3, [r3, #16]
 800e708:	1ac9      	subs	r1, r1, r3
 800e70a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e70e:	1a9b      	subs	r3, r3, r2
 800e710:	ec5b ab10 	vmov	sl, fp, d0
 800e714:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e718:	2b00      	cmp	r3, #0
 800e71a:	bfce      	itee	gt
 800e71c:	462a      	movgt	r2, r5
 800e71e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e722:	465a      	movle	r2, fp
 800e724:	462f      	mov	r7, r5
 800e726:	46d9      	mov	r9, fp
 800e728:	bfcc      	ite	gt
 800e72a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e72e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e732:	464b      	mov	r3, r9
 800e734:	4652      	mov	r2, sl
 800e736:	4620      	mov	r0, r4
 800e738:	4639      	mov	r1, r7
 800e73a:	f7f2 f887 	bl	800084c <__aeabi_ddiv>
 800e73e:	ec41 0b10 	vmov	d0, r0, r1
 800e742:	b005      	add	sp, #20
 800e744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e748 <__copybits>:
 800e748:	3901      	subs	r1, #1
 800e74a:	b570      	push	{r4, r5, r6, lr}
 800e74c:	1149      	asrs	r1, r1, #5
 800e74e:	6914      	ldr	r4, [r2, #16]
 800e750:	3101      	adds	r1, #1
 800e752:	f102 0314 	add.w	r3, r2, #20
 800e756:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e75a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e75e:	1f05      	subs	r5, r0, #4
 800e760:	42a3      	cmp	r3, r4
 800e762:	d30c      	bcc.n	800e77e <__copybits+0x36>
 800e764:	1aa3      	subs	r3, r4, r2
 800e766:	3b11      	subs	r3, #17
 800e768:	f023 0303 	bic.w	r3, r3, #3
 800e76c:	3211      	adds	r2, #17
 800e76e:	42a2      	cmp	r2, r4
 800e770:	bf88      	it	hi
 800e772:	2300      	movhi	r3, #0
 800e774:	4418      	add	r0, r3
 800e776:	2300      	movs	r3, #0
 800e778:	4288      	cmp	r0, r1
 800e77a:	d305      	bcc.n	800e788 <__copybits+0x40>
 800e77c:	bd70      	pop	{r4, r5, r6, pc}
 800e77e:	f853 6b04 	ldr.w	r6, [r3], #4
 800e782:	f845 6f04 	str.w	r6, [r5, #4]!
 800e786:	e7eb      	b.n	800e760 <__copybits+0x18>
 800e788:	f840 3b04 	str.w	r3, [r0], #4
 800e78c:	e7f4      	b.n	800e778 <__copybits+0x30>

0800e78e <__any_on>:
 800e78e:	f100 0214 	add.w	r2, r0, #20
 800e792:	6900      	ldr	r0, [r0, #16]
 800e794:	114b      	asrs	r3, r1, #5
 800e796:	4298      	cmp	r0, r3
 800e798:	b510      	push	{r4, lr}
 800e79a:	db11      	blt.n	800e7c0 <__any_on+0x32>
 800e79c:	dd0a      	ble.n	800e7b4 <__any_on+0x26>
 800e79e:	f011 011f 	ands.w	r1, r1, #31
 800e7a2:	d007      	beq.n	800e7b4 <__any_on+0x26>
 800e7a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e7a8:	fa24 f001 	lsr.w	r0, r4, r1
 800e7ac:	fa00 f101 	lsl.w	r1, r0, r1
 800e7b0:	428c      	cmp	r4, r1
 800e7b2:	d10b      	bne.n	800e7cc <__any_on+0x3e>
 800e7b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d803      	bhi.n	800e7c4 <__any_on+0x36>
 800e7bc:	2000      	movs	r0, #0
 800e7be:	bd10      	pop	{r4, pc}
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	e7f7      	b.n	800e7b4 <__any_on+0x26>
 800e7c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e7c8:	2900      	cmp	r1, #0
 800e7ca:	d0f5      	beq.n	800e7b8 <__any_on+0x2a>
 800e7cc:	2001      	movs	r0, #1
 800e7ce:	e7f6      	b.n	800e7be <__any_on+0x30>

0800e7d0 <sulp>:
 800e7d0:	b570      	push	{r4, r5, r6, lr}
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	460d      	mov	r5, r1
 800e7d6:	ec45 4b10 	vmov	d0, r4, r5
 800e7da:	4616      	mov	r6, r2
 800e7dc:	f7ff feba 	bl	800e554 <__ulp>
 800e7e0:	ec51 0b10 	vmov	r0, r1, d0
 800e7e4:	b17e      	cbz	r6, 800e806 <sulp+0x36>
 800e7e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e7ea:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	dd09      	ble.n	800e806 <sulp+0x36>
 800e7f2:	051b      	lsls	r3, r3, #20
 800e7f4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e7f8:	2400      	movs	r4, #0
 800e7fa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e7fe:	4622      	mov	r2, r4
 800e800:	462b      	mov	r3, r5
 800e802:	f7f1 fef9 	bl	80005f8 <__aeabi_dmul>
 800e806:	ec41 0b10 	vmov	d0, r0, r1
 800e80a:	bd70      	pop	{r4, r5, r6, pc}
 800e80c:	0000      	movs	r0, r0
	...

0800e810 <_strtod_l>:
 800e810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e814:	b09f      	sub	sp, #124	@ 0x7c
 800e816:	460c      	mov	r4, r1
 800e818:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e81a:	2200      	movs	r2, #0
 800e81c:	921a      	str	r2, [sp, #104]	@ 0x68
 800e81e:	9005      	str	r0, [sp, #20]
 800e820:	f04f 0a00 	mov.w	sl, #0
 800e824:	f04f 0b00 	mov.w	fp, #0
 800e828:	460a      	mov	r2, r1
 800e82a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e82c:	7811      	ldrb	r1, [r2, #0]
 800e82e:	292b      	cmp	r1, #43	@ 0x2b
 800e830:	d04a      	beq.n	800e8c8 <_strtod_l+0xb8>
 800e832:	d838      	bhi.n	800e8a6 <_strtod_l+0x96>
 800e834:	290d      	cmp	r1, #13
 800e836:	d832      	bhi.n	800e89e <_strtod_l+0x8e>
 800e838:	2908      	cmp	r1, #8
 800e83a:	d832      	bhi.n	800e8a2 <_strtod_l+0x92>
 800e83c:	2900      	cmp	r1, #0
 800e83e:	d03b      	beq.n	800e8b8 <_strtod_l+0xa8>
 800e840:	2200      	movs	r2, #0
 800e842:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e844:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e846:	782a      	ldrb	r2, [r5, #0]
 800e848:	2a30      	cmp	r2, #48	@ 0x30
 800e84a:	f040 80b3 	bne.w	800e9b4 <_strtod_l+0x1a4>
 800e84e:	786a      	ldrb	r2, [r5, #1]
 800e850:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e854:	2a58      	cmp	r2, #88	@ 0x58
 800e856:	d16e      	bne.n	800e936 <_strtod_l+0x126>
 800e858:	9302      	str	r3, [sp, #8]
 800e85a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e85c:	9301      	str	r3, [sp, #4]
 800e85e:	ab1a      	add	r3, sp, #104	@ 0x68
 800e860:	9300      	str	r3, [sp, #0]
 800e862:	4a8e      	ldr	r2, [pc, #568]	@ (800ea9c <_strtod_l+0x28c>)
 800e864:	9805      	ldr	r0, [sp, #20]
 800e866:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e868:	a919      	add	r1, sp, #100	@ 0x64
 800e86a:	f001 f88f 	bl	800f98c <__gethex>
 800e86e:	f010 060f 	ands.w	r6, r0, #15
 800e872:	4604      	mov	r4, r0
 800e874:	d005      	beq.n	800e882 <_strtod_l+0x72>
 800e876:	2e06      	cmp	r6, #6
 800e878:	d128      	bne.n	800e8cc <_strtod_l+0xbc>
 800e87a:	3501      	adds	r5, #1
 800e87c:	2300      	movs	r3, #0
 800e87e:	9519      	str	r5, [sp, #100]	@ 0x64
 800e880:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e882:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e884:	2b00      	cmp	r3, #0
 800e886:	f040 858e 	bne.w	800f3a6 <_strtod_l+0xb96>
 800e88a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e88c:	b1cb      	cbz	r3, 800e8c2 <_strtod_l+0xb2>
 800e88e:	4652      	mov	r2, sl
 800e890:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e894:	ec43 2b10 	vmov	d0, r2, r3
 800e898:	b01f      	add	sp, #124	@ 0x7c
 800e89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89e:	2920      	cmp	r1, #32
 800e8a0:	d1ce      	bne.n	800e840 <_strtod_l+0x30>
 800e8a2:	3201      	adds	r2, #1
 800e8a4:	e7c1      	b.n	800e82a <_strtod_l+0x1a>
 800e8a6:	292d      	cmp	r1, #45	@ 0x2d
 800e8a8:	d1ca      	bne.n	800e840 <_strtod_l+0x30>
 800e8aa:	2101      	movs	r1, #1
 800e8ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e8ae:	1c51      	adds	r1, r2, #1
 800e8b0:	9119      	str	r1, [sp, #100]	@ 0x64
 800e8b2:	7852      	ldrb	r2, [r2, #1]
 800e8b4:	2a00      	cmp	r2, #0
 800e8b6:	d1c5      	bne.n	800e844 <_strtod_l+0x34>
 800e8b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e8ba:	9419      	str	r4, [sp, #100]	@ 0x64
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f040 8570 	bne.w	800f3a2 <_strtod_l+0xb92>
 800e8c2:	4652      	mov	r2, sl
 800e8c4:	465b      	mov	r3, fp
 800e8c6:	e7e5      	b.n	800e894 <_strtod_l+0x84>
 800e8c8:	2100      	movs	r1, #0
 800e8ca:	e7ef      	b.n	800e8ac <_strtod_l+0x9c>
 800e8cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e8ce:	b13a      	cbz	r2, 800e8e0 <_strtod_l+0xd0>
 800e8d0:	2135      	movs	r1, #53	@ 0x35
 800e8d2:	a81c      	add	r0, sp, #112	@ 0x70
 800e8d4:	f7ff ff38 	bl	800e748 <__copybits>
 800e8d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e8da:	9805      	ldr	r0, [sp, #20]
 800e8dc:	f7ff fb06 	bl	800deec <_Bfree>
 800e8e0:	3e01      	subs	r6, #1
 800e8e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e8e4:	2e04      	cmp	r6, #4
 800e8e6:	d806      	bhi.n	800e8f6 <_strtod_l+0xe6>
 800e8e8:	e8df f006 	tbb	[pc, r6]
 800e8ec:	201d0314 	.word	0x201d0314
 800e8f0:	14          	.byte	0x14
 800e8f1:	00          	.byte	0x00
 800e8f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e8f6:	05e1      	lsls	r1, r4, #23
 800e8f8:	bf48      	it	mi
 800e8fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e8fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e902:	0d1b      	lsrs	r3, r3, #20
 800e904:	051b      	lsls	r3, r3, #20
 800e906:	2b00      	cmp	r3, #0
 800e908:	d1bb      	bne.n	800e882 <_strtod_l+0x72>
 800e90a:	f7fe fbd5 	bl	800d0b8 <__errno>
 800e90e:	2322      	movs	r3, #34	@ 0x22
 800e910:	6003      	str	r3, [r0, #0]
 800e912:	e7b6      	b.n	800e882 <_strtod_l+0x72>
 800e914:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e918:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e91c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e920:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e924:	e7e7      	b.n	800e8f6 <_strtod_l+0xe6>
 800e926:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800eaa4 <_strtod_l+0x294>
 800e92a:	e7e4      	b.n	800e8f6 <_strtod_l+0xe6>
 800e92c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e930:	f04f 3aff 	mov.w	sl, #4294967295
 800e934:	e7df      	b.n	800e8f6 <_strtod_l+0xe6>
 800e936:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e938:	1c5a      	adds	r2, r3, #1
 800e93a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e93c:	785b      	ldrb	r3, [r3, #1]
 800e93e:	2b30      	cmp	r3, #48	@ 0x30
 800e940:	d0f9      	beq.n	800e936 <_strtod_l+0x126>
 800e942:	2b00      	cmp	r3, #0
 800e944:	d09d      	beq.n	800e882 <_strtod_l+0x72>
 800e946:	2301      	movs	r3, #1
 800e948:	9309      	str	r3, [sp, #36]	@ 0x24
 800e94a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e94c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e94e:	2300      	movs	r3, #0
 800e950:	9308      	str	r3, [sp, #32]
 800e952:	930a      	str	r3, [sp, #40]	@ 0x28
 800e954:	461f      	mov	r7, r3
 800e956:	220a      	movs	r2, #10
 800e958:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e95a:	7805      	ldrb	r5, [r0, #0]
 800e95c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e960:	b2d9      	uxtb	r1, r3
 800e962:	2909      	cmp	r1, #9
 800e964:	d928      	bls.n	800e9b8 <_strtod_l+0x1a8>
 800e966:	494e      	ldr	r1, [pc, #312]	@ (800eaa0 <_strtod_l+0x290>)
 800e968:	2201      	movs	r2, #1
 800e96a:	f000 ff59 	bl	800f820 <strncmp>
 800e96e:	2800      	cmp	r0, #0
 800e970:	d032      	beq.n	800e9d8 <_strtod_l+0x1c8>
 800e972:	2000      	movs	r0, #0
 800e974:	462a      	mov	r2, r5
 800e976:	4681      	mov	r9, r0
 800e978:	463d      	mov	r5, r7
 800e97a:	4603      	mov	r3, r0
 800e97c:	2a65      	cmp	r2, #101	@ 0x65
 800e97e:	d001      	beq.n	800e984 <_strtod_l+0x174>
 800e980:	2a45      	cmp	r2, #69	@ 0x45
 800e982:	d114      	bne.n	800e9ae <_strtod_l+0x19e>
 800e984:	b91d      	cbnz	r5, 800e98e <_strtod_l+0x17e>
 800e986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e988:	4302      	orrs	r2, r0
 800e98a:	d095      	beq.n	800e8b8 <_strtod_l+0xa8>
 800e98c:	2500      	movs	r5, #0
 800e98e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e990:	1c62      	adds	r2, r4, #1
 800e992:	9219      	str	r2, [sp, #100]	@ 0x64
 800e994:	7862      	ldrb	r2, [r4, #1]
 800e996:	2a2b      	cmp	r2, #43	@ 0x2b
 800e998:	d077      	beq.n	800ea8a <_strtod_l+0x27a>
 800e99a:	2a2d      	cmp	r2, #45	@ 0x2d
 800e99c:	d07b      	beq.n	800ea96 <_strtod_l+0x286>
 800e99e:	f04f 0c00 	mov.w	ip, #0
 800e9a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e9a6:	2909      	cmp	r1, #9
 800e9a8:	f240 8082 	bls.w	800eab0 <_strtod_l+0x2a0>
 800e9ac:	9419      	str	r4, [sp, #100]	@ 0x64
 800e9ae:	f04f 0800 	mov.w	r8, #0
 800e9b2:	e0a2      	b.n	800eafa <_strtod_l+0x2ea>
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	e7c7      	b.n	800e948 <_strtod_l+0x138>
 800e9b8:	2f08      	cmp	r7, #8
 800e9ba:	bfd5      	itete	le
 800e9bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e9be:	9908      	ldrgt	r1, [sp, #32]
 800e9c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800e9c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e9c8:	f100 0001 	add.w	r0, r0, #1
 800e9cc:	bfd4      	ite	le
 800e9ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e9d0:	9308      	strgt	r3, [sp, #32]
 800e9d2:	3701      	adds	r7, #1
 800e9d4:	9019      	str	r0, [sp, #100]	@ 0x64
 800e9d6:	e7bf      	b.n	800e958 <_strtod_l+0x148>
 800e9d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e9da:	1c5a      	adds	r2, r3, #1
 800e9dc:	9219      	str	r2, [sp, #100]	@ 0x64
 800e9de:	785a      	ldrb	r2, [r3, #1]
 800e9e0:	b37f      	cbz	r7, 800ea42 <_strtod_l+0x232>
 800e9e2:	4681      	mov	r9, r0
 800e9e4:	463d      	mov	r5, r7
 800e9e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e9ea:	2b09      	cmp	r3, #9
 800e9ec:	d912      	bls.n	800ea14 <_strtod_l+0x204>
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	e7c4      	b.n	800e97c <_strtod_l+0x16c>
 800e9f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e9f4:	1c5a      	adds	r2, r3, #1
 800e9f6:	9219      	str	r2, [sp, #100]	@ 0x64
 800e9f8:	785a      	ldrb	r2, [r3, #1]
 800e9fa:	3001      	adds	r0, #1
 800e9fc:	2a30      	cmp	r2, #48	@ 0x30
 800e9fe:	d0f8      	beq.n	800e9f2 <_strtod_l+0x1e2>
 800ea00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ea04:	2b08      	cmp	r3, #8
 800ea06:	f200 84d3 	bhi.w	800f3b0 <_strtod_l+0xba0>
 800ea0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ea0e:	4681      	mov	r9, r0
 800ea10:	2000      	movs	r0, #0
 800ea12:	4605      	mov	r5, r0
 800ea14:	3a30      	subs	r2, #48	@ 0x30
 800ea16:	f100 0301 	add.w	r3, r0, #1
 800ea1a:	d02a      	beq.n	800ea72 <_strtod_l+0x262>
 800ea1c:	4499      	add	r9, r3
 800ea1e:	eb00 0c05 	add.w	ip, r0, r5
 800ea22:	462b      	mov	r3, r5
 800ea24:	210a      	movs	r1, #10
 800ea26:	4563      	cmp	r3, ip
 800ea28:	d10d      	bne.n	800ea46 <_strtod_l+0x236>
 800ea2a:	1c69      	adds	r1, r5, #1
 800ea2c:	4401      	add	r1, r0
 800ea2e:	4428      	add	r0, r5
 800ea30:	2808      	cmp	r0, #8
 800ea32:	dc16      	bgt.n	800ea62 <_strtod_l+0x252>
 800ea34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ea36:	230a      	movs	r3, #10
 800ea38:	fb03 2300 	mla	r3, r3, r0, r2
 800ea3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea3e:	2300      	movs	r3, #0
 800ea40:	e018      	b.n	800ea74 <_strtod_l+0x264>
 800ea42:	4638      	mov	r0, r7
 800ea44:	e7da      	b.n	800e9fc <_strtod_l+0x1ec>
 800ea46:	2b08      	cmp	r3, #8
 800ea48:	f103 0301 	add.w	r3, r3, #1
 800ea4c:	dc03      	bgt.n	800ea56 <_strtod_l+0x246>
 800ea4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ea50:	434e      	muls	r6, r1
 800ea52:	960a      	str	r6, [sp, #40]	@ 0x28
 800ea54:	e7e7      	b.n	800ea26 <_strtod_l+0x216>
 800ea56:	2b10      	cmp	r3, #16
 800ea58:	bfde      	ittt	le
 800ea5a:	9e08      	ldrle	r6, [sp, #32]
 800ea5c:	434e      	mulle	r6, r1
 800ea5e:	9608      	strle	r6, [sp, #32]
 800ea60:	e7e1      	b.n	800ea26 <_strtod_l+0x216>
 800ea62:	280f      	cmp	r0, #15
 800ea64:	dceb      	bgt.n	800ea3e <_strtod_l+0x22e>
 800ea66:	9808      	ldr	r0, [sp, #32]
 800ea68:	230a      	movs	r3, #10
 800ea6a:	fb03 2300 	mla	r3, r3, r0, r2
 800ea6e:	9308      	str	r3, [sp, #32]
 800ea70:	e7e5      	b.n	800ea3e <_strtod_l+0x22e>
 800ea72:	4629      	mov	r1, r5
 800ea74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ea76:	1c50      	adds	r0, r2, #1
 800ea78:	9019      	str	r0, [sp, #100]	@ 0x64
 800ea7a:	7852      	ldrb	r2, [r2, #1]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	460d      	mov	r5, r1
 800ea80:	e7b1      	b.n	800e9e6 <_strtod_l+0x1d6>
 800ea82:	f04f 0900 	mov.w	r9, #0
 800ea86:	2301      	movs	r3, #1
 800ea88:	e77d      	b.n	800e986 <_strtod_l+0x176>
 800ea8a:	f04f 0c00 	mov.w	ip, #0
 800ea8e:	1ca2      	adds	r2, r4, #2
 800ea90:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea92:	78a2      	ldrb	r2, [r4, #2]
 800ea94:	e785      	b.n	800e9a2 <_strtod_l+0x192>
 800ea96:	f04f 0c01 	mov.w	ip, #1
 800ea9a:	e7f8      	b.n	800ea8e <_strtod_l+0x27e>
 800ea9c:	08011420 	.word	0x08011420
 800eaa0:	08011408 	.word	0x08011408
 800eaa4:	7ff00000 	.word	0x7ff00000
 800eaa8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eaaa:	1c51      	adds	r1, r2, #1
 800eaac:	9119      	str	r1, [sp, #100]	@ 0x64
 800eaae:	7852      	ldrb	r2, [r2, #1]
 800eab0:	2a30      	cmp	r2, #48	@ 0x30
 800eab2:	d0f9      	beq.n	800eaa8 <_strtod_l+0x298>
 800eab4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800eab8:	2908      	cmp	r1, #8
 800eaba:	f63f af78 	bhi.w	800e9ae <_strtod_l+0x19e>
 800eabe:	3a30      	subs	r2, #48	@ 0x30
 800eac0:	920e      	str	r2, [sp, #56]	@ 0x38
 800eac2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eac4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800eac6:	f04f 080a 	mov.w	r8, #10
 800eaca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eacc:	1c56      	adds	r6, r2, #1
 800eace:	9619      	str	r6, [sp, #100]	@ 0x64
 800ead0:	7852      	ldrb	r2, [r2, #1]
 800ead2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ead6:	f1be 0f09 	cmp.w	lr, #9
 800eada:	d939      	bls.n	800eb50 <_strtod_l+0x340>
 800eadc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eade:	1a76      	subs	r6, r6, r1
 800eae0:	2e08      	cmp	r6, #8
 800eae2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800eae6:	dc03      	bgt.n	800eaf0 <_strtod_l+0x2e0>
 800eae8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eaea:	4588      	cmp	r8, r1
 800eaec:	bfa8      	it	ge
 800eaee:	4688      	movge	r8, r1
 800eaf0:	f1bc 0f00 	cmp.w	ip, #0
 800eaf4:	d001      	beq.n	800eafa <_strtod_l+0x2ea>
 800eaf6:	f1c8 0800 	rsb	r8, r8, #0
 800eafa:	2d00      	cmp	r5, #0
 800eafc:	d14e      	bne.n	800eb9c <_strtod_l+0x38c>
 800eafe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eb00:	4308      	orrs	r0, r1
 800eb02:	f47f aebe 	bne.w	800e882 <_strtod_l+0x72>
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	f47f aed6 	bne.w	800e8b8 <_strtod_l+0xa8>
 800eb0c:	2a69      	cmp	r2, #105	@ 0x69
 800eb0e:	d028      	beq.n	800eb62 <_strtod_l+0x352>
 800eb10:	dc25      	bgt.n	800eb5e <_strtod_l+0x34e>
 800eb12:	2a49      	cmp	r2, #73	@ 0x49
 800eb14:	d025      	beq.n	800eb62 <_strtod_l+0x352>
 800eb16:	2a4e      	cmp	r2, #78	@ 0x4e
 800eb18:	f47f aece 	bne.w	800e8b8 <_strtod_l+0xa8>
 800eb1c:	499b      	ldr	r1, [pc, #620]	@ (800ed8c <_strtod_l+0x57c>)
 800eb1e:	a819      	add	r0, sp, #100	@ 0x64
 800eb20:	f001 f956 	bl	800fdd0 <__match>
 800eb24:	2800      	cmp	r0, #0
 800eb26:	f43f aec7 	beq.w	800e8b8 <_strtod_l+0xa8>
 800eb2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	2b28      	cmp	r3, #40	@ 0x28
 800eb30:	d12e      	bne.n	800eb90 <_strtod_l+0x380>
 800eb32:	4997      	ldr	r1, [pc, #604]	@ (800ed90 <_strtod_l+0x580>)
 800eb34:	aa1c      	add	r2, sp, #112	@ 0x70
 800eb36:	a819      	add	r0, sp, #100	@ 0x64
 800eb38:	f001 f95e 	bl	800fdf8 <__hexnan>
 800eb3c:	2805      	cmp	r0, #5
 800eb3e:	d127      	bne.n	800eb90 <_strtod_l+0x380>
 800eb40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eb42:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800eb46:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800eb4a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800eb4e:	e698      	b.n	800e882 <_strtod_l+0x72>
 800eb50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eb52:	fb08 2101 	mla	r1, r8, r1, r2
 800eb56:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800eb5a:	920e      	str	r2, [sp, #56]	@ 0x38
 800eb5c:	e7b5      	b.n	800eaca <_strtod_l+0x2ba>
 800eb5e:	2a6e      	cmp	r2, #110	@ 0x6e
 800eb60:	e7da      	b.n	800eb18 <_strtod_l+0x308>
 800eb62:	498c      	ldr	r1, [pc, #560]	@ (800ed94 <_strtod_l+0x584>)
 800eb64:	a819      	add	r0, sp, #100	@ 0x64
 800eb66:	f001 f933 	bl	800fdd0 <__match>
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	f43f aea4 	beq.w	800e8b8 <_strtod_l+0xa8>
 800eb70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb72:	4989      	ldr	r1, [pc, #548]	@ (800ed98 <_strtod_l+0x588>)
 800eb74:	3b01      	subs	r3, #1
 800eb76:	a819      	add	r0, sp, #100	@ 0x64
 800eb78:	9319      	str	r3, [sp, #100]	@ 0x64
 800eb7a:	f001 f929 	bl	800fdd0 <__match>
 800eb7e:	b910      	cbnz	r0, 800eb86 <_strtod_l+0x376>
 800eb80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb82:	3301      	adds	r3, #1
 800eb84:	9319      	str	r3, [sp, #100]	@ 0x64
 800eb86:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800eda8 <_strtod_l+0x598>
 800eb8a:	f04f 0a00 	mov.w	sl, #0
 800eb8e:	e678      	b.n	800e882 <_strtod_l+0x72>
 800eb90:	4882      	ldr	r0, [pc, #520]	@ (800ed9c <_strtod_l+0x58c>)
 800eb92:	f000 fe59 	bl	800f848 <nan>
 800eb96:	ec5b ab10 	vmov	sl, fp, d0
 800eb9a:	e672      	b.n	800e882 <_strtod_l+0x72>
 800eb9c:	eba8 0309 	sub.w	r3, r8, r9
 800eba0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800eba2:	9309      	str	r3, [sp, #36]	@ 0x24
 800eba4:	2f00      	cmp	r7, #0
 800eba6:	bf08      	it	eq
 800eba8:	462f      	moveq	r7, r5
 800ebaa:	2d10      	cmp	r5, #16
 800ebac:	462c      	mov	r4, r5
 800ebae:	bfa8      	it	ge
 800ebb0:	2410      	movge	r4, #16
 800ebb2:	f7f1 fca7 	bl	8000504 <__aeabi_ui2d>
 800ebb6:	2d09      	cmp	r5, #9
 800ebb8:	4682      	mov	sl, r0
 800ebba:	468b      	mov	fp, r1
 800ebbc:	dc13      	bgt.n	800ebe6 <_strtod_l+0x3d6>
 800ebbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	f43f ae5e 	beq.w	800e882 <_strtod_l+0x72>
 800ebc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebc8:	dd78      	ble.n	800ecbc <_strtod_l+0x4ac>
 800ebca:	2b16      	cmp	r3, #22
 800ebcc:	dc5f      	bgt.n	800ec8e <_strtod_l+0x47e>
 800ebce:	4974      	ldr	r1, [pc, #464]	@ (800eda0 <_strtod_l+0x590>)
 800ebd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ebd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebd8:	4652      	mov	r2, sl
 800ebda:	465b      	mov	r3, fp
 800ebdc:	f7f1 fd0c 	bl	80005f8 <__aeabi_dmul>
 800ebe0:	4682      	mov	sl, r0
 800ebe2:	468b      	mov	fp, r1
 800ebe4:	e64d      	b.n	800e882 <_strtod_l+0x72>
 800ebe6:	4b6e      	ldr	r3, [pc, #440]	@ (800eda0 <_strtod_l+0x590>)
 800ebe8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ebec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ebf0:	f7f1 fd02 	bl	80005f8 <__aeabi_dmul>
 800ebf4:	4682      	mov	sl, r0
 800ebf6:	9808      	ldr	r0, [sp, #32]
 800ebf8:	468b      	mov	fp, r1
 800ebfa:	f7f1 fc83 	bl	8000504 <__aeabi_ui2d>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	460b      	mov	r3, r1
 800ec02:	4650      	mov	r0, sl
 800ec04:	4659      	mov	r1, fp
 800ec06:	f7f1 fb41 	bl	800028c <__adddf3>
 800ec0a:	2d0f      	cmp	r5, #15
 800ec0c:	4682      	mov	sl, r0
 800ec0e:	468b      	mov	fp, r1
 800ec10:	ddd5      	ble.n	800ebbe <_strtod_l+0x3ae>
 800ec12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec14:	1b2c      	subs	r4, r5, r4
 800ec16:	441c      	add	r4, r3
 800ec18:	2c00      	cmp	r4, #0
 800ec1a:	f340 8096 	ble.w	800ed4a <_strtod_l+0x53a>
 800ec1e:	f014 030f 	ands.w	r3, r4, #15
 800ec22:	d00a      	beq.n	800ec3a <_strtod_l+0x42a>
 800ec24:	495e      	ldr	r1, [pc, #376]	@ (800eda0 <_strtod_l+0x590>)
 800ec26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ec2a:	4652      	mov	r2, sl
 800ec2c:	465b      	mov	r3, fp
 800ec2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec32:	f7f1 fce1 	bl	80005f8 <__aeabi_dmul>
 800ec36:	4682      	mov	sl, r0
 800ec38:	468b      	mov	fp, r1
 800ec3a:	f034 040f 	bics.w	r4, r4, #15
 800ec3e:	d073      	beq.n	800ed28 <_strtod_l+0x518>
 800ec40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ec44:	dd48      	ble.n	800ecd8 <_strtod_l+0x4c8>
 800ec46:	2400      	movs	r4, #0
 800ec48:	46a0      	mov	r8, r4
 800ec4a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ec4c:	46a1      	mov	r9, r4
 800ec4e:	9a05      	ldr	r2, [sp, #20]
 800ec50:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800eda8 <_strtod_l+0x598>
 800ec54:	2322      	movs	r3, #34	@ 0x22
 800ec56:	6013      	str	r3, [r2, #0]
 800ec58:	f04f 0a00 	mov.w	sl, #0
 800ec5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	f43f ae0f 	beq.w	800e882 <_strtod_l+0x72>
 800ec64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ec66:	9805      	ldr	r0, [sp, #20]
 800ec68:	f7ff f940 	bl	800deec <_Bfree>
 800ec6c:	9805      	ldr	r0, [sp, #20]
 800ec6e:	4649      	mov	r1, r9
 800ec70:	f7ff f93c 	bl	800deec <_Bfree>
 800ec74:	9805      	ldr	r0, [sp, #20]
 800ec76:	4641      	mov	r1, r8
 800ec78:	f7ff f938 	bl	800deec <_Bfree>
 800ec7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec7e:	9805      	ldr	r0, [sp, #20]
 800ec80:	f7ff f934 	bl	800deec <_Bfree>
 800ec84:	9805      	ldr	r0, [sp, #20]
 800ec86:	4621      	mov	r1, r4
 800ec88:	f7ff f930 	bl	800deec <_Bfree>
 800ec8c:	e5f9      	b.n	800e882 <_strtod_l+0x72>
 800ec8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ec94:	4293      	cmp	r3, r2
 800ec96:	dbbc      	blt.n	800ec12 <_strtod_l+0x402>
 800ec98:	4c41      	ldr	r4, [pc, #260]	@ (800eda0 <_strtod_l+0x590>)
 800ec9a:	f1c5 050f 	rsb	r5, r5, #15
 800ec9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800eca2:	4652      	mov	r2, sl
 800eca4:	465b      	mov	r3, fp
 800eca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecaa:	f7f1 fca5 	bl	80005f8 <__aeabi_dmul>
 800ecae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecb0:	1b5d      	subs	r5, r3, r5
 800ecb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ecb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ecba:	e78f      	b.n	800ebdc <_strtod_l+0x3cc>
 800ecbc:	3316      	adds	r3, #22
 800ecbe:	dba8      	blt.n	800ec12 <_strtod_l+0x402>
 800ecc0:	4b37      	ldr	r3, [pc, #220]	@ (800eda0 <_strtod_l+0x590>)
 800ecc2:	eba9 0808 	sub.w	r8, r9, r8
 800ecc6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ecca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ecce:	4650      	mov	r0, sl
 800ecd0:	4659      	mov	r1, fp
 800ecd2:	f7f1 fdbb 	bl	800084c <__aeabi_ddiv>
 800ecd6:	e783      	b.n	800ebe0 <_strtod_l+0x3d0>
 800ecd8:	4b32      	ldr	r3, [pc, #200]	@ (800eda4 <_strtod_l+0x594>)
 800ecda:	9308      	str	r3, [sp, #32]
 800ecdc:	2300      	movs	r3, #0
 800ecde:	1124      	asrs	r4, r4, #4
 800ece0:	4650      	mov	r0, sl
 800ece2:	4659      	mov	r1, fp
 800ece4:	461e      	mov	r6, r3
 800ece6:	2c01      	cmp	r4, #1
 800ece8:	dc21      	bgt.n	800ed2e <_strtod_l+0x51e>
 800ecea:	b10b      	cbz	r3, 800ecf0 <_strtod_l+0x4e0>
 800ecec:	4682      	mov	sl, r0
 800ecee:	468b      	mov	fp, r1
 800ecf0:	492c      	ldr	r1, [pc, #176]	@ (800eda4 <_strtod_l+0x594>)
 800ecf2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ecf6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ecfa:	4652      	mov	r2, sl
 800ecfc:	465b      	mov	r3, fp
 800ecfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed02:	f7f1 fc79 	bl	80005f8 <__aeabi_dmul>
 800ed06:	4b28      	ldr	r3, [pc, #160]	@ (800eda8 <_strtod_l+0x598>)
 800ed08:	460a      	mov	r2, r1
 800ed0a:	400b      	ands	r3, r1
 800ed0c:	4927      	ldr	r1, [pc, #156]	@ (800edac <_strtod_l+0x59c>)
 800ed0e:	428b      	cmp	r3, r1
 800ed10:	4682      	mov	sl, r0
 800ed12:	d898      	bhi.n	800ec46 <_strtod_l+0x436>
 800ed14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ed18:	428b      	cmp	r3, r1
 800ed1a:	bf86      	itte	hi
 800ed1c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800edb0 <_strtod_l+0x5a0>
 800ed20:	f04f 3aff 	movhi.w	sl, #4294967295
 800ed24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ed28:	2300      	movs	r3, #0
 800ed2a:	9308      	str	r3, [sp, #32]
 800ed2c:	e07a      	b.n	800ee24 <_strtod_l+0x614>
 800ed2e:	07e2      	lsls	r2, r4, #31
 800ed30:	d505      	bpl.n	800ed3e <_strtod_l+0x52e>
 800ed32:	9b08      	ldr	r3, [sp, #32]
 800ed34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed38:	f7f1 fc5e 	bl	80005f8 <__aeabi_dmul>
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	9a08      	ldr	r2, [sp, #32]
 800ed40:	3208      	adds	r2, #8
 800ed42:	3601      	adds	r6, #1
 800ed44:	1064      	asrs	r4, r4, #1
 800ed46:	9208      	str	r2, [sp, #32]
 800ed48:	e7cd      	b.n	800ece6 <_strtod_l+0x4d6>
 800ed4a:	d0ed      	beq.n	800ed28 <_strtod_l+0x518>
 800ed4c:	4264      	negs	r4, r4
 800ed4e:	f014 020f 	ands.w	r2, r4, #15
 800ed52:	d00a      	beq.n	800ed6a <_strtod_l+0x55a>
 800ed54:	4b12      	ldr	r3, [pc, #72]	@ (800eda0 <_strtod_l+0x590>)
 800ed56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed5a:	4650      	mov	r0, sl
 800ed5c:	4659      	mov	r1, fp
 800ed5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed62:	f7f1 fd73 	bl	800084c <__aeabi_ddiv>
 800ed66:	4682      	mov	sl, r0
 800ed68:	468b      	mov	fp, r1
 800ed6a:	1124      	asrs	r4, r4, #4
 800ed6c:	d0dc      	beq.n	800ed28 <_strtod_l+0x518>
 800ed6e:	2c1f      	cmp	r4, #31
 800ed70:	dd20      	ble.n	800edb4 <_strtod_l+0x5a4>
 800ed72:	2400      	movs	r4, #0
 800ed74:	46a0      	mov	r8, r4
 800ed76:	940a      	str	r4, [sp, #40]	@ 0x28
 800ed78:	46a1      	mov	r9, r4
 800ed7a:	9a05      	ldr	r2, [sp, #20]
 800ed7c:	2322      	movs	r3, #34	@ 0x22
 800ed7e:	f04f 0a00 	mov.w	sl, #0
 800ed82:	f04f 0b00 	mov.w	fp, #0
 800ed86:	6013      	str	r3, [r2, #0]
 800ed88:	e768      	b.n	800ec5c <_strtod_l+0x44c>
 800ed8a:	bf00      	nop
 800ed8c:	080111fa 	.word	0x080111fa
 800ed90:	0801140c 	.word	0x0801140c
 800ed94:	080111f2 	.word	0x080111f2
 800ed98:	08011229 	.word	0x08011229
 800ed9c:	080114b4 	.word	0x080114b4
 800eda0:	08011340 	.word	0x08011340
 800eda4:	08011318 	.word	0x08011318
 800eda8:	7ff00000 	.word	0x7ff00000
 800edac:	7ca00000 	.word	0x7ca00000
 800edb0:	7fefffff 	.word	0x7fefffff
 800edb4:	f014 0310 	ands.w	r3, r4, #16
 800edb8:	bf18      	it	ne
 800edba:	236a      	movne	r3, #106	@ 0x6a
 800edbc:	4ea9      	ldr	r6, [pc, #676]	@ (800f064 <_strtod_l+0x854>)
 800edbe:	9308      	str	r3, [sp, #32]
 800edc0:	4650      	mov	r0, sl
 800edc2:	4659      	mov	r1, fp
 800edc4:	2300      	movs	r3, #0
 800edc6:	07e2      	lsls	r2, r4, #31
 800edc8:	d504      	bpl.n	800edd4 <_strtod_l+0x5c4>
 800edca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800edce:	f7f1 fc13 	bl	80005f8 <__aeabi_dmul>
 800edd2:	2301      	movs	r3, #1
 800edd4:	1064      	asrs	r4, r4, #1
 800edd6:	f106 0608 	add.w	r6, r6, #8
 800edda:	d1f4      	bne.n	800edc6 <_strtod_l+0x5b6>
 800eddc:	b10b      	cbz	r3, 800ede2 <_strtod_l+0x5d2>
 800edde:	4682      	mov	sl, r0
 800ede0:	468b      	mov	fp, r1
 800ede2:	9b08      	ldr	r3, [sp, #32]
 800ede4:	b1b3      	cbz	r3, 800ee14 <_strtod_l+0x604>
 800ede6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800edea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800edee:	2b00      	cmp	r3, #0
 800edf0:	4659      	mov	r1, fp
 800edf2:	dd0f      	ble.n	800ee14 <_strtod_l+0x604>
 800edf4:	2b1f      	cmp	r3, #31
 800edf6:	dd55      	ble.n	800eea4 <_strtod_l+0x694>
 800edf8:	2b34      	cmp	r3, #52	@ 0x34
 800edfa:	bfde      	ittt	le
 800edfc:	f04f 33ff 	movle.w	r3, #4294967295
 800ee00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ee04:	4093      	lslle	r3, r2
 800ee06:	f04f 0a00 	mov.w	sl, #0
 800ee0a:	bfcc      	ite	gt
 800ee0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ee10:	ea03 0b01 	andle.w	fp, r3, r1
 800ee14:	2200      	movs	r2, #0
 800ee16:	2300      	movs	r3, #0
 800ee18:	4650      	mov	r0, sl
 800ee1a:	4659      	mov	r1, fp
 800ee1c:	f7f1 fe54 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee20:	2800      	cmp	r0, #0
 800ee22:	d1a6      	bne.n	800ed72 <_strtod_l+0x562>
 800ee24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee26:	9300      	str	r3, [sp, #0]
 800ee28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ee2a:	9805      	ldr	r0, [sp, #20]
 800ee2c:	462b      	mov	r3, r5
 800ee2e:	463a      	mov	r2, r7
 800ee30:	f7ff f8c4 	bl	800dfbc <__s2b>
 800ee34:	900a      	str	r0, [sp, #40]	@ 0x28
 800ee36:	2800      	cmp	r0, #0
 800ee38:	f43f af05 	beq.w	800ec46 <_strtod_l+0x436>
 800ee3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee3e:	2a00      	cmp	r2, #0
 800ee40:	eba9 0308 	sub.w	r3, r9, r8
 800ee44:	bfa8      	it	ge
 800ee46:	2300      	movge	r3, #0
 800ee48:	9312      	str	r3, [sp, #72]	@ 0x48
 800ee4a:	2400      	movs	r4, #0
 800ee4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ee50:	9316      	str	r3, [sp, #88]	@ 0x58
 800ee52:	46a0      	mov	r8, r4
 800ee54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee56:	9805      	ldr	r0, [sp, #20]
 800ee58:	6859      	ldr	r1, [r3, #4]
 800ee5a:	f7ff f807 	bl	800de6c <_Balloc>
 800ee5e:	4681      	mov	r9, r0
 800ee60:	2800      	cmp	r0, #0
 800ee62:	f43f aef4 	beq.w	800ec4e <_strtod_l+0x43e>
 800ee66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee68:	691a      	ldr	r2, [r3, #16]
 800ee6a:	3202      	adds	r2, #2
 800ee6c:	f103 010c 	add.w	r1, r3, #12
 800ee70:	0092      	lsls	r2, r2, #2
 800ee72:	300c      	adds	r0, #12
 800ee74:	f7fe f94d 	bl	800d112 <memcpy>
 800ee78:	ec4b ab10 	vmov	d0, sl, fp
 800ee7c:	9805      	ldr	r0, [sp, #20]
 800ee7e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ee80:	a91b      	add	r1, sp, #108	@ 0x6c
 800ee82:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ee86:	f7ff fbd5 	bl	800e634 <__d2b>
 800ee8a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	f43f aede 	beq.w	800ec4e <_strtod_l+0x43e>
 800ee92:	9805      	ldr	r0, [sp, #20]
 800ee94:	2101      	movs	r1, #1
 800ee96:	f7ff f927 	bl	800e0e8 <__i2b>
 800ee9a:	4680      	mov	r8, r0
 800ee9c:	b948      	cbnz	r0, 800eeb2 <_strtod_l+0x6a2>
 800ee9e:	f04f 0800 	mov.w	r8, #0
 800eea2:	e6d4      	b.n	800ec4e <_strtod_l+0x43e>
 800eea4:	f04f 32ff 	mov.w	r2, #4294967295
 800eea8:	fa02 f303 	lsl.w	r3, r2, r3
 800eeac:	ea03 0a0a 	and.w	sl, r3, sl
 800eeb0:	e7b0      	b.n	800ee14 <_strtod_l+0x604>
 800eeb2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800eeb4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800eeb6:	2d00      	cmp	r5, #0
 800eeb8:	bfab      	itete	ge
 800eeba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800eebc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800eebe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800eec0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800eec2:	bfac      	ite	ge
 800eec4:	18ef      	addge	r7, r5, r3
 800eec6:	1b5e      	sublt	r6, r3, r5
 800eec8:	9b08      	ldr	r3, [sp, #32]
 800eeca:	1aed      	subs	r5, r5, r3
 800eecc:	4415      	add	r5, r2
 800eece:	4b66      	ldr	r3, [pc, #408]	@ (800f068 <_strtod_l+0x858>)
 800eed0:	3d01      	subs	r5, #1
 800eed2:	429d      	cmp	r5, r3
 800eed4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800eed8:	da50      	bge.n	800ef7c <_strtod_l+0x76c>
 800eeda:	1b5b      	subs	r3, r3, r5
 800eedc:	2b1f      	cmp	r3, #31
 800eede:	eba2 0203 	sub.w	r2, r2, r3
 800eee2:	f04f 0101 	mov.w	r1, #1
 800eee6:	dc3d      	bgt.n	800ef64 <_strtod_l+0x754>
 800eee8:	fa01 f303 	lsl.w	r3, r1, r3
 800eeec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eeee:	2300      	movs	r3, #0
 800eef0:	9310      	str	r3, [sp, #64]	@ 0x40
 800eef2:	18bd      	adds	r5, r7, r2
 800eef4:	9b08      	ldr	r3, [sp, #32]
 800eef6:	42af      	cmp	r7, r5
 800eef8:	4416      	add	r6, r2
 800eefa:	441e      	add	r6, r3
 800eefc:	463b      	mov	r3, r7
 800eefe:	bfa8      	it	ge
 800ef00:	462b      	movge	r3, r5
 800ef02:	42b3      	cmp	r3, r6
 800ef04:	bfa8      	it	ge
 800ef06:	4633      	movge	r3, r6
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	bfc2      	ittt	gt
 800ef0c:	1aed      	subgt	r5, r5, r3
 800ef0e:	1af6      	subgt	r6, r6, r3
 800ef10:	1aff      	subgt	r7, r7, r3
 800ef12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	dd16      	ble.n	800ef46 <_strtod_l+0x736>
 800ef18:	4641      	mov	r1, r8
 800ef1a:	9805      	ldr	r0, [sp, #20]
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	f7ff f9a3 	bl	800e268 <__pow5mult>
 800ef22:	4680      	mov	r8, r0
 800ef24:	2800      	cmp	r0, #0
 800ef26:	d0ba      	beq.n	800ee9e <_strtod_l+0x68e>
 800ef28:	4601      	mov	r1, r0
 800ef2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ef2c:	9805      	ldr	r0, [sp, #20]
 800ef2e:	f7ff f8f1 	bl	800e114 <__multiply>
 800ef32:	900e      	str	r0, [sp, #56]	@ 0x38
 800ef34:	2800      	cmp	r0, #0
 800ef36:	f43f ae8a 	beq.w	800ec4e <_strtod_l+0x43e>
 800ef3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef3c:	9805      	ldr	r0, [sp, #20]
 800ef3e:	f7fe ffd5 	bl	800deec <_Bfree>
 800ef42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef44:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef46:	2d00      	cmp	r5, #0
 800ef48:	dc1d      	bgt.n	800ef86 <_strtod_l+0x776>
 800ef4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	dd23      	ble.n	800ef98 <_strtod_l+0x788>
 800ef50:	4649      	mov	r1, r9
 800ef52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ef54:	9805      	ldr	r0, [sp, #20]
 800ef56:	f7ff f987 	bl	800e268 <__pow5mult>
 800ef5a:	4681      	mov	r9, r0
 800ef5c:	b9e0      	cbnz	r0, 800ef98 <_strtod_l+0x788>
 800ef5e:	f04f 0900 	mov.w	r9, #0
 800ef62:	e674      	b.n	800ec4e <_strtod_l+0x43e>
 800ef64:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ef68:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ef6c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ef70:	35e2      	adds	r5, #226	@ 0xe2
 800ef72:	fa01 f305 	lsl.w	r3, r1, r5
 800ef76:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef78:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ef7a:	e7ba      	b.n	800eef2 <_strtod_l+0x6e2>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef80:	2301      	movs	r3, #1
 800ef82:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ef84:	e7b5      	b.n	800eef2 <_strtod_l+0x6e2>
 800ef86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef88:	9805      	ldr	r0, [sp, #20]
 800ef8a:	462a      	mov	r2, r5
 800ef8c:	f7ff f9c6 	bl	800e31c <__lshift>
 800ef90:	901a      	str	r0, [sp, #104]	@ 0x68
 800ef92:	2800      	cmp	r0, #0
 800ef94:	d1d9      	bne.n	800ef4a <_strtod_l+0x73a>
 800ef96:	e65a      	b.n	800ec4e <_strtod_l+0x43e>
 800ef98:	2e00      	cmp	r6, #0
 800ef9a:	dd07      	ble.n	800efac <_strtod_l+0x79c>
 800ef9c:	4649      	mov	r1, r9
 800ef9e:	9805      	ldr	r0, [sp, #20]
 800efa0:	4632      	mov	r2, r6
 800efa2:	f7ff f9bb 	bl	800e31c <__lshift>
 800efa6:	4681      	mov	r9, r0
 800efa8:	2800      	cmp	r0, #0
 800efaa:	d0d8      	beq.n	800ef5e <_strtod_l+0x74e>
 800efac:	2f00      	cmp	r7, #0
 800efae:	dd08      	ble.n	800efc2 <_strtod_l+0x7b2>
 800efb0:	4641      	mov	r1, r8
 800efb2:	9805      	ldr	r0, [sp, #20]
 800efb4:	463a      	mov	r2, r7
 800efb6:	f7ff f9b1 	bl	800e31c <__lshift>
 800efba:	4680      	mov	r8, r0
 800efbc:	2800      	cmp	r0, #0
 800efbe:	f43f ae46 	beq.w	800ec4e <_strtod_l+0x43e>
 800efc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800efc4:	9805      	ldr	r0, [sp, #20]
 800efc6:	464a      	mov	r2, r9
 800efc8:	f7ff fa30 	bl	800e42c <__mdiff>
 800efcc:	4604      	mov	r4, r0
 800efce:	2800      	cmp	r0, #0
 800efd0:	f43f ae3d 	beq.w	800ec4e <_strtod_l+0x43e>
 800efd4:	68c3      	ldr	r3, [r0, #12]
 800efd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800efd8:	2300      	movs	r3, #0
 800efda:	60c3      	str	r3, [r0, #12]
 800efdc:	4641      	mov	r1, r8
 800efde:	f7ff fa09 	bl	800e3f4 <__mcmp>
 800efe2:	2800      	cmp	r0, #0
 800efe4:	da46      	bge.n	800f074 <_strtod_l+0x864>
 800efe6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efe8:	ea53 030a 	orrs.w	r3, r3, sl
 800efec:	d16c      	bne.n	800f0c8 <_strtod_l+0x8b8>
 800efee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d168      	bne.n	800f0c8 <_strtod_l+0x8b8>
 800eff6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800effa:	0d1b      	lsrs	r3, r3, #20
 800effc:	051b      	lsls	r3, r3, #20
 800effe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f002:	d961      	bls.n	800f0c8 <_strtod_l+0x8b8>
 800f004:	6963      	ldr	r3, [r4, #20]
 800f006:	b913      	cbnz	r3, 800f00e <_strtod_l+0x7fe>
 800f008:	6923      	ldr	r3, [r4, #16]
 800f00a:	2b01      	cmp	r3, #1
 800f00c:	dd5c      	ble.n	800f0c8 <_strtod_l+0x8b8>
 800f00e:	4621      	mov	r1, r4
 800f010:	2201      	movs	r2, #1
 800f012:	9805      	ldr	r0, [sp, #20]
 800f014:	f7ff f982 	bl	800e31c <__lshift>
 800f018:	4641      	mov	r1, r8
 800f01a:	4604      	mov	r4, r0
 800f01c:	f7ff f9ea 	bl	800e3f4 <__mcmp>
 800f020:	2800      	cmp	r0, #0
 800f022:	dd51      	ble.n	800f0c8 <_strtod_l+0x8b8>
 800f024:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f028:	9a08      	ldr	r2, [sp, #32]
 800f02a:	0d1b      	lsrs	r3, r3, #20
 800f02c:	051b      	lsls	r3, r3, #20
 800f02e:	2a00      	cmp	r2, #0
 800f030:	d06b      	beq.n	800f10a <_strtod_l+0x8fa>
 800f032:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f036:	d868      	bhi.n	800f10a <_strtod_l+0x8fa>
 800f038:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f03c:	f67f ae9d 	bls.w	800ed7a <_strtod_l+0x56a>
 800f040:	4b0a      	ldr	r3, [pc, #40]	@ (800f06c <_strtod_l+0x85c>)
 800f042:	4650      	mov	r0, sl
 800f044:	4659      	mov	r1, fp
 800f046:	2200      	movs	r2, #0
 800f048:	f7f1 fad6 	bl	80005f8 <__aeabi_dmul>
 800f04c:	4b08      	ldr	r3, [pc, #32]	@ (800f070 <_strtod_l+0x860>)
 800f04e:	400b      	ands	r3, r1
 800f050:	4682      	mov	sl, r0
 800f052:	468b      	mov	fp, r1
 800f054:	2b00      	cmp	r3, #0
 800f056:	f47f ae05 	bne.w	800ec64 <_strtod_l+0x454>
 800f05a:	9a05      	ldr	r2, [sp, #20]
 800f05c:	2322      	movs	r3, #34	@ 0x22
 800f05e:	6013      	str	r3, [r2, #0]
 800f060:	e600      	b.n	800ec64 <_strtod_l+0x454>
 800f062:	bf00      	nop
 800f064:	08011438 	.word	0x08011438
 800f068:	fffffc02 	.word	0xfffffc02
 800f06c:	39500000 	.word	0x39500000
 800f070:	7ff00000 	.word	0x7ff00000
 800f074:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f078:	d165      	bne.n	800f146 <_strtod_l+0x936>
 800f07a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f07c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f080:	b35a      	cbz	r2, 800f0da <_strtod_l+0x8ca>
 800f082:	4a9f      	ldr	r2, [pc, #636]	@ (800f300 <_strtod_l+0xaf0>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d12b      	bne.n	800f0e0 <_strtod_l+0x8d0>
 800f088:	9b08      	ldr	r3, [sp, #32]
 800f08a:	4651      	mov	r1, sl
 800f08c:	b303      	cbz	r3, 800f0d0 <_strtod_l+0x8c0>
 800f08e:	4b9d      	ldr	r3, [pc, #628]	@ (800f304 <_strtod_l+0xaf4>)
 800f090:	465a      	mov	r2, fp
 800f092:	4013      	ands	r3, r2
 800f094:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f098:	f04f 32ff 	mov.w	r2, #4294967295
 800f09c:	d81b      	bhi.n	800f0d6 <_strtod_l+0x8c6>
 800f09e:	0d1b      	lsrs	r3, r3, #20
 800f0a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800f0a8:	4299      	cmp	r1, r3
 800f0aa:	d119      	bne.n	800f0e0 <_strtod_l+0x8d0>
 800f0ac:	4b96      	ldr	r3, [pc, #600]	@ (800f308 <_strtod_l+0xaf8>)
 800f0ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d102      	bne.n	800f0ba <_strtod_l+0x8aa>
 800f0b4:	3101      	adds	r1, #1
 800f0b6:	f43f adca 	beq.w	800ec4e <_strtod_l+0x43e>
 800f0ba:	4b92      	ldr	r3, [pc, #584]	@ (800f304 <_strtod_l+0xaf4>)
 800f0bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0be:	401a      	ands	r2, r3
 800f0c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f0c4:	f04f 0a00 	mov.w	sl, #0
 800f0c8:	9b08      	ldr	r3, [sp, #32]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d1b8      	bne.n	800f040 <_strtod_l+0x830>
 800f0ce:	e5c9      	b.n	800ec64 <_strtod_l+0x454>
 800f0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0d4:	e7e8      	b.n	800f0a8 <_strtod_l+0x898>
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	e7e6      	b.n	800f0a8 <_strtod_l+0x898>
 800f0da:	ea53 030a 	orrs.w	r3, r3, sl
 800f0de:	d0a1      	beq.n	800f024 <_strtod_l+0x814>
 800f0e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f0e2:	b1db      	cbz	r3, 800f11c <_strtod_l+0x90c>
 800f0e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0e6:	4213      	tst	r3, r2
 800f0e8:	d0ee      	beq.n	800f0c8 <_strtod_l+0x8b8>
 800f0ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0ec:	9a08      	ldr	r2, [sp, #32]
 800f0ee:	4650      	mov	r0, sl
 800f0f0:	4659      	mov	r1, fp
 800f0f2:	b1bb      	cbz	r3, 800f124 <_strtod_l+0x914>
 800f0f4:	f7ff fb6c 	bl	800e7d0 <sulp>
 800f0f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0fc:	ec53 2b10 	vmov	r2, r3, d0
 800f100:	f7f1 f8c4 	bl	800028c <__adddf3>
 800f104:	4682      	mov	sl, r0
 800f106:	468b      	mov	fp, r1
 800f108:	e7de      	b.n	800f0c8 <_strtod_l+0x8b8>
 800f10a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f10e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f112:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f116:	f04f 3aff 	mov.w	sl, #4294967295
 800f11a:	e7d5      	b.n	800f0c8 <_strtod_l+0x8b8>
 800f11c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f11e:	ea13 0f0a 	tst.w	r3, sl
 800f122:	e7e1      	b.n	800f0e8 <_strtod_l+0x8d8>
 800f124:	f7ff fb54 	bl	800e7d0 <sulp>
 800f128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f12c:	ec53 2b10 	vmov	r2, r3, d0
 800f130:	f7f1 f8aa 	bl	8000288 <__aeabi_dsub>
 800f134:	2200      	movs	r2, #0
 800f136:	2300      	movs	r3, #0
 800f138:	4682      	mov	sl, r0
 800f13a:	468b      	mov	fp, r1
 800f13c:	f7f1 fcc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800f140:	2800      	cmp	r0, #0
 800f142:	d0c1      	beq.n	800f0c8 <_strtod_l+0x8b8>
 800f144:	e619      	b.n	800ed7a <_strtod_l+0x56a>
 800f146:	4641      	mov	r1, r8
 800f148:	4620      	mov	r0, r4
 800f14a:	f7ff facb 	bl	800e6e4 <__ratio>
 800f14e:	ec57 6b10 	vmov	r6, r7, d0
 800f152:	2200      	movs	r2, #0
 800f154:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f158:	4630      	mov	r0, r6
 800f15a:	4639      	mov	r1, r7
 800f15c:	f7f1 fcc8 	bl	8000af0 <__aeabi_dcmple>
 800f160:	2800      	cmp	r0, #0
 800f162:	d06f      	beq.n	800f244 <_strtod_l+0xa34>
 800f164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f166:	2b00      	cmp	r3, #0
 800f168:	d17a      	bne.n	800f260 <_strtod_l+0xa50>
 800f16a:	f1ba 0f00 	cmp.w	sl, #0
 800f16e:	d158      	bne.n	800f222 <_strtod_l+0xa12>
 800f170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f172:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f176:	2b00      	cmp	r3, #0
 800f178:	d15a      	bne.n	800f230 <_strtod_l+0xa20>
 800f17a:	4b64      	ldr	r3, [pc, #400]	@ (800f30c <_strtod_l+0xafc>)
 800f17c:	2200      	movs	r2, #0
 800f17e:	4630      	mov	r0, r6
 800f180:	4639      	mov	r1, r7
 800f182:	f7f1 fcab 	bl	8000adc <__aeabi_dcmplt>
 800f186:	2800      	cmp	r0, #0
 800f188:	d159      	bne.n	800f23e <_strtod_l+0xa2e>
 800f18a:	4630      	mov	r0, r6
 800f18c:	4639      	mov	r1, r7
 800f18e:	4b60      	ldr	r3, [pc, #384]	@ (800f310 <_strtod_l+0xb00>)
 800f190:	2200      	movs	r2, #0
 800f192:	f7f1 fa31 	bl	80005f8 <__aeabi_dmul>
 800f196:	4606      	mov	r6, r0
 800f198:	460f      	mov	r7, r1
 800f19a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f19e:	9606      	str	r6, [sp, #24]
 800f1a0:	9307      	str	r3, [sp, #28]
 800f1a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1a6:	4d57      	ldr	r5, [pc, #348]	@ (800f304 <_strtod_l+0xaf4>)
 800f1a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f1ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1ae:	401d      	ands	r5, r3
 800f1b0:	4b58      	ldr	r3, [pc, #352]	@ (800f314 <_strtod_l+0xb04>)
 800f1b2:	429d      	cmp	r5, r3
 800f1b4:	f040 80b2 	bne.w	800f31c <_strtod_l+0xb0c>
 800f1b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f1be:	ec4b ab10 	vmov	d0, sl, fp
 800f1c2:	f7ff f9c7 	bl	800e554 <__ulp>
 800f1c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1ca:	ec51 0b10 	vmov	r0, r1, d0
 800f1ce:	f7f1 fa13 	bl	80005f8 <__aeabi_dmul>
 800f1d2:	4652      	mov	r2, sl
 800f1d4:	465b      	mov	r3, fp
 800f1d6:	f7f1 f859 	bl	800028c <__adddf3>
 800f1da:	460b      	mov	r3, r1
 800f1dc:	4949      	ldr	r1, [pc, #292]	@ (800f304 <_strtod_l+0xaf4>)
 800f1de:	4a4e      	ldr	r2, [pc, #312]	@ (800f318 <_strtod_l+0xb08>)
 800f1e0:	4019      	ands	r1, r3
 800f1e2:	4291      	cmp	r1, r2
 800f1e4:	4682      	mov	sl, r0
 800f1e6:	d942      	bls.n	800f26e <_strtod_l+0xa5e>
 800f1e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f1ea:	4b47      	ldr	r3, [pc, #284]	@ (800f308 <_strtod_l+0xaf8>)
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d103      	bne.n	800f1f8 <_strtod_l+0x9e8>
 800f1f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	f43f ad2b 	beq.w	800ec4e <_strtod_l+0x43e>
 800f1f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f308 <_strtod_l+0xaf8>
 800f1fc:	f04f 3aff 	mov.w	sl, #4294967295
 800f200:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f202:	9805      	ldr	r0, [sp, #20]
 800f204:	f7fe fe72 	bl	800deec <_Bfree>
 800f208:	9805      	ldr	r0, [sp, #20]
 800f20a:	4649      	mov	r1, r9
 800f20c:	f7fe fe6e 	bl	800deec <_Bfree>
 800f210:	9805      	ldr	r0, [sp, #20]
 800f212:	4641      	mov	r1, r8
 800f214:	f7fe fe6a 	bl	800deec <_Bfree>
 800f218:	9805      	ldr	r0, [sp, #20]
 800f21a:	4621      	mov	r1, r4
 800f21c:	f7fe fe66 	bl	800deec <_Bfree>
 800f220:	e618      	b.n	800ee54 <_strtod_l+0x644>
 800f222:	f1ba 0f01 	cmp.w	sl, #1
 800f226:	d103      	bne.n	800f230 <_strtod_l+0xa20>
 800f228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	f43f ada5 	beq.w	800ed7a <_strtod_l+0x56a>
 800f230:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f2e0 <_strtod_l+0xad0>
 800f234:	4f35      	ldr	r7, [pc, #212]	@ (800f30c <_strtod_l+0xafc>)
 800f236:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f23a:	2600      	movs	r6, #0
 800f23c:	e7b1      	b.n	800f1a2 <_strtod_l+0x992>
 800f23e:	4f34      	ldr	r7, [pc, #208]	@ (800f310 <_strtod_l+0xb00>)
 800f240:	2600      	movs	r6, #0
 800f242:	e7aa      	b.n	800f19a <_strtod_l+0x98a>
 800f244:	4b32      	ldr	r3, [pc, #200]	@ (800f310 <_strtod_l+0xb00>)
 800f246:	4630      	mov	r0, r6
 800f248:	4639      	mov	r1, r7
 800f24a:	2200      	movs	r2, #0
 800f24c:	f7f1 f9d4 	bl	80005f8 <__aeabi_dmul>
 800f250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f252:	4606      	mov	r6, r0
 800f254:	460f      	mov	r7, r1
 800f256:	2b00      	cmp	r3, #0
 800f258:	d09f      	beq.n	800f19a <_strtod_l+0x98a>
 800f25a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f25e:	e7a0      	b.n	800f1a2 <_strtod_l+0x992>
 800f260:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f2e8 <_strtod_l+0xad8>
 800f264:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f268:	ec57 6b17 	vmov	r6, r7, d7
 800f26c:	e799      	b.n	800f1a2 <_strtod_l+0x992>
 800f26e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f272:	9b08      	ldr	r3, [sp, #32]
 800f274:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d1c1      	bne.n	800f200 <_strtod_l+0x9f0>
 800f27c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f280:	0d1b      	lsrs	r3, r3, #20
 800f282:	051b      	lsls	r3, r3, #20
 800f284:	429d      	cmp	r5, r3
 800f286:	d1bb      	bne.n	800f200 <_strtod_l+0x9f0>
 800f288:	4630      	mov	r0, r6
 800f28a:	4639      	mov	r1, r7
 800f28c:	f7f1 fd14 	bl	8000cb8 <__aeabi_d2lz>
 800f290:	f7f1 f984 	bl	800059c <__aeabi_l2d>
 800f294:	4602      	mov	r2, r0
 800f296:	460b      	mov	r3, r1
 800f298:	4630      	mov	r0, r6
 800f29a:	4639      	mov	r1, r7
 800f29c:	f7f0 fff4 	bl	8000288 <__aeabi_dsub>
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f2a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2ae:	ea46 060a 	orr.w	r6, r6, sl
 800f2b2:	431e      	orrs	r6, r3
 800f2b4:	d06f      	beq.n	800f396 <_strtod_l+0xb86>
 800f2b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800f2f0 <_strtod_l+0xae0>)
 800f2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2bc:	f7f1 fc0e 	bl	8000adc <__aeabi_dcmplt>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	f47f accf 	bne.w	800ec64 <_strtod_l+0x454>
 800f2c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800f2f8 <_strtod_l+0xae8>)
 800f2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2d0:	f7f1 fc22 	bl	8000b18 <__aeabi_dcmpgt>
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d093      	beq.n	800f200 <_strtod_l+0x9f0>
 800f2d8:	e4c4      	b.n	800ec64 <_strtod_l+0x454>
 800f2da:	bf00      	nop
 800f2dc:	f3af 8000 	nop.w
 800f2e0:	00000000 	.word	0x00000000
 800f2e4:	bff00000 	.word	0xbff00000
 800f2e8:	00000000 	.word	0x00000000
 800f2ec:	3ff00000 	.word	0x3ff00000
 800f2f0:	94a03595 	.word	0x94a03595
 800f2f4:	3fdfffff 	.word	0x3fdfffff
 800f2f8:	35afe535 	.word	0x35afe535
 800f2fc:	3fe00000 	.word	0x3fe00000
 800f300:	000fffff 	.word	0x000fffff
 800f304:	7ff00000 	.word	0x7ff00000
 800f308:	7fefffff 	.word	0x7fefffff
 800f30c:	3ff00000 	.word	0x3ff00000
 800f310:	3fe00000 	.word	0x3fe00000
 800f314:	7fe00000 	.word	0x7fe00000
 800f318:	7c9fffff 	.word	0x7c9fffff
 800f31c:	9b08      	ldr	r3, [sp, #32]
 800f31e:	b323      	cbz	r3, 800f36a <_strtod_l+0xb5a>
 800f320:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f324:	d821      	bhi.n	800f36a <_strtod_l+0xb5a>
 800f326:	a328      	add	r3, pc, #160	@ (adr r3, 800f3c8 <_strtod_l+0xbb8>)
 800f328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32c:	4630      	mov	r0, r6
 800f32e:	4639      	mov	r1, r7
 800f330:	f7f1 fbde 	bl	8000af0 <__aeabi_dcmple>
 800f334:	b1a0      	cbz	r0, 800f360 <_strtod_l+0xb50>
 800f336:	4639      	mov	r1, r7
 800f338:	4630      	mov	r0, r6
 800f33a:	f7f1 fc35 	bl	8000ba8 <__aeabi_d2uiz>
 800f33e:	2801      	cmp	r0, #1
 800f340:	bf38      	it	cc
 800f342:	2001      	movcc	r0, #1
 800f344:	f7f1 f8de 	bl	8000504 <__aeabi_ui2d>
 800f348:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f34a:	4606      	mov	r6, r0
 800f34c:	460f      	mov	r7, r1
 800f34e:	b9fb      	cbnz	r3, 800f390 <_strtod_l+0xb80>
 800f350:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f354:	9014      	str	r0, [sp, #80]	@ 0x50
 800f356:	9315      	str	r3, [sp, #84]	@ 0x54
 800f358:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f35c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f360:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f362:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f366:	1b5b      	subs	r3, r3, r5
 800f368:	9311      	str	r3, [sp, #68]	@ 0x44
 800f36a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f36e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f372:	f7ff f8ef 	bl	800e554 <__ulp>
 800f376:	4650      	mov	r0, sl
 800f378:	ec53 2b10 	vmov	r2, r3, d0
 800f37c:	4659      	mov	r1, fp
 800f37e:	f7f1 f93b 	bl	80005f8 <__aeabi_dmul>
 800f382:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f386:	f7f0 ff81 	bl	800028c <__adddf3>
 800f38a:	4682      	mov	sl, r0
 800f38c:	468b      	mov	fp, r1
 800f38e:	e770      	b.n	800f272 <_strtod_l+0xa62>
 800f390:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f394:	e7e0      	b.n	800f358 <_strtod_l+0xb48>
 800f396:	a30e      	add	r3, pc, #56	@ (adr r3, 800f3d0 <_strtod_l+0xbc0>)
 800f398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39c:	f7f1 fb9e 	bl	8000adc <__aeabi_dcmplt>
 800f3a0:	e798      	b.n	800f2d4 <_strtod_l+0xac4>
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f3a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f3aa:	6013      	str	r3, [r2, #0]
 800f3ac:	f7ff ba6d 	b.w	800e88a <_strtod_l+0x7a>
 800f3b0:	2a65      	cmp	r2, #101	@ 0x65
 800f3b2:	f43f ab66 	beq.w	800ea82 <_strtod_l+0x272>
 800f3b6:	2a45      	cmp	r2, #69	@ 0x45
 800f3b8:	f43f ab63 	beq.w	800ea82 <_strtod_l+0x272>
 800f3bc:	2301      	movs	r3, #1
 800f3be:	f7ff bb9e 	b.w	800eafe <_strtod_l+0x2ee>
 800f3c2:	bf00      	nop
 800f3c4:	f3af 8000 	nop.w
 800f3c8:	ffc00000 	.word	0xffc00000
 800f3cc:	41dfffff 	.word	0x41dfffff
 800f3d0:	94a03595 	.word	0x94a03595
 800f3d4:	3fcfffff 	.word	0x3fcfffff

0800f3d8 <_strtod_r>:
 800f3d8:	4b01      	ldr	r3, [pc, #4]	@ (800f3e0 <_strtod_r+0x8>)
 800f3da:	f7ff ba19 	b.w	800e810 <_strtod_l>
 800f3de:	bf00      	nop
 800f3e0:	20000074 	.word	0x20000074

0800f3e4 <__ssputs_r>:
 800f3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3e8:	688e      	ldr	r6, [r1, #8]
 800f3ea:	461f      	mov	r7, r3
 800f3ec:	42be      	cmp	r6, r7
 800f3ee:	680b      	ldr	r3, [r1, #0]
 800f3f0:	4682      	mov	sl, r0
 800f3f2:	460c      	mov	r4, r1
 800f3f4:	4690      	mov	r8, r2
 800f3f6:	d82d      	bhi.n	800f454 <__ssputs_r+0x70>
 800f3f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f3fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f400:	d026      	beq.n	800f450 <__ssputs_r+0x6c>
 800f402:	6965      	ldr	r5, [r4, #20]
 800f404:	6909      	ldr	r1, [r1, #16]
 800f406:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f40a:	eba3 0901 	sub.w	r9, r3, r1
 800f40e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f412:	1c7b      	adds	r3, r7, #1
 800f414:	444b      	add	r3, r9
 800f416:	106d      	asrs	r5, r5, #1
 800f418:	429d      	cmp	r5, r3
 800f41a:	bf38      	it	cc
 800f41c:	461d      	movcc	r5, r3
 800f41e:	0553      	lsls	r3, r2, #21
 800f420:	d527      	bpl.n	800f472 <__ssputs_r+0x8e>
 800f422:	4629      	mov	r1, r5
 800f424:	f7fc fd30 	bl	800be88 <_malloc_r>
 800f428:	4606      	mov	r6, r0
 800f42a:	b360      	cbz	r0, 800f486 <__ssputs_r+0xa2>
 800f42c:	6921      	ldr	r1, [r4, #16]
 800f42e:	464a      	mov	r2, r9
 800f430:	f7fd fe6f 	bl	800d112 <memcpy>
 800f434:	89a3      	ldrh	r3, [r4, #12]
 800f436:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f43a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f43e:	81a3      	strh	r3, [r4, #12]
 800f440:	6126      	str	r6, [r4, #16]
 800f442:	6165      	str	r5, [r4, #20]
 800f444:	444e      	add	r6, r9
 800f446:	eba5 0509 	sub.w	r5, r5, r9
 800f44a:	6026      	str	r6, [r4, #0]
 800f44c:	60a5      	str	r5, [r4, #8]
 800f44e:	463e      	mov	r6, r7
 800f450:	42be      	cmp	r6, r7
 800f452:	d900      	bls.n	800f456 <__ssputs_r+0x72>
 800f454:	463e      	mov	r6, r7
 800f456:	6820      	ldr	r0, [r4, #0]
 800f458:	4632      	mov	r2, r6
 800f45a:	4641      	mov	r1, r8
 800f45c:	f000 f9c6 	bl	800f7ec <memmove>
 800f460:	68a3      	ldr	r3, [r4, #8]
 800f462:	1b9b      	subs	r3, r3, r6
 800f464:	60a3      	str	r3, [r4, #8]
 800f466:	6823      	ldr	r3, [r4, #0]
 800f468:	4433      	add	r3, r6
 800f46a:	6023      	str	r3, [r4, #0]
 800f46c:	2000      	movs	r0, #0
 800f46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f472:	462a      	mov	r2, r5
 800f474:	f000 fd6d 	bl	800ff52 <_realloc_r>
 800f478:	4606      	mov	r6, r0
 800f47a:	2800      	cmp	r0, #0
 800f47c:	d1e0      	bne.n	800f440 <__ssputs_r+0x5c>
 800f47e:	6921      	ldr	r1, [r4, #16]
 800f480:	4650      	mov	r0, sl
 800f482:	f7fe fca9 	bl	800ddd8 <_free_r>
 800f486:	230c      	movs	r3, #12
 800f488:	f8ca 3000 	str.w	r3, [sl]
 800f48c:	89a3      	ldrh	r3, [r4, #12]
 800f48e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f492:	81a3      	strh	r3, [r4, #12]
 800f494:	f04f 30ff 	mov.w	r0, #4294967295
 800f498:	e7e9      	b.n	800f46e <__ssputs_r+0x8a>
	...

0800f49c <_svfiprintf_r>:
 800f49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4a0:	4698      	mov	r8, r3
 800f4a2:	898b      	ldrh	r3, [r1, #12]
 800f4a4:	061b      	lsls	r3, r3, #24
 800f4a6:	b09d      	sub	sp, #116	@ 0x74
 800f4a8:	4607      	mov	r7, r0
 800f4aa:	460d      	mov	r5, r1
 800f4ac:	4614      	mov	r4, r2
 800f4ae:	d510      	bpl.n	800f4d2 <_svfiprintf_r+0x36>
 800f4b0:	690b      	ldr	r3, [r1, #16]
 800f4b2:	b973      	cbnz	r3, 800f4d2 <_svfiprintf_r+0x36>
 800f4b4:	2140      	movs	r1, #64	@ 0x40
 800f4b6:	f7fc fce7 	bl	800be88 <_malloc_r>
 800f4ba:	6028      	str	r0, [r5, #0]
 800f4bc:	6128      	str	r0, [r5, #16]
 800f4be:	b930      	cbnz	r0, 800f4ce <_svfiprintf_r+0x32>
 800f4c0:	230c      	movs	r3, #12
 800f4c2:	603b      	str	r3, [r7, #0]
 800f4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4c8:	b01d      	add	sp, #116	@ 0x74
 800f4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ce:	2340      	movs	r3, #64	@ 0x40
 800f4d0:	616b      	str	r3, [r5, #20]
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4d6:	2320      	movs	r3, #32
 800f4d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f4dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4e0:	2330      	movs	r3, #48	@ 0x30
 800f4e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f680 <_svfiprintf_r+0x1e4>
 800f4e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f4ea:	f04f 0901 	mov.w	r9, #1
 800f4ee:	4623      	mov	r3, r4
 800f4f0:	469a      	mov	sl, r3
 800f4f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4f6:	b10a      	cbz	r2, 800f4fc <_svfiprintf_r+0x60>
 800f4f8:	2a25      	cmp	r2, #37	@ 0x25
 800f4fa:	d1f9      	bne.n	800f4f0 <_svfiprintf_r+0x54>
 800f4fc:	ebba 0b04 	subs.w	fp, sl, r4
 800f500:	d00b      	beq.n	800f51a <_svfiprintf_r+0x7e>
 800f502:	465b      	mov	r3, fp
 800f504:	4622      	mov	r2, r4
 800f506:	4629      	mov	r1, r5
 800f508:	4638      	mov	r0, r7
 800f50a:	f7ff ff6b 	bl	800f3e4 <__ssputs_r>
 800f50e:	3001      	adds	r0, #1
 800f510:	f000 80a7 	beq.w	800f662 <_svfiprintf_r+0x1c6>
 800f514:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f516:	445a      	add	r2, fp
 800f518:	9209      	str	r2, [sp, #36]	@ 0x24
 800f51a:	f89a 3000 	ldrb.w	r3, [sl]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	f000 809f 	beq.w	800f662 <_svfiprintf_r+0x1c6>
 800f524:	2300      	movs	r3, #0
 800f526:	f04f 32ff 	mov.w	r2, #4294967295
 800f52a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f52e:	f10a 0a01 	add.w	sl, sl, #1
 800f532:	9304      	str	r3, [sp, #16]
 800f534:	9307      	str	r3, [sp, #28]
 800f536:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f53a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f53c:	4654      	mov	r4, sl
 800f53e:	2205      	movs	r2, #5
 800f540:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f544:	484e      	ldr	r0, [pc, #312]	@ (800f680 <_svfiprintf_r+0x1e4>)
 800f546:	f7f0 fe43 	bl	80001d0 <memchr>
 800f54a:	9a04      	ldr	r2, [sp, #16]
 800f54c:	b9d8      	cbnz	r0, 800f586 <_svfiprintf_r+0xea>
 800f54e:	06d0      	lsls	r0, r2, #27
 800f550:	bf44      	itt	mi
 800f552:	2320      	movmi	r3, #32
 800f554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f558:	0711      	lsls	r1, r2, #28
 800f55a:	bf44      	itt	mi
 800f55c:	232b      	movmi	r3, #43	@ 0x2b
 800f55e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f562:	f89a 3000 	ldrb.w	r3, [sl]
 800f566:	2b2a      	cmp	r3, #42	@ 0x2a
 800f568:	d015      	beq.n	800f596 <_svfiprintf_r+0xfa>
 800f56a:	9a07      	ldr	r2, [sp, #28]
 800f56c:	4654      	mov	r4, sl
 800f56e:	2000      	movs	r0, #0
 800f570:	f04f 0c0a 	mov.w	ip, #10
 800f574:	4621      	mov	r1, r4
 800f576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f57a:	3b30      	subs	r3, #48	@ 0x30
 800f57c:	2b09      	cmp	r3, #9
 800f57e:	d94b      	bls.n	800f618 <_svfiprintf_r+0x17c>
 800f580:	b1b0      	cbz	r0, 800f5b0 <_svfiprintf_r+0x114>
 800f582:	9207      	str	r2, [sp, #28]
 800f584:	e014      	b.n	800f5b0 <_svfiprintf_r+0x114>
 800f586:	eba0 0308 	sub.w	r3, r0, r8
 800f58a:	fa09 f303 	lsl.w	r3, r9, r3
 800f58e:	4313      	orrs	r3, r2
 800f590:	9304      	str	r3, [sp, #16]
 800f592:	46a2      	mov	sl, r4
 800f594:	e7d2      	b.n	800f53c <_svfiprintf_r+0xa0>
 800f596:	9b03      	ldr	r3, [sp, #12]
 800f598:	1d19      	adds	r1, r3, #4
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	9103      	str	r1, [sp, #12]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	bfbb      	ittet	lt
 800f5a2:	425b      	neglt	r3, r3
 800f5a4:	f042 0202 	orrlt.w	r2, r2, #2
 800f5a8:	9307      	strge	r3, [sp, #28]
 800f5aa:	9307      	strlt	r3, [sp, #28]
 800f5ac:	bfb8      	it	lt
 800f5ae:	9204      	strlt	r2, [sp, #16]
 800f5b0:	7823      	ldrb	r3, [r4, #0]
 800f5b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f5b4:	d10a      	bne.n	800f5cc <_svfiprintf_r+0x130>
 800f5b6:	7863      	ldrb	r3, [r4, #1]
 800f5b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5ba:	d132      	bne.n	800f622 <_svfiprintf_r+0x186>
 800f5bc:	9b03      	ldr	r3, [sp, #12]
 800f5be:	1d1a      	adds	r2, r3, #4
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	9203      	str	r2, [sp, #12]
 800f5c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f5c8:	3402      	adds	r4, #2
 800f5ca:	9305      	str	r3, [sp, #20]
 800f5cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f690 <_svfiprintf_r+0x1f4>
 800f5d0:	7821      	ldrb	r1, [r4, #0]
 800f5d2:	2203      	movs	r2, #3
 800f5d4:	4650      	mov	r0, sl
 800f5d6:	f7f0 fdfb 	bl	80001d0 <memchr>
 800f5da:	b138      	cbz	r0, 800f5ec <_svfiprintf_r+0x150>
 800f5dc:	9b04      	ldr	r3, [sp, #16]
 800f5de:	eba0 000a 	sub.w	r0, r0, sl
 800f5e2:	2240      	movs	r2, #64	@ 0x40
 800f5e4:	4082      	lsls	r2, r0
 800f5e6:	4313      	orrs	r3, r2
 800f5e8:	3401      	adds	r4, #1
 800f5ea:	9304      	str	r3, [sp, #16]
 800f5ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5f0:	4824      	ldr	r0, [pc, #144]	@ (800f684 <_svfiprintf_r+0x1e8>)
 800f5f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f5f6:	2206      	movs	r2, #6
 800f5f8:	f7f0 fdea 	bl	80001d0 <memchr>
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	d036      	beq.n	800f66e <_svfiprintf_r+0x1d2>
 800f600:	4b21      	ldr	r3, [pc, #132]	@ (800f688 <_svfiprintf_r+0x1ec>)
 800f602:	bb1b      	cbnz	r3, 800f64c <_svfiprintf_r+0x1b0>
 800f604:	9b03      	ldr	r3, [sp, #12]
 800f606:	3307      	adds	r3, #7
 800f608:	f023 0307 	bic.w	r3, r3, #7
 800f60c:	3308      	adds	r3, #8
 800f60e:	9303      	str	r3, [sp, #12]
 800f610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f612:	4433      	add	r3, r6
 800f614:	9309      	str	r3, [sp, #36]	@ 0x24
 800f616:	e76a      	b.n	800f4ee <_svfiprintf_r+0x52>
 800f618:	fb0c 3202 	mla	r2, ip, r2, r3
 800f61c:	460c      	mov	r4, r1
 800f61e:	2001      	movs	r0, #1
 800f620:	e7a8      	b.n	800f574 <_svfiprintf_r+0xd8>
 800f622:	2300      	movs	r3, #0
 800f624:	3401      	adds	r4, #1
 800f626:	9305      	str	r3, [sp, #20]
 800f628:	4619      	mov	r1, r3
 800f62a:	f04f 0c0a 	mov.w	ip, #10
 800f62e:	4620      	mov	r0, r4
 800f630:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f634:	3a30      	subs	r2, #48	@ 0x30
 800f636:	2a09      	cmp	r2, #9
 800f638:	d903      	bls.n	800f642 <_svfiprintf_r+0x1a6>
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d0c6      	beq.n	800f5cc <_svfiprintf_r+0x130>
 800f63e:	9105      	str	r1, [sp, #20]
 800f640:	e7c4      	b.n	800f5cc <_svfiprintf_r+0x130>
 800f642:	fb0c 2101 	mla	r1, ip, r1, r2
 800f646:	4604      	mov	r4, r0
 800f648:	2301      	movs	r3, #1
 800f64a:	e7f0      	b.n	800f62e <_svfiprintf_r+0x192>
 800f64c:	ab03      	add	r3, sp, #12
 800f64e:	9300      	str	r3, [sp, #0]
 800f650:	462a      	mov	r2, r5
 800f652:	4b0e      	ldr	r3, [pc, #56]	@ (800f68c <_svfiprintf_r+0x1f0>)
 800f654:	a904      	add	r1, sp, #16
 800f656:	4638      	mov	r0, r7
 800f658:	f7fc fdc8 	bl	800c1ec <_printf_float>
 800f65c:	1c42      	adds	r2, r0, #1
 800f65e:	4606      	mov	r6, r0
 800f660:	d1d6      	bne.n	800f610 <_svfiprintf_r+0x174>
 800f662:	89ab      	ldrh	r3, [r5, #12]
 800f664:	065b      	lsls	r3, r3, #25
 800f666:	f53f af2d 	bmi.w	800f4c4 <_svfiprintf_r+0x28>
 800f66a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f66c:	e72c      	b.n	800f4c8 <_svfiprintf_r+0x2c>
 800f66e:	ab03      	add	r3, sp, #12
 800f670:	9300      	str	r3, [sp, #0]
 800f672:	462a      	mov	r2, r5
 800f674:	4b05      	ldr	r3, [pc, #20]	@ (800f68c <_svfiprintf_r+0x1f0>)
 800f676:	a904      	add	r1, sp, #16
 800f678:	4638      	mov	r0, r7
 800f67a:	f7fd f84f 	bl	800c71c <_printf_i>
 800f67e:	e7ed      	b.n	800f65c <_svfiprintf_r+0x1c0>
 800f680:	08011460 	.word	0x08011460
 800f684:	0801146a 	.word	0x0801146a
 800f688:	0800c1ed 	.word	0x0800c1ed
 800f68c:	0800f3e5 	.word	0x0800f3e5
 800f690:	08011466 	.word	0x08011466

0800f694 <__sflush_r>:
 800f694:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f69c:	0716      	lsls	r6, r2, #28
 800f69e:	4605      	mov	r5, r0
 800f6a0:	460c      	mov	r4, r1
 800f6a2:	d454      	bmi.n	800f74e <__sflush_r+0xba>
 800f6a4:	684b      	ldr	r3, [r1, #4]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	dc02      	bgt.n	800f6b0 <__sflush_r+0x1c>
 800f6aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	dd48      	ble.n	800f742 <__sflush_r+0xae>
 800f6b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f6b2:	2e00      	cmp	r6, #0
 800f6b4:	d045      	beq.n	800f742 <__sflush_r+0xae>
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f6bc:	682f      	ldr	r7, [r5, #0]
 800f6be:	6a21      	ldr	r1, [r4, #32]
 800f6c0:	602b      	str	r3, [r5, #0]
 800f6c2:	d030      	beq.n	800f726 <__sflush_r+0x92>
 800f6c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f6c6:	89a3      	ldrh	r3, [r4, #12]
 800f6c8:	0759      	lsls	r1, r3, #29
 800f6ca:	d505      	bpl.n	800f6d8 <__sflush_r+0x44>
 800f6cc:	6863      	ldr	r3, [r4, #4]
 800f6ce:	1ad2      	subs	r2, r2, r3
 800f6d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f6d2:	b10b      	cbz	r3, 800f6d8 <__sflush_r+0x44>
 800f6d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f6d6:	1ad2      	subs	r2, r2, r3
 800f6d8:	2300      	movs	r3, #0
 800f6da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f6dc:	6a21      	ldr	r1, [r4, #32]
 800f6de:	4628      	mov	r0, r5
 800f6e0:	47b0      	blx	r6
 800f6e2:	1c43      	adds	r3, r0, #1
 800f6e4:	89a3      	ldrh	r3, [r4, #12]
 800f6e6:	d106      	bne.n	800f6f6 <__sflush_r+0x62>
 800f6e8:	6829      	ldr	r1, [r5, #0]
 800f6ea:	291d      	cmp	r1, #29
 800f6ec:	d82b      	bhi.n	800f746 <__sflush_r+0xb2>
 800f6ee:	4a2a      	ldr	r2, [pc, #168]	@ (800f798 <__sflush_r+0x104>)
 800f6f0:	410a      	asrs	r2, r1
 800f6f2:	07d6      	lsls	r6, r2, #31
 800f6f4:	d427      	bmi.n	800f746 <__sflush_r+0xb2>
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	6062      	str	r2, [r4, #4]
 800f6fa:	04d9      	lsls	r1, r3, #19
 800f6fc:	6922      	ldr	r2, [r4, #16]
 800f6fe:	6022      	str	r2, [r4, #0]
 800f700:	d504      	bpl.n	800f70c <__sflush_r+0x78>
 800f702:	1c42      	adds	r2, r0, #1
 800f704:	d101      	bne.n	800f70a <__sflush_r+0x76>
 800f706:	682b      	ldr	r3, [r5, #0]
 800f708:	b903      	cbnz	r3, 800f70c <__sflush_r+0x78>
 800f70a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f70c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f70e:	602f      	str	r7, [r5, #0]
 800f710:	b1b9      	cbz	r1, 800f742 <__sflush_r+0xae>
 800f712:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f716:	4299      	cmp	r1, r3
 800f718:	d002      	beq.n	800f720 <__sflush_r+0x8c>
 800f71a:	4628      	mov	r0, r5
 800f71c:	f7fe fb5c 	bl	800ddd8 <_free_r>
 800f720:	2300      	movs	r3, #0
 800f722:	6363      	str	r3, [r4, #52]	@ 0x34
 800f724:	e00d      	b.n	800f742 <__sflush_r+0xae>
 800f726:	2301      	movs	r3, #1
 800f728:	4628      	mov	r0, r5
 800f72a:	47b0      	blx	r6
 800f72c:	4602      	mov	r2, r0
 800f72e:	1c50      	adds	r0, r2, #1
 800f730:	d1c9      	bne.n	800f6c6 <__sflush_r+0x32>
 800f732:	682b      	ldr	r3, [r5, #0]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d0c6      	beq.n	800f6c6 <__sflush_r+0x32>
 800f738:	2b1d      	cmp	r3, #29
 800f73a:	d001      	beq.n	800f740 <__sflush_r+0xac>
 800f73c:	2b16      	cmp	r3, #22
 800f73e:	d11e      	bne.n	800f77e <__sflush_r+0xea>
 800f740:	602f      	str	r7, [r5, #0]
 800f742:	2000      	movs	r0, #0
 800f744:	e022      	b.n	800f78c <__sflush_r+0xf8>
 800f746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f74a:	b21b      	sxth	r3, r3
 800f74c:	e01b      	b.n	800f786 <__sflush_r+0xf2>
 800f74e:	690f      	ldr	r7, [r1, #16]
 800f750:	2f00      	cmp	r7, #0
 800f752:	d0f6      	beq.n	800f742 <__sflush_r+0xae>
 800f754:	0793      	lsls	r3, r2, #30
 800f756:	680e      	ldr	r6, [r1, #0]
 800f758:	bf08      	it	eq
 800f75a:	694b      	ldreq	r3, [r1, #20]
 800f75c:	600f      	str	r7, [r1, #0]
 800f75e:	bf18      	it	ne
 800f760:	2300      	movne	r3, #0
 800f762:	eba6 0807 	sub.w	r8, r6, r7
 800f766:	608b      	str	r3, [r1, #8]
 800f768:	f1b8 0f00 	cmp.w	r8, #0
 800f76c:	dde9      	ble.n	800f742 <__sflush_r+0xae>
 800f76e:	6a21      	ldr	r1, [r4, #32]
 800f770:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f772:	4643      	mov	r3, r8
 800f774:	463a      	mov	r2, r7
 800f776:	4628      	mov	r0, r5
 800f778:	47b0      	blx	r6
 800f77a:	2800      	cmp	r0, #0
 800f77c:	dc08      	bgt.n	800f790 <__sflush_r+0xfc>
 800f77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f786:	81a3      	strh	r3, [r4, #12]
 800f788:	f04f 30ff 	mov.w	r0, #4294967295
 800f78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f790:	4407      	add	r7, r0
 800f792:	eba8 0800 	sub.w	r8, r8, r0
 800f796:	e7e7      	b.n	800f768 <__sflush_r+0xd4>
 800f798:	dfbffffe 	.word	0xdfbffffe

0800f79c <_fflush_r>:
 800f79c:	b538      	push	{r3, r4, r5, lr}
 800f79e:	690b      	ldr	r3, [r1, #16]
 800f7a0:	4605      	mov	r5, r0
 800f7a2:	460c      	mov	r4, r1
 800f7a4:	b913      	cbnz	r3, 800f7ac <_fflush_r+0x10>
 800f7a6:	2500      	movs	r5, #0
 800f7a8:	4628      	mov	r0, r5
 800f7aa:	bd38      	pop	{r3, r4, r5, pc}
 800f7ac:	b118      	cbz	r0, 800f7b6 <_fflush_r+0x1a>
 800f7ae:	6a03      	ldr	r3, [r0, #32]
 800f7b0:	b90b      	cbnz	r3, 800f7b6 <_fflush_r+0x1a>
 800f7b2:	f7fd fb73 	bl	800ce9c <__sinit>
 800f7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d0f3      	beq.n	800f7a6 <_fflush_r+0xa>
 800f7be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f7c0:	07d0      	lsls	r0, r2, #31
 800f7c2:	d404      	bmi.n	800f7ce <_fflush_r+0x32>
 800f7c4:	0599      	lsls	r1, r3, #22
 800f7c6:	d402      	bmi.n	800f7ce <_fflush_r+0x32>
 800f7c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7ca:	f7fd fca0 	bl	800d10e <__retarget_lock_acquire_recursive>
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	4621      	mov	r1, r4
 800f7d2:	f7ff ff5f 	bl	800f694 <__sflush_r>
 800f7d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f7d8:	07da      	lsls	r2, r3, #31
 800f7da:	4605      	mov	r5, r0
 800f7dc:	d4e4      	bmi.n	800f7a8 <_fflush_r+0xc>
 800f7de:	89a3      	ldrh	r3, [r4, #12]
 800f7e0:	059b      	lsls	r3, r3, #22
 800f7e2:	d4e1      	bmi.n	800f7a8 <_fflush_r+0xc>
 800f7e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7e6:	f7fd fc93 	bl	800d110 <__retarget_lock_release_recursive>
 800f7ea:	e7dd      	b.n	800f7a8 <_fflush_r+0xc>

0800f7ec <memmove>:
 800f7ec:	4288      	cmp	r0, r1
 800f7ee:	b510      	push	{r4, lr}
 800f7f0:	eb01 0402 	add.w	r4, r1, r2
 800f7f4:	d902      	bls.n	800f7fc <memmove+0x10>
 800f7f6:	4284      	cmp	r4, r0
 800f7f8:	4623      	mov	r3, r4
 800f7fa:	d807      	bhi.n	800f80c <memmove+0x20>
 800f7fc:	1e43      	subs	r3, r0, #1
 800f7fe:	42a1      	cmp	r1, r4
 800f800:	d008      	beq.n	800f814 <memmove+0x28>
 800f802:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f806:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f80a:	e7f8      	b.n	800f7fe <memmove+0x12>
 800f80c:	4402      	add	r2, r0
 800f80e:	4601      	mov	r1, r0
 800f810:	428a      	cmp	r2, r1
 800f812:	d100      	bne.n	800f816 <memmove+0x2a>
 800f814:	bd10      	pop	{r4, pc}
 800f816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f81a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f81e:	e7f7      	b.n	800f810 <memmove+0x24>

0800f820 <strncmp>:
 800f820:	b510      	push	{r4, lr}
 800f822:	b16a      	cbz	r2, 800f840 <strncmp+0x20>
 800f824:	3901      	subs	r1, #1
 800f826:	1884      	adds	r4, r0, r2
 800f828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f82c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f830:	429a      	cmp	r2, r3
 800f832:	d103      	bne.n	800f83c <strncmp+0x1c>
 800f834:	42a0      	cmp	r0, r4
 800f836:	d001      	beq.n	800f83c <strncmp+0x1c>
 800f838:	2a00      	cmp	r2, #0
 800f83a:	d1f5      	bne.n	800f828 <strncmp+0x8>
 800f83c:	1ad0      	subs	r0, r2, r3
 800f83e:	bd10      	pop	{r4, pc}
 800f840:	4610      	mov	r0, r2
 800f842:	e7fc      	b.n	800f83e <strncmp+0x1e>
 800f844:	0000      	movs	r0, r0
	...

0800f848 <nan>:
 800f848:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f850 <nan+0x8>
 800f84c:	4770      	bx	lr
 800f84e:	bf00      	nop
 800f850:	00000000 	.word	0x00000000
 800f854:	7ff80000 	.word	0x7ff80000

0800f858 <__assert_func>:
 800f858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f85a:	4614      	mov	r4, r2
 800f85c:	461a      	mov	r2, r3
 800f85e:	4b09      	ldr	r3, [pc, #36]	@ (800f884 <__assert_func+0x2c>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	4605      	mov	r5, r0
 800f864:	68d8      	ldr	r0, [r3, #12]
 800f866:	b954      	cbnz	r4, 800f87e <__assert_func+0x26>
 800f868:	4b07      	ldr	r3, [pc, #28]	@ (800f888 <__assert_func+0x30>)
 800f86a:	461c      	mov	r4, r3
 800f86c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f870:	9100      	str	r1, [sp, #0]
 800f872:	462b      	mov	r3, r5
 800f874:	4905      	ldr	r1, [pc, #20]	@ (800f88c <__assert_func+0x34>)
 800f876:	f000 fba7 	bl	800ffc8 <fiprintf>
 800f87a:	f000 fbb7 	bl	800ffec <abort>
 800f87e:	4b04      	ldr	r3, [pc, #16]	@ (800f890 <__assert_func+0x38>)
 800f880:	e7f4      	b.n	800f86c <__assert_func+0x14>
 800f882:	bf00      	nop
 800f884:	20000024 	.word	0x20000024
 800f888:	080114b4 	.word	0x080114b4
 800f88c:	08011486 	.word	0x08011486
 800f890:	08011479 	.word	0x08011479

0800f894 <_calloc_r>:
 800f894:	b570      	push	{r4, r5, r6, lr}
 800f896:	fba1 5402 	umull	r5, r4, r1, r2
 800f89a:	b93c      	cbnz	r4, 800f8ac <_calloc_r+0x18>
 800f89c:	4629      	mov	r1, r5
 800f89e:	f7fc faf3 	bl	800be88 <_malloc_r>
 800f8a2:	4606      	mov	r6, r0
 800f8a4:	b928      	cbnz	r0, 800f8b2 <_calloc_r+0x1e>
 800f8a6:	2600      	movs	r6, #0
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	bd70      	pop	{r4, r5, r6, pc}
 800f8ac:	220c      	movs	r2, #12
 800f8ae:	6002      	str	r2, [r0, #0]
 800f8b0:	e7f9      	b.n	800f8a6 <_calloc_r+0x12>
 800f8b2:	462a      	mov	r2, r5
 800f8b4:	4621      	mov	r1, r4
 800f8b6:	f7fd fb8a 	bl	800cfce <memset>
 800f8ba:	e7f5      	b.n	800f8a8 <_calloc_r+0x14>

0800f8bc <rshift>:
 800f8bc:	6903      	ldr	r3, [r0, #16]
 800f8be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f8c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f8ca:	f100 0414 	add.w	r4, r0, #20
 800f8ce:	dd45      	ble.n	800f95c <rshift+0xa0>
 800f8d0:	f011 011f 	ands.w	r1, r1, #31
 800f8d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f8d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f8dc:	d10c      	bne.n	800f8f8 <rshift+0x3c>
 800f8de:	f100 0710 	add.w	r7, r0, #16
 800f8e2:	4629      	mov	r1, r5
 800f8e4:	42b1      	cmp	r1, r6
 800f8e6:	d334      	bcc.n	800f952 <rshift+0x96>
 800f8e8:	1a9b      	subs	r3, r3, r2
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	1eea      	subs	r2, r5, #3
 800f8ee:	4296      	cmp	r6, r2
 800f8f0:	bf38      	it	cc
 800f8f2:	2300      	movcc	r3, #0
 800f8f4:	4423      	add	r3, r4
 800f8f6:	e015      	b.n	800f924 <rshift+0x68>
 800f8f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f8fc:	f1c1 0820 	rsb	r8, r1, #32
 800f900:	40cf      	lsrs	r7, r1
 800f902:	f105 0e04 	add.w	lr, r5, #4
 800f906:	46a1      	mov	r9, r4
 800f908:	4576      	cmp	r6, lr
 800f90a:	46f4      	mov	ip, lr
 800f90c:	d815      	bhi.n	800f93a <rshift+0x7e>
 800f90e:	1a9a      	subs	r2, r3, r2
 800f910:	0092      	lsls	r2, r2, #2
 800f912:	3a04      	subs	r2, #4
 800f914:	3501      	adds	r5, #1
 800f916:	42ae      	cmp	r6, r5
 800f918:	bf38      	it	cc
 800f91a:	2200      	movcc	r2, #0
 800f91c:	18a3      	adds	r3, r4, r2
 800f91e:	50a7      	str	r7, [r4, r2]
 800f920:	b107      	cbz	r7, 800f924 <rshift+0x68>
 800f922:	3304      	adds	r3, #4
 800f924:	1b1a      	subs	r2, r3, r4
 800f926:	42a3      	cmp	r3, r4
 800f928:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f92c:	bf08      	it	eq
 800f92e:	2300      	moveq	r3, #0
 800f930:	6102      	str	r2, [r0, #16]
 800f932:	bf08      	it	eq
 800f934:	6143      	streq	r3, [r0, #20]
 800f936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f93a:	f8dc c000 	ldr.w	ip, [ip]
 800f93e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f942:	ea4c 0707 	orr.w	r7, ip, r7
 800f946:	f849 7b04 	str.w	r7, [r9], #4
 800f94a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f94e:	40cf      	lsrs	r7, r1
 800f950:	e7da      	b.n	800f908 <rshift+0x4c>
 800f952:	f851 cb04 	ldr.w	ip, [r1], #4
 800f956:	f847 cf04 	str.w	ip, [r7, #4]!
 800f95a:	e7c3      	b.n	800f8e4 <rshift+0x28>
 800f95c:	4623      	mov	r3, r4
 800f95e:	e7e1      	b.n	800f924 <rshift+0x68>

0800f960 <__hexdig_fun>:
 800f960:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f964:	2b09      	cmp	r3, #9
 800f966:	d802      	bhi.n	800f96e <__hexdig_fun+0xe>
 800f968:	3820      	subs	r0, #32
 800f96a:	b2c0      	uxtb	r0, r0
 800f96c:	4770      	bx	lr
 800f96e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f972:	2b05      	cmp	r3, #5
 800f974:	d801      	bhi.n	800f97a <__hexdig_fun+0x1a>
 800f976:	3847      	subs	r0, #71	@ 0x47
 800f978:	e7f7      	b.n	800f96a <__hexdig_fun+0xa>
 800f97a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f97e:	2b05      	cmp	r3, #5
 800f980:	d801      	bhi.n	800f986 <__hexdig_fun+0x26>
 800f982:	3827      	subs	r0, #39	@ 0x27
 800f984:	e7f1      	b.n	800f96a <__hexdig_fun+0xa>
 800f986:	2000      	movs	r0, #0
 800f988:	4770      	bx	lr
	...

0800f98c <__gethex>:
 800f98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f990:	b085      	sub	sp, #20
 800f992:	468a      	mov	sl, r1
 800f994:	9302      	str	r3, [sp, #8]
 800f996:	680b      	ldr	r3, [r1, #0]
 800f998:	9001      	str	r0, [sp, #4]
 800f99a:	4690      	mov	r8, r2
 800f99c:	1c9c      	adds	r4, r3, #2
 800f99e:	46a1      	mov	r9, r4
 800f9a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f9a4:	2830      	cmp	r0, #48	@ 0x30
 800f9a6:	d0fa      	beq.n	800f99e <__gethex+0x12>
 800f9a8:	eba9 0303 	sub.w	r3, r9, r3
 800f9ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800f9b0:	f7ff ffd6 	bl	800f960 <__hexdig_fun>
 800f9b4:	4605      	mov	r5, r0
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	d168      	bne.n	800fa8c <__gethex+0x100>
 800f9ba:	49a0      	ldr	r1, [pc, #640]	@ (800fc3c <__gethex+0x2b0>)
 800f9bc:	2201      	movs	r2, #1
 800f9be:	4648      	mov	r0, r9
 800f9c0:	f7ff ff2e 	bl	800f820 <strncmp>
 800f9c4:	4607      	mov	r7, r0
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	d167      	bne.n	800fa9a <__gethex+0x10e>
 800f9ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f9ce:	4626      	mov	r6, r4
 800f9d0:	f7ff ffc6 	bl	800f960 <__hexdig_fun>
 800f9d4:	2800      	cmp	r0, #0
 800f9d6:	d062      	beq.n	800fa9e <__gethex+0x112>
 800f9d8:	4623      	mov	r3, r4
 800f9da:	7818      	ldrb	r0, [r3, #0]
 800f9dc:	2830      	cmp	r0, #48	@ 0x30
 800f9de:	4699      	mov	r9, r3
 800f9e0:	f103 0301 	add.w	r3, r3, #1
 800f9e4:	d0f9      	beq.n	800f9da <__gethex+0x4e>
 800f9e6:	f7ff ffbb 	bl	800f960 <__hexdig_fun>
 800f9ea:	fab0 f580 	clz	r5, r0
 800f9ee:	096d      	lsrs	r5, r5, #5
 800f9f0:	f04f 0b01 	mov.w	fp, #1
 800f9f4:	464a      	mov	r2, r9
 800f9f6:	4616      	mov	r6, r2
 800f9f8:	3201      	adds	r2, #1
 800f9fa:	7830      	ldrb	r0, [r6, #0]
 800f9fc:	f7ff ffb0 	bl	800f960 <__hexdig_fun>
 800fa00:	2800      	cmp	r0, #0
 800fa02:	d1f8      	bne.n	800f9f6 <__gethex+0x6a>
 800fa04:	498d      	ldr	r1, [pc, #564]	@ (800fc3c <__gethex+0x2b0>)
 800fa06:	2201      	movs	r2, #1
 800fa08:	4630      	mov	r0, r6
 800fa0a:	f7ff ff09 	bl	800f820 <strncmp>
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	d13f      	bne.n	800fa92 <__gethex+0x106>
 800fa12:	b944      	cbnz	r4, 800fa26 <__gethex+0x9a>
 800fa14:	1c74      	adds	r4, r6, #1
 800fa16:	4622      	mov	r2, r4
 800fa18:	4616      	mov	r6, r2
 800fa1a:	3201      	adds	r2, #1
 800fa1c:	7830      	ldrb	r0, [r6, #0]
 800fa1e:	f7ff ff9f 	bl	800f960 <__hexdig_fun>
 800fa22:	2800      	cmp	r0, #0
 800fa24:	d1f8      	bne.n	800fa18 <__gethex+0x8c>
 800fa26:	1ba4      	subs	r4, r4, r6
 800fa28:	00a7      	lsls	r7, r4, #2
 800fa2a:	7833      	ldrb	r3, [r6, #0]
 800fa2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fa30:	2b50      	cmp	r3, #80	@ 0x50
 800fa32:	d13e      	bne.n	800fab2 <__gethex+0x126>
 800fa34:	7873      	ldrb	r3, [r6, #1]
 800fa36:	2b2b      	cmp	r3, #43	@ 0x2b
 800fa38:	d033      	beq.n	800faa2 <__gethex+0x116>
 800fa3a:	2b2d      	cmp	r3, #45	@ 0x2d
 800fa3c:	d034      	beq.n	800faa8 <__gethex+0x11c>
 800fa3e:	1c71      	adds	r1, r6, #1
 800fa40:	2400      	movs	r4, #0
 800fa42:	7808      	ldrb	r0, [r1, #0]
 800fa44:	f7ff ff8c 	bl	800f960 <__hexdig_fun>
 800fa48:	1e43      	subs	r3, r0, #1
 800fa4a:	b2db      	uxtb	r3, r3
 800fa4c:	2b18      	cmp	r3, #24
 800fa4e:	d830      	bhi.n	800fab2 <__gethex+0x126>
 800fa50:	f1a0 0210 	sub.w	r2, r0, #16
 800fa54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fa58:	f7ff ff82 	bl	800f960 <__hexdig_fun>
 800fa5c:	f100 3cff 	add.w	ip, r0, #4294967295
 800fa60:	fa5f fc8c 	uxtb.w	ip, ip
 800fa64:	f1bc 0f18 	cmp.w	ip, #24
 800fa68:	f04f 030a 	mov.w	r3, #10
 800fa6c:	d91e      	bls.n	800faac <__gethex+0x120>
 800fa6e:	b104      	cbz	r4, 800fa72 <__gethex+0xe6>
 800fa70:	4252      	negs	r2, r2
 800fa72:	4417      	add	r7, r2
 800fa74:	f8ca 1000 	str.w	r1, [sl]
 800fa78:	b1ed      	cbz	r5, 800fab6 <__gethex+0x12a>
 800fa7a:	f1bb 0f00 	cmp.w	fp, #0
 800fa7e:	bf0c      	ite	eq
 800fa80:	2506      	moveq	r5, #6
 800fa82:	2500      	movne	r5, #0
 800fa84:	4628      	mov	r0, r5
 800fa86:	b005      	add	sp, #20
 800fa88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa8c:	2500      	movs	r5, #0
 800fa8e:	462c      	mov	r4, r5
 800fa90:	e7b0      	b.n	800f9f4 <__gethex+0x68>
 800fa92:	2c00      	cmp	r4, #0
 800fa94:	d1c7      	bne.n	800fa26 <__gethex+0x9a>
 800fa96:	4627      	mov	r7, r4
 800fa98:	e7c7      	b.n	800fa2a <__gethex+0x9e>
 800fa9a:	464e      	mov	r6, r9
 800fa9c:	462f      	mov	r7, r5
 800fa9e:	2501      	movs	r5, #1
 800faa0:	e7c3      	b.n	800fa2a <__gethex+0x9e>
 800faa2:	2400      	movs	r4, #0
 800faa4:	1cb1      	adds	r1, r6, #2
 800faa6:	e7cc      	b.n	800fa42 <__gethex+0xb6>
 800faa8:	2401      	movs	r4, #1
 800faaa:	e7fb      	b.n	800faa4 <__gethex+0x118>
 800faac:	fb03 0002 	mla	r0, r3, r2, r0
 800fab0:	e7ce      	b.n	800fa50 <__gethex+0xc4>
 800fab2:	4631      	mov	r1, r6
 800fab4:	e7de      	b.n	800fa74 <__gethex+0xe8>
 800fab6:	eba6 0309 	sub.w	r3, r6, r9
 800faba:	3b01      	subs	r3, #1
 800fabc:	4629      	mov	r1, r5
 800fabe:	2b07      	cmp	r3, #7
 800fac0:	dc0a      	bgt.n	800fad8 <__gethex+0x14c>
 800fac2:	9801      	ldr	r0, [sp, #4]
 800fac4:	f7fe f9d2 	bl	800de6c <_Balloc>
 800fac8:	4604      	mov	r4, r0
 800faca:	b940      	cbnz	r0, 800fade <__gethex+0x152>
 800facc:	4b5c      	ldr	r3, [pc, #368]	@ (800fc40 <__gethex+0x2b4>)
 800face:	4602      	mov	r2, r0
 800fad0:	21e4      	movs	r1, #228	@ 0xe4
 800fad2:	485c      	ldr	r0, [pc, #368]	@ (800fc44 <__gethex+0x2b8>)
 800fad4:	f7ff fec0 	bl	800f858 <__assert_func>
 800fad8:	3101      	adds	r1, #1
 800fada:	105b      	asrs	r3, r3, #1
 800fadc:	e7ef      	b.n	800fabe <__gethex+0x132>
 800fade:	f100 0a14 	add.w	sl, r0, #20
 800fae2:	2300      	movs	r3, #0
 800fae4:	4655      	mov	r5, sl
 800fae6:	469b      	mov	fp, r3
 800fae8:	45b1      	cmp	r9, r6
 800faea:	d337      	bcc.n	800fb5c <__gethex+0x1d0>
 800faec:	f845 bb04 	str.w	fp, [r5], #4
 800faf0:	eba5 050a 	sub.w	r5, r5, sl
 800faf4:	10ad      	asrs	r5, r5, #2
 800faf6:	6125      	str	r5, [r4, #16]
 800faf8:	4658      	mov	r0, fp
 800fafa:	f7fe faa9 	bl	800e050 <__hi0bits>
 800fafe:	016d      	lsls	r5, r5, #5
 800fb00:	f8d8 6000 	ldr.w	r6, [r8]
 800fb04:	1a2d      	subs	r5, r5, r0
 800fb06:	42b5      	cmp	r5, r6
 800fb08:	dd54      	ble.n	800fbb4 <__gethex+0x228>
 800fb0a:	1bad      	subs	r5, r5, r6
 800fb0c:	4629      	mov	r1, r5
 800fb0e:	4620      	mov	r0, r4
 800fb10:	f7fe fe3d 	bl	800e78e <__any_on>
 800fb14:	4681      	mov	r9, r0
 800fb16:	b178      	cbz	r0, 800fb38 <__gethex+0x1ac>
 800fb18:	1e6b      	subs	r3, r5, #1
 800fb1a:	1159      	asrs	r1, r3, #5
 800fb1c:	f003 021f 	and.w	r2, r3, #31
 800fb20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fb24:	f04f 0901 	mov.w	r9, #1
 800fb28:	fa09 f202 	lsl.w	r2, r9, r2
 800fb2c:	420a      	tst	r2, r1
 800fb2e:	d003      	beq.n	800fb38 <__gethex+0x1ac>
 800fb30:	454b      	cmp	r3, r9
 800fb32:	dc36      	bgt.n	800fba2 <__gethex+0x216>
 800fb34:	f04f 0902 	mov.w	r9, #2
 800fb38:	4629      	mov	r1, r5
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	f7ff febe 	bl	800f8bc <rshift>
 800fb40:	442f      	add	r7, r5
 800fb42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fb46:	42bb      	cmp	r3, r7
 800fb48:	da42      	bge.n	800fbd0 <__gethex+0x244>
 800fb4a:	9801      	ldr	r0, [sp, #4]
 800fb4c:	4621      	mov	r1, r4
 800fb4e:	f7fe f9cd 	bl	800deec <_Bfree>
 800fb52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb54:	2300      	movs	r3, #0
 800fb56:	6013      	str	r3, [r2, #0]
 800fb58:	25a3      	movs	r5, #163	@ 0xa3
 800fb5a:	e793      	b.n	800fa84 <__gethex+0xf8>
 800fb5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fb60:	2a2e      	cmp	r2, #46	@ 0x2e
 800fb62:	d012      	beq.n	800fb8a <__gethex+0x1fe>
 800fb64:	2b20      	cmp	r3, #32
 800fb66:	d104      	bne.n	800fb72 <__gethex+0x1e6>
 800fb68:	f845 bb04 	str.w	fp, [r5], #4
 800fb6c:	f04f 0b00 	mov.w	fp, #0
 800fb70:	465b      	mov	r3, fp
 800fb72:	7830      	ldrb	r0, [r6, #0]
 800fb74:	9303      	str	r3, [sp, #12]
 800fb76:	f7ff fef3 	bl	800f960 <__hexdig_fun>
 800fb7a:	9b03      	ldr	r3, [sp, #12]
 800fb7c:	f000 000f 	and.w	r0, r0, #15
 800fb80:	4098      	lsls	r0, r3
 800fb82:	ea4b 0b00 	orr.w	fp, fp, r0
 800fb86:	3304      	adds	r3, #4
 800fb88:	e7ae      	b.n	800fae8 <__gethex+0x15c>
 800fb8a:	45b1      	cmp	r9, r6
 800fb8c:	d8ea      	bhi.n	800fb64 <__gethex+0x1d8>
 800fb8e:	492b      	ldr	r1, [pc, #172]	@ (800fc3c <__gethex+0x2b0>)
 800fb90:	9303      	str	r3, [sp, #12]
 800fb92:	2201      	movs	r2, #1
 800fb94:	4630      	mov	r0, r6
 800fb96:	f7ff fe43 	bl	800f820 <strncmp>
 800fb9a:	9b03      	ldr	r3, [sp, #12]
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	d1e1      	bne.n	800fb64 <__gethex+0x1d8>
 800fba0:	e7a2      	b.n	800fae8 <__gethex+0x15c>
 800fba2:	1ea9      	subs	r1, r5, #2
 800fba4:	4620      	mov	r0, r4
 800fba6:	f7fe fdf2 	bl	800e78e <__any_on>
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d0c2      	beq.n	800fb34 <__gethex+0x1a8>
 800fbae:	f04f 0903 	mov.w	r9, #3
 800fbb2:	e7c1      	b.n	800fb38 <__gethex+0x1ac>
 800fbb4:	da09      	bge.n	800fbca <__gethex+0x23e>
 800fbb6:	1b75      	subs	r5, r6, r5
 800fbb8:	4621      	mov	r1, r4
 800fbba:	9801      	ldr	r0, [sp, #4]
 800fbbc:	462a      	mov	r2, r5
 800fbbe:	f7fe fbad 	bl	800e31c <__lshift>
 800fbc2:	1b7f      	subs	r7, r7, r5
 800fbc4:	4604      	mov	r4, r0
 800fbc6:	f100 0a14 	add.w	sl, r0, #20
 800fbca:	f04f 0900 	mov.w	r9, #0
 800fbce:	e7b8      	b.n	800fb42 <__gethex+0x1b6>
 800fbd0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fbd4:	42bd      	cmp	r5, r7
 800fbd6:	dd6f      	ble.n	800fcb8 <__gethex+0x32c>
 800fbd8:	1bed      	subs	r5, r5, r7
 800fbda:	42ae      	cmp	r6, r5
 800fbdc:	dc34      	bgt.n	800fc48 <__gethex+0x2bc>
 800fbde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fbe2:	2b02      	cmp	r3, #2
 800fbe4:	d022      	beq.n	800fc2c <__gethex+0x2a0>
 800fbe6:	2b03      	cmp	r3, #3
 800fbe8:	d024      	beq.n	800fc34 <__gethex+0x2a8>
 800fbea:	2b01      	cmp	r3, #1
 800fbec:	d115      	bne.n	800fc1a <__gethex+0x28e>
 800fbee:	42ae      	cmp	r6, r5
 800fbf0:	d113      	bne.n	800fc1a <__gethex+0x28e>
 800fbf2:	2e01      	cmp	r6, #1
 800fbf4:	d10b      	bne.n	800fc0e <__gethex+0x282>
 800fbf6:	9a02      	ldr	r2, [sp, #8]
 800fbf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fbfc:	6013      	str	r3, [r2, #0]
 800fbfe:	2301      	movs	r3, #1
 800fc00:	6123      	str	r3, [r4, #16]
 800fc02:	f8ca 3000 	str.w	r3, [sl]
 800fc06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc08:	2562      	movs	r5, #98	@ 0x62
 800fc0a:	601c      	str	r4, [r3, #0]
 800fc0c:	e73a      	b.n	800fa84 <__gethex+0xf8>
 800fc0e:	1e71      	subs	r1, r6, #1
 800fc10:	4620      	mov	r0, r4
 800fc12:	f7fe fdbc 	bl	800e78e <__any_on>
 800fc16:	2800      	cmp	r0, #0
 800fc18:	d1ed      	bne.n	800fbf6 <__gethex+0x26a>
 800fc1a:	9801      	ldr	r0, [sp, #4]
 800fc1c:	4621      	mov	r1, r4
 800fc1e:	f7fe f965 	bl	800deec <_Bfree>
 800fc22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc24:	2300      	movs	r3, #0
 800fc26:	6013      	str	r3, [r2, #0]
 800fc28:	2550      	movs	r5, #80	@ 0x50
 800fc2a:	e72b      	b.n	800fa84 <__gethex+0xf8>
 800fc2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d1f3      	bne.n	800fc1a <__gethex+0x28e>
 800fc32:	e7e0      	b.n	800fbf6 <__gethex+0x26a>
 800fc34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d1dd      	bne.n	800fbf6 <__gethex+0x26a>
 800fc3a:	e7ee      	b.n	800fc1a <__gethex+0x28e>
 800fc3c:	08011408 	.word	0x08011408
 800fc40:	080112a2 	.word	0x080112a2
 800fc44:	080114b5 	.word	0x080114b5
 800fc48:	1e6f      	subs	r7, r5, #1
 800fc4a:	f1b9 0f00 	cmp.w	r9, #0
 800fc4e:	d130      	bne.n	800fcb2 <__gethex+0x326>
 800fc50:	b127      	cbz	r7, 800fc5c <__gethex+0x2d0>
 800fc52:	4639      	mov	r1, r7
 800fc54:	4620      	mov	r0, r4
 800fc56:	f7fe fd9a 	bl	800e78e <__any_on>
 800fc5a:	4681      	mov	r9, r0
 800fc5c:	117a      	asrs	r2, r7, #5
 800fc5e:	2301      	movs	r3, #1
 800fc60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fc64:	f007 071f 	and.w	r7, r7, #31
 800fc68:	40bb      	lsls	r3, r7
 800fc6a:	4213      	tst	r3, r2
 800fc6c:	4629      	mov	r1, r5
 800fc6e:	4620      	mov	r0, r4
 800fc70:	bf18      	it	ne
 800fc72:	f049 0902 	orrne.w	r9, r9, #2
 800fc76:	f7ff fe21 	bl	800f8bc <rshift>
 800fc7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fc7e:	1b76      	subs	r6, r6, r5
 800fc80:	2502      	movs	r5, #2
 800fc82:	f1b9 0f00 	cmp.w	r9, #0
 800fc86:	d047      	beq.n	800fd18 <__gethex+0x38c>
 800fc88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc8c:	2b02      	cmp	r3, #2
 800fc8e:	d015      	beq.n	800fcbc <__gethex+0x330>
 800fc90:	2b03      	cmp	r3, #3
 800fc92:	d017      	beq.n	800fcc4 <__gethex+0x338>
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d109      	bne.n	800fcac <__gethex+0x320>
 800fc98:	f019 0f02 	tst.w	r9, #2
 800fc9c:	d006      	beq.n	800fcac <__gethex+0x320>
 800fc9e:	f8da 3000 	ldr.w	r3, [sl]
 800fca2:	ea49 0903 	orr.w	r9, r9, r3
 800fca6:	f019 0f01 	tst.w	r9, #1
 800fcaa:	d10e      	bne.n	800fcca <__gethex+0x33e>
 800fcac:	f045 0510 	orr.w	r5, r5, #16
 800fcb0:	e032      	b.n	800fd18 <__gethex+0x38c>
 800fcb2:	f04f 0901 	mov.w	r9, #1
 800fcb6:	e7d1      	b.n	800fc5c <__gethex+0x2d0>
 800fcb8:	2501      	movs	r5, #1
 800fcba:	e7e2      	b.n	800fc82 <__gethex+0x2f6>
 800fcbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcbe:	f1c3 0301 	rsb	r3, r3, #1
 800fcc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fcc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d0f0      	beq.n	800fcac <__gethex+0x320>
 800fcca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fcce:	f104 0314 	add.w	r3, r4, #20
 800fcd2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fcd6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fcda:	f04f 0c00 	mov.w	ip, #0
 800fcde:	4618      	mov	r0, r3
 800fce0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fce4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fce8:	d01b      	beq.n	800fd22 <__gethex+0x396>
 800fcea:	3201      	adds	r2, #1
 800fcec:	6002      	str	r2, [r0, #0]
 800fcee:	2d02      	cmp	r5, #2
 800fcf0:	f104 0314 	add.w	r3, r4, #20
 800fcf4:	d13c      	bne.n	800fd70 <__gethex+0x3e4>
 800fcf6:	f8d8 2000 	ldr.w	r2, [r8]
 800fcfa:	3a01      	subs	r2, #1
 800fcfc:	42b2      	cmp	r2, r6
 800fcfe:	d109      	bne.n	800fd14 <__gethex+0x388>
 800fd00:	1171      	asrs	r1, r6, #5
 800fd02:	2201      	movs	r2, #1
 800fd04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd08:	f006 061f 	and.w	r6, r6, #31
 800fd0c:	fa02 f606 	lsl.w	r6, r2, r6
 800fd10:	421e      	tst	r6, r3
 800fd12:	d13a      	bne.n	800fd8a <__gethex+0x3fe>
 800fd14:	f045 0520 	orr.w	r5, r5, #32
 800fd18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd1a:	601c      	str	r4, [r3, #0]
 800fd1c:	9b02      	ldr	r3, [sp, #8]
 800fd1e:	601f      	str	r7, [r3, #0]
 800fd20:	e6b0      	b.n	800fa84 <__gethex+0xf8>
 800fd22:	4299      	cmp	r1, r3
 800fd24:	f843 cc04 	str.w	ip, [r3, #-4]
 800fd28:	d8d9      	bhi.n	800fcde <__gethex+0x352>
 800fd2a:	68a3      	ldr	r3, [r4, #8]
 800fd2c:	459b      	cmp	fp, r3
 800fd2e:	db17      	blt.n	800fd60 <__gethex+0x3d4>
 800fd30:	6861      	ldr	r1, [r4, #4]
 800fd32:	9801      	ldr	r0, [sp, #4]
 800fd34:	3101      	adds	r1, #1
 800fd36:	f7fe f899 	bl	800de6c <_Balloc>
 800fd3a:	4681      	mov	r9, r0
 800fd3c:	b918      	cbnz	r0, 800fd46 <__gethex+0x3ba>
 800fd3e:	4b1a      	ldr	r3, [pc, #104]	@ (800fda8 <__gethex+0x41c>)
 800fd40:	4602      	mov	r2, r0
 800fd42:	2184      	movs	r1, #132	@ 0x84
 800fd44:	e6c5      	b.n	800fad2 <__gethex+0x146>
 800fd46:	6922      	ldr	r2, [r4, #16]
 800fd48:	3202      	adds	r2, #2
 800fd4a:	f104 010c 	add.w	r1, r4, #12
 800fd4e:	0092      	lsls	r2, r2, #2
 800fd50:	300c      	adds	r0, #12
 800fd52:	f7fd f9de 	bl	800d112 <memcpy>
 800fd56:	4621      	mov	r1, r4
 800fd58:	9801      	ldr	r0, [sp, #4]
 800fd5a:	f7fe f8c7 	bl	800deec <_Bfree>
 800fd5e:	464c      	mov	r4, r9
 800fd60:	6923      	ldr	r3, [r4, #16]
 800fd62:	1c5a      	adds	r2, r3, #1
 800fd64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fd68:	6122      	str	r2, [r4, #16]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	615a      	str	r2, [r3, #20]
 800fd6e:	e7be      	b.n	800fcee <__gethex+0x362>
 800fd70:	6922      	ldr	r2, [r4, #16]
 800fd72:	455a      	cmp	r2, fp
 800fd74:	dd0b      	ble.n	800fd8e <__gethex+0x402>
 800fd76:	2101      	movs	r1, #1
 800fd78:	4620      	mov	r0, r4
 800fd7a:	f7ff fd9f 	bl	800f8bc <rshift>
 800fd7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd82:	3701      	adds	r7, #1
 800fd84:	42bb      	cmp	r3, r7
 800fd86:	f6ff aee0 	blt.w	800fb4a <__gethex+0x1be>
 800fd8a:	2501      	movs	r5, #1
 800fd8c:	e7c2      	b.n	800fd14 <__gethex+0x388>
 800fd8e:	f016 061f 	ands.w	r6, r6, #31
 800fd92:	d0fa      	beq.n	800fd8a <__gethex+0x3fe>
 800fd94:	4453      	add	r3, sl
 800fd96:	f1c6 0620 	rsb	r6, r6, #32
 800fd9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fd9e:	f7fe f957 	bl	800e050 <__hi0bits>
 800fda2:	42b0      	cmp	r0, r6
 800fda4:	dbe7      	blt.n	800fd76 <__gethex+0x3ea>
 800fda6:	e7f0      	b.n	800fd8a <__gethex+0x3fe>
 800fda8:	080112a2 	.word	0x080112a2

0800fdac <L_shift>:
 800fdac:	f1c2 0208 	rsb	r2, r2, #8
 800fdb0:	0092      	lsls	r2, r2, #2
 800fdb2:	b570      	push	{r4, r5, r6, lr}
 800fdb4:	f1c2 0620 	rsb	r6, r2, #32
 800fdb8:	6843      	ldr	r3, [r0, #4]
 800fdba:	6804      	ldr	r4, [r0, #0]
 800fdbc:	fa03 f506 	lsl.w	r5, r3, r6
 800fdc0:	432c      	orrs	r4, r5
 800fdc2:	40d3      	lsrs	r3, r2
 800fdc4:	6004      	str	r4, [r0, #0]
 800fdc6:	f840 3f04 	str.w	r3, [r0, #4]!
 800fdca:	4288      	cmp	r0, r1
 800fdcc:	d3f4      	bcc.n	800fdb8 <L_shift+0xc>
 800fdce:	bd70      	pop	{r4, r5, r6, pc}

0800fdd0 <__match>:
 800fdd0:	b530      	push	{r4, r5, lr}
 800fdd2:	6803      	ldr	r3, [r0, #0]
 800fdd4:	3301      	adds	r3, #1
 800fdd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fdda:	b914      	cbnz	r4, 800fde2 <__match+0x12>
 800fddc:	6003      	str	r3, [r0, #0]
 800fdde:	2001      	movs	r0, #1
 800fde0:	bd30      	pop	{r4, r5, pc}
 800fde2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fde6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800fdea:	2d19      	cmp	r5, #25
 800fdec:	bf98      	it	ls
 800fdee:	3220      	addls	r2, #32
 800fdf0:	42a2      	cmp	r2, r4
 800fdf2:	d0f0      	beq.n	800fdd6 <__match+0x6>
 800fdf4:	2000      	movs	r0, #0
 800fdf6:	e7f3      	b.n	800fde0 <__match+0x10>

0800fdf8 <__hexnan>:
 800fdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdfc:	680b      	ldr	r3, [r1, #0]
 800fdfe:	6801      	ldr	r1, [r0, #0]
 800fe00:	115e      	asrs	r6, r3, #5
 800fe02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fe06:	f013 031f 	ands.w	r3, r3, #31
 800fe0a:	b087      	sub	sp, #28
 800fe0c:	bf18      	it	ne
 800fe0e:	3604      	addne	r6, #4
 800fe10:	2500      	movs	r5, #0
 800fe12:	1f37      	subs	r7, r6, #4
 800fe14:	4682      	mov	sl, r0
 800fe16:	4690      	mov	r8, r2
 800fe18:	9301      	str	r3, [sp, #4]
 800fe1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800fe1e:	46b9      	mov	r9, r7
 800fe20:	463c      	mov	r4, r7
 800fe22:	9502      	str	r5, [sp, #8]
 800fe24:	46ab      	mov	fp, r5
 800fe26:	784a      	ldrb	r2, [r1, #1]
 800fe28:	1c4b      	adds	r3, r1, #1
 800fe2a:	9303      	str	r3, [sp, #12]
 800fe2c:	b342      	cbz	r2, 800fe80 <__hexnan+0x88>
 800fe2e:	4610      	mov	r0, r2
 800fe30:	9105      	str	r1, [sp, #20]
 800fe32:	9204      	str	r2, [sp, #16]
 800fe34:	f7ff fd94 	bl	800f960 <__hexdig_fun>
 800fe38:	2800      	cmp	r0, #0
 800fe3a:	d151      	bne.n	800fee0 <__hexnan+0xe8>
 800fe3c:	9a04      	ldr	r2, [sp, #16]
 800fe3e:	9905      	ldr	r1, [sp, #20]
 800fe40:	2a20      	cmp	r2, #32
 800fe42:	d818      	bhi.n	800fe76 <__hexnan+0x7e>
 800fe44:	9b02      	ldr	r3, [sp, #8]
 800fe46:	459b      	cmp	fp, r3
 800fe48:	dd13      	ble.n	800fe72 <__hexnan+0x7a>
 800fe4a:	454c      	cmp	r4, r9
 800fe4c:	d206      	bcs.n	800fe5c <__hexnan+0x64>
 800fe4e:	2d07      	cmp	r5, #7
 800fe50:	dc04      	bgt.n	800fe5c <__hexnan+0x64>
 800fe52:	462a      	mov	r2, r5
 800fe54:	4649      	mov	r1, r9
 800fe56:	4620      	mov	r0, r4
 800fe58:	f7ff ffa8 	bl	800fdac <L_shift>
 800fe5c:	4544      	cmp	r4, r8
 800fe5e:	d952      	bls.n	800ff06 <__hexnan+0x10e>
 800fe60:	2300      	movs	r3, #0
 800fe62:	f1a4 0904 	sub.w	r9, r4, #4
 800fe66:	f844 3c04 	str.w	r3, [r4, #-4]
 800fe6a:	f8cd b008 	str.w	fp, [sp, #8]
 800fe6e:	464c      	mov	r4, r9
 800fe70:	461d      	mov	r5, r3
 800fe72:	9903      	ldr	r1, [sp, #12]
 800fe74:	e7d7      	b.n	800fe26 <__hexnan+0x2e>
 800fe76:	2a29      	cmp	r2, #41	@ 0x29
 800fe78:	d157      	bne.n	800ff2a <__hexnan+0x132>
 800fe7a:	3102      	adds	r1, #2
 800fe7c:	f8ca 1000 	str.w	r1, [sl]
 800fe80:	f1bb 0f00 	cmp.w	fp, #0
 800fe84:	d051      	beq.n	800ff2a <__hexnan+0x132>
 800fe86:	454c      	cmp	r4, r9
 800fe88:	d206      	bcs.n	800fe98 <__hexnan+0xa0>
 800fe8a:	2d07      	cmp	r5, #7
 800fe8c:	dc04      	bgt.n	800fe98 <__hexnan+0xa0>
 800fe8e:	462a      	mov	r2, r5
 800fe90:	4649      	mov	r1, r9
 800fe92:	4620      	mov	r0, r4
 800fe94:	f7ff ff8a 	bl	800fdac <L_shift>
 800fe98:	4544      	cmp	r4, r8
 800fe9a:	d936      	bls.n	800ff0a <__hexnan+0x112>
 800fe9c:	f1a8 0204 	sub.w	r2, r8, #4
 800fea0:	4623      	mov	r3, r4
 800fea2:	f853 1b04 	ldr.w	r1, [r3], #4
 800fea6:	f842 1f04 	str.w	r1, [r2, #4]!
 800feaa:	429f      	cmp	r7, r3
 800feac:	d2f9      	bcs.n	800fea2 <__hexnan+0xaa>
 800feae:	1b3b      	subs	r3, r7, r4
 800feb0:	f023 0303 	bic.w	r3, r3, #3
 800feb4:	3304      	adds	r3, #4
 800feb6:	3401      	adds	r4, #1
 800feb8:	3e03      	subs	r6, #3
 800feba:	42b4      	cmp	r4, r6
 800febc:	bf88      	it	hi
 800febe:	2304      	movhi	r3, #4
 800fec0:	4443      	add	r3, r8
 800fec2:	2200      	movs	r2, #0
 800fec4:	f843 2b04 	str.w	r2, [r3], #4
 800fec8:	429f      	cmp	r7, r3
 800feca:	d2fb      	bcs.n	800fec4 <__hexnan+0xcc>
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	b91b      	cbnz	r3, 800fed8 <__hexnan+0xe0>
 800fed0:	4547      	cmp	r7, r8
 800fed2:	d128      	bne.n	800ff26 <__hexnan+0x12e>
 800fed4:	2301      	movs	r3, #1
 800fed6:	603b      	str	r3, [r7, #0]
 800fed8:	2005      	movs	r0, #5
 800feda:	b007      	add	sp, #28
 800fedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee0:	3501      	adds	r5, #1
 800fee2:	2d08      	cmp	r5, #8
 800fee4:	f10b 0b01 	add.w	fp, fp, #1
 800fee8:	dd06      	ble.n	800fef8 <__hexnan+0x100>
 800feea:	4544      	cmp	r4, r8
 800feec:	d9c1      	bls.n	800fe72 <__hexnan+0x7a>
 800feee:	2300      	movs	r3, #0
 800fef0:	f844 3c04 	str.w	r3, [r4, #-4]
 800fef4:	2501      	movs	r5, #1
 800fef6:	3c04      	subs	r4, #4
 800fef8:	6822      	ldr	r2, [r4, #0]
 800fefa:	f000 000f 	and.w	r0, r0, #15
 800fefe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ff02:	6020      	str	r0, [r4, #0]
 800ff04:	e7b5      	b.n	800fe72 <__hexnan+0x7a>
 800ff06:	2508      	movs	r5, #8
 800ff08:	e7b3      	b.n	800fe72 <__hexnan+0x7a>
 800ff0a:	9b01      	ldr	r3, [sp, #4]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d0dd      	beq.n	800fecc <__hexnan+0xd4>
 800ff10:	f1c3 0320 	rsb	r3, r3, #32
 800ff14:	f04f 32ff 	mov.w	r2, #4294967295
 800ff18:	40da      	lsrs	r2, r3
 800ff1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ff1e:	4013      	ands	r3, r2
 800ff20:	f846 3c04 	str.w	r3, [r6, #-4]
 800ff24:	e7d2      	b.n	800fecc <__hexnan+0xd4>
 800ff26:	3f04      	subs	r7, #4
 800ff28:	e7d0      	b.n	800fecc <__hexnan+0xd4>
 800ff2a:	2004      	movs	r0, #4
 800ff2c:	e7d5      	b.n	800feda <__hexnan+0xe2>

0800ff2e <__ascii_mbtowc>:
 800ff2e:	b082      	sub	sp, #8
 800ff30:	b901      	cbnz	r1, 800ff34 <__ascii_mbtowc+0x6>
 800ff32:	a901      	add	r1, sp, #4
 800ff34:	b142      	cbz	r2, 800ff48 <__ascii_mbtowc+0x1a>
 800ff36:	b14b      	cbz	r3, 800ff4c <__ascii_mbtowc+0x1e>
 800ff38:	7813      	ldrb	r3, [r2, #0]
 800ff3a:	600b      	str	r3, [r1, #0]
 800ff3c:	7812      	ldrb	r2, [r2, #0]
 800ff3e:	1e10      	subs	r0, r2, #0
 800ff40:	bf18      	it	ne
 800ff42:	2001      	movne	r0, #1
 800ff44:	b002      	add	sp, #8
 800ff46:	4770      	bx	lr
 800ff48:	4610      	mov	r0, r2
 800ff4a:	e7fb      	b.n	800ff44 <__ascii_mbtowc+0x16>
 800ff4c:	f06f 0001 	mvn.w	r0, #1
 800ff50:	e7f8      	b.n	800ff44 <__ascii_mbtowc+0x16>

0800ff52 <_realloc_r>:
 800ff52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff56:	4680      	mov	r8, r0
 800ff58:	4615      	mov	r5, r2
 800ff5a:	460c      	mov	r4, r1
 800ff5c:	b921      	cbnz	r1, 800ff68 <_realloc_r+0x16>
 800ff5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff62:	4611      	mov	r1, r2
 800ff64:	f7fb bf90 	b.w	800be88 <_malloc_r>
 800ff68:	b92a      	cbnz	r2, 800ff76 <_realloc_r+0x24>
 800ff6a:	f7fd ff35 	bl	800ddd8 <_free_r>
 800ff6e:	2400      	movs	r4, #0
 800ff70:	4620      	mov	r0, r4
 800ff72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff76:	f000 f840 	bl	800fffa <_malloc_usable_size_r>
 800ff7a:	4285      	cmp	r5, r0
 800ff7c:	4606      	mov	r6, r0
 800ff7e:	d802      	bhi.n	800ff86 <_realloc_r+0x34>
 800ff80:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ff84:	d8f4      	bhi.n	800ff70 <_realloc_r+0x1e>
 800ff86:	4629      	mov	r1, r5
 800ff88:	4640      	mov	r0, r8
 800ff8a:	f7fb ff7d 	bl	800be88 <_malloc_r>
 800ff8e:	4607      	mov	r7, r0
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d0ec      	beq.n	800ff6e <_realloc_r+0x1c>
 800ff94:	42b5      	cmp	r5, r6
 800ff96:	462a      	mov	r2, r5
 800ff98:	4621      	mov	r1, r4
 800ff9a:	bf28      	it	cs
 800ff9c:	4632      	movcs	r2, r6
 800ff9e:	f7fd f8b8 	bl	800d112 <memcpy>
 800ffa2:	4621      	mov	r1, r4
 800ffa4:	4640      	mov	r0, r8
 800ffa6:	f7fd ff17 	bl	800ddd8 <_free_r>
 800ffaa:	463c      	mov	r4, r7
 800ffac:	e7e0      	b.n	800ff70 <_realloc_r+0x1e>

0800ffae <__ascii_wctomb>:
 800ffae:	4603      	mov	r3, r0
 800ffb0:	4608      	mov	r0, r1
 800ffb2:	b141      	cbz	r1, 800ffc6 <__ascii_wctomb+0x18>
 800ffb4:	2aff      	cmp	r2, #255	@ 0xff
 800ffb6:	d904      	bls.n	800ffc2 <__ascii_wctomb+0x14>
 800ffb8:	228a      	movs	r2, #138	@ 0x8a
 800ffba:	601a      	str	r2, [r3, #0]
 800ffbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ffc0:	4770      	bx	lr
 800ffc2:	700a      	strb	r2, [r1, #0]
 800ffc4:	2001      	movs	r0, #1
 800ffc6:	4770      	bx	lr

0800ffc8 <fiprintf>:
 800ffc8:	b40e      	push	{r1, r2, r3}
 800ffca:	b503      	push	{r0, r1, lr}
 800ffcc:	4601      	mov	r1, r0
 800ffce:	ab03      	add	r3, sp, #12
 800ffd0:	4805      	ldr	r0, [pc, #20]	@ (800ffe8 <fiprintf+0x20>)
 800ffd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffd6:	6800      	ldr	r0, [r0, #0]
 800ffd8:	9301      	str	r3, [sp, #4]
 800ffda:	f000 f83f 	bl	801005c <_vfiprintf_r>
 800ffde:	b002      	add	sp, #8
 800ffe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffe4:	b003      	add	sp, #12
 800ffe6:	4770      	bx	lr
 800ffe8:	20000024 	.word	0x20000024

0800ffec <abort>:
 800ffec:	b508      	push	{r3, lr}
 800ffee:	2006      	movs	r0, #6
 800fff0:	f000 fa08 	bl	8010404 <raise>
 800fff4:	2001      	movs	r0, #1
 800fff6:	f7f3 fe3f 	bl	8003c78 <_exit>

0800fffa <_malloc_usable_size_r>:
 800fffa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fffe:	1f18      	subs	r0, r3, #4
 8010000:	2b00      	cmp	r3, #0
 8010002:	bfbc      	itt	lt
 8010004:	580b      	ldrlt	r3, [r1, r0]
 8010006:	18c0      	addlt	r0, r0, r3
 8010008:	4770      	bx	lr

0801000a <__sfputc_r>:
 801000a:	6893      	ldr	r3, [r2, #8]
 801000c:	3b01      	subs	r3, #1
 801000e:	2b00      	cmp	r3, #0
 8010010:	b410      	push	{r4}
 8010012:	6093      	str	r3, [r2, #8]
 8010014:	da08      	bge.n	8010028 <__sfputc_r+0x1e>
 8010016:	6994      	ldr	r4, [r2, #24]
 8010018:	42a3      	cmp	r3, r4
 801001a:	db01      	blt.n	8010020 <__sfputc_r+0x16>
 801001c:	290a      	cmp	r1, #10
 801001e:	d103      	bne.n	8010028 <__sfputc_r+0x1e>
 8010020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010024:	f000 b932 	b.w	801028c <__swbuf_r>
 8010028:	6813      	ldr	r3, [r2, #0]
 801002a:	1c58      	adds	r0, r3, #1
 801002c:	6010      	str	r0, [r2, #0]
 801002e:	7019      	strb	r1, [r3, #0]
 8010030:	4608      	mov	r0, r1
 8010032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010036:	4770      	bx	lr

08010038 <__sfputs_r>:
 8010038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801003a:	4606      	mov	r6, r0
 801003c:	460f      	mov	r7, r1
 801003e:	4614      	mov	r4, r2
 8010040:	18d5      	adds	r5, r2, r3
 8010042:	42ac      	cmp	r4, r5
 8010044:	d101      	bne.n	801004a <__sfputs_r+0x12>
 8010046:	2000      	movs	r0, #0
 8010048:	e007      	b.n	801005a <__sfputs_r+0x22>
 801004a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801004e:	463a      	mov	r2, r7
 8010050:	4630      	mov	r0, r6
 8010052:	f7ff ffda 	bl	801000a <__sfputc_r>
 8010056:	1c43      	adds	r3, r0, #1
 8010058:	d1f3      	bne.n	8010042 <__sfputs_r+0xa>
 801005a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801005c <_vfiprintf_r>:
 801005c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010060:	460d      	mov	r5, r1
 8010062:	b09d      	sub	sp, #116	@ 0x74
 8010064:	4614      	mov	r4, r2
 8010066:	4698      	mov	r8, r3
 8010068:	4606      	mov	r6, r0
 801006a:	b118      	cbz	r0, 8010074 <_vfiprintf_r+0x18>
 801006c:	6a03      	ldr	r3, [r0, #32]
 801006e:	b90b      	cbnz	r3, 8010074 <_vfiprintf_r+0x18>
 8010070:	f7fc ff14 	bl	800ce9c <__sinit>
 8010074:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010076:	07d9      	lsls	r1, r3, #31
 8010078:	d405      	bmi.n	8010086 <_vfiprintf_r+0x2a>
 801007a:	89ab      	ldrh	r3, [r5, #12]
 801007c:	059a      	lsls	r2, r3, #22
 801007e:	d402      	bmi.n	8010086 <_vfiprintf_r+0x2a>
 8010080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010082:	f7fd f844 	bl	800d10e <__retarget_lock_acquire_recursive>
 8010086:	89ab      	ldrh	r3, [r5, #12]
 8010088:	071b      	lsls	r3, r3, #28
 801008a:	d501      	bpl.n	8010090 <_vfiprintf_r+0x34>
 801008c:	692b      	ldr	r3, [r5, #16]
 801008e:	b99b      	cbnz	r3, 80100b8 <_vfiprintf_r+0x5c>
 8010090:	4629      	mov	r1, r5
 8010092:	4630      	mov	r0, r6
 8010094:	f000 f938 	bl	8010308 <__swsetup_r>
 8010098:	b170      	cbz	r0, 80100b8 <_vfiprintf_r+0x5c>
 801009a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801009c:	07dc      	lsls	r4, r3, #31
 801009e:	d504      	bpl.n	80100aa <_vfiprintf_r+0x4e>
 80100a0:	f04f 30ff 	mov.w	r0, #4294967295
 80100a4:	b01d      	add	sp, #116	@ 0x74
 80100a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100aa:	89ab      	ldrh	r3, [r5, #12]
 80100ac:	0598      	lsls	r0, r3, #22
 80100ae:	d4f7      	bmi.n	80100a0 <_vfiprintf_r+0x44>
 80100b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100b2:	f7fd f82d 	bl	800d110 <__retarget_lock_release_recursive>
 80100b6:	e7f3      	b.n	80100a0 <_vfiprintf_r+0x44>
 80100b8:	2300      	movs	r3, #0
 80100ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80100bc:	2320      	movs	r3, #32
 80100be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80100c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80100c6:	2330      	movs	r3, #48	@ 0x30
 80100c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010278 <_vfiprintf_r+0x21c>
 80100cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80100d0:	f04f 0901 	mov.w	r9, #1
 80100d4:	4623      	mov	r3, r4
 80100d6:	469a      	mov	sl, r3
 80100d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100dc:	b10a      	cbz	r2, 80100e2 <_vfiprintf_r+0x86>
 80100de:	2a25      	cmp	r2, #37	@ 0x25
 80100e0:	d1f9      	bne.n	80100d6 <_vfiprintf_r+0x7a>
 80100e2:	ebba 0b04 	subs.w	fp, sl, r4
 80100e6:	d00b      	beq.n	8010100 <_vfiprintf_r+0xa4>
 80100e8:	465b      	mov	r3, fp
 80100ea:	4622      	mov	r2, r4
 80100ec:	4629      	mov	r1, r5
 80100ee:	4630      	mov	r0, r6
 80100f0:	f7ff ffa2 	bl	8010038 <__sfputs_r>
 80100f4:	3001      	adds	r0, #1
 80100f6:	f000 80a7 	beq.w	8010248 <_vfiprintf_r+0x1ec>
 80100fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100fc:	445a      	add	r2, fp
 80100fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8010100:	f89a 3000 	ldrb.w	r3, [sl]
 8010104:	2b00      	cmp	r3, #0
 8010106:	f000 809f 	beq.w	8010248 <_vfiprintf_r+0x1ec>
 801010a:	2300      	movs	r3, #0
 801010c:	f04f 32ff 	mov.w	r2, #4294967295
 8010110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010114:	f10a 0a01 	add.w	sl, sl, #1
 8010118:	9304      	str	r3, [sp, #16]
 801011a:	9307      	str	r3, [sp, #28]
 801011c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010120:	931a      	str	r3, [sp, #104]	@ 0x68
 8010122:	4654      	mov	r4, sl
 8010124:	2205      	movs	r2, #5
 8010126:	f814 1b01 	ldrb.w	r1, [r4], #1
 801012a:	4853      	ldr	r0, [pc, #332]	@ (8010278 <_vfiprintf_r+0x21c>)
 801012c:	f7f0 f850 	bl	80001d0 <memchr>
 8010130:	9a04      	ldr	r2, [sp, #16]
 8010132:	b9d8      	cbnz	r0, 801016c <_vfiprintf_r+0x110>
 8010134:	06d1      	lsls	r1, r2, #27
 8010136:	bf44      	itt	mi
 8010138:	2320      	movmi	r3, #32
 801013a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801013e:	0713      	lsls	r3, r2, #28
 8010140:	bf44      	itt	mi
 8010142:	232b      	movmi	r3, #43	@ 0x2b
 8010144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010148:	f89a 3000 	ldrb.w	r3, [sl]
 801014c:	2b2a      	cmp	r3, #42	@ 0x2a
 801014e:	d015      	beq.n	801017c <_vfiprintf_r+0x120>
 8010150:	9a07      	ldr	r2, [sp, #28]
 8010152:	4654      	mov	r4, sl
 8010154:	2000      	movs	r0, #0
 8010156:	f04f 0c0a 	mov.w	ip, #10
 801015a:	4621      	mov	r1, r4
 801015c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010160:	3b30      	subs	r3, #48	@ 0x30
 8010162:	2b09      	cmp	r3, #9
 8010164:	d94b      	bls.n	80101fe <_vfiprintf_r+0x1a2>
 8010166:	b1b0      	cbz	r0, 8010196 <_vfiprintf_r+0x13a>
 8010168:	9207      	str	r2, [sp, #28]
 801016a:	e014      	b.n	8010196 <_vfiprintf_r+0x13a>
 801016c:	eba0 0308 	sub.w	r3, r0, r8
 8010170:	fa09 f303 	lsl.w	r3, r9, r3
 8010174:	4313      	orrs	r3, r2
 8010176:	9304      	str	r3, [sp, #16]
 8010178:	46a2      	mov	sl, r4
 801017a:	e7d2      	b.n	8010122 <_vfiprintf_r+0xc6>
 801017c:	9b03      	ldr	r3, [sp, #12]
 801017e:	1d19      	adds	r1, r3, #4
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	9103      	str	r1, [sp, #12]
 8010184:	2b00      	cmp	r3, #0
 8010186:	bfbb      	ittet	lt
 8010188:	425b      	neglt	r3, r3
 801018a:	f042 0202 	orrlt.w	r2, r2, #2
 801018e:	9307      	strge	r3, [sp, #28]
 8010190:	9307      	strlt	r3, [sp, #28]
 8010192:	bfb8      	it	lt
 8010194:	9204      	strlt	r2, [sp, #16]
 8010196:	7823      	ldrb	r3, [r4, #0]
 8010198:	2b2e      	cmp	r3, #46	@ 0x2e
 801019a:	d10a      	bne.n	80101b2 <_vfiprintf_r+0x156>
 801019c:	7863      	ldrb	r3, [r4, #1]
 801019e:	2b2a      	cmp	r3, #42	@ 0x2a
 80101a0:	d132      	bne.n	8010208 <_vfiprintf_r+0x1ac>
 80101a2:	9b03      	ldr	r3, [sp, #12]
 80101a4:	1d1a      	adds	r2, r3, #4
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	9203      	str	r2, [sp, #12]
 80101aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80101ae:	3402      	adds	r4, #2
 80101b0:	9305      	str	r3, [sp, #20]
 80101b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010288 <_vfiprintf_r+0x22c>
 80101b6:	7821      	ldrb	r1, [r4, #0]
 80101b8:	2203      	movs	r2, #3
 80101ba:	4650      	mov	r0, sl
 80101bc:	f7f0 f808 	bl	80001d0 <memchr>
 80101c0:	b138      	cbz	r0, 80101d2 <_vfiprintf_r+0x176>
 80101c2:	9b04      	ldr	r3, [sp, #16]
 80101c4:	eba0 000a 	sub.w	r0, r0, sl
 80101c8:	2240      	movs	r2, #64	@ 0x40
 80101ca:	4082      	lsls	r2, r0
 80101cc:	4313      	orrs	r3, r2
 80101ce:	3401      	adds	r4, #1
 80101d0:	9304      	str	r3, [sp, #16]
 80101d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101d6:	4829      	ldr	r0, [pc, #164]	@ (801027c <_vfiprintf_r+0x220>)
 80101d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80101dc:	2206      	movs	r2, #6
 80101de:	f7ef fff7 	bl	80001d0 <memchr>
 80101e2:	2800      	cmp	r0, #0
 80101e4:	d03f      	beq.n	8010266 <_vfiprintf_r+0x20a>
 80101e6:	4b26      	ldr	r3, [pc, #152]	@ (8010280 <_vfiprintf_r+0x224>)
 80101e8:	bb1b      	cbnz	r3, 8010232 <_vfiprintf_r+0x1d6>
 80101ea:	9b03      	ldr	r3, [sp, #12]
 80101ec:	3307      	adds	r3, #7
 80101ee:	f023 0307 	bic.w	r3, r3, #7
 80101f2:	3308      	adds	r3, #8
 80101f4:	9303      	str	r3, [sp, #12]
 80101f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101f8:	443b      	add	r3, r7
 80101fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80101fc:	e76a      	b.n	80100d4 <_vfiprintf_r+0x78>
 80101fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010202:	460c      	mov	r4, r1
 8010204:	2001      	movs	r0, #1
 8010206:	e7a8      	b.n	801015a <_vfiprintf_r+0xfe>
 8010208:	2300      	movs	r3, #0
 801020a:	3401      	adds	r4, #1
 801020c:	9305      	str	r3, [sp, #20]
 801020e:	4619      	mov	r1, r3
 8010210:	f04f 0c0a 	mov.w	ip, #10
 8010214:	4620      	mov	r0, r4
 8010216:	f810 2b01 	ldrb.w	r2, [r0], #1
 801021a:	3a30      	subs	r2, #48	@ 0x30
 801021c:	2a09      	cmp	r2, #9
 801021e:	d903      	bls.n	8010228 <_vfiprintf_r+0x1cc>
 8010220:	2b00      	cmp	r3, #0
 8010222:	d0c6      	beq.n	80101b2 <_vfiprintf_r+0x156>
 8010224:	9105      	str	r1, [sp, #20]
 8010226:	e7c4      	b.n	80101b2 <_vfiprintf_r+0x156>
 8010228:	fb0c 2101 	mla	r1, ip, r1, r2
 801022c:	4604      	mov	r4, r0
 801022e:	2301      	movs	r3, #1
 8010230:	e7f0      	b.n	8010214 <_vfiprintf_r+0x1b8>
 8010232:	ab03      	add	r3, sp, #12
 8010234:	9300      	str	r3, [sp, #0]
 8010236:	462a      	mov	r2, r5
 8010238:	4b12      	ldr	r3, [pc, #72]	@ (8010284 <_vfiprintf_r+0x228>)
 801023a:	a904      	add	r1, sp, #16
 801023c:	4630      	mov	r0, r6
 801023e:	f7fb ffd5 	bl	800c1ec <_printf_float>
 8010242:	4607      	mov	r7, r0
 8010244:	1c78      	adds	r0, r7, #1
 8010246:	d1d6      	bne.n	80101f6 <_vfiprintf_r+0x19a>
 8010248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801024a:	07d9      	lsls	r1, r3, #31
 801024c:	d405      	bmi.n	801025a <_vfiprintf_r+0x1fe>
 801024e:	89ab      	ldrh	r3, [r5, #12]
 8010250:	059a      	lsls	r2, r3, #22
 8010252:	d402      	bmi.n	801025a <_vfiprintf_r+0x1fe>
 8010254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010256:	f7fc ff5b 	bl	800d110 <__retarget_lock_release_recursive>
 801025a:	89ab      	ldrh	r3, [r5, #12]
 801025c:	065b      	lsls	r3, r3, #25
 801025e:	f53f af1f 	bmi.w	80100a0 <_vfiprintf_r+0x44>
 8010262:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010264:	e71e      	b.n	80100a4 <_vfiprintf_r+0x48>
 8010266:	ab03      	add	r3, sp, #12
 8010268:	9300      	str	r3, [sp, #0]
 801026a:	462a      	mov	r2, r5
 801026c:	4b05      	ldr	r3, [pc, #20]	@ (8010284 <_vfiprintf_r+0x228>)
 801026e:	a904      	add	r1, sp, #16
 8010270:	4630      	mov	r0, r6
 8010272:	f7fc fa53 	bl	800c71c <_printf_i>
 8010276:	e7e4      	b.n	8010242 <_vfiprintf_r+0x1e6>
 8010278:	08011460 	.word	0x08011460
 801027c:	0801146a 	.word	0x0801146a
 8010280:	0800c1ed 	.word	0x0800c1ed
 8010284:	08010039 	.word	0x08010039
 8010288:	08011466 	.word	0x08011466

0801028c <__swbuf_r>:
 801028c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801028e:	460e      	mov	r6, r1
 8010290:	4614      	mov	r4, r2
 8010292:	4605      	mov	r5, r0
 8010294:	b118      	cbz	r0, 801029e <__swbuf_r+0x12>
 8010296:	6a03      	ldr	r3, [r0, #32]
 8010298:	b90b      	cbnz	r3, 801029e <__swbuf_r+0x12>
 801029a:	f7fc fdff 	bl	800ce9c <__sinit>
 801029e:	69a3      	ldr	r3, [r4, #24]
 80102a0:	60a3      	str	r3, [r4, #8]
 80102a2:	89a3      	ldrh	r3, [r4, #12]
 80102a4:	071a      	lsls	r2, r3, #28
 80102a6:	d501      	bpl.n	80102ac <__swbuf_r+0x20>
 80102a8:	6923      	ldr	r3, [r4, #16]
 80102aa:	b943      	cbnz	r3, 80102be <__swbuf_r+0x32>
 80102ac:	4621      	mov	r1, r4
 80102ae:	4628      	mov	r0, r5
 80102b0:	f000 f82a 	bl	8010308 <__swsetup_r>
 80102b4:	b118      	cbz	r0, 80102be <__swbuf_r+0x32>
 80102b6:	f04f 37ff 	mov.w	r7, #4294967295
 80102ba:	4638      	mov	r0, r7
 80102bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102be:	6823      	ldr	r3, [r4, #0]
 80102c0:	6922      	ldr	r2, [r4, #16]
 80102c2:	1a98      	subs	r0, r3, r2
 80102c4:	6963      	ldr	r3, [r4, #20]
 80102c6:	b2f6      	uxtb	r6, r6
 80102c8:	4283      	cmp	r3, r0
 80102ca:	4637      	mov	r7, r6
 80102cc:	dc05      	bgt.n	80102da <__swbuf_r+0x4e>
 80102ce:	4621      	mov	r1, r4
 80102d0:	4628      	mov	r0, r5
 80102d2:	f7ff fa63 	bl	800f79c <_fflush_r>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d1ed      	bne.n	80102b6 <__swbuf_r+0x2a>
 80102da:	68a3      	ldr	r3, [r4, #8]
 80102dc:	3b01      	subs	r3, #1
 80102de:	60a3      	str	r3, [r4, #8]
 80102e0:	6823      	ldr	r3, [r4, #0]
 80102e2:	1c5a      	adds	r2, r3, #1
 80102e4:	6022      	str	r2, [r4, #0]
 80102e6:	701e      	strb	r6, [r3, #0]
 80102e8:	6962      	ldr	r2, [r4, #20]
 80102ea:	1c43      	adds	r3, r0, #1
 80102ec:	429a      	cmp	r2, r3
 80102ee:	d004      	beq.n	80102fa <__swbuf_r+0x6e>
 80102f0:	89a3      	ldrh	r3, [r4, #12]
 80102f2:	07db      	lsls	r3, r3, #31
 80102f4:	d5e1      	bpl.n	80102ba <__swbuf_r+0x2e>
 80102f6:	2e0a      	cmp	r6, #10
 80102f8:	d1df      	bne.n	80102ba <__swbuf_r+0x2e>
 80102fa:	4621      	mov	r1, r4
 80102fc:	4628      	mov	r0, r5
 80102fe:	f7ff fa4d 	bl	800f79c <_fflush_r>
 8010302:	2800      	cmp	r0, #0
 8010304:	d0d9      	beq.n	80102ba <__swbuf_r+0x2e>
 8010306:	e7d6      	b.n	80102b6 <__swbuf_r+0x2a>

08010308 <__swsetup_r>:
 8010308:	b538      	push	{r3, r4, r5, lr}
 801030a:	4b29      	ldr	r3, [pc, #164]	@ (80103b0 <__swsetup_r+0xa8>)
 801030c:	4605      	mov	r5, r0
 801030e:	6818      	ldr	r0, [r3, #0]
 8010310:	460c      	mov	r4, r1
 8010312:	b118      	cbz	r0, 801031c <__swsetup_r+0x14>
 8010314:	6a03      	ldr	r3, [r0, #32]
 8010316:	b90b      	cbnz	r3, 801031c <__swsetup_r+0x14>
 8010318:	f7fc fdc0 	bl	800ce9c <__sinit>
 801031c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010320:	0719      	lsls	r1, r3, #28
 8010322:	d422      	bmi.n	801036a <__swsetup_r+0x62>
 8010324:	06da      	lsls	r2, r3, #27
 8010326:	d407      	bmi.n	8010338 <__swsetup_r+0x30>
 8010328:	2209      	movs	r2, #9
 801032a:	602a      	str	r2, [r5, #0]
 801032c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010330:	81a3      	strh	r3, [r4, #12]
 8010332:	f04f 30ff 	mov.w	r0, #4294967295
 8010336:	e033      	b.n	80103a0 <__swsetup_r+0x98>
 8010338:	0758      	lsls	r0, r3, #29
 801033a:	d512      	bpl.n	8010362 <__swsetup_r+0x5a>
 801033c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801033e:	b141      	cbz	r1, 8010352 <__swsetup_r+0x4a>
 8010340:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010344:	4299      	cmp	r1, r3
 8010346:	d002      	beq.n	801034e <__swsetup_r+0x46>
 8010348:	4628      	mov	r0, r5
 801034a:	f7fd fd45 	bl	800ddd8 <_free_r>
 801034e:	2300      	movs	r3, #0
 8010350:	6363      	str	r3, [r4, #52]	@ 0x34
 8010352:	89a3      	ldrh	r3, [r4, #12]
 8010354:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010358:	81a3      	strh	r3, [r4, #12]
 801035a:	2300      	movs	r3, #0
 801035c:	6063      	str	r3, [r4, #4]
 801035e:	6923      	ldr	r3, [r4, #16]
 8010360:	6023      	str	r3, [r4, #0]
 8010362:	89a3      	ldrh	r3, [r4, #12]
 8010364:	f043 0308 	orr.w	r3, r3, #8
 8010368:	81a3      	strh	r3, [r4, #12]
 801036a:	6923      	ldr	r3, [r4, #16]
 801036c:	b94b      	cbnz	r3, 8010382 <__swsetup_r+0x7a>
 801036e:	89a3      	ldrh	r3, [r4, #12]
 8010370:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010378:	d003      	beq.n	8010382 <__swsetup_r+0x7a>
 801037a:	4621      	mov	r1, r4
 801037c:	4628      	mov	r0, r5
 801037e:	f000 f883 	bl	8010488 <__smakebuf_r>
 8010382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010386:	f013 0201 	ands.w	r2, r3, #1
 801038a:	d00a      	beq.n	80103a2 <__swsetup_r+0x9a>
 801038c:	2200      	movs	r2, #0
 801038e:	60a2      	str	r2, [r4, #8]
 8010390:	6962      	ldr	r2, [r4, #20]
 8010392:	4252      	negs	r2, r2
 8010394:	61a2      	str	r2, [r4, #24]
 8010396:	6922      	ldr	r2, [r4, #16]
 8010398:	b942      	cbnz	r2, 80103ac <__swsetup_r+0xa4>
 801039a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801039e:	d1c5      	bne.n	801032c <__swsetup_r+0x24>
 80103a0:	bd38      	pop	{r3, r4, r5, pc}
 80103a2:	0799      	lsls	r1, r3, #30
 80103a4:	bf58      	it	pl
 80103a6:	6962      	ldrpl	r2, [r4, #20]
 80103a8:	60a2      	str	r2, [r4, #8]
 80103aa:	e7f4      	b.n	8010396 <__swsetup_r+0x8e>
 80103ac:	2000      	movs	r0, #0
 80103ae:	e7f7      	b.n	80103a0 <__swsetup_r+0x98>
 80103b0:	20000024 	.word	0x20000024

080103b4 <_raise_r>:
 80103b4:	291f      	cmp	r1, #31
 80103b6:	b538      	push	{r3, r4, r5, lr}
 80103b8:	4605      	mov	r5, r0
 80103ba:	460c      	mov	r4, r1
 80103bc:	d904      	bls.n	80103c8 <_raise_r+0x14>
 80103be:	2316      	movs	r3, #22
 80103c0:	6003      	str	r3, [r0, #0]
 80103c2:	f04f 30ff 	mov.w	r0, #4294967295
 80103c6:	bd38      	pop	{r3, r4, r5, pc}
 80103c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80103ca:	b112      	cbz	r2, 80103d2 <_raise_r+0x1e>
 80103cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80103d0:	b94b      	cbnz	r3, 80103e6 <_raise_r+0x32>
 80103d2:	4628      	mov	r0, r5
 80103d4:	f000 f830 	bl	8010438 <_getpid_r>
 80103d8:	4622      	mov	r2, r4
 80103da:	4601      	mov	r1, r0
 80103dc:	4628      	mov	r0, r5
 80103de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103e2:	f000 b817 	b.w	8010414 <_kill_r>
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d00a      	beq.n	8010400 <_raise_r+0x4c>
 80103ea:	1c59      	adds	r1, r3, #1
 80103ec:	d103      	bne.n	80103f6 <_raise_r+0x42>
 80103ee:	2316      	movs	r3, #22
 80103f0:	6003      	str	r3, [r0, #0]
 80103f2:	2001      	movs	r0, #1
 80103f4:	e7e7      	b.n	80103c6 <_raise_r+0x12>
 80103f6:	2100      	movs	r1, #0
 80103f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80103fc:	4620      	mov	r0, r4
 80103fe:	4798      	blx	r3
 8010400:	2000      	movs	r0, #0
 8010402:	e7e0      	b.n	80103c6 <_raise_r+0x12>

08010404 <raise>:
 8010404:	4b02      	ldr	r3, [pc, #8]	@ (8010410 <raise+0xc>)
 8010406:	4601      	mov	r1, r0
 8010408:	6818      	ldr	r0, [r3, #0]
 801040a:	f7ff bfd3 	b.w	80103b4 <_raise_r>
 801040e:	bf00      	nop
 8010410:	20000024 	.word	0x20000024

08010414 <_kill_r>:
 8010414:	b538      	push	{r3, r4, r5, lr}
 8010416:	4d07      	ldr	r5, [pc, #28]	@ (8010434 <_kill_r+0x20>)
 8010418:	2300      	movs	r3, #0
 801041a:	4604      	mov	r4, r0
 801041c:	4608      	mov	r0, r1
 801041e:	4611      	mov	r1, r2
 8010420:	602b      	str	r3, [r5, #0]
 8010422:	f7f3 fc19 	bl	8003c58 <_kill>
 8010426:	1c43      	adds	r3, r0, #1
 8010428:	d102      	bne.n	8010430 <_kill_r+0x1c>
 801042a:	682b      	ldr	r3, [r5, #0]
 801042c:	b103      	cbz	r3, 8010430 <_kill_r+0x1c>
 801042e:	6023      	str	r3, [r4, #0]
 8010430:	bd38      	pop	{r3, r4, r5, pc}
 8010432:	bf00      	nop
 8010434:	200053e0 	.word	0x200053e0

08010438 <_getpid_r>:
 8010438:	f7f3 bc06 	b.w	8003c48 <_getpid>

0801043c <__swhatbuf_r>:
 801043c:	b570      	push	{r4, r5, r6, lr}
 801043e:	460c      	mov	r4, r1
 8010440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010444:	2900      	cmp	r1, #0
 8010446:	b096      	sub	sp, #88	@ 0x58
 8010448:	4615      	mov	r5, r2
 801044a:	461e      	mov	r6, r3
 801044c:	da0d      	bge.n	801046a <__swhatbuf_r+0x2e>
 801044e:	89a3      	ldrh	r3, [r4, #12]
 8010450:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010454:	f04f 0100 	mov.w	r1, #0
 8010458:	bf14      	ite	ne
 801045a:	2340      	movne	r3, #64	@ 0x40
 801045c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010460:	2000      	movs	r0, #0
 8010462:	6031      	str	r1, [r6, #0]
 8010464:	602b      	str	r3, [r5, #0]
 8010466:	b016      	add	sp, #88	@ 0x58
 8010468:	bd70      	pop	{r4, r5, r6, pc}
 801046a:	466a      	mov	r2, sp
 801046c:	f000 f848 	bl	8010500 <_fstat_r>
 8010470:	2800      	cmp	r0, #0
 8010472:	dbec      	blt.n	801044e <__swhatbuf_r+0x12>
 8010474:	9901      	ldr	r1, [sp, #4]
 8010476:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801047a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801047e:	4259      	negs	r1, r3
 8010480:	4159      	adcs	r1, r3
 8010482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010486:	e7eb      	b.n	8010460 <__swhatbuf_r+0x24>

08010488 <__smakebuf_r>:
 8010488:	898b      	ldrh	r3, [r1, #12]
 801048a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801048c:	079d      	lsls	r5, r3, #30
 801048e:	4606      	mov	r6, r0
 8010490:	460c      	mov	r4, r1
 8010492:	d507      	bpl.n	80104a4 <__smakebuf_r+0x1c>
 8010494:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010498:	6023      	str	r3, [r4, #0]
 801049a:	6123      	str	r3, [r4, #16]
 801049c:	2301      	movs	r3, #1
 801049e:	6163      	str	r3, [r4, #20]
 80104a0:	b003      	add	sp, #12
 80104a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104a4:	ab01      	add	r3, sp, #4
 80104a6:	466a      	mov	r2, sp
 80104a8:	f7ff ffc8 	bl	801043c <__swhatbuf_r>
 80104ac:	9f00      	ldr	r7, [sp, #0]
 80104ae:	4605      	mov	r5, r0
 80104b0:	4639      	mov	r1, r7
 80104b2:	4630      	mov	r0, r6
 80104b4:	f7fb fce8 	bl	800be88 <_malloc_r>
 80104b8:	b948      	cbnz	r0, 80104ce <__smakebuf_r+0x46>
 80104ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104be:	059a      	lsls	r2, r3, #22
 80104c0:	d4ee      	bmi.n	80104a0 <__smakebuf_r+0x18>
 80104c2:	f023 0303 	bic.w	r3, r3, #3
 80104c6:	f043 0302 	orr.w	r3, r3, #2
 80104ca:	81a3      	strh	r3, [r4, #12]
 80104cc:	e7e2      	b.n	8010494 <__smakebuf_r+0xc>
 80104ce:	89a3      	ldrh	r3, [r4, #12]
 80104d0:	6020      	str	r0, [r4, #0]
 80104d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104d6:	81a3      	strh	r3, [r4, #12]
 80104d8:	9b01      	ldr	r3, [sp, #4]
 80104da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80104de:	b15b      	cbz	r3, 80104f8 <__smakebuf_r+0x70>
 80104e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104e4:	4630      	mov	r0, r6
 80104e6:	f000 f81d 	bl	8010524 <_isatty_r>
 80104ea:	b128      	cbz	r0, 80104f8 <__smakebuf_r+0x70>
 80104ec:	89a3      	ldrh	r3, [r4, #12]
 80104ee:	f023 0303 	bic.w	r3, r3, #3
 80104f2:	f043 0301 	orr.w	r3, r3, #1
 80104f6:	81a3      	strh	r3, [r4, #12]
 80104f8:	89a3      	ldrh	r3, [r4, #12]
 80104fa:	431d      	orrs	r5, r3
 80104fc:	81a5      	strh	r5, [r4, #12]
 80104fe:	e7cf      	b.n	80104a0 <__smakebuf_r+0x18>

08010500 <_fstat_r>:
 8010500:	b538      	push	{r3, r4, r5, lr}
 8010502:	4d07      	ldr	r5, [pc, #28]	@ (8010520 <_fstat_r+0x20>)
 8010504:	2300      	movs	r3, #0
 8010506:	4604      	mov	r4, r0
 8010508:	4608      	mov	r0, r1
 801050a:	4611      	mov	r1, r2
 801050c:	602b      	str	r3, [r5, #0]
 801050e:	f7f3 fc03 	bl	8003d18 <_fstat>
 8010512:	1c43      	adds	r3, r0, #1
 8010514:	d102      	bne.n	801051c <_fstat_r+0x1c>
 8010516:	682b      	ldr	r3, [r5, #0]
 8010518:	b103      	cbz	r3, 801051c <_fstat_r+0x1c>
 801051a:	6023      	str	r3, [r4, #0]
 801051c:	bd38      	pop	{r3, r4, r5, pc}
 801051e:	bf00      	nop
 8010520:	200053e0 	.word	0x200053e0

08010524 <_isatty_r>:
 8010524:	b538      	push	{r3, r4, r5, lr}
 8010526:	4d06      	ldr	r5, [pc, #24]	@ (8010540 <_isatty_r+0x1c>)
 8010528:	2300      	movs	r3, #0
 801052a:	4604      	mov	r4, r0
 801052c:	4608      	mov	r0, r1
 801052e:	602b      	str	r3, [r5, #0]
 8010530:	f7f3 fc02 	bl	8003d38 <_isatty>
 8010534:	1c43      	adds	r3, r0, #1
 8010536:	d102      	bne.n	801053e <_isatty_r+0x1a>
 8010538:	682b      	ldr	r3, [r5, #0]
 801053a:	b103      	cbz	r3, 801053e <_isatty_r+0x1a>
 801053c:	6023      	str	r3, [r4, #0]
 801053e:	bd38      	pop	{r3, r4, r5, pc}
 8010540:	200053e0 	.word	0x200053e0

08010544 <_init>:
 8010544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010546:	bf00      	nop
 8010548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801054a:	bc08      	pop	{r3}
 801054c:	469e      	mov	lr, r3
 801054e:	4770      	bx	lr

08010550 <_fini>:
 8010550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010552:	bf00      	nop
 8010554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010556:	bc08      	pop	{r3}
 8010558:	469e      	mov	lr, r3
 801055a:	4770      	bx	lr
