
Moving1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee0  0800b968  0800b968  0000c968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c848  0800c848  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c848  0800c848  0000d848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c850  0800c850  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c850  0800c850  0000d850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c854  0800c854  0000d854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c858  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1d8  2**0
                  CONTENTS
 10 .bss          000050e0  200001d8  200001d8  0000e1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200052b8  200052b8  0000e1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000187ee  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000376b  00000000  00000000  000269f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0002a168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001171  00000000  00000000  0002b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004c7b  00000000  00000000  0002c951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018895  00000000  00000000  000315cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7f8e  00000000  00000000  00049e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121def  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006fb4  00000000  00000000  00121e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00128de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b94c 	.word	0x0800b94c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800b94c 	.word	0x0800b94c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f001 f956 	bl	800214c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f85a 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 fb68 	bl	8001578 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000ea8:	f000 fa92 	bl	80013d0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000eac:	f000 f950 	bl	8001150 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000eb0:	f000 f8b0 	bl	8001014 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000eb4:	f000 fb36 	bl	8001524 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000eb8:	f000 f99e 	bl	80011f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ebc:	f000 f9fe 	bl	80012bc <MX_TIM4_Init>
  MX_TIM6_Init();
 8000ec0:	f000 fa50 	bl	8001364 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000ec4:	f007 fe6e 	bl	8008ba4 <OLED_Init>
  HAL_UART_Receive_IT(&huart3, RxBuffer, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4915      	ldr	r1, [pc, #84]	@ (8000f20 <main+0x88>)
 8000ecc:	4815      	ldr	r0, [pc, #84]	@ (8000f24 <main+0x8c>)
 8000ece:	f003 ff92 	bl	8004df6 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ed2:	f004 ff3f 	bl	8005d54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ed6:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <main+0x90>)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4814      	ldr	r0, [pc, #80]	@ (8000f2c <main+0x94>)
 8000edc:	f004 ff84 	bl	8005de8 <osThreadNew>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a13      	ldr	r2, [pc, #76]	@ (8000f30 <main+0x98>)
 8000ee4:	6013      	str	r3, [r2, #0]

  /* creation of DCMotor1 */
  DCMotor1Handle = osThreadNew(motors, NULL, &DCMotor1_attributes);
 8000ee6:	4a13      	ldr	r2, [pc, #76]	@ (8000f34 <main+0x9c>)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4813      	ldr	r0, [pc, #76]	@ (8000f38 <main+0xa0>)
 8000eec:	f004 ff7c 	bl	8005de8 <osThreadNew>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <main+0xa4>)
 8000ef4:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(encoder, NULL, &Encoder_attributes);
 8000ef6:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <main+0xa8>)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4812      	ldr	r0, [pc, #72]	@ (8000f44 <main+0xac>)
 8000efc:	f004 ff74 	bl	8005de8 <osThreadNew>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4a11      	ldr	r2, [pc, #68]	@ (8000f48 <main+0xb0>)
 8000f04:	6013      	str	r3, [r2, #0]

  /* creation of UltraSonic */
  UltraSonicHandle = osThreadNew(ultrasonic_task, NULL, &UltraSonic_attributes);
 8000f06:	4a11      	ldr	r2, [pc, #68]	@ (8000f4c <main+0xb4>)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4811      	ldr	r0, [pc, #68]	@ (8000f50 <main+0xb8>)
 8000f0c:	f004 ff6c 	bl	8005de8 <osThreadNew>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a10      	ldr	r2, [pc, #64]	@ (8000f54 <main+0xbc>)
 8000f14:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f16:	f004 ff41 	bl	8005d9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f1a:	bf00      	nop
 8000f1c:	e7fd      	b.n	8000f1a <main+0x82>
 8000f1e:	bf00      	nop
 8000f20:	200003fc 	.word	0x200003fc
 8000f24:	200003a4 	.word	0x200003a4
 8000f28:	0800b9cc 	.word	0x0800b9cc
 8000f2c:	0800195d 	.word	0x0800195d
 8000f30:	200003ec 	.word	0x200003ec
 8000f34:	0800b9f0 	.word	0x0800b9f0
 8000f38:	0800197f 	.word	0x0800197f
 8000f3c:	200003f0 	.word	0x200003f0
 8000f40:	0800ba14 	.word	0x0800ba14
 8000f44:	08001991 	.word	0x08001991
 8000f48:	200003f4 	.word	0x200003f4
 8000f4c:	0800ba38 	.word	0x0800ba38
 8000f50:	08001a69 	.word	0x08001a69
 8000f54:	200003f8 	.word	0x200003f8

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	@ 0x50
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2230      	movs	r2, #48	@ 0x30
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f008 fc25 	bl	80097b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	4b22      	ldr	r3, [pc, #136]	@ (800100c <SystemClock_Config+0xb4>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f84:	4a21      	ldr	r2, [pc, #132]	@ (800100c <SystemClock_Config+0xb4>)
 8000f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <SystemClock_Config+0xb4>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <SystemClock_Config+0xb8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8001010 <SystemClock_Config+0xb8>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <SystemClock_Config+0xb8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 fcd7 	bl	800297c <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000fd4:	f000 fd4e 	bl	8001a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd8:	230f      	movs	r3, #15
 8000fda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 ff3a 	bl	8002e6c <HAL_RCC_ClockConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ffe:	f000 fd39 	bl	8001a74 <Error_Handler>
  }
}
 8001002:	bf00      	nop
 8001004:	3750      	adds	r7, #80	@ 0x50
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40007000 	.word	0x40007000

08001014 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b096      	sub	sp, #88	@ 0x58
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f008 fbb2 	bl	80097b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001052:	4b3d      	ldr	r3, [pc, #244]	@ (8001148 <MX_TIM1_Init+0x134>)
 8001054:	4a3d      	ldr	r2, [pc, #244]	@ (800114c <MX_TIM1_Init+0x138>)
 8001056:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001058:	4b3b      	ldr	r3, [pc, #236]	@ (8001148 <MX_TIM1_Init+0x134>)
 800105a:	22a0      	movs	r2, #160	@ 0xa0
 800105c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	4b3a      	ldr	r3, [pc, #232]	@ (8001148 <MX_TIM1_Init+0x134>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001064:	4b38      	ldr	r3, [pc, #224]	@ (8001148 <MX_TIM1_Init+0x134>)
 8001066:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800106a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106c:	4b36      	ldr	r3, [pc, #216]	@ (8001148 <MX_TIM1_Init+0x134>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001072:	4b35      	ldr	r3, [pc, #212]	@ (8001148 <MX_TIM1_Init+0x134>)
 8001074:	2200      	movs	r2, #0
 8001076:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001078:	4b33      	ldr	r3, [pc, #204]	@ (8001148 <MX_TIM1_Init+0x134>)
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800107e:	4832      	ldr	r0, [pc, #200]	@ (8001148 <MX_TIM1_Init+0x134>)
 8001080:	f002 f8d4 	bl	800322c <HAL_TIM_Base_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800108a:	f000 fcf3 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001092:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001094:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001098:	4619      	mov	r1, r3
 800109a:	482b      	ldr	r0, [pc, #172]	@ (8001148 <MX_TIM1_Init+0x134>)
 800109c:	f002 ff74 	bl	8003f88 <HAL_TIM_ConfigClockSource>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010a6:	f000 fce5 	bl	8001a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010aa:	4827      	ldr	r0, [pc, #156]	@ (8001148 <MX_TIM1_Init+0x134>)
 80010ac:	f002 f976 	bl	800339c <HAL_TIM_PWM_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80010b6:	f000 fcdd 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010c6:	4619      	mov	r1, r3
 80010c8:	481f      	ldr	r0, [pc, #124]	@ (8001148 <MX_TIM1_Init+0x134>)
 80010ca:	f003 fcd7 	bl	8004a7c <HAL_TIMEx_MasterConfigSynchronization>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010d4:	f000 fcce 	bl	8001a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d8:	2360      	movs	r3, #96	@ 0x60
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f4:	220c      	movs	r2, #12
 80010f6:	4619      	mov	r1, r3
 80010f8:	4813      	ldr	r0, [pc, #76]	@ (8001148 <MX_TIM1_Init+0x134>)
 80010fa:	f002 fe83 	bl	8003e04 <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001104:	f000 fcb6 	bl	8001a74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800111c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001120:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4807      	ldr	r0, [pc, #28]	@ (8001148 <MX_TIM1_Init+0x134>)
 800112c:	f003 fd22 	bl	8004b74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001136:	f000 fc9d 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800113a:	4803      	ldr	r0, [pc, #12]	@ (8001148 <MX_TIM1_Init+0x134>)
 800113c:	f000 fe3e 	bl	8001dbc <HAL_TIM_MspPostInit>

}
 8001140:	bf00      	nop
 8001142:	3758      	adds	r7, #88	@ 0x58
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200001f4 	.word	0x200001f4
 800114c:	40010000 	.word	0x40010000

08001150 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	@ 0x30
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2224      	movs	r2, #36	@ 0x24
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f008 fb29 	bl	80097b6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116c:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 800116e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001172:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001174:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 8001176:	2200      	movs	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001180:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 8001182:	f04f 32ff 	mov.w	r2, #4294967295
 8001186:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001194:	2303      	movs	r3, #3
 8001196:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800119c:	2301      	movs	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011ac:	2301      	movs	r3, #1
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 80011c0:	f002 fb60 	bl	8003884 <HAL_TIM_Encoder_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011ca:	f000 fc53 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 80011dc:	f003 fc4e 	bl	8004a7c <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80011e6:	f000 fc45 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3730      	adds	r7, #48	@ 0x30
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000023c 	.word	0x2000023c

080011f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
 8001216:	615a      	str	r2, [r3, #20]
 8001218:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800121a:	4b26      	ldr	r3, [pc, #152]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 800121c:	4a26      	ldr	r2, [pc, #152]	@ (80012b8 <MX_TIM3_Init+0xc0>)
 800121e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001220:	4b24      	ldr	r3, [pc, #144]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800122c:	4b21      	ldr	r3, [pc, #132]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 800122e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001232:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001234:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123a:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001240:	481c      	ldr	r0, [pc, #112]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 8001242:	f002 f8ab 	bl	800339c <HAL_TIM_PWM_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800124c:	f000 fc12 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	4619      	mov	r1, r3
 800125e:	4815      	ldr	r0, [pc, #84]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 8001260:	f003 fc0c 	bl	8004a7c <HAL_TIMEx_MasterConfigSynchronization>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800126a:	f000 fc03 	bl	8001a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126e:	2360      	movs	r3, #96	@ 0x60
 8001270:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	4619      	mov	r1, r3
 8001284:	480b      	ldr	r0, [pc, #44]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 8001286:	f002 fdbd 	bl	8003e04 <HAL_TIM_PWM_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001290:	f000 fbf0 	bl	8001a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2204      	movs	r2, #4
 8001298:	4619      	mov	r1, r3
 800129a:	4806      	ldr	r0, [pc, #24]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 800129c:	f002 fdb2 	bl	8003e04 <HAL_TIM_PWM_ConfigChannel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012a6:	f000 fbe5 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	@ 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000284 	.word	0x20000284
 80012b8:	40000400 	.word	0x40000400

080012bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012cc:	463b      	mov	r3, r7
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012d8:	4b20      	ldr	r3, [pc, #128]	@ (800135c <MX_TIM4_Init+0xa0>)
 80012da:	4a21      	ldr	r2, [pc, #132]	@ (8001360 <MX_TIM4_Init+0xa4>)
 80012dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 80012de:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <MX_TIM4_Init+0xa0>)
 80012e0:	220f      	movs	r2, #15
 80012e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <MX_TIM4_Init+0xa0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	@ (800135c <MX_TIM4_Init+0xa0>)
 80012ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <MX_TIM4_Init+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <MX_TIM4_Init+0xa0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80012fe:	4817      	ldr	r0, [pc, #92]	@ (800135c <MX_TIM4_Init+0xa0>)
 8001300:	f002 f89b 	bl	800343a <HAL_TIM_IC_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800130a:	f000 fbb3 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4619      	mov	r1, r3
 800131c:	480f      	ldr	r0, [pc, #60]	@ (800135c <MX_TIM4_Init+0xa0>)
 800131e:	f003 fbad 	bl	8004a7c <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001328:	f000 fba4 	bl	8001a74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800132c:	230a      	movs	r3, #10
 800132e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001330:	2301      	movs	r3, #1
 8001332:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	@ (800135c <MX_TIM4_Init+0xa0>)
 8001344:	f002 fcc2 	bl	8003ccc <HAL_TIM_IC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800134e:	f000 fb91 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200002cc 	.word	0x200002cc
 8001360:	40000800 	.word	0x40000800

08001364 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <MX_TIM6_Init+0x64>)
 8001374:	4a15      	ldr	r2, [pc, #84]	@ (80013cc <MX_TIM6_Init+0x68>)
 8001376:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <MX_TIM6_Init+0x64>)
 800137a:	220f      	movs	r2, #15
 800137c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <MX_TIM6_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001384:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <MX_TIM6_Init+0x64>)
 8001386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800138a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138c:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <MX_TIM6_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001392:	480d      	ldr	r0, [pc, #52]	@ (80013c8 <MX_TIM6_Init+0x64>)
 8001394:	f001 ff4a 	bl	800322c <HAL_TIM_Base_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800139e:	f000 fb69 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013aa:	463b      	mov	r3, r7
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	@ (80013c8 <MX_TIM6_Init+0x64>)
 80013b0:	f003 fb64 	bl	8004a7c <HAL_TIMEx_MasterConfigSynchronization>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80013ba:	f000 fb5b 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000314 	.word	0x20000314
 80013cc:	40001000 	.word	0x40001000

080013d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b096      	sub	sp, #88	@ 0x58
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2220      	movs	r2, #32
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f008 f9d4 	bl	80097b6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800140e:	4b43      	ldr	r3, [pc, #268]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001410:	4a43      	ldr	r2, [pc, #268]	@ (8001520 <MX_TIM8_Init+0x150>)
 8001412:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001414:	4b41      	ldr	r3, [pc, #260]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b40      	ldr	r3, [pc, #256]	@ (800151c <MX_TIM8_Init+0x14c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001420:	4b3e      	ldr	r3, [pc, #248]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001422:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001426:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b3c      	ldr	r3, [pc, #240]	@ (800151c <MX_TIM8_Init+0x14c>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800142e:	4b3b      	ldr	r3, [pc, #236]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b39      	ldr	r3, [pc, #228]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800143a:	4838      	ldr	r0, [pc, #224]	@ (800151c <MX_TIM8_Init+0x14c>)
 800143c:	f001 fef6 	bl	800322c <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001446:	f000 fb15 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001454:	4619      	mov	r1, r3
 8001456:	4831      	ldr	r0, [pc, #196]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001458:	f002 fd96 	bl	8003f88 <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001462:	f000 fb07 	bl	8001a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001466:	482d      	ldr	r0, [pc, #180]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001468:	f001 ff98 	bl	800339c <HAL_TIM_PWM_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001472:	f000 faff 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800147e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001482:	4619      	mov	r1, r3
 8001484:	4825      	ldr	r0, [pc, #148]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001486:	f003 faf9 	bl	8004a7c <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001490:	f000 faf0 	bl	8001a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001494:	2360      	movs	r3, #96	@ 0x60
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014a0:	2300      	movs	r3, #0
 80014a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ac:	2300      	movs	r3, #0
 80014ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b4:	2200      	movs	r2, #0
 80014b6:	4619      	mov	r1, r3
 80014b8:	4818      	ldr	r0, [pc, #96]	@ (800151c <MX_TIM8_Init+0x14c>)
 80014ba:	f002 fca3 	bl	8003e04 <HAL_TIM_PWM_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80014c4:	f000 fad6 	bl	8001a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014cc:	2204      	movs	r2, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4812      	ldr	r0, [pc, #72]	@ (800151c <MX_TIM8_Init+0x14c>)
 80014d2:	f002 fc97 	bl	8003e04 <HAL_TIM_PWM_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80014dc:	f000 faca 	bl	8001a74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001504:	f003 fb36 	bl	8004b74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800150e:	f000 fab1 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3758      	adds	r7, #88	@ 0x58
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000035c 	.word	0x2000035c
 8001520:	40010400 	.word	0x40010400

08001524 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <MX_USART3_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 800155c:	f003 fb70 	bl	8004c40 <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001566:	f000 fa85 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200003a4 	.word	0x200003a4
 8001574:	40004800 	.word	0x40004800

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	@ 0x28
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b5a      	ldr	r3, [pc, #360]	@ (80016fc <MX_GPIO_Init+0x184>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a59      	ldr	r2, [pc, #356]	@ (80016fc <MX_GPIO_Init+0x184>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b57      	ldr	r3, [pc, #348]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b53      	ldr	r3, [pc, #332]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a52      	ldr	r2, [pc, #328]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	4b50      	ldr	r3, [pc, #320]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b4c      	ldr	r3, [pc, #304]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a4b      	ldr	r2, [pc, #300]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b49      	ldr	r3, [pc, #292]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b45      	ldr	r3, [pc, #276]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a44      	ldr	r2, [pc, #272]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b42      	ldr	r3, [pc, #264]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	4b3e      	ldr	r3, [pc, #248]	@ (80016fc <MX_GPIO_Init+0x184>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a3d      	ldr	r2, [pc, #244]	@ (80016fc <MX_GPIO_Init+0x184>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b3b      	ldr	r3, [pc, #236]	@ (80016fc <MX_GPIO_Init+0x184>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 8001620:	4837      	ldr	r0, [pc, #220]	@ (8001700 <MX_GPIO_Init+0x188>)
 8001622:	f001 f969 	bl	80028f8 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	213c      	movs	r1, #60	@ 0x3c
 800162a:	4836      	ldr	r0, [pc, #216]	@ (8001704 <MX_GPIO_Init+0x18c>)
 800162c:	f001 f964 	bl	80028f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001636:	4834      	ldr	r0, [pc, #208]	@ (8001708 <MX_GPIO_Init+0x190>)
 8001638:	f001 f95e 	bl	80028f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800163c:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 8001640:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	482a      	ldr	r0, [pc, #168]	@ (8001700 <MX_GPIO_Init+0x188>)
 8001656:	f000 ffb3 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 800165a:	230c      	movs	r3, #12
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001666:	2302      	movs	r3, #2
 8001668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4824      	ldr	r0, [pc, #144]	@ (8001704 <MX_GPIO_Init+0x18c>)
 8001672:	f000 ffa5 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 8001676:	2330      	movs	r3, #48	@ 0x30
 8001678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	481d      	ldr	r0, [pc, #116]	@ (8001704 <MX_GPIO_Init+0x18c>)
 800168e:	f000 ff97 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001692:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4817      	ldr	r0, [pc, #92]	@ (8001708 <MX_GPIO_Init+0x190>)
 80016ac:	f000 ff88 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c2:	2307      	movs	r3, #7
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	480d      	ldr	r0, [pc, #52]	@ (8001704 <MX_GPIO_Init+0x18c>)
 80016ce:	f000 ff77 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ICM_SCL_Pin ICM_SDA_Pin */
  GPIO_InitStruct.Pin = ICM_SCL_Pin|ICM_SDA_Pin;
 80016d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d8:	2312      	movs	r3, #18
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e4:	2304      	movs	r3, #4
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4807      	ldr	r0, [pc, #28]	@ (800170c <MX_GPIO_Init+0x194>)
 80016f0:	f000 ff66 	bl	80025c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	@ 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	40021000 	.word	0x40021000
 8001704:	40020000 	.word	0x40020000
 8001708:	40020c00 	.word	0x40020c00
 800170c:	40020400 	.word	0x40020400

08001710 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	//Prevent unused argument(s) compilation warning
	UNUSED(huart);
	HAL_UART_Transmit(&huart3, RxBuffer, 1, 1000);
 8001718:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171c:	2201      	movs	r2, #1
 800171e:	4907      	ldr	r1, [pc, #28]	@ (800173c <HAL_UART_RxCpltCallback+0x2c>)
 8001720:	4807      	ldr	r0, [pc, #28]	@ (8001740 <HAL_UART_RxCpltCallback+0x30>)
 8001722:	f003 fadd 	bl	8004ce0 <HAL_UART_Transmit>
    OLED_ShowString(10, 10, RxBuffer);
 8001726:	4a05      	ldr	r2, [pc, #20]	@ (800173c <HAL_UART_RxCpltCallback+0x2c>)
 8001728:	210a      	movs	r1, #10
 800172a:	200a      	movs	r0, #10
 800172c:	f007 fa08 	bl	8008b40 <OLED_ShowString>
    OLED_Refresh_Gram();
 8001730:	f007 f892 	bl	8008858 <OLED_Refresh_Gram>

}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200003fc 	.word	0x200003fc
 8001740:	200003a4 	.word	0x200003a4
 8001744:	00000000 	.word	0x00000000

08001748 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

	static int tc1, tc2, first=0, echo = 0;
	char buf[15];
	if(htim==&htim4){
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a5b      	ldr	r2, [pc, #364]	@ (80018c0 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001754:	4293      	cmp	r3, r2
 8001756:	f040 80a6 	bne.w	80018a6 <HAL_TIM_IC_CaptureCallback+0x15e>

		if (first == 0){
 800175a:	4b5a      	ldr	r3, [pc, #360]	@ (80018c4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d11b      	bne.n	800179a <HAL_TIM_IC_CaptureCallback+0x52>
			tc1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001762:	2100      	movs	r1, #0
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f002 fcd7 	bl	8004118 <HAL_TIM_ReadCapturedValue>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	4b56      	ldr	r3, [pc, #344]	@ (80018c8 <HAL_TIM_IC_CaptureCallback+0x180>)
 8001770:	601a      	str	r2, [r3, #0]
			first=1;
 8001772:	4b54      	ldr	r3, [pc, #336]	@ (80018c4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6a1a      	ldr	r2, [r3, #32]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 020a 	bic.w	r2, r2, #10
 8001786:	621a      	str	r2, [r3, #32]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6a1a      	ldr	r2, [r3, #32]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0202 	orr.w	r2, r2, #2
 8001796:	621a      	str	r2, [r3, #32]
			first=0;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
		}
	}
}
 8001798:	e085      	b.n	80018a6 <HAL_TIM_IC_CaptureCallback+0x15e>
		else if (first == 1){
 800179a:	4b4a      	ldr	r3, [pc, #296]	@ (80018c4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	f040 8081 	bne.w	80018a6 <HAL_TIM_IC_CaptureCallback+0x15e>
			tc2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017a4:	2100      	movs	r1, #0
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f002 fcb6 	bl	8004118 <HAL_TIM_ReadCapturedValue>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b46      	ldr	r3, [pc, #280]	@ (80018cc <HAL_TIM_IC_CaptureCallback+0x184>)
 80017b2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2200      	movs	r2, #0
 80017ba:	625a      	str	r2, [r3, #36]	@ 0x24
			if(tc2 >= tc1){
 80017bc:	4b43      	ldr	r3, [pc, #268]	@ (80018cc <HAL_TIM_IC_CaptureCallback+0x184>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b41      	ldr	r3, [pc, #260]	@ (80018c8 <HAL_TIM_IC_CaptureCallback+0x180>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	db07      	blt.n	80017d8 <HAL_TIM_IC_CaptureCallback+0x90>
				echo = tc2 - tc1;
 80017c8:	4b40      	ldr	r3, [pc, #256]	@ (80018cc <HAL_TIM_IC_CaptureCallback+0x184>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b3e      	ldr	r3, [pc, #248]	@ (80018c8 <HAL_TIM_IC_CaptureCallback+0x180>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	4a3f      	ldr	r2, [pc, #252]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x188>)
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e009      	b.n	80017ec <HAL_TIM_IC_CaptureCallback+0xa4>
				echo = (0xffff - tc1) + tc2;
 80017d8:	4b3b      	ldr	r3, [pc, #236]	@ (80018c8 <HAL_TIM_IC_CaptureCallback+0x180>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 80017e0:	33ff      	adds	r3, #255	@ 0xff
 80017e2:	4a3a      	ldr	r2, [pc, #232]	@ (80018cc <HAL_TIM_IC_CaptureCallback+0x184>)
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a39      	ldr	r2, [pc, #228]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x188>)
 80017ea:	6013      	str	r3, [r2, #0]
			sprintf(buf, "Echo = %5dus", echo);
 80017ec:	4b38      	ldr	r3, [pc, #224]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x188>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	4937      	ldr	r1, [pc, #220]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	f007 ff7a 	bl	80096f0 <siprintf>
			OLED_ShowString(10, 40, &buf[0]);
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	461a      	mov	r2, r3
 8001802:	2128      	movs	r1, #40	@ 0x28
 8001804:	200a      	movs	r0, #10
 8001806:	f007 f99b 	bl	8008b40 <OLED_ShowString>
			OLED_Refresh_Gram();
 800180a:	f007 f825 	bl	8008858 <OLED_Refresh_Gram>
			detectedDistance = echo * (0.0343/2);
 800180e:	4b30      	ldr	r3, [pc, #192]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe86 	bl	8000524 <__aeabi_i2d>
 8001818:	a325      	add	r3, pc, #148	@ (adr r3, 80018b0 <HAL_TIM_IC_CaptureCallback+0x168>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f7fe feeb 	bl	80005f8 <__aeabi_dmul>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f7ff f995 	bl	8000b58 <__aeabi_d2iz>
 800182e:	4603      	mov	r3, r0
 8001830:	4a29      	ldr	r2, [pc, #164]	@ (80018d8 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001832:	6013      	str	r3, [r2, #0]
			sprintf(buf, "Dist = %5.1fcm", echo * 0.0343/2);
 8001834:	4b26      	ldr	r3, [pc, #152]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe73 	bl	8000524 <__aeabi_i2d>
 800183e:	a31e      	add	r3, pc, #120	@ (adr r3, 80018b8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe fed8 	bl	80005f8 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001858:	f7fe fff8 	bl	800084c <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	f107 0008 	add.w	r0, r7, #8
 8001864:	491d      	ldr	r1, [pc, #116]	@ (80018dc <HAL_TIM_IC_CaptureCallback+0x194>)
 8001866:	f007 ff43 	bl	80096f0 <siprintf>
			OLED_ShowString(10, 50, &buf[0]);
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	461a      	mov	r2, r3
 8001870:	2132      	movs	r1, #50	@ 0x32
 8001872:	200a      	movs	r0, #10
 8001874:	f007 f964 	bl	8008b40 <OLED_ShowString>
			OLED_Refresh_Gram();
 8001878:	f006 ffee 	bl	8008858 <OLED_Refresh_Gram>
			first=0;
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a1a      	ldr	r2, [r3, #32]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 020a 	bic.w	r2, r2, #10
 8001890:	621a      	str	r2, [r3, #32]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6a12      	ldr	r2, [r2, #32]
 800189c:	621a      	str	r2, [r3, #32]
			HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
 800189e:	2100      	movs	r1, #0
 80018a0:	4807      	ldr	r0, [pc, #28]	@ (80018c0 <HAL_TIM_IC_CaptureCallback+0x178>)
 80018a2:	f001 ff41 	bl	8003728 <HAL_TIM_IC_Stop_IT>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	04816f00 	.word	0x04816f00
 80018b4:	3f918fc5 	.word	0x3f918fc5
 80018b8:	04816f00 	.word	0x04816f00
 80018bc:	3fa18fc5 	.word	0x3fa18fc5
 80018c0:	200002cc 	.word	0x200002cc
 80018c4:	20000404 	.word	0x20000404
 80018c8:	20000408 	.word	0x20000408
 80018cc:	2000040c 	.word	0x2000040c
 80018d0:	20000410 	.word	0x20000410
 80018d4:	0800b994 	.word	0x0800b994
 80018d8:	20000400 	.word	0x20000400
 80018dc:	0800b9a4 	.word	0x0800b9a4

080018e0 <UltraSonic>:
void UltraSonic(void){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ea:	4819      	ldr	r0, [pc, #100]	@ (8001950 <UltraSonic+0x70>)
 80018ec:	f001 f804 	bl	80028f8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80018f0:	2032      	movs	r0, #50	@ 0x32
 80018f2:	f000 fc9d 	bl	8002230 <HAL_Delay>

	HAL_TIM_Base_Start(&htim6);
 80018f6:	4817      	ldr	r0, [pc, #92]	@ (8001954 <UltraSonic+0x74>)
 80018f8:	f001 fce8 	bl	80032cc <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80018fc:	2100      	movs	r1, #0
 80018fe:	4816      	ldr	r0, [pc, #88]	@ (8001958 <UltraSonic+0x78>)
 8001900:	f001 fdea 	bl	80034d8 <HAL_TIM_IC_Start_IT>
	__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001904:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <UltraSonic+0x78>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6a1a      	ldr	r2, [r3, #32]
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <UltraSonic+0x78>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 020a 	bic.w	r2, r2, #10
 8001912:	621a      	str	r2, [r3, #32]
 8001914:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <UltraSonic+0x78>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <UltraSonic+0x78>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6a12      	ldr	r2, [r2, #32]
 800191e:	621a      	str	r2, [r3, #32]

	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001926:	480a      	ldr	r0, [pc, #40]	@ (8001950 <UltraSonic+0x70>)
 8001928:	f000 ffe6 	bl	80028f8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <UltraSonic+0x74>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2200      	movs	r2, #0
 8001932:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6)<=10);
 8001934:	bf00      	nop
 8001936:	4b07      	ldr	r3, [pc, #28]	@ (8001954 <UltraSonic+0x74>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193c:	2b0a      	cmp	r3, #10
 800193e:	d9fa      	bls.n	8001936 <UltraSonic+0x56>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001946:	4802      	ldr	r0, [pc, #8]	@ (8001950 <UltraSonic+0x70>)
 8001948:	f000 ffd6 	bl	80028f8 <HAL_GPIO_WritePin>
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40020c00 	.word	0x40020c00
 8001954:	20000314 	.word	0x20000314
 8001958:	200002cc 	.word	0x200002cc

0800195c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint8_t ch = 'A';
 8001964:	2341      	movs	r3, #65	@ 0x41
 8001966:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	  UltraSonic();
 8001968:	f7ff ffba 	bl	80018e0 <UltraSonic>
	  osDelay(1000);
 800196c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001970:	f004 facc 	bl	8005f0c <osDelay>
		//ch++;
	//}
	//else{
		//ch = 'A';
	//}
    osDelay(1);
 8001974:	2001      	movs	r0, #1
 8001976:	f004 fac9 	bl	8005f0c <osDelay>
	  UltraSonic();
 800197a:	bf00      	nop
 800197c:	e7f4      	b.n	8001968 <StartDefaultTask+0xc>

0800197e <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void *argument)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motors */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001986:	2001      	movs	r0, #1
 8001988:	f004 fac0 	bl	8005f0c <osDelay>
 800198c:	e7fb      	b.n	8001986 <motors+0x8>
	...

08001990 <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	@ 0x30
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001998:	213c      	movs	r1, #60	@ 0x3c
 800199a:	4831      	ldr	r0, [pc, #196]	@ (8001a60 <encoder+0xd0>)
 800199c:	f002 f818 	bl	80039d0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80019a0:	213c      	movs	r1, #60	@ 0x3c
 80019a2:	4830      	ldr	r0, [pc, #192]	@ (8001a64 <encoder+0xd4>)
 80019a4:	f002 f814 	bl	80039d0 <HAL_TIM_Encoder_Start>
  int cnt1, cnt2, diff, dir;
  char buffer[20];
  uint32_t tick;
  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 80019a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a60 <encoder+0xd0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tick = HAL_GetTick();
 80019b0:	f000 fc32 	bl	8002218 <HAL_GetTick>
 80019b4:	62b8      	str	r0, [r7, #40]	@ 0x28

  for(;;)
  {
	memset(buffer, 0, sizeof buffer);
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	2214      	movs	r2, #20
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f007 fef9 	bl	80097b6 <memset>
    if (HAL_GetTick() - tick > 1000L)
 80019c4:	f000 fc28 	bl	8002218 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019d2:	d93f      	bls.n	8001a54 <encoder+0xc4>
    {
      cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 80019d4:	4b23      	ldr	r3, [pc, #140]	@ (8001a64 <encoder+0xd4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80019dc:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <encoder+0xd0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	2b10      	cmp	r3, #16
 80019e8:	d110      	bne.n	8001a0c <encoder+0x7c>
        if (cnt2 < cnt1) {
 80019ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ee:	429a      	cmp	r2, r3
 80019f0:	da04      	bge.n	80019fc <encoder+0x6c>
          diff = cnt1 - cnt2;
 80019f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	623b      	str	r3, [r7, #32]
 80019fa:	e017      	b.n	8001a2c <encoder+0x9c>
        } else {
          diff = (65535 - cnt2) + cnt1;
 80019fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fe:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001a02:	33ff      	adds	r3, #255	@ 0xff
 8001a04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a06:	4413      	add	r3, r2
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	e00f      	b.n	8001a2c <encoder+0x9c>
        }
      }
      else {
        if (cnt2 > cnt1) {
 8001a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dd04      	ble.n	8001a1e <encoder+0x8e>
          diff = cnt2 - cnt1;
 8001a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	623b      	str	r3, [r7, #32]
 8001a1c:	e006      	b.n	8001a2c <encoder+0x9c>
        } else {
          diff = (65535 - cnt1) + cnt2;
 8001a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a20:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001a24:	33ff      	adds	r3, #255	@ 0xff
 8001a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a28:	4413      	add	r3, r2
 8001a2a:	623b      	str	r3, [r7, #32]
      }

      //sprintf(buffer, "Speed:%5d", diff);
      //OLED_ShowString(10, 20, buffer);

      dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <encoder+0xd0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	2b10      	cmp	r3, #16
 8001a38:	bf0c      	ite	eq
 8001a3a:	2301      	moveq	r3, #1
 8001a3c:	2300      	movne	r3, #0
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	61fb      	str	r3, [r7, #28]
      //sprintf(buffer, "Count1:%5d", cnt1);
      //OLED_ShowString(10, 30, buffer);


      // Refresh OLED after displaying
      OLED_Refresh_Gram();
 8001a42:	f006 ff09 	bl	8008858 <OLED_Refresh_Gram>



      cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <encoder+0xd0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tick = HAL_GetTick();
 8001a4e:	f000 fbe3 	bl	8002218 <HAL_GetTick>
 8001a52:	62b8      	str	r0, [r7, #40]	@ 0x28
    }

    osDelay(500);  // Adjust delay to give enough time for the OLED to update.
 8001a54:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a58:	f004 fa58 	bl	8005f0c <osDelay>
  {
 8001a5c:	e7ab      	b.n	80019b6 <encoder+0x26>
 8001a5e:	bf00      	nop
 8001a60:	2000023c 	.word	0x2000023c
 8001a64:	20000284 	.word	0x20000284

08001a68 <ultrasonic_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ultrasonic_task */
void ultrasonic_task(void *argument)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ultrasonic_task */
  /* Infinite loop */
  for(;;)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <ultrasonic_task+0x8>

08001a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a78:	b672      	cpsid	i
}
 8001a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <Error_Handler+0x8>

08001a80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_MspInit+0x54>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	4a11      	ldr	r2, [pc, #68]	@ (8001ad4 <HAL_MspInit+0x54>)
 8001a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <HAL_MspInit+0x54>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_MspInit+0x54>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <HAL_MspInit+0x54>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab2:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <HAL_MspInit+0x54>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	210f      	movs	r1, #15
 8001ac2:	f06f 0001 	mvn.w	r0, #1
 8001ac6:	f000 fcb2 	bl	800242e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	@ 0x30
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2d      	ldr	r2, [pc, #180]	@ (8001bac <HAL_TIM_Base_MspInit+0xd4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d10e      	bne.n	8001b18 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb0 <HAL_TIM_Base_MspInit+0xd8>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb0 <HAL_TIM_Base_MspInit+0xd8>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0a:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <HAL_TIM_Base_MspInit+0xd8>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b16:	e044      	b.n	8001ba2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a25      	ldr	r2, [pc, #148]	@ (8001bb4 <HAL_TIM_Base_MspInit+0xdc>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d10e      	bne.n	8001b40 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	4b22      	ldr	r3, [pc, #136]	@ (8001bb0 <HAL_TIM_Base_MspInit+0xd8>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	4a21      	ldr	r2, [pc, #132]	@ (8001bb0 <HAL_TIM_Base_MspInit+0xd8>)
 8001b2c:	f043 0310 	orr.w	r3, r3, #16
 8001b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b32:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb0 <HAL_TIM_Base_MspInit+0xd8>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697b      	ldr	r3, [r7, #20]
}
 8001b3e:	e030      	b.n	8001ba2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb8 <HAL_TIM_Base_MspInit+0xe0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d12b      	bne.n	8001ba2 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	4b18      	ldr	r3, [pc, #96]	@ (8001bb0 <HAL_TIM_Base_MspInit+0xd8>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	4a17      	ldr	r2, [pc, #92]	@ (8001bb0 <HAL_TIM_Base_MspInit+0xd8>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <HAL_TIM_Base_MspInit+0xd8>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_TIM_Base_MspInit+0xd8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4a10      	ldr	r2, [pc, #64]	@ (8001bb0 <HAL_TIM_Base_MspInit+0xd8>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <HAL_TIM_Base_MspInit+0xd8>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b82:	23c0      	movs	r3, #192	@ 0xc0
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b92:	2303      	movs	r3, #3
 8001b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4807      	ldr	r0, [pc, #28]	@ (8001bbc <HAL_TIM_Base_MspInit+0xe4>)
 8001b9e:	f000 fd0f 	bl	80025c0 <HAL_GPIO_Init>
}
 8001ba2:	bf00      	nop
 8001ba4:	3730      	adds	r7, #48	@ 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40001000 	.word	0x40001000
 8001bb8:	40010400 	.word	0x40010400
 8001bbc:	40020800 	.word	0x40020800

08001bc0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	@ 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be0:	d14a      	bne.n	8001c78 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	4b26      	ldr	r3, [pc, #152]	@ (8001c80 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	4a25      	ldr	r2, [pc, #148]	@ (8001c80 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf2:	4b23      	ldr	r3, [pc, #140]	@ (8001c80 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b1f      	ldr	r3, [pc, #124]	@ (8001c80 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a1e      	ldr	r2, [pc, #120]	@ (8001c80 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c80 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	4a17      	ldr	r2, [pc, #92]	@ (8001c80 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	480c      	ldr	r0, [pc, #48]	@ (8001c84 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001c54:	f000 fcb4 	bl	80025c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c58:	2308      	movs	r3, #8
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	4805      	ldr	r0, [pc, #20]	@ (8001c88 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001c74:	f000 fca4 	bl	80025c0 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	@ 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020000 	.word	0x40020000
 8001c88:	40020400 	.word	0x40020400

08001c8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	@ 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM3)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a19      	ldr	r2, [pc, #100]	@ (8001d10 <HAL_TIM_PWM_MspInit+0x84>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d12b      	bne.n	8001d06 <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x88>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	4a17      	ldr	r2, [pc, #92]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x88>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cbe:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x88>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x88>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a10      	ldr	r2, [pc, #64]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x88>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <HAL_TIM_PWM_MspInit+0x88>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ce6:	23c0      	movs	r3, #192	@ 0xc0
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	@ (8001d18 <HAL_TIM_PWM_MspInit+0x8c>)
 8001d02:	f000 fc5d 	bl	80025c0 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001d06:	bf00      	nop
 8001d08:	3728      	adds	r7, #40	@ 0x28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40000400 	.word	0x40000400
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40020000 	.word	0x40020000

08001d1c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	@ 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1d      	ldr	r2, [pc, #116]	@ (8001db0 <HAL_TIM_IC_MspInit+0x94>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d134      	bne.n	8001da8 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	4b1c      	ldr	r3, [pc, #112]	@ (8001db4 <HAL_TIM_IC_MspInit+0x98>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	4a1b      	ldr	r2, [pc, #108]	@ (8001db4 <HAL_TIM_IC_MspInit+0x98>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4e:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_TIM_IC_MspInit+0x98>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <HAL_TIM_IC_MspInit+0x98>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	4a14      	ldr	r2, [pc, #80]	@ (8001db4 <HAL_TIM_IC_MspInit+0x98>)
 8001d64:	f043 0308 	orr.w	r3, r3, #8
 8001d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <HAL_TIM_IC_MspInit+0x98>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8001d76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4809      	ldr	r0, [pc, #36]	@ (8001db8 <HAL_TIM_IC_MspInit+0x9c>)
 8001d94:	f000 fc14 	bl	80025c0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2105      	movs	r1, #5
 8001d9c:	201e      	movs	r0, #30
 8001d9e:	f000 fb46 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001da2:	201e      	movs	r0, #30
 8001da4:	f000 fb5f 	bl	8002466 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	@ 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40000800 	.word	0x40000800
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020c00 	.word	0x40020c00

08001dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a12      	ldr	r2, [pc, #72]	@ (8001e24 <HAL_TIM_MspPostInit+0x68>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d11e      	bne.n	8001e1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <HAL_TIM_MspPostInit+0x6c>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	4a10      	ldr	r2, [pc, #64]	@ (8001e28 <HAL_TIM_MspPostInit+0x6c>)
 8001de8:	f043 0310 	orr.w	r3, r3, #16
 8001dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <HAL_TIM_MspPostInit+0x6c>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001dfa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001dfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	4619      	mov	r1, r3
 8001e16:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <HAL_TIM_MspPostInit+0x70>)
 8001e18:	f000 fbd2 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40021000 	.word	0x40021000

08001e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	@ 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec4 <HAL_UART_MspInit+0x94>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d134      	bne.n	8001ebc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <HAL_UART_MspInit+0x98>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec8 <HAL_UART_MspInit+0x98>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e62:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <HAL_UART_MspInit+0x98>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <HAL_UART_MspInit+0x98>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a14      	ldr	r2, [pc, #80]	@ (8001ec8 <HAL_UART_MspInit+0x98>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <HAL_UART_MspInit+0x98>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e9c:	2307      	movs	r3, #7
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4809      	ldr	r0, [pc, #36]	@ (8001ecc <HAL_UART_MspInit+0x9c>)
 8001ea8:	f000 fb8a 	bl	80025c0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2105      	movs	r1, #5
 8001eb0:	2027      	movs	r0, #39	@ 0x27
 8001eb2:	f000 fabc 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001eb6:	2027      	movs	r0, #39	@ 0x27
 8001eb8:	f000 fad5 	bl	8002466 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001ebc:	bf00      	nop
 8001ebe:	3728      	adds	r7, #40	@ 0x28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40004800 	.word	0x40004800
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020800 	.word	0x40020800

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <NMI_Handler+0x4>

08001ed8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <BusFault_Handler+0x4>

08001ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <UsageFault_Handler+0x4>

08001ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f0a:	f000 f971 	bl	80021f0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f0e:	f005 fc25 	bl	800775c <xTaskGetSchedulerState>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d001      	beq.n	8001f1c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f18:	f006 fa1e 	bl	8008358 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f24:	4802      	ldr	r0, [pc, #8]	@ (8001f30 <TIM4_IRQHandler+0x10>)
 8001f26:	f001 fde1 	bl	8003aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200002cc 	.word	0x200002cc

08001f34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f38:	4802      	ldr	r0, [pc, #8]	@ (8001f44 <USART3_IRQHandler+0x10>)
 8001f3a:	f002 ff81 	bl	8004e40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200003a4 	.word	0x200003a4

08001f48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return 1;
 8001f4c:	2301      	movs	r3, #1
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_kill>:

int _kill(int pid, int sig)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f62:	f007 fc7b 	bl	800985c <__errno>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2216      	movs	r2, #22
 8001f6a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_exit>:

void _exit (int status)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ffe7 	bl	8001f58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f8a:	bf00      	nop
 8001f8c:	e7fd      	b.n	8001f8a <_exit+0x12>

08001f8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e00a      	b.n	8001fb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fa0:	f3af 8000 	nop.w
 8001fa4:	4601      	mov	r1, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	60ba      	str	r2, [r7, #8]
 8001fac:	b2ca      	uxtb	r2, r1
 8001fae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	dbf0      	blt.n	8001fa0 <_read+0x12>
  }

  return len;
 8001fbe:	687b      	ldr	r3, [r7, #4]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e009      	b.n	8001fee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	60ba      	str	r2, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	dbf1      	blt.n	8001fda <_write+0x12>
  }
  return len;
 8001ff6:	687b      	ldr	r3, [r7, #4]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_close>:

int _close(int file)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002028:	605a      	str	r2, [r3, #4]
  return 0;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_isatty>:

int _isatty(int file)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002040:	2301      	movs	r3, #1
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800204e:	b480      	push	{r7}
 8002050:	b085      	sub	sp, #20
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002070:	4a14      	ldr	r2, [pc, #80]	@ (80020c4 <_sbrk+0x5c>)
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <_sbrk+0x60>)
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800207c:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <_sbrk+0x64>)
 8002086:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <_sbrk+0x68>)
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208a:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <_sbrk+0x64>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	429a      	cmp	r2, r3
 8002096:	d207      	bcs.n	80020a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002098:	f007 fbe0 	bl	800985c <__errno>
 800209c:	4603      	mov	r3, r0
 800209e:	220c      	movs	r2, #12
 80020a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	e009      	b.n	80020bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a8:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ae:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	4a05      	ldr	r2, [pc, #20]	@ (80020cc <_sbrk+0x64>)
 80020b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20020000 	.word	0x20020000
 80020c8:	00000400 	.word	0x00000400
 80020cc:	20000414 	.word	0x20000414
 80020d0:	200052b8 	.word	0x200052b8

080020d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <SystemInit+0x20>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020de:	4a05      	ldr	r2, [pc, #20]	@ (80020f4 <SystemInit+0x20>)
 80020e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002130 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020fc:	f7ff ffea 	bl	80020d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002100:	480c      	ldr	r0, [pc, #48]	@ (8002134 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002102:	490d      	ldr	r1, [pc, #52]	@ (8002138 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002104:	4a0d      	ldr	r2, [pc, #52]	@ (800213c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002108:	e002      	b.n	8002110 <LoopCopyDataInit>

0800210a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800210c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210e:	3304      	adds	r3, #4

08002110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002114:	d3f9      	bcc.n	800210a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002116:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002118:	4c0a      	ldr	r4, [pc, #40]	@ (8002144 <LoopFillZerobss+0x22>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800211c:	e001      	b.n	8002122 <LoopFillZerobss>

0800211e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002120:	3204      	adds	r2, #4

08002122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002124:	d3fb      	bcc.n	800211e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002126:	f007 fb9f 	bl	8009868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212a:	f7fe feb5 	bl	8000e98 <main>
  bx  lr    
 800212e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002130:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002138:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800213c:	0800c858 	.word	0x0800c858
  ldr r2, =_sbss
 8002140:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002144:	200052b8 	.word	0x200052b8

08002148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002148:	e7fe      	b.n	8002148 <ADC_IRQHandler>
	...

0800214c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002150:	4b0e      	ldr	r3, [pc, #56]	@ (800218c <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0d      	ldr	r2, [pc, #52]	@ (800218c <HAL_Init+0x40>)
 8002156:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800215a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <HAL_Init+0x40>)
 8002162:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002168:	4b08      	ldr	r3, [pc, #32]	@ (800218c <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a07      	ldr	r2, [pc, #28]	@ (800218c <HAL_Init+0x40>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002174:	2003      	movs	r0, #3
 8002176:	f000 f94f 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217a:	200f      	movs	r0, #15
 800217c:	f000 f808 	bl	8002190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002180:	f7ff fc7e 	bl	8001a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00

08002190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002198:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <HAL_InitTick+0x54>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <HAL_InitTick+0x58>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4619      	mov	r1, r3
 80021a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f967 	bl	8002482 <HAL_SYSTICK_Config>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00e      	b.n	80021dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b0f      	cmp	r3, #15
 80021c2:	d80a      	bhi.n	80021da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c4:	2200      	movs	r2, #0
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	f000 f92f 	bl	800242e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d0:	4a06      	ldr	r2, [pc, #24]	@ (80021ec <HAL_InitTick+0x5c>)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e000      	b.n	80021dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000000 	.word	0x20000000
 80021e8:	20000008 	.word	0x20000008
 80021ec:	20000004 	.word	0x20000004

080021f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_IncTick+0x20>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_IncTick+0x24>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <HAL_IncTick+0x24>)
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000008 	.word	0x20000008
 8002214:	20000418 	.word	0x20000418

08002218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return uwTick;
 800221c:	4b03      	ldr	r3, [pc, #12]	@ (800222c <HAL_GetTick+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000418 	.word	0x20000418

08002230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff ffee 	bl	8002218 <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d005      	beq.n	8002256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224a:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_Delay+0x44>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002256:	bf00      	nop
 8002258:	f7ff ffde 	bl	8002218 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	d8f7      	bhi.n	8002258 <HAL_Delay+0x28>
  {
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000008 	.word	0x20000008

08002278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	@ (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	db0b      	blt.n	8002306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4907      	ldr	r1, [pc, #28]	@ (8002314 <__NVIC_EnableIRQ+0x38>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2001      	movs	r0, #1
 80022fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	@ (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	@ (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	@ 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	@ 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023e4:	d301      	bcc.n	80023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <SysTick_Config+0x40>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f2:	210f      	movs	r1, #15
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f7ff ff8e 	bl	8002318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <SysTick_Config+0x40>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <SysTick_Config+0x40>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff29 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff3e 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff8e 	bl	800236c <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5d 	bl	8002318 <__NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff31 	bl	80022dc <__NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffa2 	bl	80023d4 <SysTick_Config>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7ff feb6 	bl	8002218 <HAL_GetTick>
 80024ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d008      	beq.n	80024cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2280      	movs	r2, #128	@ 0x80
 80024be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e052      	b.n	8002572 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0216 	bic.w	r2, r2, #22
 80024da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d103      	bne.n	80024fc <HAL_DMA_Abort+0x62>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d007      	beq.n	800250c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0208 	bic.w	r2, r2, #8
 800250a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800251c:	e013      	b.n	8002546 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800251e:	f7ff fe7b 	bl	8002218 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b05      	cmp	r3, #5
 800252a:	d90c      	bls.n	8002546 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2203      	movs	r2, #3
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e015      	b.n	8002572 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e4      	bne.n	800251e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002558:	223f      	movs	r2, #63	@ 0x3f
 800255a:	409a      	lsls	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d004      	beq.n	8002598 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2280      	movs	r2, #128	@ 0x80
 8002592:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e00c      	b.n	80025b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2205      	movs	r2, #5
 800259c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	@ 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	e16b      	b.n	80028b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	f040 815a 	bne.w	80028ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d005      	beq.n	8002612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260e:	2b02      	cmp	r3, #2
 8002610:	d130      	bne.n	8002674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002648:	2201      	movs	r2, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 0201 	and.w	r2, r3, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b03      	cmp	r3, #3
 800267e:	d017      	beq.n	80026b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d123      	bne.n	8002704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	08da      	lsrs	r2, r3, #3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3208      	adds	r2, #8
 80026c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	220f      	movs	r2, #15
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	08da      	lsrs	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3208      	adds	r2, #8
 80026fe:	69b9      	ldr	r1, [r7, #24]
 8002700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0203 	and.w	r2, r3, #3
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80b4 	beq.w	80028ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	4b60      	ldr	r3, [pc, #384]	@ (80028cc <HAL_GPIO_Init+0x30c>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274e:	4a5f      	ldr	r2, [pc, #380]	@ (80028cc <HAL_GPIO_Init+0x30c>)
 8002750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002754:	6453      	str	r3, [r2, #68]	@ 0x44
 8002756:	4b5d      	ldr	r3, [pc, #372]	@ (80028cc <HAL_GPIO_Init+0x30c>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002762:	4a5b      	ldr	r2, [pc, #364]	@ (80028d0 <HAL_GPIO_Init+0x310>)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	089b      	lsrs	r3, r3, #2
 8002768:	3302      	adds	r3, #2
 800276a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	220f      	movs	r2, #15
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a52      	ldr	r2, [pc, #328]	@ (80028d4 <HAL_GPIO_Init+0x314>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d02b      	beq.n	80027e6 <HAL_GPIO_Init+0x226>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a51      	ldr	r2, [pc, #324]	@ (80028d8 <HAL_GPIO_Init+0x318>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d025      	beq.n	80027e2 <HAL_GPIO_Init+0x222>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a50      	ldr	r2, [pc, #320]	@ (80028dc <HAL_GPIO_Init+0x31c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d01f      	beq.n	80027de <HAL_GPIO_Init+0x21e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a4f      	ldr	r2, [pc, #316]	@ (80028e0 <HAL_GPIO_Init+0x320>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d019      	beq.n	80027da <HAL_GPIO_Init+0x21a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a4e      	ldr	r2, [pc, #312]	@ (80028e4 <HAL_GPIO_Init+0x324>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_GPIO_Init+0x216>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4d      	ldr	r2, [pc, #308]	@ (80028e8 <HAL_GPIO_Init+0x328>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00d      	beq.n	80027d2 <HAL_GPIO_Init+0x212>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4c      	ldr	r2, [pc, #304]	@ (80028ec <HAL_GPIO_Init+0x32c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <HAL_GPIO_Init+0x20e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4b      	ldr	r2, [pc, #300]	@ (80028f0 <HAL_GPIO_Init+0x330>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_GPIO_Init+0x20a>
 80027c6:	2307      	movs	r3, #7
 80027c8:	e00e      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027ca:	2308      	movs	r3, #8
 80027cc:	e00c      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027ce:	2306      	movs	r3, #6
 80027d0:	e00a      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027d2:	2305      	movs	r3, #5
 80027d4:	e008      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027d6:	2304      	movs	r3, #4
 80027d8:	e006      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027da:	2303      	movs	r3, #3
 80027dc:	e004      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027de:	2302      	movs	r3, #2
 80027e0:	e002      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027e6:	2300      	movs	r3, #0
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f002 0203 	and.w	r2, r2, #3
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	4093      	lsls	r3, r2
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f8:	4935      	ldr	r1, [pc, #212]	@ (80028d0 <HAL_GPIO_Init+0x310>)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002806:	4b3b      	ldr	r3, [pc, #236]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800282a:	4a32      	ldr	r2, [pc, #200]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002830:	4b30      	ldr	r3, [pc, #192]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002854:	4a27      	ldr	r2, [pc, #156]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800285a:	4b26      	ldr	r3, [pc, #152]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287e:	4a1d      	ldr	r2, [pc, #116]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002884:	4b1b      	ldr	r3, [pc, #108]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a8:	4a12      	ldr	r2, [pc, #72]	@ (80028f4 <HAL_GPIO_Init+0x334>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3301      	adds	r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	f67f ae90 	bls.w	80025dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3724      	adds	r7, #36	@ 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40013800 	.word	0x40013800
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40020400 	.word	0x40020400
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40021400 	.word	0x40021400
 80028ec:	40021800 	.word	0x40021800
 80028f0:	40021c00 	.word	0x40021c00
 80028f4:	40013c00 	.word	0x40013c00

080028f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
 8002904:	4613      	mov	r3, r2
 8002906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002908:	787b      	ldrb	r3, [r7, #1]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002914:	e003      	b.n	800291e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002916:	887b      	ldrh	r3, [r7, #2]
 8002918:	041a      	lsls	r2, r3, #16
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	619a      	str	r2, [r3, #24]
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002932:	4b06      	ldr	r3, [pc, #24]	@ (800294c <HAL_PWR_EnableBkUpAccess+0x20>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002938:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <HAL_PWR_EnableBkUpAccess+0x24>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800293e:	687b      	ldr	r3, [r7, #4]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	420e0020 	.word	0x420e0020
 8002950:	40007000 	.word	0x40007000

08002954 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800295a:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <HAL_PWR_DisableBkUpAccess+0x20>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002960:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <HAL_PWR_DisableBkUpAccess+0x24>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002966:	687b      	ldr	r3, [r7, #4]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	420e0020 	.word	0x420e0020
 8002978:	40007000 	.word	0x40007000

0800297c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e267      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d075      	beq.n	8002a86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800299a:	4b88      	ldr	r3, [pc, #544]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d00c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a6:	4b85      	ldr	r3, [pc, #532]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d112      	bne.n	80029d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b2:	4b82      	ldr	r3, [pc, #520]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029be:	d10b      	bne.n	80029d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	4b7e      	ldr	r3, [pc, #504]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d05b      	beq.n	8002a84 <HAL_RCC_OscConfig+0x108>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d157      	bne.n	8002a84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e242      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e0:	d106      	bne.n	80029f0 <HAL_RCC_OscConfig+0x74>
 80029e2:	4b76      	ldr	r3, [pc, #472]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a75      	ldr	r2, [pc, #468]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e01d      	b.n	8002a2c <HAL_RCC_OscConfig+0xb0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x98>
 80029fa:	4b70      	ldr	r3, [pc, #448]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a6f      	ldr	r2, [pc, #444]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b6d      	ldr	r3, [pc, #436]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a6c      	ldr	r2, [pc, #432]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e00b      	b.n	8002a2c <HAL_RCC_OscConfig+0xb0>
 8002a14:	4b69      	ldr	r3, [pc, #420]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a68      	ldr	r2, [pc, #416]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b66      	ldr	r3, [pc, #408]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a65      	ldr	r2, [pc, #404]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7ff fbf0 	bl	8002218 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7ff fbec 	bl	8002218 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	@ 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e207      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0xc0>
 8002a5a:	e014      	b.n	8002a86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7ff fbdc 	bl	8002218 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a64:	f7ff fbd8 	bl	8002218 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	@ 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e1f3      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	4b51      	ldr	r3, [pc, #324]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0xe8>
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d063      	beq.n	8002b5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a92:	4b4a      	ldr	r3, [pc, #296]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9e:	4b47      	ldr	r3, [pc, #284]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d11c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aaa:	4b44      	ldr	r3, [pc, #272]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d116      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	4b41      	ldr	r3, [pc, #260]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_RCC_OscConfig+0x152>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d001      	beq.n	8002ace <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e1c7      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ace:	4b3b      	ldr	r3, [pc, #236]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4937      	ldr	r1, [pc, #220]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	e03a      	b.n	8002b5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d020      	beq.n	8002b2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aec:	4b34      	ldr	r3, [pc, #208]	@ (8002bc0 <HAL_RCC_OscConfig+0x244>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7ff fb91 	bl	8002218 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afa:	f7ff fb8d 	bl	8002218 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1a8      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b18:	4b28      	ldr	r3, [pc, #160]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4925      	ldr	r1, [pc, #148]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]
 8002b2c:	e015      	b.n	8002b5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2e:	4b24      	ldr	r3, [pc, #144]	@ (8002bc0 <HAL_RCC_OscConfig+0x244>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7ff fb70 	bl	8002218 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3c:	f7ff fb6c 	bl	8002218 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e187      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d036      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d016      	beq.n	8002b9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6e:	4b15      	ldr	r3, [pc, #84]	@ (8002bc4 <HAL_RCC_OscConfig+0x248>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7ff fb50 	bl	8002218 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b7c:	f7ff fb4c 	bl	8002218 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e167      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x200>
 8002b9a:	e01b      	b.n	8002bd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b9c:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <HAL_RCC_OscConfig+0x248>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba2:	f7ff fb39 	bl	8002218 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba8:	e00e      	b.n	8002bc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002baa:	f7ff fb35 	bl	8002218 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d907      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e150      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	42470000 	.word	0x42470000
 8002bc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc8:	4b88      	ldr	r3, [pc, #544]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ea      	bne.n	8002baa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8097 	beq.w	8002d10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be6:	4b81      	ldr	r3, [pc, #516]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10f      	bne.n	8002c12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	4b7d      	ldr	r3, [pc, #500]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	4a7c      	ldr	r2, [pc, #496]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c02:	4b7a      	ldr	r3, [pc, #488]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c12:	4b77      	ldr	r3, [pc, #476]	@ (8002df0 <HAL_RCC_OscConfig+0x474>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d118      	bne.n	8002c50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1e:	4b74      	ldr	r3, [pc, #464]	@ (8002df0 <HAL_RCC_OscConfig+0x474>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a73      	ldr	r2, [pc, #460]	@ (8002df0 <HAL_RCC_OscConfig+0x474>)
 8002c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2a:	f7ff faf5 	bl	8002218 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c32:	f7ff faf1 	bl	8002218 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e10c      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	4b6a      	ldr	r3, [pc, #424]	@ (8002df0 <HAL_RCC_OscConfig+0x474>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f0      	beq.n	8002c32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d106      	bne.n	8002c66 <HAL_RCC_OscConfig+0x2ea>
 8002c58:	4b64      	ldr	r3, [pc, #400]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5c:	4a63      	ldr	r2, [pc, #396]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c64:	e01c      	b.n	8002ca0 <HAL_RCC_OscConfig+0x324>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b05      	cmp	r3, #5
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x30c>
 8002c6e:	4b5f      	ldr	r3, [pc, #380]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c72:	4a5e      	ldr	r2, [pc, #376]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c74:	f043 0304 	orr.w	r3, r3, #4
 8002c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c7a:	4b5c      	ldr	r3, [pc, #368]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCC_OscConfig+0x324>
 8002c88:	4b58      	ldr	r3, [pc, #352]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8c:	4a57      	ldr	r2, [pc, #348]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c94:	4b55      	ldr	r3, [pc, #340]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c98:	4a54      	ldr	r2, [pc, #336]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c9a:	f023 0304 	bic.w	r3, r3, #4
 8002c9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d015      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7ff fab6 	bl	8002218 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb0:	f7ff fab2 	bl	8002218 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e0cb      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc6:	4b49      	ldr	r3, [pc, #292]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0ee      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x334>
 8002cd2:	e014      	b.n	8002cfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd4:	f7ff faa0 	bl	8002218 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7ff fa9c 	bl	8002218 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e0b5      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1ee      	bne.n	8002cdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d04:	4b39      	ldr	r3, [pc, #228]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d08:	4a38      	ldr	r2, [pc, #224]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002d0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80a1 	beq.w	8002e5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d1a:	4b34      	ldr	r3, [pc, #208]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d05c      	beq.n	8002de0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d141      	bne.n	8002db2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2e:	4b31      	ldr	r3, [pc, #196]	@ (8002df4 <HAL_RCC_OscConfig+0x478>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7ff fa70 	bl	8002218 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7ff fa6c 	bl	8002218 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e087      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4e:	4b27      	ldr	r3, [pc, #156]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69da      	ldr	r2, [r3, #28]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	019b      	lsls	r3, r3, #6
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d70:	085b      	lsrs	r3, r3, #1
 8002d72:	3b01      	subs	r3, #1
 8002d74:	041b      	lsls	r3, r3, #16
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	491b      	ldr	r1, [pc, #108]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d84:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <HAL_RCC_OscConfig+0x478>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7ff fa45 	bl	8002218 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d92:	f7ff fa41 	bl	8002218 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e05c      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da4:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x416>
 8002db0:	e054      	b.n	8002e5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db2:	4b10      	ldr	r3, [pc, #64]	@ (8002df4 <HAL_RCC_OscConfig+0x478>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7ff fa2e 	bl	8002218 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7ff fa2a 	bl	8002218 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e045      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd2:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <HAL_RCC_OscConfig+0x470>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x444>
 8002dde:	e03d      	b.n	8002e5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e038      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40007000 	.word	0x40007000
 8002df4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002df8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e68 <HAL_RCC_OscConfig+0x4ec>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d028      	beq.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d121      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d11a      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e28:	4013      	ands	r3, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d111      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	3b01      	subs	r3, #1
 8002e42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d107      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800

08002e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0cc      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e80:	4b68      	ldr	r3, [pc, #416]	@ (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d90c      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b65      	ldr	r3, [pc, #404]	@ (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b63      	ldr	r3, [pc, #396]	@ (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0b8      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec0:	4b59      	ldr	r3, [pc, #356]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4a58      	ldr	r2, [pc, #352]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002eca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed8:	4b53      	ldr	r3, [pc, #332]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4a52      	ldr	r2, [pc, #328]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ee2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b50      	ldr	r3, [pc, #320]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	494d      	ldr	r1, [pc, #308]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d044      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	4b47      	ldr	r3, [pc, #284]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d119      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e07f      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d003      	beq.n	8002f2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d107      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2a:	4b3f      	ldr	r3, [pc, #252]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e06f      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e067      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f4a:	4b37      	ldr	r3, [pc, #220]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f023 0203 	bic.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4934      	ldr	r1, [pc, #208]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f5c:	f7ff f95c 	bl	8002218 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f64:	f7ff f958 	bl	8002218 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e04f      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 020c 	and.w	r2, r3, #12
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d1eb      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b25      	ldr	r3, [pc, #148]	@ (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d20c      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b22      	ldr	r3, [pc, #136]	@ (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b20      	ldr	r3, [pc, #128]	@ (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e032      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc0:	4b19      	ldr	r3, [pc, #100]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4916      	ldr	r1, [pc, #88]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fde:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	490e      	ldr	r1, [pc, #56]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ff2:	f000 f821 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	490a      	ldr	r1, [pc, #40]	@ (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	5ccb      	ldrb	r3, [r1, r3]
 8003006:	fa22 f303 	lsr.w	r3, r2, r3
 800300a:	4a09      	ldr	r2, [pc, #36]	@ (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800300e:	4b09      	ldr	r3, [pc, #36]	@ (8003034 <HAL_RCC_ClockConfig+0x1c8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff f8bc 	bl	8002190 <HAL_InitTick>

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023c00 	.word	0x40023c00
 8003028:	40023800 	.word	0x40023800
 800302c:	0800ba5c 	.word	0x0800ba5c
 8003030:	20000000 	.word	0x20000000
 8003034:	20000004 	.word	0x20000004

08003038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800303c:	b090      	sub	sp, #64	@ 0x40
 800303e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	637b      	str	r3, [r7, #52]	@ 0x34
 8003044:	2300      	movs	r3, #0
 8003046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003048:	2300      	movs	r3, #0
 800304a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003050:	4b59      	ldr	r3, [pc, #356]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b08      	cmp	r3, #8
 800305a:	d00d      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0x40>
 800305c:	2b08      	cmp	r3, #8
 800305e:	f200 80a1 	bhi.w	80031a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0x34>
 8003066:	2b04      	cmp	r3, #4
 8003068:	d003      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x3a>
 800306a:	e09b      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800306c:	4b53      	ldr	r3, [pc, #332]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x184>)
 800306e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003070:	e09b      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003072:	4b53      	ldr	r3, [pc, #332]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003074:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003076:	e098      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003078:	4b4f      	ldr	r3, [pc, #316]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003080:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003082:	4b4d      	ldr	r3, [pc, #308]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d028      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308e:	4b4a      	ldr	r3, [pc, #296]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	099b      	lsrs	r3, r3, #6
 8003094:	2200      	movs	r2, #0
 8003096:	623b      	str	r3, [r7, #32]
 8003098:	627a      	str	r2, [r7, #36]	@ 0x24
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030a0:	2100      	movs	r1, #0
 80030a2:	4b47      	ldr	r3, [pc, #284]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80030a4:	fb03 f201 	mul.w	r2, r3, r1
 80030a8:	2300      	movs	r3, #0
 80030aa:	fb00 f303 	mul.w	r3, r0, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	4a43      	ldr	r2, [pc, #268]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80030b2:	fba0 1202 	umull	r1, r2, r0, r2
 80030b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030b8:	460a      	mov	r2, r1
 80030ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030be:	4413      	add	r3, r2
 80030c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c4:	2200      	movs	r2, #0
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	61fa      	str	r2, [r7, #28]
 80030ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030d2:	f7fd fd69 	bl	8000ba8 <__aeabi_uldivmod>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4613      	mov	r3, r2
 80030dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030de:	e053      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e0:	4b35      	ldr	r3, [pc, #212]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	099b      	lsrs	r3, r3, #6
 80030e6:	2200      	movs	r2, #0
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	617a      	str	r2, [r7, #20]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030f2:	f04f 0b00 	mov.w	fp, #0
 80030f6:	4652      	mov	r2, sl
 80030f8:	465b      	mov	r3, fp
 80030fa:	f04f 0000 	mov.w	r0, #0
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	0159      	lsls	r1, r3, #5
 8003104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003108:	0150      	lsls	r0, r2, #5
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	ebb2 080a 	subs.w	r8, r2, sl
 8003112:	eb63 090b 	sbc.w	r9, r3, fp
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003122:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003126:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800312a:	ebb2 0408 	subs.w	r4, r2, r8
 800312e:	eb63 0509 	sbc.w	r5, r3, r9
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	00eb      	lsls	r3, r5, #3
 800313c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003140:	00e2      	lsls	r2, r4, #3
 8003142:	4614      	mov	r4, r2
 8003144:	461d      	mov	r5, r3
 8003146:	eb14 030a 	adds.w	r3, r4, sl
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	eb45 030b 	adc.w	r3, r5, fp
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800315e:	4629      	mov	r1, r5
 8003160:	028b      	lsls	r3, r1, #10
 8003162:	4621      	mov	r1, r4
 8003164:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003168:	4621      	mov	r1, r4
 800316a:	028a      	lsls	r2, r1, #10
 800316c:	4610      	mov	r0, r2
 800316e:	4619      	mov	r1, r3
 8003170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003172:	2200      	movs	r2, #0
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	60fa      	str	r2, [r7, #12]
 8003178:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800317c:	f7fd fd14 	bl	8000ba8 <__aeabi_uldivmod>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4613      	mov	r3, r2
 8003186:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003188:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	3301      	adds	r3, #1
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003198:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319c:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031a2:	e002      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031a4:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x184>)
 80031a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3740      	adds	r7, #64	@ 0x40
 80031b0:	46bd      	mov	sp, r7
 80031b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800
 80031bc:	00f42400 	.word	0x00f42400
 80031c0:	017d7840 	.word	0x017d7840

080031c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c8:	4b03      	ldr	r3, [pc, #12]	@ (80031d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000000 	.word	0x20000000

080031dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031e0:	f7ff fff0 	bl	80031c4 <HAL_RCC_GetHCLKFreq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b05      	ldr	r3, [pc, #20]	@ (80031fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	0a9b      	lsrs	r3, r3, #10
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	4903      	ldr	r1, [pc, #12]	@ (8003200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40023800 	.word	0x40023800
 8003200:	0800ba6c 	.word	0x0800ba6c

08003204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003208:	f7ff ffdc 	bl	80031c4 <HAL_RCC_GetHCLKFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	0b5b      	lsrs	r3, r3, #13
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4903      	ldr	r1, [pc, #12]	@ (8003228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40023800 	.word	0x40023800
 8003228:	0800ba6c 	.word	0x0800ba6c

0800322c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e041      	b.n	80032c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fe fc40 	bl	8001ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f000 ffc0 	bl	80041f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d001      	beq.n	80032e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e046      	b.n	8003372 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a23      	ldr	r2, [pc, #140]	@ (8003380 <HAL_TIM_Base_Start+0xb4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d022      	beq.n	800333c <HAL_TIM_Base_Start+0x70>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032fe:	d01d      	beq.n	800333c <HAL_TIM_Base_Start+0x70>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1f      	ldr	r2, [pc, #124]	@ (8003384 <HAL_TIM_Base_Start+0xb8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d018      	beq.n	800333c <HAL_TIM_Base_Start+0x70>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1e      	ldr	r2, [pc, #120]	@ (8003388 <HAL_TIM_Base_Start+0xbc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d013      	beq.n	800333c <HAL_TIM_Base_Start+0x70>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1c      	ldr	r2, [pc, #112]	@ (800338c <HAL_TIM_Base_Start+0xc0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00e      	beq.n	800333c <HAL_TIM_Base_Start+0x70>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1b      	ldr	r2, [pc, #108]	@ (8003390 <HAL_TIM_Base_Start+0xc4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d009      	beq.n	800333c <HAL_TIM_Base_Start+0x70>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a19      	ldr	r2, [pc, #100]	@ (8003394 <HAL_TIM_Base_Start+0xc8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d004      	beq.n	800333c <HAL_TIM_Base_Start+0x70>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a18      	ldr	r2, [pc, #96]	@ (8003398 <HAL_TIM_Base_Start+0xcc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d111      	bne.n	8003360 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b06      	cmp	r3, #6
 800334c:	d010      	beq.n	8003370 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335e:	e007      	b.n	8003370 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40010000 	.word	0x40010000
 8003384:	40000400 	.word	0x40000400
 8003388:	40000800 	.word	0x40000800
 800338c:	40000c00 	.word	0x40000c00
 8003390:	40010400 	.word	0x40010400
 8003394:	40014000 	.word	0x40014000
 8003398:	40001800 	.word	0x40001800

0800339c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e041      	b.n	8003432 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fe fc62 	bl	8001c8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3304      	adds	r3, #4
 80033d8:	4619      	mov	r1, r3
 80033da:	4610      	mov	r0, r2
 80033dc:	f000 ff08 	bl	80041f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e041      	b.n	80034d0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7fe fc5b 	bl	8001d1c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2202      	movs	r2, #2
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3304      	adds	r3, #4
 8003476:	4619      	mov	r1, r3
 8003478:	4610      	mov	r0, r2
 800347a:	f000 feb9 	bl	80041f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d104      	bne.n	80034f6 <HAL_TIM_IC_Start_IT+0x1e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	e013      	b.n	800351e <HAL_TIM_IC_Start_IT+0x46>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d104      	bne.n	8003506 <HAL_TIM_IC_Start_IT+0x2e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003502:	b2db      	uxtb	r3, r3
 8003504:	e00b      	b.n	800351e <HAL_TIM_IC_Start_IT+0x46>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d104      	bne.n	8003516 <HAL_TIM_IC_Start_IT+0x3e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003512:	b2db      	uxtb	r3, r3
 8003514:	e003      	b.n	800351e <HAL_TIM_IC_Start_IT+0x46>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351c:	b2db      	uxtb	r3, r3
 800351e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d104      	bne.n	8003530 <HAL_TIM_IC_Start_IT+0x58>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800352c:	b2db      	uxtb	r3, r3
 800352e:	e013      	b.n	8003558 <HAL_TIM_IC_Start_IT+0x80>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b04      	cmp	r3, #4
 8003534:	d104      	bne.n	8003540 <HAL_TIM_IC_Start_IT+0x68>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800353c:	b2db      	uxtb	r3, r3
 800353e:	e00b      	b.n	8003558 <HAL_TIM_IC_Start_IT+0x80>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b08      	cmp	r3, #8
 8003544:	d104      	bne.n	8003550 <HAL_TIM_IC_Start_IT+0x78>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e003      	b.n	8003558 <HAL_TIM_IC_Start_IT+0x80>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003556:	b2db      	uxtb	r3, r3
 8003558:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800355a:	7bbb      	ldrb	r3, [r7, #14]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d102      	bne.n	8003566 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003560:	7b7b      	ldrb	r3, [r7, #13]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d001      	beq.n	800356a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0cc      	b.n	8003704 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d104      	bne.n	800357a <HAL_TIM_IC_Start_IT+0xa2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003578:	e013      	b.n	80035a2 <HAL_TIM_IC_Start_IT+0xca>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b04      	cmp	r3, #4
 800357e:	d104      	bne.n	800358a <HAL_TIM_IC_Start_IT+0xb2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003588:	e00b      	b.n	80035a2 <HAL_TIM_IC_Start_IT+0xca>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b08      	cmp	r3, #8
 800358e:	d104      	bne.n	800359a <HAL_TIM_IC_Start_IT+0xc2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003598:	e003      	b.n	80035a2 <HAL_TIM_IC_Start_IT+0xca>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_IC_Start_IT+0xda>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035b0:	e013      	b.n	80035da <HAL_TIM_IC_Start_IT+0x102>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_IC_Start_IT+0xea>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035c0:	e00b      	b.n	80035da <HAL_TIM_IC_Start_IT+0x102>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_IC_Start_IT+0xfa>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035d0:	e003      	b.n	80035da <HAL_TIM_IC_Start_IT+0x102>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2202      	movs	r2, #2
 80035d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b0c      	cmp	r3, #12
 80035de:	d841      	bhi.n	8003664 <HAL_TIM_IC_Start_IT+0x18c>
 80035e0:	a201      	add	r2, pc, #4	@ (adr r2, 80035e8 <HAL_TIM_IC_Start_IT+0x110>)
 80035e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e6:	bf00      	nop
 80035e8:	0800361d 	.word	0x0800361d
 80035ec:	08003665 	.word	0x08003665
 80035f0:	08003665 	.word	0x08003665
 80035f4:	08003665 	.word	0x08003665
 80035f8:	0800362f 	.word	0x0800362f
 80035fc:	08003665 	.word	0x08003665
 8003600:	08003665 	.word	0x08003665
 8003604:	08003665 	.word	0x08003665
 8003608:	08003641 	.word	0x08003641
 800360c:	08003665 	.word	0x08003665
 8003610:	08003665 	.word	0x08003665
 8003614:	08003665 	.word	0x08003665
 8003618:	08003653 	.word	0x08003653
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0202 	orr.w	r2, r2, #2
 800362a:	60da      	str	r2, [r3, #12]
      break;
 800362c:	e01d      	b.n	800366a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0204 	orr.w	r2, r2, #4
 800363c:	60da      	str	r2, [r3, #12]
      break;
 800363e:	e014      	b.n	800366a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0208 	orr.w	r2, r2, #8
 800364e:	60da      	str	r2, [r3, #12]
      break;
 8003650:	e00b      	b.n	800366a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0210 	orr.w	r2, r2, #16
 8003660:	60da      	str	r2, [r3, #12]
      break;
 8003662:	e002      	b.n	800366a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
      break;
 8003668:	bf00      	nop
  }

  if (status == HAL_OK)
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d148      	bne.n	8003702 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2201      	movs	r2, #1
 8003676:	6839      	ldr	r1, [r7, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f001 f9d9 	bl	8004a30 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a22      	ldr	r2, [pc, #136]	@ (800370c <HAL_TIM_IC_Start_IT+0x234>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d022      	beq.n	80036ce <HAL_TIM_IC_Start_IT+0x1f6>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003690:	d01d      	beq.n	80036ce <HAL_TIM_IC_Start_IT+0x1f6>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1e      	ldr	r2, [pc, #120]	@ (8003710 <HAL_TIM_IC_Start_IT+0x238>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d018      	beq.n	80036ce <HAL_TIM_IC_Start_IT+0x1f6>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003714 <HAL_TIM_IC_Start_IT+0x23c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_TIM_IC_Start_IT+0x1f6>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003718 <HAL_TIM_IC_Start_IT+0x240>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00e      	beq.n	80036ce <HAL_TIM_IC_Start_IT+0x1f6>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a19      	ldr	r2, [pc, #100]	@ (800371c <HAL_TIM_IC_Start_IT+0x244>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d009      	beq.n	80036ce <HAL_TIM_IC_Start_IT+0x1f6>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a18      	ldr	r2, [pc, #96]	@ (8003720 <HAL_TIM_IC_Start_IT+0x248>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d004      	beq.n	80036ce <HAL_TIM_IC_Start_IT+0x1f6>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a16      	ldr	r2, [pc, #88]	@ (8003724 <HAL_TIM_IC_Start_IT+0x24c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d111      	bne.n	80036f2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b06      	cmp	r3, #6
 80036de:	d010      	beq.n	8003702 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f0:	e007      	b.n	8003702 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0201 	orr.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003702:	7bfb      	ldrb	r3, [r7, #15]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40010000 	.word	0x40010000
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800
 8003718:	40000c00 	.word	0x40000c00
 800371c:	40010400 	.word	0x40010400
 8003720:	40014000 	.word	0x40014000
 8003724:	40001800 	.word	0x40001800

08003728 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b0c      	cmp	r3, #12
 800373a:	d841      	bhi.n	80037c0 <HAL_TIM_IC_Stop_IT+0x98>
 800373c:	a201      	add	r2, pc, #4	@ (adr r2, 8003744 <HAL_TIM_IC_Stop_IT+0x1c>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003779 	.word	0x08003779
 8003748:	080037c1 	.word	0x080037c1
 800374c:	080037c1 	.word	0x080037c1
 8003750:	080037c1 	.word	0x080037c1
 8003754:	0800378b 	.word	0x0800378b
 8003758:	080037c1 	.word	0x080037c1
 800375c:	080037c1 	.word	0x080037c1
 8003760:	080037c1 	.word	0x080037c1
 8003764:	0800379d 	.word	0x0800379d
 8003768:	080037c1 	.word	0x080037c1
 800376c:	080037c1 	.word	0x080037c1
 8003770:	080037c1 	.word	0x080037c1
 8003774:	080037af 	.word	0x080037af
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0202 	bic.w	r2, r2, #2
 8003786:	60da      	str	r2, [r3, #12]
      break;
 8003788:	e01d      	b.n	80037c6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0204 	bic.w	r2, r2, #4
 8003798:	60da      	str	r2, [r3, #12]
      break;
 800379a:	e014      	b.n	80037c6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0208 	bic.w	r2, r2, #8
 80037aa:	60da      	str	r2, [r3, #12]
      break;
 80037ac:	e00b      	b.n	80037c6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0210 	bic.w	r2, r2, #16
 80037bc:	60da      	str	r2, [r3, #12]
      break;
 80037be:	e002      	b.n	80037c6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
      break;
 80037c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d156      	bne.n	800387a <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2200      	movs	r2, #0
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f001 f92b 	bl	8004a30 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a1a      	ldr	r2, [r3, #32]
 80037e0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10f      	bne.n	800380a <HAL_TIM_IC_Stop_IT+0xe2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6a1a      	ldr	r2, [r3, #32]
 80037f0:	f240 4344 	movw	r3, #1092	@ 0x444
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d107      	bne.n	800380a <HAL_TIM_IC_Stop_IT+0xe2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d104      	bne.n	800381a <HAL_TIM_IC_Stop_IT+0xf2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003818:	e013      	b.n	8003842 <HAL_TIM_IC_Stop_IT+0x11a>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d104      	bne.n	800382a <HAL_TIM_IC_Stop_IT+0x102>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003828:	e00b      	b.n	8003842 <HAL_TIM_IC_Stop_IT+0x11a>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b08      	cmp	r3, #8
 800382e:	d104      	bne.n	800383a <HAL_TIM_IC_Stop_IT+0x112>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003838:	e003      	b.n	8003842 <HAL_TIM_IC_Stop_IT+0x11a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d104      	bne.n	8003852 <HAL_TIM_IC_Stop_IT+0x12a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003850:	e013      	b.n	800387a <HAL_TIM_IC_Stop_IT+0x152>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d104      	bne.n	8003862 <HAL_TIM_IC_Stop_IT+0x13a>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003860:	e00b      	b.n	800387a <HAL_TIM_IC_Stop_IT+0x152>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b08      	cmp	r3, #8
 8003866:	d104      	bne.n	8003872 <HAL_TIM_IC_Stop_IT+0x14a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003870:	e003      	b.n	800387a <HAL_TIM_IC_Stop_IT+0x152>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 800387a:	7bfb      	ldrb	r3, [r7, #15]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e097      	b.n	80039c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d106      	bne.n	80038b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7fe f987 	bl	8001bc0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2202      	movs	r2, #2
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038c8:	f023 0307 	bic.w	r3, r3, #7
 80038cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f000 fc89 	bl	80041f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003906:	f023 0303 	bic.w	r3, r3, #3
 800390a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	4313      	orrs	r3, r2
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003924:	f023 030c 	bic.w	r3, r3, #12
 8003928:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003930:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003934:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	4313      	orrs	r3, r2
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	011a      	lsls	r2, r3, #4
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	031b      	lsls	r3, r3, #12
 8003954:	4313      	orrs	r3, r2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003962:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800396a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	4313      	orrs	r3, r2
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80039f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d110      	bne.n	8003a22 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d102      	bne.n	8003a0c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a06:	7b7b      	ldrb	r3, [r7, #13]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d001      	beq.n	8003a10 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e069      	b.n	8003ae4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a20:	e031      	b.n	8003a86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d110      	bne.n	8003a4a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a28:	7bbb      	ldrb	r3, [r7, #14]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d102      	bne.n	8003a34 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a2e:	7b3b      	ldrb	r3, [r7, #12]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d001      	beq.n	8003a38 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e055      	b.n	8003ae4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a48:	e01d      	b.n	8003a86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d108      	bne.n	8003a62 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a50:	7bbb      	ldrb	r3, [r7, #14]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d105      	bne.n	8003a62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a56:	7b7b      	ldrb	r3, [r7, #13]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d102      	bne.n	8003a62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a5c:	7b3b      	ldrb	r3, [r7, #12]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d001      	beq.n	8003a66 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e03e      	b.n	8003ae4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_TIM_Encoder_Start+0xc4>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d008      	beq.n	8003aa4 <HAL_TIM_Encoder_Start+0xd4>
 8003a92:	e00f      	b.n	8003ab4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 ffc7 	bl	8004a30 <TIM_CCxChannelCmd>
      break;
 8003aa2:	e016      	b.n	8003ad2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	2104      	movs	r1, #4
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 ffbf 	bl	8004a30 <TIM_CCxChannelCmd>
      break;
 8003ab2:	e00e      	b.n	8003ad2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 ffb7 	bl	8004a30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	2104      	movs	r1, #4
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 ffb0 	bl	8004a30 <TIM_CCxChannelCmd>
      break;
 8003ad0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d020      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01b      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0202 	mvn.w	r2, #2
 8003b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd fe06 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 8003b3c:	e005      	b.n	8003b4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fb38 	bl	80041b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fb3f 	bl	80041c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d020      	beq.n	8003b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01b      	beq.n	8003b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0204 	mvn.w	r2, #4
 8003b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd fde0 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 8003b88:	e005      	b.n	8003b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fb12 	bl	80041b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fb19 	bl	80041c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d020      	beq.n	8003be8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01b      	beq.n	8003be8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0208 	mvn.w	r2, #8
 8003bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fd fdba 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 8003bd4:	e005      	b.n	8003be2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 faec 	bl	80041b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 faf3 	bl	80041c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d020      	beq.n	8003c34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d01b      	beq.n	8003c34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0210 	mvn.w	r2, #16
 8003c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd fd94 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 8003c20:	e005      	b.n	8003c2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 fac6 	bl	80041b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 facd 	bl	80041c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00c      	beq.n	8003c58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0201 	mvn.w	r2, #1
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 faa4 	bl	80041a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00c      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d007      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 ffd8 	bl	8004c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00c      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fa9e 	bl	80041dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00c      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0220 	mvn.w	r2, #32
 8003cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 ffaa 	bl	8004c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_TIM_IC_ConfigChannel+0x1e>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e088      	b.n	8003dfc <HAL_TIM_IC_ConfigChannel+0x130>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d11b      	bne.n	8003d30 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003d08:	f000 fcce 	bl	80046a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 020c 	bic.w	r2, r2, #12
 8003d1a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6999      	ldr	r1, [r3, #24]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	619a      	str	r2, [r3, #24]
 8003d2e:	e060      	b.n	8003df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d11c      	bne.n	8003d70 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003d46:	f000 fd52 	bl	80047ee <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	699a      	ldr	r2, [r3, #24]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003d58:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6999      	ldr	r1, [r3, #24]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	021a      	lsls	r2, r3, #8
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	619a      	str	r2, [r3, #24]
 8003d6e:	e040      	b.n	8003df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d11b      	bne.n	8003dae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003d86:	f000 fd9f 	bl	80048c8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 020c 	bic.w	r2, r2, #12
 8003d98:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69d9      	ldr	r1, [r3, #28]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	61da      	str	r2, [r3, #28]
 8003dac:	e021      	b.n	8003df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b0c      	cmp	r3, #12
 8003db2:	d11c      	bne.n	8003dee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003dc4:	f000 fdbc 	bl	8004940 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003dd6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69d9      	ldr	r1, [r3, #28]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	021a      	lsls	r2, r3, #8
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	61da      	str	r2, [r3, #28]
 8003dec:	e001      	b.n	8003df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e0ae      	b.n	8003f80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b0c      	cmp	r3, #12
 8003e2e:	f200 809f 	bhi.w	8003f70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e32:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	08003f71 	.word	0x08003f71
 8003e40:	08003f71 	.word	0x08003f71
 8003e44:	08003f71 	.word	0x08003f71
 8003e48:	08003ead 	.word	0x08003ead
 8003e4c:	08003f71 	.word	0x08003f71
 8003e50:	08003f71 	.word	0x08003f71
 8003e54:	08003f71 	.word	0x08003f71
 8003e58:	08003eef 	.word	0x08003eef
 8003e5c:	08003f71 	.word	0x08003f71
 8003e60:	08003f71 	.word	0x08003f71
 8003e64:	08003f71 	.word	0x08003f71
 8003e68:	08003f2f 	.word	0x08003f2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fa68 	bl	8004348 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0208 	orr.w	r2, r2, #8
 8003e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0204 	bic.w	r2, r2, #4
 8003e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6999      	ldr	r1, [r3, #24]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	619a      	str	r2, [r3, #24]
      break;
 8003eaa:	e064      	b.n	8003f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fab8 	bl	8004428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699a      	ldr	r2, [r3, #24]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6999      	ldr	r1, [r3, #24]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	021a      	lsls	r2, r3, #8
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	619a      	str	r2, [r3, #24]
      break;
 8003eec:	e043      	b.n	8003f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fb0d 	bl	8004514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0208 	orr.w	r2, r2, #8
 8003f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0204 	bic.w	r2, r2, #4
 8003f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69d9      	ldr	r1, [r3, #28]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	61da      	str	r2, [r3, #28]
      break;
 8003f2c:	e023      	b.n	8003f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fb61 	bl	80045fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69da      	ldr	r2, [r3, #28]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69da      	ldr	r2, [r3, #28]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69d9      	ldr	r1, [r3, #28]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	021a      	lsls	r2, r3, #8
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	61da      	str	r2, [r3, #28]
      break;
 8003f6e:	e002      	b.n	8003f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	75fb      	strb	r3, [r7, #23]
      break;
 8003f74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_TIM_ConfigClockSource+0x1c>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e0b4      	b.n	800410e <HAL_TIM_ConfigClockSource+0x186>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fdc:	d03e      	beq.n	800405c <HAL_TIM_ConfigClockSource+0xd4>
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fe2:	f200 8087 	bhi.w	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fea:	f000 8086 	beq.w	80040fa <HAL_TIM_ConfigClockSource+0x172>
 8003fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ff2:	d87f      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b70      	cmp	r3, #112	@ 0x70
 8003ff6:	d01a      	beq.n	800402e <HAL_TIM_ConfigClockSource+0xa6>
 8003ff8:	2b70      	cmp	r3, #112	@ 0x70
 8003ffa:	d87b      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b60      	cmp	r3, #96	@ 0x60
 8003ffe:	d050      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004000:	2b60      	cmp	r3, #96	@ 0x60
 8004002:	d877      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004004:	2b50      	cmp	r3, #80	@ 0x50
 8004006:	d03c      	beq.n	8004082 <HAL_TIM_ConfigClockSource+0xfa>
 8004008:	2b50      	cmp	r3, #80	@ 0x50
 800400a:	d873      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 800400c:	2b40      	cmp	r3, #64	@ 0x40
 800400e:	d058      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004010:	2b40      	cmp	r3, #64	@ 0x40
 8004012:	d86f      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004014:	2b30      	cmp	r3, #48	@ 0x30
 8004016:	d064      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004018:	2b30      	cmp	r3, #48	@ 0x30
 800401a:	d86b      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 800401c:	2b20      	cmp	r3, #32
 800401e:	d060      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004020:	2b20      	cmp	r3, #32
 8004022:	d867      	bhi.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004024:	2b00      	cmp	r3, #0
 8004026:	d05c      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004028:	2b10      	cmp	r3, #16
 800402a:	d05a      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x15a>
 800402c:	e062      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800403e:	f000 fcd7 	bl	80049f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004050:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	609a      	str	r2, [r3, #8]
      break;
 800405a:	e04f      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800406c:	f000 fcc0 	bl	80049f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800407e:	609a      	str	r2, [r3, #8]
      break;
 8004080:	e03c      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800408e:	461a      	mov	r2, r3
 8004090:	f000 fb7e 	bl	8004790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2150      	movs	r1, #80	@ 0x50
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fc8d 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 80040a0:	e02c      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ae:	461a      	mov	r2, r3
 80040b0:	f000 fbda 	bl	8004868 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2160      	movs	r1, #96	@ 0x60
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fc7d 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 80040c0:	e01c      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ce:	461a      	mov	r2, r3
 80040d0:	f000 fb5e 	bl	8004790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2140      	movs	r1, #64	@ 0x40
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fc6d 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 80040e0:	e00c      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4619      	mov	r1, r3
 80040ec:	4610      	mov	r0, r2
 80040ee:	f000 fc64 	bl	80049ba <TIM_ITRx_SetConfig>
      break;
 80040f2:	e003      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	73fb      	strb	r3, [r7, #15]
      break;
 80040f8:	e000      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800410c:	7bfb      	ldrb	r3, [r7, #15]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b0c      	cmp	r3, #12
 800412a:	d831      	bhi.n	8004190 <HAL_TIM_ReadCapturedValue+0x78>
 800412c:	a201      	add	r2, pc, #4	@ (adr r2, 8004134 <HAL_TIM_ReadCapturedValue+0x1c>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	08004169 	.word	0x08004169
 8004138:	08004191 	.word	0x08004191
 800413c:	08004191 	.word	0x08004191
 8004140:	08004191 	.word	0x08004191
 8004144:	08004173 	.word	0x08004173
 8004148:	08004191 	.word	0x08004191
 800414c:	08004191 	.word	0x08004191
 8004150:	08004191 	.word	0x08004191
 8004154:	0800417d 	.word	0x0800417d
 8004158:	08004191 	.word	0x08004191
 800415c:	08004191 	.word	0x08004191
 8004160:	08004191 	.word	0x08004191
 8004164:	08004187 	.word	0x08004187
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800416e:	60fb      	str	r3, [r7, #12]

      break;
 8004170:	e00f      	b.n	8004192 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004178:	60fb      	str	r3, [r7, #12]

      break;
 800417a:	e00a      	b.n	8004192 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004182:	60fb      	str	r3, [r7, #12]

      break;
 8004184:	e005      	b.n	8004192 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418c:	60fb      	str	r3, [r7, #12]

      break;
 800418e:	e000      	b.n	8004192 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004190:	bf00      	nop
  }

  return tmpreg;
 8004192:	68fb      	ldr	r3, [r7, #12]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a46      	ldr	r2, [pc, #280]	@ (800431c <TIM_Base_SetConfig+0x12c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d013      	beq.n	8004230 <TIM_Base_SetConfig+0x40>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420e:	d00f      	beq.n	8004230 <TIM_Base_SetConfig+0x40>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a43      	ldr	r2, [pc, #268]	@ (8004320 <TIM_Base_SetConfig+0x130>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00b      	beq.n	8004230 <TIM_Base_SetConfig+0x40>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a42      	ldr	r2, [pc, #264]	@ (8004324 <TIM_Base_SetConfig+0x134>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d007      	beq.n	8004230 <TIM_Base_SetConfig+0x40>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a41      	ldr	r2, [pc, #260]	@ (8004328 <TIM_Base_SetConfig+0x138>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d003      	beq.n	8004230 <TIM_Base_SetConfig+0x40>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a40      	ldr	r2, [pc, #256]	@ (800432c <TIM_Base_SetConfig+0x13c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d108      	bne.n	8004242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a35      	ldr	r2, [pc, #212]	@ (800431c <TIM_Base_SetConfig+0x12c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d02b      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004250:	d027      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a32      	ldr	r2, [pc, #200]	@ (8004320 <TIM_Base_SetConfig+0x130>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d023      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a31      	ldr	r2, [pc, #196]	@ (8004324 <TIM_Base_SetConfig+0x134>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01f      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a30      	ldr	r2, [pc, #192]	@ (8004328 <TIM_Base_SetConfig+0x138>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d01b      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2f      	ldr	r2, [pc, #188]	@ (800432c <TIM_Base_SetConfig+0x13c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d017      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2e      	ldr	r2, [pc, #184]	@ (8004330 <TIM_Base_SetConfig+0x140>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2d      	ldr	r2, [pc, #180]	@ (8004334 <TIM_Base_SetConfig+0x144>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00f      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a2c      	ldr	r2, [pc, #176]	@ (8004338 <TIM_Base_SetConfig+0x148>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00b      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2b      	ldr	r2, [pc, #172]	@ (800433c <TIM_Base_SetConfig+0x14c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d007      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a2a      	ldr	r2, [pc, #168]	@ (8004340 <TIM_Base_SetConfig+0x150>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d003      	beq.n	80042a2 <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a29      	ldr	r2, [pc, #164]	@ (8004344 <TIM_Base_SetConfig+0x154>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d108      	bne.n	80042b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a10      	ldr	r2, [pc, #64]	@ (800431c <TIM_Base_SetConfig+0x12c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_Base_SetConfig+0xf8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a12      	ldr	r2, [pc, #72]	@ (800432c <TIM_Base_SetConfig+0x13c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d103      	bne.n	80042f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d105      	bne.n	800430e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f023 0201 	bic.w	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	611a      	str	r2, [r3, #16]
  }
}
 800430e:	bf00      	nop
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800
 8004328:	40000c00 	.word	0x40000c00
 800432c:	40010400 	.word	0x40010400
 8004330:	40014000 	.word	0x40014000
 8004334:	40014400 	.word	0x40014400
 8004338:	40014800 	.word	0x40014800
 800433c:	40001800 	.word	0x40001800
 8004340:	40001c00 	.word	0x40001c00
 8004344:	40002000 	.word	0x40002000

08004348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f023 0201 	bic.w	r2, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0303 	bic.w	r3, r3, #3
 800437e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f023 0302 	bic.w	r3, r3, #2
 8004390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a20      	ldr	r2, [pc, #128]	@ (8004420 <TIM_OC1_SetConfig+0xd8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d003      	beq.n	80043ac <TIM_OC1_SetConfig+0x64>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004424 <TIM_OC1_SetConfig+0xdc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d10c      	bne.n	80043c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f023 0308 	bic.w	r3, r3, #8
 80043b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f023 0304 	bic.w	r3, r3, #4
 80043c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a15      	ldr	r2, [pc, #84]	@ (8004420 <TIM_OC1_SetConfig+0xd8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d003      	beq.n	80043d6 <TIM_OC1_SetConfig+0x8e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a14      	ldr	r2, [pc, #80]	@ (8004424 <TIM_OC1_SetConfig+0xdc>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d111      	bne.n	80043fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	621a      	str	r2, [r3, #32]
}
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40010000 	.word	0x40010000
 8004424:	40010400 	.word	0x40010400

08004428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f023 0210 	bic.w	r2, r3, #16
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800445e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	021b      	lsls	r3, r3, #8
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f023 0320 	bic.w	r3, r3, #32
 8004472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a22      	ldr	r2, [pc, #136]	@ (800450c <TIM_OC2_SetConfig+0xe4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <TIM_OC2_SetConfig+0x68>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a21      	ldr	r2, [pc, #132]	@ (8004510 <TIM_OC2_SetConfig+0xe8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d10d      	bne.n	80044ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a17      	ldr	r2, [pc, #92]	@ (800450c <TIM_OC2_SetConfig+0xe4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_OC2_SetConfig+0x94>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a16      	ldr	r2, [pc, #88]	@ (8004510 <TIM_OC2_SetConfig+0xe8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d113      	bne.n	80044e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40010000 	.word	0x40010000
 8004510:	40010400 	.word	0x40010400

08004514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800455c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	021b      	lsls	r3, r3, #8
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a21      	ldr	r2, [pc, #132]	@ (80045f4 <TIM_OC3_SetConfig+0xe0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d003      	beq.n	800457a <TIM_OC3_SetConfig+0x66>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a20      	ldr	r2, [pc, #128]	@ (80045f8 <TIM_OC3_SetConfig+0xe4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d10d      	bne.n	8004596 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a16      	ldr	r2, [pc, #88]	@ (80045f4 <TIM_OC3_SetConfig+0xe0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d003      	beq.n	80045a6 <TIM_OC3_SetConfig+0x92>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a15      	ldr	r2, [pc, #84]	@ (80045f8 <TIM_OC3_SetConfig+0xe4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d113      	bne.n	80045ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	621a      	str	r2, [r3, #32]
}
 80045e8:	bf00      	nop
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	40010000 	.word	0x40010000
 80045f8:	40010400 	.word	0x40010400

080045fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800462a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	031b      	lsls	r3, r3, #12
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a12      	ldr	r2, [pc, #72]	@ (80046a0 <TIM_OC4_SetConfig+0xa4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d003      	beq.n	8004664 <TIM_OC4_SetConfig+0x68>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a11      	ldr	r2, [pc, #68]	@ (80046a4 <TIM_OC4_SetConfig+0xa8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d109      	bne.n	8004678 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800466a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	019b      	lsls	r3, r3, #6
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	621a      	str	r2, [r3, #32]
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40010000 	.word	0x40010000
 80046a4:	40010400 	.word	0x40010400

080046a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f023 0201 	bic.w	r2, r3, #1
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a28      	ldr	r2, [pc, #160]	@ (8004774 <TIM_TI1_SetConfig+0xcc>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d01b      	beq.n	800470e <TIM_TI1_SetConfig+0x66>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046dc:	d017      	beq.n	800470e <TIM_TI1_SetConfig+0x66>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a25      	ldr	r2, [pc, #148]	@ (8004778 <TIM_TI1_SetConfig+0xd0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d013      	beq.n	800470e <TIM_TI1_SetConfig+0x66>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a24      	ldr	r2, [pc, #144]	@ (800477c <TIM_TI1_SetConfig+0xd4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00f      	beq.n	800470e <TIM_TI1_SetConfig+0x66>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a23      	ldr	r2, [pc, #140]	@ (8004780 <TIM_TI1_SetConfig+0xd8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00b      	beq.n	800470e <TIM_TI1_SetConfig+0x66>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a22      	ldr	r2, [pc, #136]	@ (8004784 <TIM_TI1_SetConfig+0xdc>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d007      	beq.n	800470e <TIM_TI1_SetConfig+0x66>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4a21      	ldr	r2, [pc, #132]	@ (8004788 <TIM_TI1_SetConfig+0xe0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d003      	beq.n	800470e <TIM_TI1_SetConfig+0x66>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a20      	ldr	r2, [pc, #128]	@ (800478c <TIM_TI1_SetConfig+0xe4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d101      	bne.n	8004712 <TIM_TI1_SetConfig+0x6a>
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <TIM_TI1_SetConfig+0x6c>
 8004712:	2300      	movs	r3, #0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f023 0303 	bic.w	r3, r3, #3
 800471e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e003      	b.n	8004732 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004738:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	b2db      	uxtb	r3, r3
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f023 030a 	bic.w	r3, r3, #10
 800474c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f003 030a 	and.w	r3, r3, #10
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40010000 	.word	0x40010000
 8004778:	40000400 	.word	0x40000400
 800477c:	40000800 	.word	0x40000800
 8004780:	40000c00 	.word	0x40000c00
 8004784:	40010400 	.word	0x40010400
 8004788:	40014000 	.word	0x40014000
 800478c:	40001800 	.word	0x40001800

08004790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	f023 0201 	bic.w	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f023 030a 	bic.w	r3, r3, #10
 80047cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	621a      	str	r2, [r3, #32]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b087      	sub	sp, #28
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	f023 0210 	bic.w	r2, r3, #16
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800481a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800482c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	031b      	lsls	r3, r3, #12
 8004832:	b29b      	uxth	r3, r3
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004840:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	621a      	str	r2, [r3, #32]
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f023 0210 	bic.w	r2, r3, #16
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	031b      	lsls	r3, r3, #12
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	621a      	str	r2, [r3, #32]
}
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f023 0303 	bic.w	r3, r3, #3
 80048f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004904:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	b2db      	uxtb	r3, r3
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004918:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	621a      	str	r2, [r3, #32]
}
 8004934:	bf00      	nop
 8004936:	371c      	adds	r7, #28
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800496c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800497e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	031b      	lsls	r3, r3, #12
 8004984:	b29b      	uxth	r3, r3
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004992:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	031b      	lsls	r3, r3, #12
 8004998:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	621a      	str	r2, [r3, #32]
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f043 0307 	orr.w	r3, r3, #7
 80049dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	609a      	str	r2, [r3, #8]
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	021a      	lsls	r2, r3, #8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	609a      	str	r2, [r3, #8]
}
 8004a24:	bf00      	nop
 8004a26:	371c      	adds	r7, #28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	2201      	movs	r2, #1
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1a      	ldr	r2, [r3, #32]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	401a      	ands	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a1a      	ldr	r2, [r3, #32]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	fa01 f303 	lsl.w	r3, r1, r3
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	621a      	str	r2, [r3, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e05a      	b.n	8004b4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a21      	ldr	r2, [pc, #132]	@ (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d022      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae0:	d01d      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d018      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d013      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1a      	ldr	r2, [pc, #104]	@ (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00e      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a18      	ldr	r2, [pc, #96]	@ (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d009      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a17      	ldr	r2, [pc, #92]	@ (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d004      	beq.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a15      	ldr	r2, [pc, #84]	@ (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d10c      	bne.n	8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40000800 	.word	0x40000800
 8004b64:	40000c00 	.word	0x40000c00
 8004b68:	40010400 	.word	0x40010400
 8004b6c:	40014000 	.word	0x40014000
 8004b70:	40001800 	.word	0x40001800

08004b74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e03d      	b.n	8004c0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e042      	b.n	8004cd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fd f8e2 	bl	8001e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2224      	movs	r2, #36	@ 0x24
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 fdbd 	bl	8005804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695a      	ldr	r2, [r3, #20]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08a      	sub	sp, #40	@ 0x28
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	4613      	mov	r3, r2
 8004cee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d175      	bne.n	8004dec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_UART_Transmit+0x2c>
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e06e      	b.n	8004dee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2221      	movs	r2, #33	@ 0x21
 8004d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d1e:	f7fd fa7b 	bl	8002218 <HAL_GetTick>
 8004d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	88fa      	ldrh	r2, [r7, #6]
 8004d28:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	88fa      	ldrh	r2, [r7, #6]
 8004d2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d38:	d108      	bne.n	8004d4c <HAL_UART_Transmit+0x6c>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d104      	bne.n	8004d4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	e003      	b.n	8004d54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d54:	e02e      	b.n	8004db4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2180      	movs	r1, #128	@ 0x80
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fb1f 	bl	80053a4 <UART_WaitOnFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e03a      	b.n	8004dee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10b      	bne.n	8004d96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	3302      	adds	r3, #2
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	e007      	b.n	8004da6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	781a      	ldrb	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	3301      	adds	r3, #1
 8004da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1cb      	bne.n	8004d56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2140      	movs	r1, #64	@ 0x40
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 faeb 	bl	80053a4 <UART_WaitOnFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e006      	b.n	8004dee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e000      	b.n	8004dee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004dec:	2302      	movs	r3, #2
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	4613      	mov	r3, r2
 8004e02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d112      	bne.n	8004e36 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <HAL_UART_Receive_IT+0x26>
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e00b      	b.n	8004e38 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 fb12 	bl	8005456 <UART_Start_Receive_IT>
 8004e32:	4603      	mov	r3, r0
 8004e34:	e000      	b.n	8004e38 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004e36:	2302      	movs	r3, #2
  }
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b0ba      	sub	sp, #232	@ 0xe8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10f      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x66>
 8004e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fbf2 	bl	8005688 <UART_Receive_IT>
      return;
 8004ea4:	e25b      	b.n	800535e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80de 	beq.w	800506c <HAL_UART_IRQHandler+0x22c>
 8004eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d106      	bne.n	8004eca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80d1 	beq.w	800506c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <HAL_UART_IRQHandler+0xae>
 8004ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee6:	f043 0201 	orr.w	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <HAL_UART_IRQHandler+0xd2>
 8004efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0a:	f043 0202 	orr.w	r2, r3, #2
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <HAL_UART_IRQHandler+0xf6>
 8004f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2e:	f043 0204 	orr.w	r2, r3, #4
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d011      	beq.n	8004f66 <HAL_UART_IRQHandler+0x126>
 8004f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d105      	bne.n	8004f5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5e:	f043 0208 	orr.w	r2, r3, #8
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 81f2 	beq.w	8005354 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <HAL_UART_IRQHandler+0x14e>
 8004f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fb7d 	bl	8005688 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f98:	2b40      	cmp	r3, #64	@ 0x40
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d103      	bne.n	8004fba <HAL_UART_IRQHandler+0x17a>
 8004fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d04f      	beq.n	800505a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fa85 	bl	80054ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fca:	2b40      	cmp	r3, #64	@ 0x40
 8004fcc:	d141      	bne.n	8005052 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3314      	adds	r3, #20
 8004fd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3314      	adds	r3, #20
 8004ff6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ffa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005006:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1d9      	bne.n	8004fce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d013      	beq.n	800504a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005026:	4a7e      	ldr	r2, [pc, #504]	@ (8005220 <HAL_UART_IRQHandler+0x3e0>)
 8005028:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502e:	4618      	mov	r0, r3
 8005030:	f7fd faa3 	bl	800257a <HAL_DMA_Abort_IT>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d016      	beq.n	8005068 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800503e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005044:	4610      	mov	r0, r2
 8005046:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005048:	e00e      	b.n	8005068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f994 	bl	8005378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005050:	e00a      	b.n	8005068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f990 	bl	8005378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005058:	e006      	b.n	8005068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f98c 	bl	8005378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005066:	e175      	b.n	8005354 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005068:	bf00      	nop
    return;
 800506a:	e173      	b.n	8005354 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005070:	2b01      	cmp	r3, #1
 8005072:	f040 814f 	bne.w	8005314 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 8148 	beq.w	8005314 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8141 	beq.w	8005314 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005092:	2300      	movs	r3, #0
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b2:	2b40      	cmp	r3, #64	@ 0x40
 80050b4:	f040 80b6 	bne.w	8005224 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8145 	beq.w	8005358 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050d6:	429a      	cmp	r2, r3
 80050d8:	f080 813e 	bcs.w	8005358 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050ee:	f000 8088 	beq.w	8005202 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	330c      	adds	r3, #12
 80050f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005108:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800510c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005110:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800511e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005122:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800512a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005136:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1d9      	bne.n	80050f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3314      	adds	r3, #20
 8005144:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800514e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3314      	adds	r3, #20
 800515e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005162:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005166:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800516a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e1      	bne.n	800513e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3314      	adds	r3, #20
 8005180:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800518a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800518c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005190:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3314      	adds	r3, #20
 800519a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800519e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e3      	bne.n	800517a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051d2:	f023 0310 	bic.w	r3, r3, #16
 80051d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	330c      	adds	r3, #12
 80051e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80051e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e3      	bne.n	80051c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fd f94c 	bl	800249a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005210:	b29b      	uxth	r3, r3
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	b29b      	uxth	r3, r3
 8005216:	4619      	mov	r1, r3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f8b7 	bl	800538c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800521e:	e09b      	b.n	8005358 <HAL_UART_IRQHandler+0x518>
 8005220:	08005591 	.word	0x08005591
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800522c:	b29b      	uxth	r3, r3
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 808e 	beq.w	800535c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8089 	beq.w	800535c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800525a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005260:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	330c      	adds	r3, #12
 800526a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800526e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005270:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005274:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800527c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e3      	bne.n	800524a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3314      	adds	r3, #20
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	e853 3f00 	ldrex	r3, [r3]
 8005290:	623b      	str	r3, [r7, #32]
   return(result);
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	f023 0301 	bic.w	r3, r3, #1
 8005298:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3314      	adds	r3, #20
 80052a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80052a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e3      	bne.n	8005282 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	330c      	adds	r3, #12
 80052ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0310 	bic.w	r3, r3, #16
 80052de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	330c      	adds	r3, #12
 80052e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80052ec:	61fa      	str	r2, [r7, #28]
 80052ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	69b9      	ldr	r1, [r7, #24]
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	617b      	str	r3, [r7, #20]
   return(result);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e3      	bne.n	80052c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005306:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f83d 	bl	800538c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005312:	e023      	b.n	800535c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531c:	2b00      	cmp	r3, #0
 800531e:	d009      	beq.n	8005334 <HAL_UART_IRQHandler+0x4f4>
 8005320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f943 	bl	80055b8 <UART_Transmit_IT>
    return;
 8005332:	e014      	b.n	800535e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00e      	beq.n	800535e <HAL_UART_IRQHandler+0x51e>
 8005340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f983 	bl	8005658 <UART_EndTransmit_IT>
    return;
 8005352:	e004      	b.n	800535e <HAL_UART_IRQHandler+0x51e>
    return;
 8005354:	bf00      	nop
 8005356:	e002      	b.n	800535e <HAL_UART_IRQHandler+0x51e>
      return;
 8005358:	bf00      	nop
 800535a:	e000      	b.n	800535e <HAL_UART_IRQHandler+0x51e>
      return;
 800535c:	bf00      	nop
  }
}
 800535e:	37e8      	adds	r7, #232	@ 0xe8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	4613      	mov	r3, r2
 80053b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b4:	e03b      	b.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053bc:	d037      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053be:	f7fc ff2b 	bl	8002218 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	6a3a      	ldr	r2, [r7, #32]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d302      	bcc.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e03a      	b.n	800544e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d023      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b80      	cmp	r3, #128	@ 0x80
 80053ea:	d020      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b40      	cmp	r3, #64	@ 0x40
 80053f0:	d01d      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d116      	bne.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f857 	bl	80054ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2208      	movs	r2, #8
 8005420:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e00f      	b.n	800544e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4013      	ands	r3, r2
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	429a      	cmp	r2, r3
 800543c:	bf0c      	ite	eq
 800543e:	2301      	moveq	r3, #1
 8005440:	2300      	movne	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	429a      	cmp	r2, r3
 800544a:	d0b4      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	4613      	mov	r3, r2
 8005462:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	88fa      	ldrh	r2, [r7, #6]
 800546e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	88fa      	ldrh	r2, [r7, #6]
 8005474:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2222      	movs	r2, #34	@ 0x22
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800549a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695a      	ldr	r2, [r3, #20]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0220 	orr.w	r2, r2, #32
 80054ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b095      	sub	sp, #84	@ 0x54
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80054f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e5      	bne.n	80054d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3314      	adds	r3, #20
 800550c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	e853 3f00 	ldrex	r3, [r3]
 8005514:	61fb      	str	r3, [r7, #28]
   return(result);
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f023 0301 	bic.w	r3, r3, #1
 800551c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3314      	adds	r3, #20
 8005524:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005526:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005528:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800552c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e5      	bne.n	8005506 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553e:	2b01      	cmp	r3, #1
 8005540:	d119      	bne.n	8005576 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	330c      	adds	r3, #12
 8005548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	60bb      	str	r3, [r7, #8]
   return(result);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f023 0310 	bic.w	r3, r3, #16
 8005558:	647b      	str	r3, [r7, #68]	@ 0x44
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	330c      	adds	r3, #12
 8005560:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005562:	61ba      	str	r2, [r7, #24]
 8005564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6979      	ldr	r1, [r7, #20]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	613b      	str	r3, [r7, #16]
   return(result);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e5      	bne.n	8005542 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005584:	bf00      	nop
 8005586:	3754      	adds	r7, #84	@ 0x54
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff fee4 	bl	8005378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055b0:	bf00      	nop
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b21      	cmp	r3, #33	@ 0x21
 80055ca:	d13e      	bne.n	800564a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d4:	d114      	bne.n	8005600 <UART_Transmit_IT+0x48>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d110      	bne.n	8005600 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	1c9a      	adds	r2, r3, #2
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	621a      	str	r2, [r3, #32]
 80055fe:	e008      	b.n	8005612 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	1c59      	adds	r1, r3, #1
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6211      	str	r1, [r2, #32]
 800560a:	781a      	ldrb	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29b      	uxth	r3, r3
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	4619      	mov	r1, r3
 8005620:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10f      	bne.n	8005646 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005634:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005644:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	e000      	b.n	800564c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800564a:	2302      	movs	r3, #2
  }
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800566e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff fe73 	bl	8005364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08c      	sub	sp, #48	@ 0x30
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b22      	cmp	r3, #34	@ 0x22
 800569a:	f040 80ae 	bne.w	80057fa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a6:	d117      	bne.n	80056d8 <UART_Receive_IT+0x50>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d113      	bne.n	80056d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056b0:	2300      	movs	r3, #0
 80056b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d0:	1c9a      	adds	r2, r3, #2
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80056d6:	e026      	b.n	8005726 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ea:	d007      	beq.n	80056fc <UART_Receive_IT+0x74>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <UART_Receive_IT+0x82>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d106      	bne.n	800570a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	b2da      	uxtb	r2, r3
 8005704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	e008      	b.n	800571c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005716:	b2da      	uxtb	r2, r3
 8005718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800572a:	b29b      	uxth	r3, r3
 800572c:	3b01      	subs	r3, #1
 800572e:	b29b      	uxth	r3, r3
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	4619      	mov	r1, r3
 8005734:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005736:	2b00      	cmp	r3, #0
 8005738:	d15d      	bne.n	80057f6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0220 	bic.w	r2, r2, #32
 8005748:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005758:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695a      	ldr	r2, [r3, #20]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0201 	bic.w	r2, r2, #1
 8005768:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2220      	movs	r2, #32
 800576e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577c:	2b01      	cmp	r3, #1
 800577e:	d135      	bne.n	80057ec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	330c      	adds	r3, #12
 800578c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	613b      	str	r3, [r7, #16]
   return(result);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f023 0310 	bic.w	r3, r3, #16
 800579c:	627b      	str	r3, [r7, #36]	@ 0x24
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	330c      	adds	r3, #12
 80057a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a6:	623a      	str	r2, [r7, #32]
 80057a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	69f9      	ldr	r1, [r7, #28]
 80057ac:	6a3a      	ldr	r2, [r7, #32]
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e5      	bne.n	8005786 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0310 	and.w	r3, r3, #16
 80057c4:	2b10      	cmp	r3, #16
 80057c6:	d10a      	bne.n	80057de <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff fdd1 	bl	800538c <HAL_UARTEx_RxEventCallback>
 80057ea:	e002      	b.n	80057f2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7fb ff8f 	bl	8001710 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	e002      	b.n	80057fc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	e000      	b.n	80057fc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80057fa:	2302      	movs	r3, #2
  }
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3730      	adds	r7, #48	@ 0x30
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005808:	b0c0      	sub	sp, #256	@ 0x100
 800580a:	af00      	add	r7, sp, #0
 800580c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005820:	68d9      	ldr	r1, [r3, #12]
 8005822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	ea40 0301 	orr.w	r3, r0, r1
 800582c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800582e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	431a      	orrs	r2, r3
 800583c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	431a      	orrs	r2, r3
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800585c:	f021 010c 	bic.w	r1, r1, #12
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800586a:	430b      	orrs	r3, r1
 800586c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800586e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800587a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587e:	6999      	ldr	r1, [r3, #24]
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	ea40 0301 	orr.w	r3, r0, r1
 800588a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	4b8f      	ldr	r3, [pc, #572]	@ (8005ad0 <UART_SetConfig+0x2cc>)
 8005894:	429a      	cmp	r2, r3
 8005896:	d005      	beq.n	80058a4 <UART_SetConfig+0xa0>
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4b8d      	ldr	r3, [pc, #564]	@ (8005ad4 <UART_SetConfig+0x2d0>)
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d104      	bne.n	80058ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058a4:	f7fd fcae 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 80058a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058ac:	e003      	b.n	80058b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058ae:	f7fd fc95 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 80058b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058c0:	f040 810c 	bne.w	8005adc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058c8:	2200      	movs	r2, #0
 80058ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80058d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80058d6:	4622      	mov	r2, r4
 80058d8:	462b      	mov	r3, r5
 80058da:	1891      	adds	r1, r2, r2
 80058dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80058de:	415b      	adcs	r3, r3
 80058e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80058e6:	4621      	mov	r1, r4
 80058e8:	eb12 0801 	adds.w	r8, r2, r1
 80058ec:	4629      	mov	r1, r5
 80058ee:	eb43 0901 	adc.w	r9, r3, r1
 80058f2:	f04f 0200 	mov.w	r2, #0
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005906:	4690      	mov	r8, r2
 8005908:	4699      	mov	r9, r3
 800590a:	4623      	mov	r3, r4
 800590c:	eb18 0303 	adds.w	r3, r8, r3
 8005910:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005914:	462b      	mov	r3, r5
 8005916:	eb49 0303 	adc.w	r3, r9, r3
 800591a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800592a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800592e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005932:	460b      	mov	r3, r1
 8005934:	18db      	adds	r3, r3, r3
 8005936:	653b      	str	r3, [r7, #80]	@ 0x50
 8005938:	4613      	mov	r3, r2
 800593a:	eb42 0303 	adc.w	r3, r2, r3
 800593e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005940:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005944:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005948:	f7fb f92e 	bl	8000ba8 <__aeabi_uldivmod>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4b61      	ldr	r3, [pc, #388]	@ (8005ad8 <UART_SetConfig+0x2d4>)
 8005952:	fba3 2302 	umull	r2, r3, r3, r2
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	011c      	lsls	r4, r3, #4
 800595a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800595e:	2200      	movs	r2, #0
 8005960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005964:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005968:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800596c:	4642      	mov	r2, r8
 800596e:	464b      	mov	r3, r9
 8005970:	1891      	adds	r1, r2, r2
 8005972:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005974:	415b      	adcs	r3, r3
 8005976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005978:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800597c:	4641      	mov	r1, r8
 800597e:	eb12 0a01 	adds.w	sl, r2, r1
 8005982:	4649      	mov	r1, r9
 8005984:	eb43 0b01 	adc.w	fp, r3, r1
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005994:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800599c:	4692      	mov	sl, r2
 800599e:	469b      	mov	fp, r3
 80059a0:	4643      	mov	r3, r8
 80059a2:	eb1a 0303 	adds.w	r3, sl, r3
 80059a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059aa:	464b      	mov	r3, r9
 80059ac:	eb4b 0303 	adc.w	r3, fp, r3
 80059b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059c8:	460b      	mov	r3, r1
 80059ca:	18db      	adds	r3, r3, r3
 80059cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80059ce:	4613      	mov	r3, r2
 80059d0:	eb42 0303 	adc.w	r3, r2, r3
 80059d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80059d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80059de:	f7fb f8e3 	bl	8000ba8 <__aeabi_uldivmod>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4611      	mov	r1, r2
 80059e8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ad8 <UART_SetConfig+0x2d4>)
 80059ea:	fba3 2301 	umull	r2, r3, r3, r1
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	2264      	movs	r2, #100	@ 0x64
 80059f2:	fb02 f303 	mul.w	r3, r2, r3
 80059f6:	1acb      	subs	r3, r1, r3
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80059fe:	4b36      	ldr	r3, [pc, #216]	@ (8005ad8 <UART_SetConfig+0x2d4>)
 8005a00:	fba3 2302 	umull	r2, r3, r3, r2
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a0c:	441c      	add	r4, r3
 8005a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a20:	4642      	mov	r2, r8
 8005a22:	464b      	mov	r3, r9
 8005a24:	1891      	adds	r1, r2, r2
 8005a26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a28:	415b      	adcs	r3, r3
 8005a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a30:	4641      	mov	r1, r8
 8005a32:	1851      	adds	r1, r2, r1
 8005a34:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a36:	4649      	mov	r1, r9
 8005a38:	414b      	adcs	r3, r1
 8005a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a48:	4659      	mov	r1, fp
 8005a4a:	00cb      	lsls	r3, r1, #3
 8005a4c:	4651      	mov	r1, sl
 8005a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a52:	4651      	mov	r1, sl
 8005a54:	00ca      	lsls	r2, r1, #3
 8005a56:	4610      	mov	r0, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	4642      	mov	r2, r8
 8005a5e:	189b      	adds	r3, r3, r2
 8005a60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a64:	464b      	mov	r3, r9
 8005a66:	460a      	mov	r2, r1
 8005a68:	eb42 0303 	adc.w	r3, r2, r3
 8005a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a84:	460b      	mov	r3, r1
 8005a86:	18db      	adds	r3, r3, r3
 8005a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	eb42 0303 	adc.w	r3, r2, r3
 8005a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a9a:	f7fb f885 	bl	8000ba8 <__aeabi_uldivmod>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad8 <UART_SetConfig+0x2d4>)
 8005aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	2164      	movs	r1, #100	@ 0x64
 8005aac:	fb01 f303 	mul.w	r3, r1, r3
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	3332      	adds	r3, #50	@ 0x32
 8005ab6:	4a08      	ldr	r2, [pc, #32]	@ (8005ad8 <UART_SetConfig+0x2d4>)
 8005ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	f003 0207 	and.w	r2, r3, #7
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4422      	add	r2, r4
 8005aca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005acc:	e106      	b.n	8005cdc <UART_SetConfig+0x4d8>
 8005ace:	bf00      	nop
 8005ad0:	40011000 	.word	0x40011000
 8005ad4:	40011400 	.word	0x40011400
 8005ad8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ae6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005aea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005aee:	4642      	mov	r2, r8
 8005af0:	464b      	mov	r3, r9
 8005af2:	1891      	adds	r1, r2, r2
 8005af4:	6239      	str	r1, [r7, #32]
 8005af6:	415b      	adcs	r3, r3
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005afa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005afe:	4641      	mov	r1, r8
 8005b00:	1854      	adds	r4, r2, r1
 8005b02:	4649      	mov	r1, r9
 8005b04:	eb43 0501 	adc.w	r5, r3, r1
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	00eb      	lsls	r3, r5, #3
 8005b12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b16:	00e2      	lsls	r2, r4, #3
 8005b18:	4614      	mov	r4, r2
 8005b1a:	461d      	mov	r5, r3
 8005b1c:	4643      	mov	r3, r8
 8005b1e:	18e3      	adds	r3, r4, r3
 8005b20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b24:	464b      	mov	r3, r9
 8005b26:	eb45 0303 	adc.w	r3, r5, r3
 8005b2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	008b      	lsls	r3, r1, #2
 8005b4e:	4621      	mov	r1, r4
 8005b50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b54:	4621      	mov	r1, r4
 8005b56:	008a      	lsls	r2, r1, #2
 8005b58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b5c:	f7fb f824 	bl	8000ba8 <__aeabi_uldivmod>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4b60      	ldr	r3, [pc, #384]	@ (8005ce8 <UART_SetConfig+0x4e4>)
 8005b66:	fba3 2302 	umull	r2, r3, r3, r2
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	011c      	lsls	r4, r3, #4
 8005b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b80:	4642      	mov	r2, r8
 8005b82:	464b      	mov	r3, r9
 8005b84:	1891      	adds	r1, r2, r2
 8005b86:	61b9      	str	r1, [r7, #24]
 8005b88:	415b      	adcs	r3, r3
 8005b8a:	61fb      	str	r3, [r7, #28]
 8005b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b90:	4641      	mov	r1, r8
 8005b92:	1851      	adds	r1, r2, r1
 8005b94:	6139      	str	r1, [r7, #16]
 8005b96:	4649      	mov	r1, r9
 8005b98:	414b      	adcs	r3, r1
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ba8:	4659      	mov	r1, fp
 8005baa:	00cb      	lsls	r3, r1, #3
 8005bac:	4651      	mov	r1, sl
 8005bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bb2:	4651      	mov	r1, sl
 8005bb4:	00ca      	lsls	r2, r1, #3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4642      	mov	r2, r8
 8005bbe:	189b      	adds	r3, r3, r2
 8005bc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	460a      	mov	r2, r1
 8005bc8:	eb42 0303 	adc.w	r3, r2, r3
 8005bcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005be8:	4649      	mov	r1, r9
 8005bea:	008b      	lsls	r3, r1, #2
 8005bec:	4641      	mov	r1, r8
 8005bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bf2:	4641      	mov	r1, r8
 8005bf4:	008a      	lsls	r2, r1, #2
 8005bf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005bfa:	f7fa ffd5 	bl	8000ba8 <__aeabi_uldivmod>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	4b38      	ldr	r3, [pc, #224]	@ (8005ce8 <UART_SetConfig+0x4e4>)
 8005c06:	fba3 2301 	umull	r2, r3, r3, r1
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	2264      	movs	r2, #100	@ 0x64
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
 8005c12:	1acb      	subs	r3, r1, r3
 8005c14:	011b      	lsls	r3, r3, #4
 8005c16:	3332      	adds	r3, #50	@ 0x32
 8005c18:	4a33      	ldr	r2, [pc, #204]	@ (8005ce8 <UART_SetConfig+0x4e4>)
 8005c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c24:	441c      	add	r4, r3
 8005c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c34:	4642      	mov	r2, r8
 8005c36:	464b      	mov	r3, r9
 8005c38:	1891      	adds	r1, r2, r2
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	415b      	adcs	r3, r3
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c44:	4641      	mov	r1, r8
 8005c46:	1851      	adds	r1, r2, r1
 8005c48:	6039      	str	r1, [r7, #0]
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	414b      	adcs	r3, r1
 8005c4e:	607b      	str	r3, [r7, #4]
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c5c:	4659      	mov	r1, fp
 8005c5e:	00cb      	lsls	r3, r1, #3
 8005c60:	4651      	mov	r1, sl
 8005c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c66:	4651      	mov	r1, sl
 8005c68:	00ca      	lsls	r2, r1, #3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4642      	mov	r2, r8
 8005c72:	189b      	adds	r3, r3, r2
 8005c74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c76:	464b      	mov	r3, r9
 8005c78:	460a      	mov	r2, r1
 8005c7a:	eb42 0303 	adc.w	r3, r2, r3
 8005c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c98:	4649      	mov	r1, r9
 8005c9a:	008b      	lsls	r3, r1, #2
 8005c9c:	4641      	mov	r1, r8
 8005c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ca2:	4641      	mov	r1, r8
 8005ca4:	008a      	lsls	r2, r1, #2
 8005ca6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005caa:	f7fa ff7d 	bl	8000ba8 <__aeabi_uldivmod>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce8 <UART_SetConfig+0x4e4>)
 8005cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005cb8:	095b      	lsrs	r3, r3, #5
 8005cba:	2164      	movs	r1, #100	@ 0x64
 8005cbc:	fb01 f303 	mul.w	r3, r1, r3
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	3332      	adds	r3, #50	@ 0x32
 8005cc6:	4a08      	ldr	r2, [pc, #32]	@ (8005ce8 <UART_SetConfig+0x4e4>)
 8005cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	f003 020f 	and.w	r2, r3, #15
 8005cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4422      	add	r2, r4
 8005cda:	609a      	str	r2, [r3, #8]
}
 8005cdc:	bf00      	nop
 8005cde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ce8:	51eb851f 	.word	0x51eb851f

08005cec <__NVIC_SetPriority>:
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	6039      	str	r1, [r7, #0]
 8005cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	db0a      	blt.n	8005d16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	490c      	ldr	r1, [pc, #48]	@ (8005d38 <__NVIC_SetPriority+0x4c>)
 8005d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d0a:	0112      	lsls	r2, r2, #4
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	440b      	add	r3, r1
 8005d10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005d14:	e00a      	b.n	8005d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	4908      	ldr	r1, [pc, #32]	@ (8005d3c <__NVIC_SetPriority+0x50>)
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	3b04      	subs	r3, #4
 8005d24:	0112      	lsls	r2, r2, #4
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	440b      	add	r3, r1
 8005d2a:	761a      	strb	r2, [r3, #24]
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	e000e100 	.word	0xe000e100
 8005d3c:	e000ed00 	.word	0xe000ed00

08005d40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d44:	2100      	movs	r1, #0
 8005d46:	f06f 0004 	mvn.w	r0, #4
 8005d4a:	f7ff ffcf 	bl	8005cec <__NVIC_SetPriority>
#endif
}
 8005d4e:	bf00      	nop
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d5a:	f3ef 8305 	mrs	r3, IPSR
 8005d5e:	603b      	str	r3, [r7, #0]
  return(result);
 8005d60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d66:	f06f 0305 	mvn.w	r3, #5
 8005d6a:	607b      	str	r3, [r7, #4]
 8005d6c:	e00c      	b.n	8005d88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d98 <osKernelInitialize+0x44>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d105      	bne.n	8005d82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d76:	4b08      	ldr	r3, [pc, #32]	@ (8005d98 <osKernelInitialize+0x44>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	607b      	str	r3, [r7, #4]
 8005d80:	e002      	b.n	8005d88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005d82:	f04f 33ff 	mov.w	r3, #4294967295
 8005d86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d88:	687b      	ldr	r3, [r7, #4]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	2000041c 	.word	0x2000041c

08005d9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da2:	f3ef 8305 	mrs	r3, IPSR
 8005da6:	603b      	str	r3, [r7, #0]
  return(result);
 8005da8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005dae:	f06f 0305 	mvn.w	r3, #5
 8005db2:	607b      	str	r3, [r7, #4]
 8005db4:	e010      	b.n	8005dd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005db6:	4b0b      	ldr	r3, [pc, #44]	@ (8005de4 <osKernelStart+0x48>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d109      	bne.n	8005dd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005dbe:	f7ff ffbf 	bl	8005d40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005dc2:	4b08      	ldr	r3, [pc, #32]	@ (8005de4 <osKernelStart+0x48>)
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005dc8:	f001 f87a 	bl	8006ec0 <vTaskStartScheduler>
      stat = osOK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	607b      	str	r3, [r7, #4]
 8005dd0:	e002      	b.n	8005dd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005dd8:	687b      	ldr	r3, [r7, #4]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	2000041c 	.word	0x2000041c

08005de8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08e      	sub	sp, #56	@ 0x38
 8005dec:	af04      	add	r7, sp, #16
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005df8:	f3ef 8305 	mrs	r3, IPSR
 8005dfc:	617b      	str	r3, [r7, #20]
  return(result);
 8005dfe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d17e      	bne.n	8005f02 <osThreadNew+0x11a>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d07b      	beq.n	8005f02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e0a:	2380      	movs	r3, #128	@ 0x80
 8005e0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e0e:	2318      	movs	r3, #24
 8005e10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005e16:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d045      	beq.n	8005eae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <osThreadNew+0x48>
        name = attr->name;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <osThreadNew+0x6e>
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	2b38      	cmp	r3, #56	@ 0x38
 8005e48:	d805      	bhi.n	8005e56 <osThreadNew+0x6e>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <osThreadNew+0x72>
        return (NULL);
 8005e56:	2300      	movs	r3, #0
 8005e58:	e054      	b.n	8005f04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	089b      	lsrs	r3, r3, #2
 8005e68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00e      	beq.n	8005e90 <osThreadNew+0xa8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	2b5b      	cmp	r3, #91	@ 0x5b
 8005e78:	d90a      	bls.n	8005e90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d006      	beq.n	8005e90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <osThreadNew+0xa8>
        mem = 1;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	61bb      	str	r3, [r7, #24]
 8005e8e:	e010      	b.n	8005eb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10c      	bne.n	8005eb2 <osThreadNew+0xca>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d108      	bne.n	8005eb2 <osThreadNew+0xca>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d104      	bne.n	8005eb2 <osThreadNew+0xca>
          mem = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61bb      	str	r3, [r7, #24]
 8005eac:	e001      	b.n	8005eb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d110      	bne.n	8005eda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ec0:	9202      	str	r2, [sp, #8]
 8005ec2:	9301      	str	r3, [sp, #4]
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	6a3a      	ldr	r2, [r7, #32]
 8005ecc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 fe1a 	bl	8006b08 <xTaskCreateStatic>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	613b      	str	r3, [r7, #16]
 8005ed8:	e013      	b.n	8005f02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d110      	bne.n	8005f02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	f107 0310 	add.w	r3, r7, #16
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 fe68 	bl	8006bc8 <xTaskCreate>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d001      	beq.n	8005f02 <osThreadNew+0x11a>
            hTask = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f02:	693b      	ldr	r3, [r7, #16]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3728      	adds	r7, #40	@ 0x28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f14:	f3ef 8305 	mrs	r3, IPSR
 8005f18:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <osDelay+0x1c>
    stat = osErrorISR;
 8005f20:	f06f 0305 	mvn.w	r3, #5
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	e007      	b.n	8005f38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 ff8e 	bl	8006e54 <vTaskDelay>
    }
  }

  return (stat);
 8005f38:	68fb      	ldr	r3, [r7, #12]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4a07      	ldr	r2, [pc, #28]	@ (8005f70 <vApplicationGetIdleTaskMemory+0x2c>)
 8005f54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	4a06      	ldr	r2, [pc, #24]	@ (8005f74 <vApplicationGetIdleTaskMemory+0x30>)
 8005f5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2280      	movs	r2, #128	@ 0x80
 8005f60:	601a      	str	r2, [r3, #0]
}
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	20000420 	.word	0x20000420
 8005f74:	2000047c 	.word	0x2000047c

08005f78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4a07      	ldr	r2, [pc, #28]	@ (8005fa4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	4a06      	ldr	r2, [pc, #24]	@ (8005fa8 <vApplicationGetTimerTaskMemory+0x30>)
 8005f8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f96:	601a      	str	r2, [r3, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	2000067c 	.word	0x2000067c
 8005fa8:	200006d8 	.word	0x200006d8

08005fac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f103 0208 	add.w	r2, r3, #8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f103 0208 	add.w	r2, r3, #8
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f103 0208 	add.w	r2, r3, #8
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006006:	b480      	push	{r7}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	601a      	str	r2, [r3, #0]
}
 8006042:	bf00      	nop
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800604e:	b480      	push	{r7}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006064:	d103      	bne.n	800606e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	e00c      	b.n	8006088 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3308      	adds	r3, #8
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	e002      	b.n	800607c <vListInsert+0x2e>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	429a      	cmp	r2, r3
 8006086:	d2f6      	bcs.n	8006076 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	601a      	str	r2, [r3, #0]
}
 80060b4:	bf00      	nop
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6892      	ldr	r2, [r2, #8]
 80060d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6852      	ldr	r2, [r2, #4]
 80060e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d103      	bne.n	80060f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	1e5a      	subs	r2, r3, #1
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10b      	bne.n	8006140 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800613a:	bf00      	nop
 800613c:	bf00      	nop
 800613e:	e7fd      	b.n	800613c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006140:	f002 f87a 	bl	8008238 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614c:	68f9      	ldr	r1, [r7, #12]
 800614e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006150:	fb01 f303 	mul.w	r3, r1, r3
 8006154:	441a      	add	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006170:	3b01      	subs	r3, #1
 8006172:	68f9      	ldr	r1, [r7, #12]
 8006174:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006176:	fb01 f303 	mul.w	r3, r1, r3
 800617a:	441a      	add	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	22ff      	movs	r2, #255	@ 0xff
 8006184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	22ff      	movs	r2, #255	@ 0xff
 800618c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d114      	bne.n	80061c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d01a      	beq.n	80061d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3310      	adds	r3, #16
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 f91a 	bl	80073dc <xTaskRemoveFromEventList>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d012      	beq.n	80061d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80061ae:	4b0d      	ldr	r3, [pc, #52]	@ (80061e4 <xQueueGenericReset+0xd0>)
 80061b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	e009      	b.n	80061d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3310      	adds	r3, #16
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fef1 	bl	8005fac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3324      	adds	r3, #36	@ 0x24
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff feec 	bl	8005fac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061d4:	f002 f862 	bl	800829c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061d8:	2301      	movs	r3, #1
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	e000ed04 	.word	0xe000ed04

080061e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08e      	sub	sp, #56	@ 0x38
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10b      	bne.n	8006214 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	e7fd      	b.n	8006210 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800622c:	bf00      	nop
 800622e:	bf00      	nop
 8006230:	e7fd      	b.n	800622e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <xQueueGenericCreateStatic+0x56>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <xQueueGenericCreateStatic+0x5a>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <xQueueGenericCreateStatic+0x5c>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	623b      	str	r3, [r7, #32]
}
 800625a:	bf00      	nop
 800625c:	bf00      	nop
 800625e:	e7fd      	b.n	800625c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d102      	bne.n	800626c <xQueueGenericCreateStatic+0x84>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <xQueueGenericCreateStatic+0x88>
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <xQueueGenericCreateStatic+0x8a>
 8006270:	2300      	movs	r3, #0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10b      	bne.n	800628e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	61fb      	str	r3, [r7, #28]
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	e7fd      	b.n	800628a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800628e:	2350      	movs	r3, #80	@ 0x50
 8006290:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b50      	cmp	r3, #80	@ 0x50
 8006296:	d00b      	beq.n	80062b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	61bb      	str	r3, [r7, #24]
}
 80062aa:	bf00      	nop
 80062ac:	bf00      	nop
 80062ae:	e7fd      	b.n	80062ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80062b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80062b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00d      	beq.n	80062d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80062c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 f805 	bl	80062e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80062da:	4618      	mov	r0, r3
 80062dc:	3730      	adds	r7, #48	@ 0x30
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	607a      	str	r2, [r7, #4]
 80062ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d103      	bne.n	80062fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	e002      	b.n	8006304 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006310:	2101      	movs	r1, #1
 8006312:	69b8      	ldr	r0, [r7, #24]
 8006314:	f7ff fefe 	bl	8006114 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006320:	bf00      	nop
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08e      	sub	sp, #56	@ 0x38
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006336:	2300      	movs	r3, #0
 8006338:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800633e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <xQueueGenericSend+0x34>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	e7fd      	b.n	8006358 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d103      	bne.n	800636a <xQueueGenericSend+0x42>
 8006362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <xQueueGenericSend+0x46>
 800636a:	2301      	movs	r3, #1
 800636c:	e000      	b.n	8006370 <xQueueGenericSend+0x48>
 800636e:	2300      	movs	r3, #0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10b      	bne.n	800638c <xQueueGenericSend+0x64>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006386:	bf00      	nop
 8006388:	bf00      	nop
 800638a:	e7fd      	b.n	8006388 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b02      	cmp	r3, #2
 8006390:	d103      	bne.n	800639a <xQueueGenericSend+0x72>
 8006392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <xQueueGenericSend+0x76>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <xQueueGenericSend+0x78>
 800639e:	2300      	movs	r3, #0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10b      	bne.n	80063bc <xQueueGenericSend+0x94>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	623b      	str	r3, [r7, #32]
}
 80063b6:	bf00      	nop
 80063b8:	bf00      	nop
 80063ba:	e7fd      	b.n	80063b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063bc:	f001 f9ce 	bl	800775c <xTaskGetSchedulerState>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d102      	bne.n	80063cc <xQueueGenericSend+0xa4>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <xQueueGenericSend+0xa8>
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <xQueueGenericSend+0xaa>
 80063d0:	2300      	movs	r3, #0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10b      	bne.n	80063ee <xQueueGenericSend+0xc6>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	61fb      	str	r3, [r7, #28]
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	e7fd      	b.n	80063ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063ee:	f001 ff23 	bl	8008238 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d302      	bcc.n	8006404 <xQueueGenericSend+0xdc>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d129      	bne.n	8006458 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800640a:	f000 fa0f 	bl	800682c <prvCopyDataToQueue>
 800640e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006414:	2b00      	cmp	r3, #0
 8006416:	d010      	beq.n	800643a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641a:	3324      	adds	r3, #36	@ 0x24
 800641c:	4618      	mov	r0, r3
 800641e:	f000 ffdd 	bl	80073dc <xTaskRemoveFromEventList>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d013      	beq.n	8006450 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006428:	4b3f      	ldr	r3, [pc, #252]	@ (8006528 <xQueueGenericSend+0x200>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	e00a      	b.n	8006450 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800643a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006440:	4b39      	ldr	r3, [pc, #228]	@ (8006528 <xQueueGenericSend+0x200>)
 8006442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006450:	f001 ff24 	bl	800829c <vPortExitCritical>
				return pdPASS;
 8006454:	2301      	movs	r3, #1
 8006456:	e063      	b.n	8006520 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d103      	bne.n	8006466 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800645e:	f001 ff1d 	bl	800829c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006462:	2300      	movs	r3, #0
 8006464:	e05c      	b.n	8006520 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800646c:	f107 0314 	add.w	r3, r7, #20
 8006470:	4618      	mov	r0, r3
 8006472:	f001 f817 	bl	80074a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006476:	2301      	movs	r3, #1
 8006478:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800647a:	f001 ff0f 	bl	800829c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800647e:	f000 fd87 	bl	8006f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006482:	f001 fed9 	bl	8008238 <vPortEnterCritical>
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800648c:	b25b      	sxtb	r3, r3
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d103      	bne.n	800649c <xQueueGenericSend+0x174>
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064a2:	b25b      	sxtb	r3, r3
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d103      	bne.n	80064b2 <xQueueGenericSend+0x18a>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064b2:	f001 fef3 	bl	800829c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064b6:	1d3a      	adds	r2, r7, #4
 80064b8:	f107 0314 	add.w	r3, r7, #20
 80064bc:	4611      	mov	r1, r2
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 f806 	bl	80074d0 <xTaskCheckForTimeOut>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d124      	bne.n	8006514 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064cc:	f000 faa6 	bl	8006a1c <prvIsQueueFull>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d018      	beq.n	8006508 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d8:	3310      	adds	r3, #16
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	4611      	mov	r1, r2
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 ff2a 	bl	8007338 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064e6:	f000 fa31 	bl	800694c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064ea:	f000 fd5f 	bl	8006fac <xTaskResumeAll>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f47f af7c 	bne.w	80063ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80064f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006528 <xQueueGenericSend+0x200>)
 80064f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	e772      	b.n	80063ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800650a:	f000 fa1f 	bl	800694c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800650e:	f000 fd4d 	bl	8006fac <xTaskResumeAll>
 8006512:	e76c      	b.n	80063ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006514:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006516:	f000 fa19 	bl	800694c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800651a:	f000 fd47 	bl	8006fac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800651e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006520:	4618      	mov	r0, r3
 8006522:	3738      	adds	r7, #56	@ 0x38
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b090      	sub	sp, #64	@ 0x40
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10b      	bne.n	800655c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006556:	bf00      	nop
 8006558:	bf00      	nop
 800655a:	e7fd      	b.n	8006558 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d103      	bne.n	800656a <xQueueGenericSendFromISR+0x3e>
 8006562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <xQueueGenericSendFromISR+0x42>
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <xQueueGenericSendFromISR+0x44>
 800656e:	2300      	movs	r3, #0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10b      	bne.n	800658c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006586:	bf00      	nop
 8006588:	bf00      	nop
 800658a:	e7fd      	b.n	8006588 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b02      	cmp	r3, #2
 8006590:	d103      	bne.n	800659a <xQueueGenericSendFromISR+0x6e>
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006596:	2b01      	cmp	r3, #1
 8006598:	d101      	bne.n	800659e <xQueueGenericSendFromISR+0x72>
 800659a:	2301      	movs	r3, #1
 800659c:	e000      	b.n	80065a0 <xQueueGenericSendFromISR+0x74>
 800659e:	2300      	movs	r3, #0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10b      	bne.n	80065bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	623b      	str	r3, [r7, #32]
}
 80065b6:	bf00      	nop
 80065b8:	bf00      	nop
 80065ba:	e7fd      	b.n	80065b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065bc:	f001 ff1c 	bl	80083f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065c0:	f3ef 8211 	mrs	r2, BASEPRI
 80065c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	61fa      	str	r2, [r7, #28]
 80065d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d302      	bcc.n	80065ee <xQueueGenericSendFromISR+0xc2>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d12f      	bne.n	800664e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006604:	f000 f912 	bl	800682c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006608:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006610:	d112      	bne.n	8006638 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006616:	2b00      	cmp	r3, #0
 8006618:	d016      	beq.n	8006648 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800661a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661c:	3324      	adds	r3, #36	@ 0x24
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fedc 	bl	80073dc <xTaskRemoveFromEventList>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00e      	beq.n	8006648 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00b      	beq.n	8006648 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	e007      	b.n	8006648 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006638:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800663c:	3301      	adds	r3, #1
 800663e:	b2db      	uxtb	r3, r3
 8006640:	b25a      	sxtb	r2, r3
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006648:	2301      	movs	r3, #1
 800664a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800664c:	e001      	b.n	8006652 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800664e:	2300      	movs	r3, #0
 8006650:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006654:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800665c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800665e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006660:	4618      	mov	r0, r3
 8006662:	3740      	adds	r7, #64	@ 0x40
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08c      	sub	sp, #48	@ 0x30
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006674:	2300      	movs	r3, #0
 8006676:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800667c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10b      	bne.n	800669a <xQueueReceive+0x32>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	623b      	str	r3, [r7, #32]
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	e7fd      	b.n	8006696 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d103      	bne.n	80066a8 <xQueueReceive+0x40>
 80066a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <xQueueReceive+0x44>
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <xQueueReceive+0x46>
 80066ac:	2300      	movs	r3, #0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10b      	bne.n	80066ca <xQueueReceive+0x62>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	61fb      	str	r3, [r7, #28]
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop
 80066c8:	e7fd      	b.n	80066c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066ca:	f001 f847 	bl	800775c <xTaskGetSchedulerState>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d102      	bne.n	80066da <xQueueReceive+0x72>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <xQueueReceive+0x76>
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <xQueueReceive+0x78>
 80066de:	2300      	movs	r3, #0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10b      	bne.n	80066fc <xQueueReceive+0x94>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	61bb      	str	r3, [r7, #24]
}
 80066f6:	bf00      	nop
 80066f8:	bf00      	nop
 80066fa:	e7fd      	b.n	80066f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066fc:	f001 fd9c 	bl	8008238 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	2b00      	cmp	r3, #0
 800670a:	d01f      	beq.n	800674c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006710:	f000 f8f6 	bl	8006900 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006716:	1e5a      	subs	r2, r3, #1
 8006718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800671c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00f      	beq.n	8006744 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006726:	3310      	adds	r3, #16
 8006728:	4618      	mov	r0, r3
 800672a:	f000 fe57 	bl	80073dc <xTaskRemoveFromEventList>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006734:	4b3c      	ldr	r3, [pc, #240]	@ (8006828 <xQueueReceive+0x1c0>)
 8006736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006744:	f001 fdaa 	bl	800829c <vPortExitCritical>
				return pdPASS;
 8006748:	2301      	movs	r3, #1
 800674a:	e069      	b.n	8006820 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d103      	bne.n	800675a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006752:	f001 fda3 	bl	800829c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006756:	2300      	movs	r3, #0
 8006758:	e062      	b.n	8006820 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800675a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d106      	bne.n	800676e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006760:	f107 0310 	add.w	r3, r7, #16
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fe9d 	bl	80074a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800676a:	2301      	movs	r3, #1
 800676c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800676e:	f001 fd95 	bl	800829c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006772:	f000 fc0d 	bl	8006f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006776:	f001 fd5f 	bl	8008238 <vPortEnterCritical>
 800677a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006780:	b25b      	sxtb	r3, r3
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006786:	d103      	bne.n	8006790 <xQueueReceive+0x128>
 8006788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006792:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006796:	b25b      	sxtb	r3, r3
 8006798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679c:	d103      	bne.n	80067a6 <xQueueReceive+0x13e>
 800679e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067a6:	f001 fd79 	bl	800829c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067aa:	1d3a      	adds	r2, r7, #4
 80067ac:	f107 0310 	add.w	r3, r7, #16
 80067b0:	4611      	mov	r1, r2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fe8c 	bl	80074d0 <xTaskCheckForTimeOut>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d123      	bne.n	8006806 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067c0:	f000 f916 	bl	80069f0 <prvIsQueueEmpty>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d017      	beq.n	80067fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067cc:	3324      	adds	r3, #36	@ 0x24
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	4611      	mov	r1, r2
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fdb0 	bl	8007338 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067da:	f000 f8b7 	bl	800694c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067de:	f000 fbe5 	bl	8006fac <xTaskResumeAll>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d189      	bne.n	80066fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80067e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006828 <xQueueReceive+0x1c0>)
 80067ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	e780      	b.n	80066fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067fc:	f000 f8a6 	bl	800694c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006800:	f000 fbd4 	bl	8006fac <xTaskResumeAll>
 8006804:	e77a      	b.n	80066fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006808:	f000 f8a0 	bl	800694c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800680c:	f000 fbce 	bl	8006fac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006810:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006812:	f000 f8ed 	bl	80069f0 <prvIsQueueEmpty>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	f43f af6f 	beq.w	80066fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800681e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006820:	4618      	mov	r0, r3
 8006822:	3730      	adds	r7, #48	@ 0x30
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	e000ed04 	.word	0xe000ed04

0800682c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006840:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10d      	bne.n	8006866 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d14d      	bne.n	80068ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	4618      	mov	r0, r3
 8006858:	f000 ff9e 	bl	8007798 <xTaskPriorityDisinherit>
 800685c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	609a      	str	r2, [r3, #8]
 8006864:	e043      	b.n	80068ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d119      	bne.n	80068a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6858      	ldr	r0, [r3, #4]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006874:	461a      	mov	r2, r3
 8006876:	68b9      	ldr	r1, [r7, #8]
 8006878:	f003 f81d 	bl	80098b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006884:	441a      	add	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	429a      	cmp	r2, r3
 8006894:	d32b      	bcc.n	80068ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	605a      	str	r2, [r3, #4]
 800689e:	e026      	b.n	80068ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68d8      	ldr	r0, [r3, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a8:	461a      	mov	r2, r3
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	f003 f803 	bl	80098b6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b8:	425b      	negs	r3, r3
 80068ba:	441a      	add	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	68da      	ldr	r2, [r3, #12]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d207      	bcs.n	80068dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d4:	425b      	negs	r3, r3
 80068d6:	441a      	add	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d105      	bne.n	80068ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80068f6:	697b      	ldr	r3, [r7, #20]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3718      	adds	r7, #24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	d018      	beq.n	8006944 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691a:	441a      	add	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	429a      	cmp	r2, r3
 800692a:	d303      	bcc.n	8006934 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68d9      	ldr	r1, [r3, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693c:	461a      	mov	r2, r3
 800693e:	6838      	ldr	r0, [r7, #0]
 8006940:	f002 ffb9 	bl	80098b6 <memcpy>
	}
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006954:	f001 fc70 	bl	8008238 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800695e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006960:	e011      	b.n	8006986 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	d012      	beq.n	8006990 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3324      	adds	r3, #36	@ 0x24
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fd34 	bl	80073dc <xTaskRemoveFromEventList>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800697a:	f000 fe0d 	bl	8007598 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	3b01      	subs	r3, #1
 8006982:	b2db      	uxtb	r3, r3
 8006984:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800698a:	2b00      	cmp	r3, #0
 800698c:	dce9      	bgt.n	8006962 <prvUnlockQueue+0x16>
 800698e:	e000      	b.n	8006992 <prvUnlockQueue+0x46>
					break;
 8006990:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	22ff      	movs	r2, #255	@ 0xff
 8006996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800699a:	f001 fc7f 	bl	800829c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800699e:	f001 fc4b 	bl	8008238 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069aa:	e011      	b.n	80069d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d012      	beq.n	80069da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3310      	adds	r3, #16
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fd0f 	bl	80073dc <xTaskRemoveFromEventList>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069c4:	f000 fde8 	bl	8007598 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	dce9      	bgt.n	80069ac <prvUnlockQueue+0x60>
 80069d8:	e000      	b.n	80069dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	22ff      	movs	r2, #255	@ 0xff
 80069e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80069e4:	f001 fc5a 	bl	800829c <vPortExitCritical>
}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069f8:	f001 fc1e 	bl	8008238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a04:	2301      	movs	r3, #1
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	e001      	b.n	8006a0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a0e:	f001 fc45 	bl	800829c <vPortExitCritical>

	return xReturn;
 8006a12:	68fb      	ldr	r3, [r7, #12]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a24:	f001 fc08 	bl	8008238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d102      	bne.n	8006a3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a34:	2301      	movs	r3, #1
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	e001      	b.n	8006a3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a3e:	f001 fc2d 	bl	800829c <vPortExitCritical>

	return xReturn;
 8006a42:	68fb      	ldr	r3, [r7, #12]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	e014      	b.n	8006a86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8006a9c <vQueueAddToRegistry+0x50>)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10b      	bne.n	8006a80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a68:	490c      	ldr	r1, [pc, #48]	@ (8006a9c <vQueueAddToRegistry+0x50>)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a72:	4a0a      	ldr	r2, [pc, #40]	@ (8006a9c <vQueueAddToRegistry+0x50>)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	4413      	add	r3, r2
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a7e:	e006      	b.n	8006a8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3301      	adds	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b07      	cmp	r3, #7
 8006a8a:	d9e7      	bls.n	8006a5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a8c:	bf00      	nop
 8006a8e:	bf00      	nop
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	20000ad8 	.word	0x20000ad8

08006aa0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ab0:	f001 fbc2 	bl	8008238 <vPortEnterCritical>
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006aba:	b25b      	sxtb	r3, r3
 8006abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac0:	d103      	bne.n	8006aca <vQueueWaitForMessageRestricted+0x2a>
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ad0:	b25b      	sxtb	r3, r3
 8006ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad6:	d103      	bne.n	8006ae0 <vQueueWaitForMessageRestricted+0x40>
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ae0:	f001 fbdc 	bl	800829c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d106      	bne.n	8006afa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	3324      	adds	r3, #36	@ 0x24
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	68b9      	ldr	r1, [r7, #8]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fc45 	bl	8007384 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006afa:	6978      	ldr	r0, [r7, #20]
 8006afc:	f7ff ff26 	bl	800694c <prvUnlockQueue>
	}
 8006b00:	bf00      	nop
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08e      	sub	sp, #56	@ 0x38
 8006b0c:	af04      	add	r7, sp, #16
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10b      	bne.n	8006b34 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	623b      	str	r3, [r7, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	e7fd      	b.n	8006b30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	61fb      	str	r3, [r7, #28]
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	e7fd      	b.n	8006b4e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b52:	235c      	movs	r3, #92	@ 0x5c
 8006b54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b5c      	cmp	r3, #92	@ 0x5c
 8006b5a:	d00b      	beq.n	8006b74 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	61bb      	str	r3, [r7, #24]
}
 8006b6e:	bf00      	nop
 8006b70:	bf00      	nop
 8006b72:	e7fd      	b.n	8006b70 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b74:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01e      	beq.n	8006bba <xTaskCreateStatic+0xb2>
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d01b      	beq.n	8006bba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b84:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b8a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b94:	2300      	movs	r3, #0
 8006b96:	9303      	str	r3, [sp, #12]
 8006b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9a:	9302      	str	r3, [sp, #8]
 8006b9c:	f107 0314 	add.w	r3, r7, #20
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 f850 	bl	8006c52 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006bb4:	f000 f8de 	bl	8006d74 <prvAddNewTaskToReadyList>
 8006bb8:	e001      	b.n	8006bbe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bbe:	697b      	ldr	r3, [r7, #20]
	}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3728      	adds	r7, #40	@ 0x28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08c      	sub	sp, #48	@ 0x30
 8006bcc:	af04      	add	r7, sp, #16
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	603b      	str	r3, [r7, #0]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bd8:	88fb      	ldrh	r3, [r7, #6]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f001 fc4d 	bl	800847c <pvPortMalloc>
 8006be2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00e      	beq.n	8006c08 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bea:	205c      	movs	r0, #92	@ 0x5c
 8006bec:	f001 fc46 	bl	800847c <pvPortMalloc>
 8006bf0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bfe:	e005      	b.n	8006c0c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c00:	6978      	ldr	r0, [r7, #20]
 8006c02:	f001 fd09 	bl	8008618 <vPortFree>
 8006c06:	e001      	b.n	8006c0c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d017      	beq.n	8006c42 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c1a:	88fa      	ldrh	r2, [r7, #6]
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	9303      	str	r3, [sp, #12]
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	9302      	str	r3, [sp, #8]
 8006c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	68b9      	ldr	r1, [r7, #8]
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 f80e 	bl	8006c52 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c36:	69f8      	ldr	r0, [r7, #28]
 8006c38:	f000 f89c 	bl	8006d74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	61bb      	str	r3, [r7, #24]
 8006c40:	e002      	b.n	8006c48 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c42:	f04f 33ff 	mov.w	r3, #4294967295
 8006c46:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c48:	69bb      	ldr	r3, [r7, #24]
	}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3720      	adds	r7, #32
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b088      	sub	sp, #32
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	607a      	str	r2, [r7, #4]
 8006c5e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	461a      	mov	r2, r3
 8006c6a:	21a5      	movs	r1, #165	@ 0xa5
 8006c6c:	f002 fda3 	bl	80097b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	f023 0307 	bic.w	r3, r3, #7
 8006c88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00b      	beq.n	8006cac <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	617b      	str	r3, [r7, #20]
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	e7fd      	b.n	8006ca8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d01f      	beq.n	8006cf2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	e012      	b.n	8006cde <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	7819      	ldrb	r1, [r3, #0]
 8006cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3334      	adds	r3, #52	@ 0x34
 8006cc8:	460a      	mov	r2, r1
 8006cca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d006      	beq.n	8006ce6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	61fb      	str	r3, [r7, #28]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	2b0f      	cmp	r3, #15
 8006ce2:	d9e9      	bls.n	8006cb8 <prvInitialiseNewTask+0x66>
 8006ce4:	e000      	b.n	8006ce8 <prvInitialiseNewTask+0x96>
			{
				break;
 8006ce6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cf0:	e003      	b.n	8006cfa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfc:	2b37      	cmp	r3, #55	@ 0x37
 8006cfe:	d901      	bls.n	8006d04 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d00:	2337      	movs	r3, #55	@ 0x37
 8006d02:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d08:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d0e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d12:	2200      	movs	r2, #0
 8006d14:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	3304      	adds	r3, #4
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff f966 	bl	8005fec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d22:	3318      	adds	r3, #24
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff f961 	bl	8005fec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d32:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d3e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	2200      	movs	r2, #0
 8006d44:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	68f9      	ldr	r1, [r7, #12]
 8006d52:	69b8      	ldr	r0, [r7, #24]
 8006d54:	f001 f93e 	bl	8007fd4 <pxPortInitialiseStack>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d6a:	bf00      	nop
 8006d6c:	3720      	adds	r7, #32
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d7c:	f001 fa5c 	bl	8008238 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d80:	4b2d      	ldr	r3, [pc, #180]	@ (8006e38 <prvAddNewTaskToReadyList+0xc4>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3301      	adds	r3, #1
 8006d86:	4a2c      	ldr	r2, [pc, #176]	@ (8006e38 <prvAddNewTaskToReadyList+0xc4>)
 8006d88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d92:	4a2a      	ldr	r2, [pc, #168]	@ (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d98:	4b27      	ldr	r3, [pc, #156]	@ (8006e38 <prvAddNewTaskToReadyList+0xc4>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d110      	bne.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006da0:	f000 fc1e 	bl	80075e0 <prvInitialiseTaskLists>
 8006da4:	e00d      	b.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006da6:	4b26      	ldr	r3, [pc, #152]	@ (8006e40 <prvAddNewTaskToReadyList+0xcc>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d109      	bne.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dae:	4b23      	ldr	r3, [pc, #140]	@ (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d802      	bhi.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dc2:	4b20      	ldr	r3, [pc, #128]	@ (8006e44 <prvAddNewTaskToReadyList+0xd0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	4a1e      	ldr	r2, [pc, #120]	@ (8006e44 <prvAddNewTaskToReadyList+0xd0>)
 8006dca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8006e44 <prvAddNewTaskToReadyList+0xd0>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e48 <prvAddNewTaskToReadyList+0xd4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d903      	bls.n	8006de8 <prvAddNewTaskToReadyList+0x74>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de4:	4a18      	ldr	r2, [pc, #96]	@ (8006e48 <prvAddNewTaskToReadyList+0xd4>)
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4a15      	ldr	r2, [pc, #84]	@ (8006e4c <prvAddNewTaskToReadyList+0xd8>)
 8006df6:	441a      	add	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	f7ff f901 	bl	8006006 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e04:	f001 fa4a 	bl	800829c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e08:	4b0d      	ldr	r3, [pc, #52]	@ (8006e40 <prvAddNewTaskToReadyList+0xcc>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00e      	beq.n	8006e2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e10:	4b0a      	ldr	r3, [pc, #40]	@ (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d207      	bcs.n	8006e2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e50 <prvAddNewTaskToReadyList+0xdc>)
 8006e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000fec 	.word	0x20000fec
 8006e3c:	20000b18 	.word	0x20000b18
 8006e40:	20000ff8 	.word	0x20000ff8
 8006e44:	20001008 	.word	0x20001008
 8006e48:	20000ff4 	.word	0x20000ff4
 8006e4c:	20000b1c 	.word	0x20000b1c
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d018      	beq.n	8006e98 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e66:	4b14      	ldr	r3, [pc, #80]	@ (8006eb8 <vTaskDelay+0x64>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00b      	beq.n	8006e86 <vTaskDelay+0x32>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	60bb      	str	r3, [r7, #8]
}
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
 8006e84:	e7fd      	b.n	8006e82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e86:	f000 f883 	bl	8006f90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fcf3 	bl	8007878 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e92:	f000 f88b 	bl	8006fac <xTaskResumeAll>
 8006e96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d107      	bne.n	8006eae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006e9e:	4b07      	ldr	r3, [pc, #28]	@ (8006ebc <vTaskDelay+0x68>)
 8006ea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eae:	bf00      	nop
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20001014 	.word	0x20001014
 8006ebc:	e000ed04 	.word	0xe000ed04

08006ec0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08a      	sub	sp, #40	@ 0x28
 8006ec4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ece:	463a      	mov	r2, r7
 8006ed0:	1d39      	adds	r1, r7, #4
 8006ed2:	f107 0308 	add.w	r3, r7, #8
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff f834 	bl	8005f44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	9202      	str	r2, [sp, #8]
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	2300      	movs	r3, #0
 8006eec:	460a      	mov	r2, r1
 8006eee:	4922      	ldr	r1, [pc, #136]	@ (8006f78 <vTaskStartScheduler+0xb8>)
 8006ef0:	4822      	ldr	r0, [pc, #136]	@ (8006f7c <vTaskStartScheduler+0xbc>)
 8006ef2:	f7ff fe09 	bl	8006b08 <xTaskCreateStatic>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4a21      	ldr	r2, [pc, #132]	@ (8006f80 <vTaskStartScheduler+0xc0>)
 8006efa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006efc:	4b20      	ldr	r3, [pc, #128]	@ (8006f80 <vTaskStartScheduler+0xc0>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f04:	2301      	movs	r3, #1
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	e001      	b.n	8006f0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d102      	bne.n	8006f1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f14:	f000 fd04 	bl	8007920 <xTimerCreateTimerTask>
 8006f18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d116      	bne.n	8006f4e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	613b      	str	r3, [r7, #16]
}
 8006f32:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f34:	4b13      	ldr	r3, [pc, #76]	@ (8006f84 <vTaskStartScheduler+0xc4>)
 8006f36:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f3c:	4b12      	ldr	r3, [pc, #72]	@ (8006f88 <vTaskStartScheduler+0xc8>)
 8006f3e:	2201      	movs	r2, #1
 8006f40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f42:	4b12      	ldr	r3, [pc, #72]	@ (8006f8c <vTaskStartScheduler+0xcc>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f48:	f001 f8d2 	bl	80080f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f4c:	e00f      	b.n	8006f6e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f54:	d10b      	bne.n	8006f6e <vTaskStartScheduler+0xae>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	60fb      	str	r3, [r7, #12]
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	e7fd      	b.n	8006f6a <vTaskStartScheduler+0xaa>
}
 8006f6e:	bf00      	nop
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	0800b9b4 	.word	0x0800b9b4
 8006f7c:	080075b1 	.word	0x080075b1
 8006f80:	20001010 	.word	0x20001010
 8006f84:	2000100c 	.word	0x2000100c
 8006f88:	20000ff8 	.word	0x20000ff8
 8006f8c:	20000ff0 	.word	0x20000ff0

08006f90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f94:	4b04      	ldr	r3, [pc, #16]	@ (8006fa8 <vTaskSuspendAll+0x18>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	4a03      	ldr	r2, [pc, #12]	@ (8006fa8 <vTaskSuspendAll+0x18>)
 8006f9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f9e:	bf00      	nop
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	20001014 	.word	0x20001014

08006fac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fba:	4b42      	ldr	r3, [pc, #264]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10b      	bne.n	8006fda <xTaskResumeAll+0x2e>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	603b      	str	r3, [r7, #0]
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop
 8006fd8:	e7fd      	b.n	8006fd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fda:	f001 f92d 	bl	8008238 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fde:	4b39      	ldr	r3, [pc, #228]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	4a37      	ldr	r2, [pc, #220]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fe6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fe8:	4b36      	ldr	r3, [pc, #216]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d162      	bne.n	80070b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ff0:	4b35      	ldr	r3, [pc, #212]	@ (80070c8 <xTaskResumeAll+0x11c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d05e      	beq.n	80070b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ff8:	e02f      	b.n	800705a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffa:	4b34      	ldr	r3, [pc, #208]	@ (80070cc <xTaskResumeAll+0x120>)
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3318      	adds	r3, #24
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff f85a 	bl	80060c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3304      	adds	r3, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff f855 	bl	80060c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800701a:	4b2d      	ldr	r3, [pc, #180]	@ (80070d0 <xTaskResumeAll+0x124>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d903      	bls.n	800702a <xTaskResumeAll+0x7e>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007026:	4a2a      	ldr	r2, [pc, #168]	@ (80070d0 <xTaskResumeAll+0x124>)
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4a27      	ldr	r2, [pc, #156]	@ (80070d4 <xTaskResumeAll+0x128>)
 8007038:	441a      	add	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3304      	adds	r3, #4
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f7fe ffe0 	bl	8006006 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704a:	4b23      	ldr	r3, [pc, #140]	@ (80070d8 <xTaskResumeAll+0x12c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007050:	429a      	cmp	r2, r3
 8007052:	d302      	bcc.n	800705a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007054:	4b21      	ldr	r3, [pc, #132]	@ (80070dc <xTaskResumeAll+0x130>)
 8007056:	2201      	movs	r2, #1
 8007058:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800705a:	4b1c      	ldr	r3, [pc, #112]	@ (80070cc <xTaskResumeAll+0x120>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1cb      	bne.n	8006ffa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007068:	f000 fb58 	bl	800771c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800706c:	4b1c      	ldr	r3, [pc, #112]	@ (80070e0 <xTaskResumeAll+0x134>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d010      	beq.n	800709a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007078:	f000 f846 	bl	8007108 <xTaskIncrementTick>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007082:	4b16      	ldr	r3, [pc, #88]	@ (80070dc <xTaskResumeAll+0x130>)
 8007084:	2201      	movs	r2, #1
 8007086:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3b01      	subs	r3, #1
 800708c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1f1      	bne.n	8007078 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007094:	4b12      	ldr	r3, [pc, #72]	@ (80070e0 <xTaskResumeAll+0x134>)
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800709a:	4b10      	ldr	r3, [pc, #64]	@ (80070dc <xTaskResumeAll+0x130>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070a2:	2301      	movs	r3, #1
 80070a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070a6:	4b0f      	ldr	r3, [pc, #60]	@ (80070e4 <xTaskResumeAll+0x138>)
 80070a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070b6:	f001 f8f1 	bl	800829c <vPortExitCritical>

	return xAlreadyYielded;
 80070ba:	68bb      	ldr	r3, [r7, #8]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20001014 	.word	0x20001014
 80070c8:	20000fec 	.word	0x20000fec
 80070cc:	20000fac 	.word	0x20000fac
 80070d0:	20000ff4 	.word	0x20000ff4
 80070d4:	20000b1c 	.word	0x20000b1c
 80070d8:	20000b18 	.word	0x20000b18
 80070dc:	20001000 	.word	0x20001000
 80070e0:	20000ffc 	.word	0x20000ffc
 80070e4:	e000ed04 	.word	0xe000ed04

080070e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070ee:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <xTaskGetTickCount+0x1c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070f4:	687b      	ldr	r3, [r7, #4]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000ff0 	.word	0x20000ff0

08007108 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800710e:	2300      	movs	r3, #0
 8007110:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007112:	4b4f      	ldr	r3, [pc, #316]	@ (8007250 <xTaskIncrementTick+0x148>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f040 8090 	bne.w	800723c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800711c:	4b4d      	ldr	r3, [pc, #308]	@ (8007254 <xTaskIncrementTick+0x14c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3301      	adds	r3, #1
 8007122:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007124:	4a4b      	ldr	r2, [pc, #300]	@ (8007254 <xTaskIncrementTick+0x14c>)
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d121      	bne.n	8007174 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007130:	4b49      	ldr	r3, [pc, #292]	@ (8007258 <xTaskIncrementTick+0x150>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00b      	beq.n	8007152 <xTaskIncrementTick+0x4a>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	603b      	str	r3, [r7, #0]
}
 800714c:	bf00      	nop
 800714e:	bf00      	nop
 8007150:	e7fd      	b.n	800714e <xTaskIncrementTick+0x46>
 8007152:	4b41      	ldr	r3, [pc, #260]	@ (8007258 <xTaskIncrementTick+0x150>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	4b40      	ldr	r3, [pc, #256]	@ (800725c <xTaskIncrementTick+0x154>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a3e      	ldr	r2, [pc, #248]	@ (8007258 <xTaskIncrementTick+0x150>)
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	4a3e      	ldr	r2, [pc, #248]	@ (800725c <xTaskIncrementTick+0x154>)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	4b3e      	ldr	r3, [pc, #248]	@ (8007260 <xTaskIncrementTick+0x158>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3301      	adds	r3, #1
 800716c:	4a3c      	ldr	r2, [pc, #240]	@ (8007260 <xTaskIncrementTick+0x158>)
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	f000 fad4 	bl	800771c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007174:	4b3b      	ldr	r3, [pc, #236]	@ (8007264 <xTaskIncrementTick+0x15c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	429a      	cmp	r2, r3
 800717c:	d349      	bcc.n	8007212 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800717e:	4b36      	ldr	r3, [pc, #216]	@ (8007258 <xTaskIncrementTick+0x150>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d104      	bne.n	8007192 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007188:	4b36      	ldr	r3, [pc, #216]	@ (8007264 <xTaskIncrementTick+0x15c>)
 800718a:	f04f 32ff 	mov.w	r2, #4294967295
 800718e:	601a      	str	r2, [r3, #0]
					break;
 8007190:	e03f      	b.n	8007212 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007192:	4b31      	ldr	r3, [pc, #196]	@ (8007258 <xTaskIncrementTick+0x150>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d203      	bcs.n	80071b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071aa:	4a2e      	ldr	r2, [pc, #184]	@ (8007264 <xTaskIncrementTick+0x15c>)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071b0:	e02f      	b.n	8007212 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	3304      	adds	r3, #4
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe ff82 	bl	80060c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d004      	beq.n	80071ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	3318      	adds	r3, #24
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fe ff79 	bl	80060c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d2:	4b25      	ldr	r3, [pc, #148]	@ (8007268 <xTaskIncrementTick+0x160>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d903      	bls.n	80071e2 <xTaskIncrementTick+0xda>
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071de:	4a22      	ldr	r2, [pc, #136]	@ (8007268 <xTaskIncrementTick+0x160>)
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4a1f      	ldr	r2, [pc, #124]	@ (800726c <xTaskIncrementTick+0x164>)
 80071f0:	441a      	add	r2, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	3304      	adds	r3, #4
 80071f6:	4619      	mov	r1, r3
 80071f8:	4610      	mov	r0, r2
 80071fa:	f7fe ff04 	bl	8006006 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007202:	4b1b      	ldr	r3, [pc, #108]	@ (8007270 <xTaskIncrementTick+0x168>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	429a      	cmp	r2, r3
 800720a:	d3b8      	bcc.n	800717e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800720c:	2301      	movs	r3, #1
 800720e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007210:	e7b5      	b.n	800717e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007212:	4b17      	ldr	r3, [pc, #92]	@ (8007270 <xTaskIncrementTick+0x168>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007218:	4914      	ldr	r1, [pc, #80]	@ (800726c <xTaskIncrementTick+0x164>)
 800721a:	4613      	mov	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	440b      	add	r3, r1
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d901      	bls.n	800722e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800722a:	2301      	movs	r3, #1
 800722c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800722e:	4b11      	ldr	r3, [pc, #68]	@ (8007274 <xTaskIncrementTick+0x16c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d007      	beq.n	8007246 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007236:	2301      	movs	r3, #1
 8007238:	617b      	str	r3, [r7, #20]
 800723a:	e004      	b.n	8007246 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800723c:	4b0e      	ldr	r3, [pc, #56]	@ (8007278 <xTaskIncrementTick+0x170>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3301      	adds	r3, #1
 8007242:	4a0d      	ldr	r2, [pc, #52]	@ (8007278 <xTaskIncrementTick+0x170>)
 8007244:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007246:	697b      	ldr	r3, [r7, #20]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20001014 	.word	0x20001014
 8007254:	20000ff0 	.word	0x20000ff0
 8007258:	20000fa4 	.word	0x20000fa4
 800725c:	20000fa8 	.word	0x20000fa8
 8007260:	20001004 	.word	0x20001004
 8007264:	2000100c 	.word	0x2000100c
 8007268:	20000ff4 	.word	0x20000ff4
 800726c:	20000b1c 	.word	0x20000b1c
 8007270:	20000b18 	.word	0x20000b18
 8007274:	20001000 	.word	0x20001000
 8007278:	20000ffc 	.word	0x20000ffc

0800727c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007282:	4b28      	ldr	r3, [pc, #160]	@ (8007324 <vTaskSwitchContext+0xa8>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800728a:	4b27      	ldr	r3, [pc, #156]	@ (8007328 <vTaskSwitchContext+0xac>)
 800728c:	2201      	movs	r2, #1
 800728e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007290:	e042      	b.n	8007318 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007292:	4b25      	ldr	r3, [pc, #148]	@ (8007328 <vTaskSwitchContext+0xac>)
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007298:	4b24      	ldr	r3, [pc, #144]	@ (800732c <vTaskSwitchContext+0xb0>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	e011      	b.n	80072c4 <vTaskSwitchContext+0x48>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10b      	bne.n	80072be <vTaskSwitchContext+0x42>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	607b      	str	r3, [r7, #4]
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	e7fd      	b.n	80072ba <vTaskSwitchContext+0x3e>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	491a      	ldr	r1, [pc, #104]	@ (8007330 <vTaskSwitchContext+0xb4>)
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	440b      	add	r3, r1
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d0e3      	beq.n	80072a0 <vTaskSwitchContext+0x24>
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	4613      	mov	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4a13      	ldr	r2, [pc, #76]	@ (8007330 <vTaskSwitchContext+0xb4>)
 80072e4:	4413      	add	r3, r2
 80072e6:	60bb      	str	r3, [r7, #8]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	605a      	str	r2, [r3, #4]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	3308      	adds	r3, #8
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d104      	bne.n	8007308 <vTaskSwitchContext+0x8c>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	605a      	str	r2, [r3, #4]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	4a09      	ldr	r2, [pc, #36]	@ (8007334 <vTaskSwitchContext+0xb8>)
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	4a06      	ldr	r2, [pc, #24]	@ (800732c <vTaskSwitchContext+0xb0>)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6013      	str	r3, [r2, #0]
}
 8007318:	bf00      	nop
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	20001014 	.word	0x20001014
 8007328:	20001000 	.word	0x20001000
 800732c:	20000ff4 	.word	0x20000ff4
 8007330:	20000b1c 	.word	0x20000b1c
 8007334:	20000b18 	.word	0x20000b18

08007338 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10b      	bne.n	8007360 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	60fb      	str	r3, [r7, #12]
}
 800735a:	bf00      	nop
 800735c:	bf00      	nop
 800735e:	e7fd      	b.n	800735c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007360:	4b07      	ldr	r3, [pc, #28]	@ (8007380 <vTaskPlaceOnEventList+0x48>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3318      	adds	r3, #24
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7fe fe70 	bl	800604e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800736e:	2101      	movs	r1, #1
 8007370:	6838      	ldr	r0, [r7, #0]
 8007372:	f000 fa81 	bl	8007878 <prvAddCurrentTaskToDelayedList>
}
 8007376:	bf00      	nop
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000b18 	.word	0x20000b18

08007384 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10b      	bne.n	80073ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	617b      	str	r3, [r7, #20]
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	e7fd      	b.n	80073aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073ae:	4b0a      	ldr	r3, [pc, #40]	@ (80073d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3318      	adds	r3, #24
 80073b4:	4619      	mov	r1, r3
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7fe fe25 	bl	8006006 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80073c2:	f04f 33ff 	mov.w	r3, #4294967295
 80073c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	68b8      	ldr	r0, [r7, #8]
 80073cc:	f000 fa54 	bl	8007878 <prvAddCurrentTaskToDelayedList>
	}
 80073d0:	bf00      	nop
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	20000b18 	.word	0x20000b18

080073dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10b      	bne.n	800740a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	60fb      	str	r3, [r7, #12]
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	e7fd      	b.n	8007406 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3318      	adds	r3, #24
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fe56 	bl	80060c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007414:	4b1d      	ldr	r3, [pc, #116]	@ (800748c <xTaskRemoveFromEventList+0xb0>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d11d      	bne.n	8007458 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	3304      	adds	r3, #4
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe fe4d 	bl	80060c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800742a:	4b19      	ldr	r3, [pc, #100]	@ (8007490 <xTaskRemoveFromEventList+0xb4>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d903      	bls.n	800743a <xTaskRemoveFromEventList+0x5e>
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007436:	4a16      	ldr	r2, [pc, #88]	@ (8007490 <xTaskRemoveFromEventList+0xb4>)
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4a13      	ldr	r2, [pc, #76]	@ (8007494 <xTaskRemoveFromEventList+0xb8>)
 8007448:	441a      	add	r2, r3
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	3304      	adds	r3, #4
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7fe fdd8 	bl	8006006 <vListInsertEnd>
 8007456:	e005      	b.n	8007464 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	3318      	adds	r3, #24
 800745c:	4619      	mov	r1, r3
 800745e:	480e      	ldr	r0, [pc, #56]	@ (8007498 <xTaskRemoveFromEventList+0xbc>)
 8007460:	f7fe fdd1 	bl	8006006 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007468:	4b0c      	ldr	r3, [pc, #48]	@ (800749c <xTaskRemoveFromEventList+0xc0>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746e:	429a      	cmp	r2, r3
 8007470:	d905      	bls.n	800747e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007472:	2301      	movs	r3, #1
 8007474:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007476:	4b0a      	ldr	r3, [pc, #40]	@ (80074a0 <xTaskRemoveFromEventList+0xc4>)
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	e001      	b.n	8007482 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007482:	697b      	ldr	r3, [r7, #20]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20001014 	.word	0x20001014
 8007490:	20000ff4 	.word	0x20000ff4
 8007494:	20000b1c 	.word	0x20000b1c
 8007498:	20000fac 	.word	0x20000fac
 800749c:	20000b18 	.word	0x20000b18
 80074a0:	20001000 	.word	0x20001000

080074a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074ac:	4b06      	ldr	r3, [pc, #24]	@ (80074c8 <vTaskInternalSetTimeOutState+0x24>)
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074b4:	4b05      	ldr	r3, [pc, #20]	@ (80074cc <vTaskInternalSetTimeOutState+0x28>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	605a      	str	r2, [r3, #4]
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	20001004 	.word	0x20001004
 80074cc:	20000ff0 	.word	0x20000ff0

080074d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10b      	bne.n	80074f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	613b      	str	r3, [r7, #16]
}
 80074f2:	bf00      	nop
 80074f4:	bf00      	nop
 80074f6:	e7fd      	b.n	80074f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10b      	bne.n	8007516 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	60fb      	str	r3, [r7, #12]
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop
 8007514:	e7fd      	b.n	8007512 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007516:	f000 fe8f 	bl	8008238 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800751a:	4b1d      	ldr	r3, [pc, #116]	@ (8007590 <xTaskCheckForTimeOut+0xc0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007532:	d102      	bne.n	800753a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007534:	2300      	movs	r3, #0
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	e023      	b.n	8007582 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	4b15      	ldr	r3, [pc, #84]	@ (8007594 <xTaskCheckForTimeOut+0xc4>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	429a      	cmp	r2, r3
 8007544:	d007      	beq.n	8007556 <xTaskCheckForTimeOut+0x86>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	429a      	cmp	r2, r3
 800754e:	d302      	bcc.n	8007556 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007550:	2301      	movs	r3, #1
 8007552:	61fb      	str	r3, [r7, #28]
 8007554:	e015      	b.n	8007582 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	429a      	cmp	r2, r3
 800755e:	d20b      	bcs.n	8007578 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	1ad2      	subs	r2, r2, r3
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff ff99 	bl	80074a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007572:	2300      	movs	r3, #0
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	e004      	b.n	8007582 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800757e:	2301      	movs	r3, #1
 8007580:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007582:	f000 fe8b 	bl	800829c <vPortExitCritical>

	return xReturn;
 8007586:	69fb      	ldr	r3, [r7, #28]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3720      	adds	r7, #32
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	20000ff0 	.word	0x20000ff0
 8007594:	20001004 	.word	0x20001004

08007598 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800759c:	4b03      	ldr	r3, [pc, #12]	@ (80075ac <vTaskMissedYield+0x14>)
 800759e:	2201      	movs	r2, #1
 80075a0:	601a      	str	r2, [r3, #0]
}
 80075a2:	bf00      	nop
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	20001000 	.word	0x20001000

080075b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075b8:	f000 f852 	bl	8007660 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075bc:	4b06      	ldr	r3, [pc, #24]	@ (80075d8 <prvIdleTask+0x28>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d9f9      	bls.n	80075b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075c4:	4b05      	ldr	r3, [pc, #20]	@ (80075dc <prvIdleTask+0x2c>)
 80075c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075d4:	e7f0      	b.n	80075b8 <prvIdleTask+0x8>
 80075d6:	bf00      	nop
 80075d8:	20000b1c 	.word	0x20000b1c
 80075dc:	e000ed04 	.word	0xe000ed04

080075e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075e6:	2300      	movs	r3, #0
 80075e8:	607b      	str	r3, [r7, #4]
 80075ea:	e00c      	b.n	8007606 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4a12      	ldr	r2, [pc, #72]	@ (8007640 <prvInitialiseTaskLists+0x60>)
 80075f8:	4413      	add	r3, r2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fcd6 	bl	8005fac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3301      	adds	r3, #1
 8007604:	607b      	str	r3, [r7, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b37      	cmp	r3, #55	@ 0x37
 800760a:	d9ef      	bls.n	80075ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800760c:	480d      	ldr	r0, [pc, #52]	@ (8007644 <prvInitialiseTaskLists+0x64>)
 800760e:	f7fe fccd 	bl	8005fac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007612:	480d      	ldr	r0, [pc, #52]	@ (8007648 <prvInitialiseTaskLists+0x68>)
 8007614:	f7fe fcca 	bl	8005fac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007618:	480c      	ldr	r0, [pc, #48]	@ (800764c <prvInitialiseTaskLists+0x6c>)
 800761a:	f7fe fcc7 	bl	8005fac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800761e:	480c      	ldr	r0, [pc, #48]	@ (8007650 <prvInitialiseTaskLists+0x70>)
 8007620:	f7fe fcc4 	bl	8005fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007624:	480b      	ldr	r0, [pc, #44]	@ (8007654 <prvInitialiseTaskLists+0x74>)
 8007626:	f7fe fcc1 	bl	8005fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800762a:	4b0b      	ldr	r3, [pc, #44]	@ (8007658 <prvInitialiseTaskLists+0x78>)
 800762c:	4a05      	ldr	r2, [pc, #20]	@ (8007644 <prvInitialiseTaskLists+0x64>)
 800762e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007630:	4b0a      	ldr	r3, [pc, #40]	@ (800765c <prvInitialiseTaskLists+0x7c>)
 8007632:	4a05      	ldr	r2, [pc, #20]	@ (8007648 <prvInitialiseTaskLists+0x68>)
 8007634:	601a      	str	r2, [r3, #0]
}
 8007636:	bf00      	nop
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000b1c 	.word	0x20000b1c
 8007644:	20000f7c 	.word	0x20000f7c
 8007648:	20000f90 	.word	0x20000f90
 800764c:	20000fac 	.word	0x20000fac
 8007650:	20000fc0 	.word	0x20000fc0
 8007654:	20000fd8 	.word	0x20000fd8
 8007658:	20000fa4 	.word	0x20000fa4
 800765c:	20000fa8 	.word	0x20000fa8

08007660 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007666:	e019      	b.n	800769c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007668:	f000 fde6 	bl	8008238 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766c:	4b10      	ldr	r3, [pc, #64]	@ (80076b0 <prvCheckTasksWaitingTermination+0x50>)
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3304      	adds	r3, #4
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe fd21 	bl	80060c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800767e:	4b0d      	ldr	r3, [pc, #52]	@ (80076b4 <prvCheckTasksWaitingTermination+0x54>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3b01      	subs	r3, #1
 8007684:	4a0b      	ldr	r2, [pc, #44]	@ (80076b4 <prvCheckTasksWaitingTermination+0x54>)
 8007686:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007688:	4b0b      	ldr	r3, [pc, #44]	@ (80076b8 <prvCheckTasksWaitingTermination+0x58>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3b01      	subs	r3, #1
 800768e:	4a0a      	ldr	r2, [pc, #40]	@ (80076b8 <prvCheckTasksWaitingTermination+0x58>)
 8007690:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007692:	f000 fe03 	bl	800829c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f810 	bl	80076bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800769c:	4b06      	ldr	r3, [pc, #24]	@ (80076b8 <prvCheckTasksWaitingTermination+0x58>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e1      	bne.n	8007668 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	20000fc0 	.word	0x20000fc0
 80076b4:	20000fec 	.word	0x20000fec
 80076b8:	20000fd4 	.word	0x20000fd4

080076bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d108      	bne.n	80076e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 ffa0 	bl	8008618 <vPortFree>
				vPortFree( pxTCB );
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 ff9d 	bl	8008618 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076de:	e019      	b.n	8007714 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d103      	bne.n	80076f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 ff94 	bl	8008618 <vPortFree>
	}
 80076f0:	e010      	b.n	8007714 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d00b      	beq.n	8007714 <prvDeleteTCB+0x58>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	60fb      	str	r3, [r7, #12]
}
 800770e:	bf00      	nop
 8007710:	bf00      	nop
 8007712:	e7fd      	b.n	8007710 <prvDeleteTCB+0x54>
	}
 8007714:	bf00      	nop
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007722:	4b0c      	ldr	r3, [pc, #48]	@ (8007754 <prvResetNextTaskUnblockTime+0x38>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d104      	bne.n	8007736 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800772c:	4b0a      	ldr	r3, [pc, #40]	@ (8007758 <prvResetNextTaskUnblockTime+0x3c>)
 800772e:	f04f 32ff 	mov.w	r2, #4294967295
 8007732:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007734:	e008      	b.n	8007748 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007736:	4b07      	ldr	r3, [pc, #28]	@ (8007754 <prvResetNextTaskUnblockTime+0x38>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	4a04      	ldr	r2, [pc, #16]	@ (8007758 <prvResetNextTaskUnblockTime+0x3c>)
 8007746:	6013      	str	r3, [r2, #0]
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	20000fa4 	.word	0x20000fa4
 8007758:	2000100c 	.word	0x2000100c

0800775c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007762:	4b0b      	ldr	r3, [pc, #44]	@ (8007790 <xTaskGetSchedulerState+0x34>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d102      	bne.n	8007770 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800776a:	2301      	movs	r3, #1
 800776c:	607b      	str	r3, [r7, #4]
 800776e:	e008      	b.n	8007782 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007770:	4b08      	ldr	r3, [pc, #32]	@ (8007794 <xTaskGetSchedulerState+0x38>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d102      	bne.n	800777e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007778:	2302      	movs	r3, #2
 800777a:	607b      	str	r3, [r7, #4]
 800777c:	e001      	b.n	8007782 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800777e:	2300      	movs	r3, #0
 8007780:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007782:	687b      	ldr	r3, [r7, #4]
	}
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	20000ff8 	.word	0x20000ff8
 8007794:	20001014 	.word	0x20001014

08007798 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077a4:	2300      	movs	r3, #0
 80077a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d058      	beq.n	8007860 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077ae:	4b2f      	ldr	r3, [pc, #188]	@ (800786c <xTaskPriorityDisinherit+0xd4>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d00b      	beq.n	80077d0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	60fb      	str	r3, [r7, #12]
}
 80077ca:	bf00      	nop
 80077cc:	bf00      	nop
 80077ce:	e7fd      	b.n	80077cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10b      	bne.n	80077f0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80077d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077dc:	f383 8811 	msr	BASEPRI, r3
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	60bb      	str	r3, [r7, #8]
}
 80077ea:	bf00      	nop
 80077ec:	bf00      	nop
 80077ee:	e7fd      	b.n	80077ec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f4:	1e5a      	subs	r2, r3, #1
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007802:	429a      	cmp	r2, r3
 8007804:	d02c      	beq.n	8007860 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800780a:	2b00      	cmp	r3, #0
 800780c:	d128      	bne.n	8007860 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	3304      	adds	r3, #4
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fc54 	bl	80060c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007824:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007830:	4b0f      	ldr	r3, [pc, #60]	@ (8007870 <xTaskPriorityDisinherit+0xd8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	429a      	cmp	r2, r3
 8007836:	d903      	bls.n	8007840 <xTaskPriorityDisinherit+0xa8>
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783c:	4a0c      	ldr	r2, [pc, #48]	@ (8007870 <xTaskPriorityDisinherit+0xd8>)
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007844:	4613      	mov	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4a09      	ldr	r2, [pc, #36]	@ (8007874 <xTaskPriorityDisinherit+0xdc>)
 800784e:	441a      	add	r2, r3
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	3304      	adds	r3, #4
 8007854:	4619      	mov	r1, r3
 8007856:	4610      	mov	r0, r2
 8007858:	f7fe fbd5 	bl	8006006 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800785c:	2301      	movs	r3, #1
 800785e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007860:	697b      	ldr	r3, [r7, #20]
	}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	20000b18 	.word	0x20000b18
 8007870:	20000ff4 	.word	0x20000ff4
 8007874:	20000b1c 	.word	0x20000b1c

08007878 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007882:	4b21      	ldr	r3, [pc, #132]	@ (8007908 <prvAddCurrentTaskToDelayedList+0x90>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007888:	4b20      	ldr	r3, [pc, #128]	@ (800790c <prvAddCurrentTaskToDelayedList+0x94>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3304      	adds	r3, #4
 800788e:	4618      	mov	r0, r3
 8007890:	f7fe fc16 	bl	80060c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789a:	d10a      	bne.n	80078b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078a2:	4b1a      	ldr	r3, [pc, #104]	@ (800790c <prvAddCurrentTaskToDelayedList+0x94>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3304      	adds	r3, #4
 80078a8:	4619      	mov	r1, r3
 80078aa:	4819      	ldr	r0, [pc, #100]	@ (8007910 <prvAddCurrentTaskToDelayedList+0x98>)
 80078ac:	f7fe fbab 	bl	8006006 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078b0:	e026      	b.n	8007900 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4413      	add	r3, r2
 80078b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078ba:	4b14      	ldr	r3, [pc, #80]	@ (800790c <prvAddCurrentTaskToDelayedList+0x94>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d209      	bcs.n	80078de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ca:	4b12      	ldr	r3, [pc, #72]	@ (8007914 <prvAddCurrentTaskToDelayedList+0x9c>)
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	4b0f      	ldr	r3, [pc, #60]	@ (800790c <prvAddCurrentTaskToDelayedList+0x94>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3304      	adds	r3, #4
 80078d4:	4619      	mov	r1, r3
 80078d6:	4610      	mov	r0, r2
 80078d8:	f7fe fbb9 	bl	800604e <vListInsert>
}
 80078dc:	e010      	b.n	8007900 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078de:	4b0e      	ldr	r3, [pc, #56]	@ (8007918 <prvAddCurrentTaskToDelayedList+0xa0>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	4b0a      	ldr	r3, [pc, #40]	@ (800790c <prvAddCurrentTaskToDelayedList+0x94>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3304      	adds	r3, #4
 80078e8:	4619      	mov	r1, r3
 80078ea:	4610      	mov	r0, r2
 80078ec:	f7fe fbaf 	bl	800604e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078f0:	4b0a      	ldr	r3, [pc, #40]	@ (800791c <prvAddCurrentTaskToDelayedList+0xa4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d202      	bcs.n	8007900 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80078fa:	4a08      	ldr	r2, [pc, #32]	@ (800791c <prvAddCurrentTaskToDelayedList+0xa4>)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	6013      	str	r3, [r2, #0]
}
 8007900:	bf00      	nop
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	20000ff0 	.word	0x20000ff0
 800790c:	20000b18 	.word	0x20000b18
 8007910:	20000fd8 	.word	0x20000fd8
 8007914:	20000fa8 	.word	0x20000fa8
 8007918:	20000fa4 	.word	0x20000fa4
 800791c:	2000100c 	.word	0x2000100c

08007920 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08a      	sub	sp, #40	@ 0x28
 8007924:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007926:	2300      	movs	r3, #0
 8007928:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800792a:	f000 fb13 	bl	8007f54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800792e:	4b1d      	ldr	r3, [pc, #116]	@ (80079a4 <xTimerCreateTimerTask+0x84>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d021      	beq.n	800797a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007936:	2300      	movs	r3, #0
 8007938:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800793a:	2300      	movs	r3, #0
 800793c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800793e:	1d3a      	adds	r2, r7, #4
 8007940:	f107 0108 	add.w	r1, r7, #8
 8007944:	f107 030c 	add.w	r3, r7, #12
 8007948:	4618      	mov	r0, r3
 800794a:	f7fe fb15 	bl	8005f78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	9202      	str	r2, [sp, #8]
 8007956:	9301      	str	r3, [sp, #4]
 8007958:	2302      	movs	r3, #2
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	2300      	movs	r3, #0
 800795e:	460a      	mov	r2, r1
 8007960:	4911      	ldr	r1, [pc, #68]	@ (80079a8 <xTimerCreateTimerTask+0x88>)
 8007962:	4812      	ldr	r0, [pc, #72]	@ (80079ac <xTimerCreateTimerTask+0x8c>)
 8007964:	f7ff f8d0 	bl	8006b08 <xTaskCreateStatic>
 8007968:	4603      	mov	r3, r0
 800796a:	4a11      	ldr	r2, [pc, #68]	@ (80079b0 <xTimerCreateTimerTask+0x90>)
 800796c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800796e:	4b10      	ldr	r3, [pc, #64]	@ (80079b0 <xTimerCreateTimerTask+0x90>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007976:	2301      	movs	r3, #1
 8007978:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10b      	bne.n	8007998 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	613b      	str	r3, [r7, #16]
}
 8007992:	bf00      	nop
 8007994:	bf00      	nop
 8007996:	e7fd      	b.n	8007994 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007998:	697b      	ldr	r3, [r7, #20]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	20001048 	.word	0x20001048
 80079a8:	0800b9bc 	.word	0x0800b9bc
 80079ac:	08007aed 	.word	0x08007aed
 80079b0:	2000104c 	.word	0x2000104c

080079b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08a      	sub	sp, #40	@ 0x28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10b      	bne.n	80079e4 <xTimerGenericCommand+0x30>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	623b      	str	r3, [r7, #32]
}
 80079de:	bf00      	nop
 80079e0:	bf00      	nop
 80079e2:	e7fd      	b.n	80079e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079e4:	4b19      	ldr	r3, [pc, #100]	@ (8007a4c <xTimerGenericCommand+0x98>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d02a      	beq.n	8007a42 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b05      	cmp	r3, #5
 80079fc:	dc18      	bgt.n	8007a30 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079fe:	f7ff fead 	bl	800775c <xTaskGetSchedulerState>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d109      	bne.n	8007a1c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a08:	4b10      	ldr	r3, [pc, #64]	@ (8007a4c <xTimerGenericCommand+0x98>)
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	f107 0110 	add.w	r1, r7, #16
 8007a10:	2300      	movs	r3, #0
 8007a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a14:	f7fe fc88 	bl	8006328 <xQueueGenericSend>
 8007a18:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a1a:	e012      	b.n	8007a42 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a4c <xTimerGenericCommand+0x98>)
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	f107 0110 	add.w	r1, r7, #16
 8007a24:	2300      	movs	r3, #0
 8007a26:	2200      	movs	r2, #0
 8007a28:	f7fe fc7e 	bl	8006328 <xQueueGenericSend>
 8007a2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a2e:	e008      	b.n	8007a42 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a30:	4b06      	ldr	r3, [pc, #24]	@ (8007a4c <xTimerGenericCommand+0x98>)
 8007a32:	6818      	ldr	r0, [r3, #0]
 8007a34:	f107 0110 	add.w	r1, r7, #16
 8007a38:	2300      	movs	r3, #0
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	f7fe fd76 	bl	800652c <xQueueGenericSendFromISR>
 8007a40:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3728      	adds	r7, #40	@ 0x28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20001048 	.word	0x20001048

08007a50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a5a:	4b23      	ldr	r3, [pc, #140]	@ (8007ae8 <prvProcessExpiredTimer+0x98>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	3304      	adds	r3, #4
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fe fb29 	bl	80060c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d023      	beq.n	8007ac4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	699a      	ldr	r2, [r3, #24]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	18d1      	adds	r1, r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	6978      	ldr	r0, [r7, #20]
 8007a8a:	f000 f8d5 	bl	8007c38 <prvInsertTimerInActiveList>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d020      	beq.n	8007ad6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a94:	2300      	movs	r3, #0
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	2300      	movs	r3, #0
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	6978      	ldr	r0, [r7, #20]
 8007aa0:	f7ff ff88 	bl	80079b4 <xTimerGenericCommand>
 8007aa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d114      	bne.n	8007ad6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	60fb      	str	r3, [r7, #12]
}
 8007abe:	bf00      	nop
 8007ac0:	bf00      	nop
 8007ac2:	e7fd      	b.n	8007ac0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007aca:	f023 0301 	bic.w	r3, r3, #1
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	6978      	ldr	r0, [r7, #20]
 8007adc:	4798      	blx	r3
}
 8007ade:	bf00      	nop
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20001040 	.word	0x20001040

08007aec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007af4:	f107 0308 	add.w	r3, r7, #8
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 f859 	bl	8007bb0 <prvGetNextExpireTime>
 8007afe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	4619      	mov	r1, r3
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f805 	bl	8007b14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b0a:	f000 f8d7 	bl	8007cbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b0e:	bf00      	nop
 8007b10:	e7f0      	b.n	8007af4 <prvTimerTask+0x8>
	...

08007b14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b1e:	f7ff fa37 	bl	8006f90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b22:	f107 0308 	add.w	r3, r7, #8
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 f866 	bl	8007bf8 <prvSampleTimeNow>
 8007b2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d130      	bne.n	8007b96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10a      	bne.n	8007b50 <prvProcessTimerOrBlockTask+0x3c>
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d806      	bhi.n	8007b50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b42:	f7ff fa33 	bl	8006fac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b46:	68f9      	ldr	r1, [r7, #12]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff ff81 	bl	8007a50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b4e:	e024      	b.n	8007b9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d008      	beq.n	8007b68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b56:	4b13      	ldr	r3, [pc, #76]	@ (8007ba4 <prvProcessTimerOrBlockTask+0x90>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <prvProcessTimerOrBlockTask+0x50>
 8007b60:	2301      	movs	r3, #1
 8007b62:	e000      	b.n	8007b66 <prvProcessTimerOrBlockTask+0x52>
 8007b64:	2300      	movs	r3, #0
 8007b66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b68:	4b0f      	ldr	r3, [pc, #60]	@ (8007ba8 <prvProcessTimerOrBlockTask+0x94>)
 8007b6a:	6818      	ldr	r0, [r3, #0]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	4619      	mov	r1, r3
 8007b76:	f7fe ff93 	bl	8006aa0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b7a:	f7ff fa17 	bl	8006fac <xTaskResumeAll>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10a      	bne.n	8007b9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b84:	4b09      	ldr	r3, [pc, #36]	@ (8007bac <prvProcessTimerOrBlockTask+0x98>)
 8007b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	f3bf 8f6f 	isb	sy
}
 8007b94:	e001      	b.n	8007b9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b96:	f7ff fa09 	bl	8006fac <xTaskResumeAll>
}
 8007b9a:	bf00      	nop
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20001044 	.word	0x20001044
 8007ba8:	20001048 	.word	0x20001048
 8007bac:	e000ed04 	.word	0xe000ed04

08007bb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8007bf4 <prvGetNextExpireTime+0x44>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <prvGetNextExpireTime+0x16>
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	e000      	b.n	8007bc8 <prvGetNextExpireTime+0x18>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d105      	bne.n	8007be0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bd4:	4b07      	ldr	r3, [pc, #28]	@ (8007bf4 <prvGetNextExpireTime+0x44>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	e001      	b.n	8007be4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007be4:	68fb      	ldr	r3, [r7, #12]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	20001040 	.word	0x20001040

08007bf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c00:	f7ff fa72 	bl	80070e8 <xTaskGetTickCount>
 8007c04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c06:	4b0b      	ldr	r3, [pc, #44]	@ (8007c34 <prvSampleTimeNow+0x3c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d205      	bcs.n	8007c1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c10:	f000 f93a 	bl	8007e88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	e002      	b.n	8007c22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c22:	4a04      	ldr	r2, [pc, #16]	@ (8007c34 <prvSampleTimeNow+0x3c>)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c28:	68fb      	ldr	r3, [r7, #12]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20001050 	.word	0x20001050

08007c38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c46:	2300      	movs	r3, #0
 8007c48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d812      	bhi.n	8007c84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	1ad2      	subs	r2, r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d302      	bcc.n	8007c72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	e01b      	b.n	8007caa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c72:	4b10      	ldr	r3, [pc, #64]	@ (8007cb4 <prvInsertTimerInActiveList+0x7c>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	f7fe f9e6 	bl	800604e <vListInsert>
 8007c82:	e012      	b.n	8007caa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d206      	bcs.n	8007c9a <prvInsertTimerInActiveList+0x62>
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d302      	bcc.n	8007c9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c94:	2301      	movs	r3, #1
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	e007      	b.n	8007caa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c9a:	4b07      	ldr	r3, [pc, #28]	@ (8007cb8 <prvInsertTimerInActiveList+0x80>)
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	f7fe f9d2 	bl	800604e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007caa:	697b      	ldr	r3, [r7, #20]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20001044 	.word	0x20001044
 8007cb8:	20001040 	.word	0x20001040

08007cbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08e      	sub	sp, #56	@ 0x38
 8007cc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cc2:	e0ce      	b.n	8007e62 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	da19      	bge.n	8007cfe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cca:	1d3b      	adds	r3, r7, #4
 8007ccc:	3304      	adds	r3, #4
 8007cce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10b      	bne.n	8007cee <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	61fb      	str	r3, [r7, #28]
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	e7fd      	b.n	8007cea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cf4:	6850      	ldr	r0, [r2, #4]
 8007cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cf8:	6892      	ldr	r2, [r2, #8]
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f2c0 80ae 	blt.w	8007e62 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d004      	beq.n	8007d1c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d14:	3304      	adds	r3, #4
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fe f9d2 	bl	80060c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d1c:	463b      	mov	r3, r7
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff ff6a 	bl	8007bf8 <prvSampleTimeNow>
 8007d24:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b09      	cmp	r3, #9
 8007d2a:	f200 8097 	bhi.w	8007e5c <prvProcessReceivedCommands+0x1a0>
 8007d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d34 <prvProcessReceivedCommands+0x78>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007d5d 	.word	0x08007d5d
 8007d38:	08007d5d 	.word	0x08007d5d
 8007d3c:	08007d5d 	.word	0x08007d5d
 8007d40:	08007dd3 	.word	0x08007dd3
 8007d44:	08007de7 	.word	0x08007de7
 8007d48:	08007e33 	.word	0x08007e33
 8007d4c:	08007d5d 	.word	0x08007d5d
 8007d50:	08007d5d 	.word	0x08007d5d
 8007d54:	08007dd3 	.word	0x08007dd3
 8007d58:	08007de7 	.word	0x08007de7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d62:	f043 0301 	orr.w	r3, r3, #1
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	18d1      	adds	r1, r2, r3
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d7c:	f7ff ff5c 	bl	8007c38 <prvInsertTimerInActiveList>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d06c      	beq.n	8007e60 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d061      	beq.n	8007e60 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	441a      	add	r2, r3
 8007da4:	2300      	movs	r3, #0
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	2300      	movs	r3, #0
 8007daa:	2100      	movs	r1, #0
 8007dac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dae:	f7ff fe01 	bl	80079b4 <xTimerGenericCommand>
 8007db2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d152      	bne.n	8007e60 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	61bb      	str	r3, [r7, #24]
}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	e7fd      	b.n	8007dce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dd8:	f023 0301 	bic.w	r3, r3, #1
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007de4:	e03d      	b.n	8007e62 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dec:	f043 0301 	orr.w	r3, r3, #1
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10b      	bne.n	8007e1e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	617b      	str	r3, [r7, #20]
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	e7fd      	b.n	8007e1a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e20:	699a      	ldr	r2, [r3, #24]
 8007e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e24:	18d1      	adds	r1, r2, r3
 8007e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e2c:	f7ff ff04 	bl	8007c38 <prvInsertTimerInActiveList>
					break;
 8007e30:	e017      	b.n	8007e62 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d103      	bne.n	8007e48 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007e40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e42:	f000 fbe9 	bl	8008618 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e46:	e00c      	b.n	8007e62 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e4e:	f023 0301 	bic.w	r3, r3, #1
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007e5a:	e002      	b.n	8007e62 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007e5c:	bf00      	nop
 8007e5e:	e000      	b.n	8007e62 <prvProcessReceivedCommands+0x1a6>
					break;
 8007e60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e62:	4b08      	ldr	r3, [pc, #32]	@ (8007e84 <prvProcessReceivedCommands+0x1c8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	1d39      	adds	r1, r7, #4
 8007e68:	2200      	movs	r2, #0
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe fbfc 	bl	8006668 <xQueueReceive>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f47f af26 	bne.w	8007cc4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007e78:	bf00      	nop
 8007e7a:	bf00      	nop
 8007e7c:	3730      	adds	r7, #48	@ 0x30
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	20001048 	.word	0x20001048

08007e88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e8e:	e049      	b.n	8007f24 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e90:	4b2e      	ldr	r3, [pc, #184]	@ (8007f4c <prvSwitchTimerLists+0xc4>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8007f4c <prvSwitchTimerLists+0xc4>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe f909 	bl	80060c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d02f      	beq.n	8007f24 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	4413      	add	r3, r2
 8007ecc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d90e      	bls.n	8007ef4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8007f4c <prvSwitchTimerLists+0xc4>)
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3304      	adds	r3, #4
 8007eea:	4619      	mov	r1, r3
 8007eec:	4610      	mov	r0, r2
 8007eee:	f7fe f8ae 	bl	800604e <vListInsert>
 8007ef2:	e017      	b.n	8007f24 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	2100      	movs	r1, #0
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f7ff fd58 	bl	80079b4 <xTimerGenericCommand>
 8007f04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10b      	bne.n	8007f24 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	603b      	str	r3, [r7, #0]
}
 8007f1e:	bf00      	nop
 8007f20:	bf00      	nop
 8007f22:	e7fd      	b.n	8007f20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f24:	4b09      	ldr	r3, [pc, #36]	@ (8007f4c <prvSwitchTimerLists+0xc4>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1b0      	bne.n	8007e90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f2e:	4b07      	ldr	r3, [pc, #28]	@ (8007f4c <prvSwitchTimerLists+0xc4>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f34:	4b06      	ldr	r3, [pc, #24]	@ (8007f50 <prvSwitchTimerLists+0xc8>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a04      	ldr	r2, [pc, #16]	@ (8007f4c <prvSwitchTimerLists+0xc4>)
 8007f3a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f3c:	4a04      	ldr	r2, [pc, #16]	@ (8007f50 <prvSwitchTimerLists+0xc8>)
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	6013      	str	r3, [r2, #0]
}
 8007f42:	bf00      	nop
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20001040 	.word	0x20001040
 8007f50:	20001044 	.word	0x20001044

08007f54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f5a:	f000 f96d 	bl	8008238 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f5e:	4b15      	ldr	r3, [pc, #84]	@ (8007fb4 <prvCheckForValidListAndQueue+0x60>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d120      	bne.n	8007fa8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f66:	4814      	ldr	r0, [pc, #80]	@ (8007fb8 <prvCheckForValidListAndQueue+0x64>)
 8007f68:	f7fe f820 	bl	8005fac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f6c:	4813      	ldr	r0, [pc, #76]	@ (8007fbc <prvCheckForValidListAndQueue+0x68>)
 8007f6e:	f7fe f81d 	bl	8005fac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f72:	4b13      	ldr	r3, [pc, #76]	@ (8007fc0 <prvCheckForValidListAndQueue+0x6c>)
 8007f74:	4a10      	ldr	r2, [pc, #64]	@ (8007fb8 <prvCheckForValidListAndQueue+0x64>)
 8007f76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f78:	4b12      	ldr	r3, [pc, #72]	@ (8007fc4 <prvCheckForValidListAndQueue+0x70>)
 8007f7a:	4a10      	ldr	r2, [pc, #64]	@ (8007fbc <prvCheckForValidListAndQueue+0x68>)
 8007f7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	4b11      	ldr	r3, [pc, #68]	@ (8007fc8 <prvCheckForValidListAndQueue+0x74>)
 8007f84:	4a11      	ldr	r2, [pc, #68]	@ (8007fcc <prvCheckForValidListAndQueue+0x78>)
 8007f86:	2110      	movs	r1, #16
 8007f88:	200a      	movs	r0, #10
 8007f8a:	f7fe f92d 	bl	80061e8 <xQueueGenericCreateStatic>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	4a08      	ldr	r2, [pc, #32]	@ (8007fb4 <prvCheckForValidListAndQueue+0x60>)
 8007f92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f94:	4b07      	ldr	r3, [pc, #28]	@ (8007fb4 <prvCheckForValidListAndQueue+0x60>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f9c:	4b05      	ldr	r3, [pc, #20]	@ (8007fb4 <prvCheckForValidListAndQueue+0x60>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	490b      	ldr	r1, [pc, #44]	@ (8007fd0 <prvCheckForValidListAndQueue+0x7c>)
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fe fd52 	bl	8006a4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fa8:	f000 f978 	bl	800829c <vPortExitCritical>
}
 8007fac:	bf00      	nop
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20001048 	.word	0x20001048
 8007fb8:	20001018 	.word	0x20001018
 8007fbc:	2000102c 	.word	0x2000102c
 8007fc0:	20001040 	.word	0x20001040
 8007fc4:	20001044 	.word	0x20001044
 8007fc8:	200010f4 	.word	0x200010f4
 8007fcc:	20001054 	.word	0x20001054
 8007fd0:	0800b9c4 	.word	0x0800b9c4

08007fd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	3b04      	subs	r3, #4
 8007fe4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3b04      	subs	r3, #4
 8007ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f023 0201 	bic.w	r2, r3, #1
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3b04      	subs	r3, #4
 8008002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008004:	4a0c      	ldr	r2, [pc, #48]	@ (8008038 <pxPortInitialiseStack+0x64>)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3b14      	subs	r3, #20
 800800e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3b04      	subs	r3, #4
 800801a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f06f 0202 	mvn.w	r2, #2
 8008022:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	3b20      	subs	r3, #32
 8008028:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800802a:	68fb      	ldr	r3, [r7, #12]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	0800803d 	.word	0x0800803d

0800803c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008046:	4b13      	ldr	r3, [pc, #76]	@ (8008094 <prvTaskExitError+0x58>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804e:	d00b      	beq.n	8008068 <prvTaskExitError+0x2c>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	60fb      	str	r3, [r7, #12]
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	e7fd      	b.n	8008064 <prvTaskExitError+0x28>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	60bb      	str	r3, [r7, #8]
}
 800807a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800807c:	bf00      	nop
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0fc      	beq.n	800807e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	2000000c 	.word	0x2000000c
	...

080080a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080a0:	4b07      	ldr	r3, [pc, #28]	@ (80080c0 <pxCurrentTCBConst2>)
 80080a2:	6819      	ldr	r1, [r3, #0]
 80080a4:	6808      	ldr	r0, [r1, #0]
 80080a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080aa:	f380 8809 	msr	PSP, r0
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f04f 0000 	mov.w	r0, #0
 80080b6:	f380 8811 	msr	BASEPRI, r0
 80080ba:	4770      	bx	lr
 80080bc:	f3af 8000 	nop.w

080080c0 <pxCurrentTCBConst2>:
 80080c0:	20000b18 	.word	0x20000b18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop

080080c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080c8:	4808      	ldr	r0, [pc, #32]	@ (80080ec <prvPortStartFirstTask+0x24>)
 80080ca:	6800      	ldr	r0, [r0, #0]
 80080cc:	6800      	ldr	r0, [r0, #0]
 80080ce:	f380 8808 	msr	MSP, r0
 80080d2:	f04f 0000 	mov.w	r0, #0
 80080d6:	f380 8814 	msr	CONTROL, r0
 80080da:	b662      	cpsie	i
 80080dc:	b661      	cpsie	f
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	df00      	svc	0
 80080e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080ea:	bf00      	nop
 80080ec:	e000ed08 	.word	0xe000ed08

080080f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080f6:	4b47      	ldr	r3, [pc, #284]	@ (8008214 <xPortStartScheduler+0x124>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a47      	ldr	r2, [pc, #284]	@ (8008218 <xPortStartScheduler+0x128>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d10b      	bne.n	8008118 <xPortStartScheduler+0x28>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	613b      	str	r3, [r7, #16]
}
 8008112:	bf00      	nop
 8008114:	bf00      	nop
 8008116:	e7fd      	b.n	8008114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008118:	4b3e      	ldr	r3, [pc, #248]	@ (8008214 <xPortStartScheduler+0x124>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a3f      	ldr	r2, [pc, #252]	@ (800821c <xPortStartScheduler+0x12c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d10b      	bne.n	800813a <xPortStartScheduler+0x4a>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	60fb      	str	r3, [r7, #12]
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop
 8008138:	e7fd      	b.n	8008136 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800813a:	4b39      	ldr	r3, [pc, #228]	@ (8008220 <xPortStartScheduler+0x130>)
 800813c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	22ff      	movs	r2, #255	@ 0xff
 800814a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	b2db      	uxtb	r3, r3
 8008152:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008154:	78fb      	ldrb	r3, [r7, #3]
 8008156:	b2db      	uxtb	r3, r3
 8008158:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800815c:	b2da      	uxtb	r2, r3
 800815e:	4b31      	ldr	r3, [pc, #196]	@ (8008224 <xPortStartScheduler+0x134>)
 8008160:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008162:	4b31      	ldr	r3, [pc, #196]	@ (8008228 <xPortStartScheduler+0x138>)
 8008164:	2207      	movs	r2, #7
 8008166:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008168:	e009      	b.n	800817e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800816a:	4b2f      	ldr	r3, [pc, #188]	@ (8008228 <xPortStartScheduler+0x138>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3b01      	subs	r3, #1
 8008170:	4a2d      	ldr	r2, [pc, #180]	@ (8008228 <xPortStartScheduler+0x138>)
 8008172:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008174:	78fb      	ldrb	r3, [r7, #3]
 8008176:	b2db      	uxtb	r3, r3
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	b2db      	uxtb	r3, r3
 800817c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800817e:	78fb      	ldrb	r3, [r7, #3]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008186:	2b80      	cmp	r3, #128	@ 0x80
 8008188:	d0ef      	beq.n	800816a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800818a:	4b27      	ldr	r3, [pc, #156]	@ (8008228 <xPortStartScheduler+0x138>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f1c3 0307 	rsb	r3, r3, #7
 8008192:	2b04      	cmp	r3, #4
 8008194:	d00b      	beq.n	80081ae <xPortStartScheduler+0xbe>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	60bb      	str	r3, [r7, #8]
}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	e7fd      	b.n	80081aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081ae:	4b1e      	ldr	r3, [pc, #120]	@ (8008228 <xPortStartScheduler+0x138>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	021b      	lsls	r3, r3, #8
 80081b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008228 <xPortStartScheduler+0x138>)
 80081b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008228 <xPortStartScheduler+0x138>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80081c0:	4a19      	ldr	r2, [pc, #100]	@ (8008228 <xPortStartScheduler+0x138>)
 80081c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081cc:	4b17      	ldr	r3, [pc, #92]	@ (800822c <xPortStartScheduler+0x13c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a16      	ldr	r2, [pc, #88]	@ (800822c <xPortStartScheduler+0x13c>)
 80081d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80081d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081d8:	4b14      	ldr	r3, [pc, #80]	@ (800822c <xPortStartScheduler+0x13c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a13      	ldr	r2, [pc, #76]	@ (800822c <xPortStartScheduler+0x13c>)
 80081de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80081e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081e4:	f000 f8da 	bl	800839c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081e8:	4b11      	ldr	r3, [pc, #68]	@ (8008230 <xPortStartScheduler+0x140>)
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081ee:	f000 f8f9 	bl	80083e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081f2:	4b10      	ldr	r3, [pc, #64]	@ (8008234 <xPortStartScheduler+0x144>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a0f      	ldr	r2, [pc, #60]	@ (8008234 <xPortStartScheduler+0x144>)
 80081f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80081fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081fe:	f7ff ff63 	bl	80080c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008202:	f7ff f83b 	bl	800727c <vTaskSwitchContext>
	prvTaskExitError();
 8008206:	f7ff ff19 	bl	800803c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	e000ed00 	.word	0xe000ed00
 8008218:	410fc271 	.word	0x410fc271
 800821c:	410fc270 	.word	0x410fc270
 8008220:	e000e400 	.word	0xe000e400
 8008224:	20001144 	.word	0x20001144
 8008228:	20001148 	.word	0x20001148
 800822c:	e000ed20 	.word	0xe000ed20
 8008230:	2000000c 	.word	0x2000000c
 8008234:	e000ef34 	.word	0xe000ef34

08008238 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	607b      	str	r3, [r7, #4]
}
 8008250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008252:	4b10      	ldr	r3, [pc, #64]	@ (8008294 <vPortEnterCritical+0x5c>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3301      	adds	r3, #1
 8008258:	4a0e      	ldr	r2, [pc, #56]	@ (8008294 <vPortEnterCritical+0x5c>)
 800825a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800825c:	4b0d      	ldr	r3, [pc, #52]	@ (8008294 <vPortEnterCritical+0x5c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d110      	bne.n	8008286 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008264:	4b0c      	ldr	r3, [pc, #48]	@ (8008298 <vPortEnterCritical+0x60>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00b      	beq.n	8008286 <vPortEnterCritical+0x4e>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	603b      	str	r3, [r7, #0]
}
 8008280:	bf00      	nop
 8008282:	bf00      	nop
 8008284:	e7fd      	b.n	8008282 <vPortEnterCritical+0x4a>
	}
}
 8008286:	bf00      	nop
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	2000000c 	.word	0x2000000c
 8008298:	e000ed04 	.word	0xe000ed04

0800829c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082a2:	4b12      	ldr	r3, [pc, #72]	@ (80082ec <vPortExitCritical+0x50>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10b      	bne.n	80082c2 <vPortExitCritical+0x26>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	607b      	str	r3, [r7, #4]
}
 80082bc:	bf00      	nop
 80082be:	bf00      	nop
 80082c0:	e7fd      	b.n	80082be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082c2:	4b0a      	ldr	r3, [pc, #40]	@ (80082ec <vPortExitCritical+0x50>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	4a08      	ldr	r2, [pc, #32]	@ (80082ec <vPortExitCritical+0x50>)
 80082ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082cc:	4b07      	ldr	r3, [pc, #28]	@ (80082ec <vPortExitCritical+0x50>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d105      	bne.n	80082e0 <vPortExitCritical+0x44>
 80082d4:	2300      	movs	r3, #0
 80082d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	f383 8811 	msr	BASEPRI, r3
}
 80082de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	2000000c 	.word	0x2000000c

080082f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082f0:	f3ef 8009 	mrs	r0, PSP
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	4b15      	ldr	r3, [pc, #84]	@ (8008350 <pxCurrentTCBConst>)
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	f01e 0f10 	tst.w	lr, #16
 8008300:	bf08      	it	eq
 8008302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830a:	6010      	str	r0, [r2, #0]
 800830c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008310:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008314:	f380 8811 	msr	BASEPRI, r0
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f7fe ffac 	bl	800727c <vTaskSwitchContext>
 8008324:	f04f 0000 	mov.w	r0, #0
 8008328:	f380 8811 	msr	BASEPRI, r0
 800832c:	bc09      	pop	{r0, r3}
 800832e:	6819      	ldr	r1, [r3, #0]
 8008330:	6808      	ldr	r0, [r1, #0]
 8008332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008336:	f01e 0f10 	tst.w	lr, #16
 800833a:	bf08      	it	eq
 800833c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008340:	f380 8809 	msr	PSP, r0
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	f3af 8000 	nop.w

08008350 <pxCurrentTCBConst>:
 8008350:	20000b18 	.word	0x20000b18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008354:	bf00      	nop
 8008356:	bf00      	nop

08008358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	607b      	str	r3, [r7, #4]
}
 8008370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008372:	f7fe fec9 	bl	8007108 <xTaskIncrementTick>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d003      	beq.n	8008384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800837c:	4b06      	ldr	r3, [pc, #24]	@ (8008398 <xPortSysTickHandler+0x40>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	2300      	movs	r3, #0
 8008386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	f383 8811 	msr	BASEPRI, r3
}
 800838e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008390:	bf00      	nop
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	e000ed04 	.word	0xe000ed04

0800839c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083a0:	4b0b      	ldr	r3, [pc, #44]	@ (80083d0 <vPortSetupTimerInterrupt+0x34>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083a6:	4b0b      	ldr	r3, [pc, #44]	@ (80083d4 <vPortSetupTimerInterrupt+0x38>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083ac:	4b0a      	ldr	r3, [pc, #40]	@ (80083d8 <vPortSetupTimerInterrupt+0x3c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a0a      	ldr	r2, [pc, #40]	@ (80083dc <vPortSetupTimerInterrupt+0x40>)
 80083b2:	fba2 2303 	umull	r2, r3, r2, r3
 80083b6:	099b      	lsrs	r3, r3, #6
 80083b8:	4a09      	ldr	r2, [pc, #36]	@ (80083e0 <vPortSetupTimerInterrupt+0x44>)
 80083ba:	3b01      	subs	r3, #1
 80083bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083be:	4b04      	ldr	r3, [pc, #16]	@ (80083d0 <vPortSetupTimerInterrupt+0x34>)
 80083c0:	2207      	movs	r2, #7
 80083c2:	601a      	str	r2, [r3, #0]
}
 80083c4:	bf00      	nop
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	e000e010 	.word	0xe000e010
 80083d4:	e000e018 	.word	0xe000e018
 80083d8:	20000000 	.word	0x20000000
 80083dc:	10624dd3 	.word	0x10624dd3
 80083e0:	e000e014 	.word	0xe000e014

080083e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80083f4 <vPortEnableVFP+0x10>
 80083e8:	6801      	ldr	r1, [r0, #0]
 80083ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80083ee:	6001      	str	r1, [r0, #0]
 80083f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083f2:	bf00      	nop
 80083f4:	e000ed88 	.word	0xe000ed88

080083f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083fe:	f3ef 8305 	mrs	r3, IPSR
 8008402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b0f      	cmp	r3, #15
 8008408:	d915      	bls.n	8008436 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800840a:	4a18      	ldr	r2, [pc, #96]	@ (800846c <vPortValidateInterruptPriority+0x74>)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4413      	add	r3, r2
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008414:	4b16      	ldr	r3, [pc, #88]	@ (8008470 <vPortValidateInterruptPriority+0x78>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	7afa      	ldrb	r2, [r7, #11]
 800841a:	429a      	cmp	r2, r3
 800841c:	d20b      	bcs.n	8008436 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	607b      	str	r3, [r7, #4]
}
 8008430:	bf00      	nop
 8008432:	bf00      	nop
 8008434:	e7fd      	b.n	8008432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008436:	4b0f      	ldr	r3, [pc, #60]	@ (8008474 <vPortValidateInterruptPriority+0x7c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800843e:	4b0e      	ldr	r3, [pc, #56]	@ (8008478 <vPortValidateInterruptPriority+0x80>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d90b      	bls.n	800845e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	603b      	str	r3, [r7, #0]
}
 8008458:	bf00      	nop
 800845a:	bf00      	nop
 800845c:	e7fd      	b.n	800845a <vPortValidateInterruptPriority+0x62>
	}
 800845e:	bf00      	nop
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	e000e3f0 	.word	0xe000e3f0
 8008470:	20001144 	.word	0x20001144
 8008474:	e000ed0c 	.word	0xe000ed0c
 8008478:	20001148 	.word	0x20001148

0800847c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08a      	sub	sp, #40	@ 0x28
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008484:	2300      	movs	r3, #0
 8008486:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008488:	f7fe fd82 	bl	8006f90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800848c:	4b5c      	ldr	r3, [pc, #368]	@ (8008600 <pvPortMalloc+0x184>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008494:	f000 f924 	bl	80086e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008498:	4b5a      	ldr	r3, [pc, #360]	@ (8008604 <pvPortMalloc+0x188>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4013      	ands	r3, r2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f040 8095 	bne.w	80085d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01e      	beq.n	80084ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80084ac:	2208      	movs	r2, #8
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d015      	beq.n	80084ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f023 0307 	bic.w	r3, r3, #7
 80084c4:	3308      	adds	r3, #8
 80084c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f003 0307 	and.w	r3, r3, #7
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00b      	beq.n	80084ea <pvPortMalloc+0x6e>
	__asm volatile
 80084d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	617b      	str	r3, [r7, #20]
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop
 80084e8:	e7fd      	b.n	80084e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d06f      	beq.n	80085d0 <pvPortMalloc+0x154>
 80084f0:	4b45      	ldr	r3, [pc, #276]	@ (8008608 <pvPortMalloc+0x18c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d86a      	bhi.n	80085d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084fa:	4b44      	ldr	r3, [pc, #272]	@ (800860c <pvPortMalloc+0x190>)
 80084fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084fe:	4b43      	ldr	r3, [pc, #268]	@ (800860c <pvPortMalloc+0x190>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008504:	e004      	b.n	8008510 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008508:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	429a      	cmp	r2, r3
 8008518:	d903      	bls.n	8008522 <pvPortMalloc+0xa6>
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1f1      	bne.n	8008506 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008522:	4b37      	ldr	r3, [pc, #220]	@ (8008600 <pvPortMalloc+0x184>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008528:	429a      	cmp	r2, r3
 800852a:	d051      	beq.n	80085d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2208      	movs	r2, #8
 8008532:	4413      	add	r3, r2
 8008534:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800853e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	1ad2      	subs	r2, r2, r3
 8008546:	2308      	movs	r3, #8
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	429a      	cmp	r2, r3
 800854c:	d920      	bls.n	8008590 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800854e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4413      	add	r3, r2
 8008554:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	f003 0307 	and.w	r3, r3, #7
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00b      	beq.n	8008578 <pvPortMalloc+0xfc>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	613b      	str	r3, [r7, #16]
}
 8008572:	bf00      	nop
 8008574:	bf00      	nop
 8008576:	e7fd      	b.n	8008574 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	1ad2      	subs	r2, r2, r3
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800858a:	69b8      	ldr	r0, [r7, #24]
 800858c:	f000 f90a 	bl	80087a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008590:	4b1d      	ldr	r3, [pc, #116]	@ (8008608 <pvPortMalloc+0x18c>)
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	4a1b      	ldr	r2, [pc, #108]	@ (8008608 <pvPortMalloc+0x18c>)
 800859c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800859e:	4b1a      	ldr	r3, [pc, #104]	@ (8008608 <pvPortMalloc+0x18c>)
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008610 <pvPortMalloc+0x194>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d203      	bcs.n	80085b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085aa:	4b17      	ldr	r3, [pc, #92]	@ (8008608 <pvPortMalloc+0x18c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a18      	ldr	r2, [pc, #96]	@ (8008610 <pvPortMalloc+0x194>)
 80085b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	4b13      	ldr	r3, [pc, #76]	@ (8008604 <pvPortMalloc+0x188>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	431a      	orrs	r2, r3
 80085bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085c6:	4b13      	ldr	r3, [pc, #76]	@ (8008614 <pvPortMalloc+0x198>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3301      	adds	r3, #1
 80085cc:	4a11      	ldr	r2, [pc, #68]	@ (8008614 <pvPortMalloc+0x198>)
 80085ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085d0:	f7fe fcec 	bl	8006fac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00b      	beq.n	80085f6 <pvPortMalloc+0x17a>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	60fb      	str	r3, [r7, #12]
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	e7fd      	b.n	80085f2 <pvPortMalloc+0x176>
	return pvReturn;
 80085f6:	69fb      	ldr	r3, [r7, #28]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3728      	adds	r7, #40	@ 0x28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	20004d54 	.word	0x20004d54
 8008604:	20004d68 	.word	0x20004d68
 8008608:	20004d58 	.word	0x20004d58
 800860c:	20004d4c 	.word	0x20004d4c
 8008610:	20004d5c 	.word	0x20004d5c
 8008614:	20004d60 	.word	0x20004d60

08008618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d04f      	beq.n	80086ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800862a:	2308      	movs	r3, #8
 800862c:	425b      	negs	r3, r3
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	4413      	add	r3, r2
 8008632:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	4b25      	ldr	r3, [pc, #148]	@ (80086d4 <vPortFree+0xbc>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4013      	ands	r3, r2
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10b      	bne.n	800865e <vPortFree+0x46>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	60fb      	str	r3, [r7, #12]
}
 8008658:	bf00      	nop
 800865a:	bf00      	nop
 800865c:	e7fd      	b.n	800865a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00b      	beq.n	800867e <vPortFree+0x66>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	60bb      	str	r3, [r7, #8]
}
 8008678:	bf00      	nop
 800867a:	bf00      	nop
 800867c:	e7fd      	b.n	800867a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	4b14      	ldr	r3, [pc, #80]	@ (80086d4 <vPortFree+0xbc>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4013      	ands	r3, r2
 8008688:	2b00      	cmp	r3, #0
 800868a:	d01e      	beq.n	80086ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d11a      	bne.n	80086ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	4b0e      	ldr	r3, [pc, #56]	@ (80086d4 <vPortFree+0xbc>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	43db      	mvns	r3, r3
 800869e:	401a      	ands	r2, r3
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086a4:	f7fe fc74 	bl	8006f90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	4b0a      	ldr	r3, [pc, #40]	@ (80086d8 <vPortFree+0xc0>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4413      	add	r3, r2
 80086b2:	4a09      	ldr	r2, [pc, #36]	@ (80086d8 <vPortFree+0xc0>)
 80086b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086b6:	6938      	ldr	r0, [r7, #16]
 80086b8:	f000 f874 	bl	80087a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086bc:	4b07      	ldr	r3, [pc, #28]	@ (80086dc <vPortFree+0xc4>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3301      	adds	r3, #1
 80086c2:	4a06      	ldr	r2, [pc, #24]	@ (80086dc <vPortFree+0xc4>)
 80086c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086c6:	f7fe fc71 	bl	8006fac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086ca:	bf00      	nop
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20004d68 	.word	0x20004d68
 80086d8:	20004d58 	.word	0x20004d58
 80086dc:	20004d64 	.word	0x20004d64

080086e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80086ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086ec:	4b27      	ldr	r3, [pc, #156]	@ (800878c <prvHeapInit+0xac>)
 80086ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f003 0307 	and.w	r3, r3, #7
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00c      	beq.n	8008714 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3307      	adds	r3, #7
 80086fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f023 0307 	bic.w	r3, r3, #7
 8008706:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	4a1f      	ldr	r2, [pc, #124]	@ (800878c <prvHeapInit+0xac>)
 8008710:	4413      	add	r3, r2
 8008712:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008718:	4a1d      	ldr	r2, [pc, #116]	@ (8008790 <prvHeapInit+0xb0>)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800871e:	4b1c      	ldr	r3, [pc, #112]	@ (8008790 <prvHeapInit+0xb0>)
 8008720:	2200      	movs	r2, #0
 8008722:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	4413      	add	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800872c:	2208      	movs	r2, #8
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	1a9b      	subs	r3, r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0307 	bic.w	r3, r3, #7
 800873a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4a15      	ldr	r2, [pc, #84]	@ (8008794 <prvHeapInit+0xb4>)
 8008740:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008742:	4b14      	ldr	r3, [pc, #80]	@ (8008794 <prvHeapInit+0xb4>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2200      	movs	r2, #0
 8008748:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800874a:	4b12      	ldr	r3, [pc, #72]	@ (8008794 <prvHeapInit+0xb4>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	1ad2      	subs	r2, r2, r3
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008760:	4b0c      	ldr	r3, [pc, #48]	@ (8008794 <prvHeapInit+0xb4>)
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	4a0a      	ldr	r2, [pc, #40]	@ (8008798 <prvHeapInit+0xb8>)
 800876e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	4a09      	ldr	r2, [pc, #36]	@ (800879c <prvHeapInit+0xbc>)
 8008776:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008778:	4b09      	ldr	r3, [pc, #36]	@ (80087a0 <prvHeapInit+0xc0>)
 800877a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800877e:	601a      	str	r2, [r3, #0]
}
 8008780:	bf00      	nop
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	2000114c 	.word	0x2000114c
 8008790:	20004d4c 	.word	0x20004d4c
 8008794:	20004d54 	.word	0x20004d54
 8008798:	20004d5c 	.word	0x20004d5c
 800879c:	20004d58 	.word	0x20004d58
 80087a0:	20004d68 	.word	0x20004d68

080087a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087ac:	4b28      	ldr	r3, [pc, #160]	@ (8008850 <prvInsertBlockIntoFreeList+0xac>)
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	e002      	b.n	80087b8 <prvInsertBlockIntoFreeList+0x14>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	60fb      	str	r3, [r7, #12]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d8f7      	bhi.n	80087b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	4413      	add	r3, r2
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d108      	bne.n	80087e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	441a      	add	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	441a      	add	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d118      	bne.n	800882c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	4b15      	ldr	r3, [pc, #84]	@ (8008854 <prvInsertBlockIntoFreeList+0xb0>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d00d      	beq.n	8008822 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685a      	ldr	r2, [r3, #4]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	441a      	add	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	e008      	b.n	8008834 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008822:	4b0c      	ldr	r3, [pc, #48]	@ (8008854 <prvInsertBlockIntoFreeList+0xb0>)
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	e003      	b.n	8008834 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	429a      	cmp	r2, r3
 800883a:	d002      	beq.n	8008842 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008842:	bf00      	nop
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	20004d4c 	.word	0x20004d4c
 8008854:	20004d54 	.word	0x20004d54

08008858 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800885e:	2300      	movs	r3, #0
 8008860:	71fb      	strb	r3, [r7, #7]
 8008862:	e026      	b.n	80088b2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8008864:	79fb      	ldrb	r3, [r7, #7]
 8008866:	3b50      	subs	r3, #80	@ 0x50
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2100      	movs	r1, #0
 800886c:	4618      	mov	r0, r3
 800886e:	f000 f82b 	bl	80088c8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8008872:	2100      	movs	r1, #0
 8008874:	2000      	movs	r0, #0
 8008876:	f000 f827 	bl	80088c8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800887a:	2100      	movs	r1, #0
 800887c:	2010      	movs	r0, #16
 800887e:	f000 f823 	bl	80088c8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8008882:	2300      	movs	r3, #0
 8008884:	71bb      	strb	r3, [r7, #6]
 8008886:	e00d      	b.n	80088a4 <OLED_Refresh_Gram+0x4c>
 8008888:	79ba      	ldrb	r2, [r7, #6]
 800888a:	79fb      	ldrb	r3, [r7, #7]
 800888c:	490d      	ldr	r1, [pc, #52]	@ (80088c4 <OLED_Refresh_Gram+0x6c>)
 800888e:	00d2      	lsls	r2, r2, #3
 8008890:	440a      	add	r2, r1
 8008892:	4413      	add	r3, r2
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2101      	movs	r1, #1
 8008898:	4618      	mov	r0, r3
 800889a:	f000 f815 	bl	80088c8 <OLED_WR_Byte>
 800889e:	79bb      	ldrb	r3, [r7, #6]
 80088a0:	3301      	adds	r3, #1
 80088a2:	71bb      	strb	r3, [r7, #6]
 80088a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	daed      	bge.n	8008888 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	3301      	adds	r3, #1
 80088b0:	71fb      	strb	r3, [r7, #7]
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	2b07      	cmp	r3, #7
 80088b6:	d9d5      	bls.n	8008864 <OLED_Refresh_Gram+0xc>
	}   
}
 80088b8:	bf00      	nop
 80088ba:	bf00      	nop
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20004d6c 	.word	0x20004d6c

080088c8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	4603      	mov	r3, r0
 80088d0:	460a      	mov	r2, r1
 80088d2:	71fb      	strb	r3, [r7, #7]
 80088d4:	4613      	mov	r3, r2
 80088d6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 80088d8:	79bb      	ldrb	r3, [r7, #6]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d006      	beq.n	80088ec <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80088de:	2201      	movs	r2, #1
 80088e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80088e4:	481c      	ldr	r0, [pc, #112]	@ (8008958 <OLED_WR_Byte+0x90>)
 80088e6:	f7fa f807 	bl	80028f8 <HAL_GPIO_WritePin>
 80088ea:	e005      	b.n	80088f8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80088ec:	2200      	movs	r2, #0
 80088ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80088f2:	4819      	ldr	r0, [pc, #100]	@ (8008958 <OLED_WR_Byte+0x90>)
 80088f4:	f7fa f800 	bl	80028f8 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80088f8:	2300      	movs	r3, #0
 80088fa:	73fb      	strb	r3, [r7, #15]
 80088fc:	e01e      	b.n	800893c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80088fe:	2200      	movs	r2, #0
 8008900:	2120      	movs	r1, #32
 8008902:	4815      	ldr	r0, [pc, #84]	@ (8008958 <OLED_WR_Byte+0x90>)
 8008904:	f7f9 fff8 	bl	80028f8 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8008908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800890c:	2b00      	cmp	r3, #0
 800890e:	da05      	bge.n	800891c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8008910:	2201      	movs	r2, #1
 8008912:	2140      	movs	r1, #64	@ 0x40
 8008914:	4810      	ldr	r0, [pc, #64]	@ (8008958 <OLED_WR_Byte+0x90>)
 8008916:	f7f9 ffef 	bl	80028f8 <HAL_GPIO_WritePin>
 800891a:	e004      	b.n	8008926 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800891c:	2200      	movs	r2, #0
 800891e:	2140      	movs	r1, #64	@ 0x40
 8008920:	480d      	ldr	r0, [pc, #52]	@ (8008958 <OLED_WR_Byte+0x90>)
 8008922:	f7f9 ffe9 	bl	80028f8 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8008926:	2201      	movs	r2, #1
 8008928:	2120      	movs	r1, #32
 800892a:	480b      	ldr	r0, [pc, #44]	@ (8008958 <OLED_WR_Byte+0x90>)
 800892c:	f7f9 ffe4 	bl	80028f8 <HAL_GPIO_WritePin>
		dat<<=1;   
 8008930:	79fb      	ldrb	r3, [r7, #7]
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8008936:	7bfb      	ldrb	r3, [r7, #15]
 8008938:	3301      	adds	r3, #1
 800893a:	73fb      	strb	r3, [r7, #15]
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	2b07      	cmp	r3, #7
 8008940:	d9dd      	bls.n	80088fe <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8008942:	2201      	movs	r2, #1
 8008944:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008948:	4803      	ldr	r0, [pc, #12]	@ (8008958 <OLED_WR_Byte+0x90>)
 800894a:	f7f9 ffd5 	bl	80028f8 <HAL_GPIO_WritePin>
} 
 800894e:	bf00      	nop
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	40021000 	.word	0x40021000

0800895c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8008962:	2300      	movs	r3, #0
 8008964:	71fb      	strb	r3, [r7, #7]
 8008966:	e014      	b.n	8008992 <OLED_Clear+0x36>
 8008968:	2300      	movs	r3, #0
 800896a:	71bb      	strb	r3, [r7, #6]
 800896c:	e00a      	b.n	8008984 <OLED_Clear+0x28>
 800896e:	79ba      	ldrb	r2, [r7, #6]
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	490c      	ldr	r1, [pc, #48]	@ (80089a4 <OLED_Clear+0x48>)
 8008974:	00d2      	lsls	r2, r2, #3
 8008976:	440a      	add	r2, r1
 8008978:	4413      	add	r3, r2
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]
 800897e:	79bb      	ldrb	r3, [r7, #6]
 8008980:	3301      	adds	r3, #1
 8008982:	71bb      	strb	r3, [r7, #6]
 8008984:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008988:	2b00      	cmp	r3, #0
 800898a:	daf0      	bge.n	800896e <OLED_Clear+0x12>
 800898c:	79fb      	ldrb	r3, [r7, #7]
 800898e:	3301      	adds	r3, #1
 8008990:	71fb      	strb	r3, [r7, #7]
 8008992:	79fb      	ldrb	r3, [r7, #7]
 8008994:	2b07      	cmp	r3, #7
 8008996:	d9e7      	bls.n	8008968 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8008998:	f7ff ff5e 	bl	8008858 <OLED_Refresh_Gram>
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	20004d6c 	.word	0x20004d6c

080089a8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	4603      	mov	r3, r0
 80089b0:	71fb      	strb	r3, [r7, #7]
 80089b2:	460b      	mov	r3, r1
 80089b4:	71bb      	strb	r3, [r7, #6]
 80089b6:	4613      	mov	r3, r2
 80089b8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80089be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	db41      	blt.n	8008a4a <OLED_DrawPoint+0xa2>
 80089c6:	79bb      	ldrb	r3, [r7, #6]
 80089c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80089ca:	d83e      	bhi.n	8008a4a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80089cc:	79bb      	ldrb	r3, [r7, #6]
 80089ce:	08db      	lsrs	r3, r3, #3
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	f1c3 0307 	rsb	r3, r3, #7
 80089d6:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80089d8:	79bb      	ldrb	r3, [r7, #6]
 80089da:	f003 0307 	and.w	r3, r3, #7
 80089de:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80089e0:	7b7b      	ldrb	r3, [r7, #13]
 80089e2:	f1c3 0307 	rsb	r3, r3, #7
 80089e6:	2201      	movs	r2, #1
 80089e8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ec:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80089ee:	797b      	ldrb	r3, [r7, #5]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d012      	beq.n	8008a1a <OLED_DrawPoint+0x72>
 80089f4:	79fa      	ldrb	r2, [r7, #7]
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	4917      	ldr	r1, [pc, #92]	@ (8008a58 <OLED_DrawPoint+0xb0>)
 80089fa:	00d2      	lsls	r2, r2, #3
 80089fc:	440a      	add	r2, r1
 80089fe:	4413      	add	r3, r2
 8008a00:	7818      	ldrb	r0, [r3, #0]
 8008a02:	79fa      	ldrb	r2, [r7, #7]
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
 8008a06:	7bf9      	ldrb	r1, [r7, #15]
 8008a08:	4301      	orrs	r1, r0
 8008a0a:	b2c8      	uxtb	r0, r1
 8008a0c:	4912      	ldr	r1, [pc, #72]	@ (8008a58 <OLED_DrawPoint+0xb0>)
 8008a0e:	00d2      	lsls	r2, r2, #3
 8008a10:	440a      	add	r2, r1
 8008a12:	4413      	add	r3, r2
 8008a14:	4602      	mov	r2, r0
 8008a16:	701a      	strb	r2, [r3, #0]
 8008a18:	e018      	b.n	8008a4c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8008a1a:	79fa      	ldrb	r2, [r7, #7]
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	490e      	ldr	r1, [pc, #56]	@ (8008a58 <OLED_DrawPoint+0xb0>)
 8008a20:	00d2      	lsls	r2, r2, #3
 8008a22:	440a      	add	r2, r1
 8008a24:	4413      	add	r3, r2
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	b25a      	sxtb	r2, r3
 8008a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a2e:	43db      	mvns	r3, r3
 8008a30:	b25b      	sxtb	r3, r3
 8008a32:	4013      	ands	r3, r2
 8008a34:	b259      	sxtb	r1, r3
 8008a36:	79fa      	ldrb	r2, [r7, #7]
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	b2c8      	uxtb	r0, r1
 8008a3c:	4906      	ldr	r1, [pc, #24]	@ (8008a58 <OLED_DrawPoint+0xb0>)
 8008a3e:	00d2      	lsls	r2, r2, #3
 8008a40:	440a      	add	r2, r1
 8008a42:	4413      	add	r3, r2
 8008a44:	4602      	mov	r2, r0
 8008a46:	701a      	strb	r2, [r3, #0]
 8008a48:	e000      	b.n	8008a4c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8008a4a:	bf00      	nop
}
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	20004d6c 	.word	0x20004d6c

08008a5c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8008a5c:	b590      	push	{r4, r7, lr}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	4604      	mov	r4, r0
 8008a64:	4608      	mov	r0, r1
 8008a66:	4611      	mov	r1, r2
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4623      	mov	r3, r4
 8008a6c:	71fb      	strb	r3, [r7, #7]
 8008a6e:	4603      	mov	r3, r0
 8008a70:	71bb      	strb	r3, [r7, #6]
 8008a72:	460b      	mov	r3, r1
 8008a74:	717b      	strb	r3, [r7, #5]
 8008a76:	4613      	mov	r3, r2
 8008a78:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8008a7a:	79bb      	ldrb	r3, [r7, #6]
 8008a7c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8008a7e:	797b      	ldrb	r3, [r7, #5]
 8008a80:	3b20      	subs	r3, #32
 8008a82:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8008a84:	2300      	movs	r3, #0
 8008a86:	73bb      	strb	r3, [r7, #14]
 8008a88:	e04d      	b.n	8008b26 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8008a8a:	793b      	ldrb	r3, [r7, #4]
 8008a8c:	2b0c      	cmp	r3, #12
 8008a8e:	d10b      	bne.n	8008aa8 <OLED_ShowChar+0x4c>
 8008a90:	797a      	ldrb	r2, [r7, #5]
 8008a92:	7bb9      	ldrb	r1, [r7, #14]
 8008a94:	4828      	ldr	r0, [pc, #160]	@ (8008b38 <OLED_ShowChar+0xdc>)
 8008a96:	4613      	mov	r3, r2
 8008a98:	005b      	lsls	r3, r3, #1
 8008a9a:	4413      	add	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4403      	add	r3, r0
 8008aa0:	440b      	add	r3, r1
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	73fb      	strb	r3, [r7, #15]
 8008aa6:	e007      	b.n	8008ab8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8008aa8:	797a      	ldrb	r2, [r7, #5]
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	4923      	ldr	r1, [pc, #140]	@ (8008b3c <OLED_ShowChar+0xe0>)
 8008aae:	0112      	lsls	r2, r2, #4
 8008ab0:	440a      	add	r2, r1
 8008ab2:	4413      	add	r3, r2
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	737b      	strb	r3, [r7, #13]
 8008abc:	e02d      	b.n	8008b1a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8008abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	da07      	bge.n	8008ad6 <OLED_ShowChar+0x7a>
 8008ac6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008aca:	79b9      	ldrb	r1, [r7, #6]
 8008acc:	79fb      	ldrb	r3, [r7, #7]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff ff6a 	bl	80089a8 <OLED_DrawPoint>
 8008ad4:	e00c      	b.n	8008af0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8008ad6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	bf0c      	ite	eq
 8008ade:	2301      	moveq	r3, #1
 8008ae0:	2300      	movne	r3, #0
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	79b9      	ldrb	r1, [r7, #6]
 8008ae8:	79fb      	ldrb	r3, [r7, #7]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff ff5c 	bl	80089a8 <OLED_DrawPoint>
			temp<<=1;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	005b      	lsls	r3, r3, #1
 8008af4:	73fb      	strb	r3, [r7, #15]
			y++;
 8008af6:	79bb      	ldrb	r3, [r7, #6]
 8008af8:	3301      	adds	r3, #1
 8008afa:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8008afc:	79ba      	ldrb	r2, [r7, #6]
 8008afe:	7b3b      	ldrb	r3, [r7, #12]
 8008b00:	1ad2      	subs	r2, r2, r3
 8008b02:	793b      	ldrb	r3, [r7, #4]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d105      	bne.n	8008b14 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8008b08:	7b3b      	ldrb	r3, [r7, #12]
 8008b0a:	71bb      	strb	r3, [r7, #6]
				x++;
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	71fb      	strb	r3, [r7, #7]
				break;
 8008b12:	e005      	b.n	8008b20 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8008b14:	7b7b      	ldrb	r3, [r7, #13]
 8008b16:	3301      	adds	r3, #1
 8008b18:	737b      	strb	r3, [r7, #13]
 8008b1a:	7b7b      	ldrb	r3, [r7, #13]
 8008b1c:	2b07      	cmp	r3, #7
 8008b1e:	d9ce      	bls.n	8008abe <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	3301      	adds	r3, #1
 8008b24:	73bb      	strb	r3, [r7, #14]
 8008b26:	7bba      	ldrb	r2, [r7, #14]
 8008b28:	793b      	ldrb	r3, [r7, #4]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d3ad      	bcc.n	8008a8a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8008b2e:	bf00      	nop
 8008b30:	bf00      	nop
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd90      	pop	{r4, r7, pc}
 8008b38:	0800ba74 	.word	0x0800ba74
 8008b3c:	0800bee8 	.word	0x0800bee8

08008b40 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af02      	add	r7, sp, #8
 8008b46:	4603      	mov	r3, r0
 8008b48:	603a      	str	r2, [r7, #0]
 8008b4a:	71fb      	strb	r3, [r7, #7]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8008b50:	e01f      	b.n	8008b92 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8008b52:	79fb      	ldrb	r3, [r7, #7]
 8008b54:	2b7a      	cmp	r3, #122	@ 0x7a
 8008b56:	d904      	bls.n	8008b62 <OLED_ShowString+0x22>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	71fb      	strb	r3, [r7, #7]
 8008b5c:	79bb      	ldrb	r3, [r7, #6]
 8008b5e:	3310      	adds	r3, #16
 8008b60:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8008b62:	79bb      	ldrb	r3, [r7, #6]
 8008b64:	2b3a      	cmp	r3, #58	@ 0x3a
 8008b66:	d905      	bls.n	8008b74 <OLED_ShowString+0x34>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	71fb      	strb	r3, [r7, #7]
 8008b6c:	79fb      	ldrb	r3, [r7, #7]
 8008b6e:	71bb      	strb	r3, [r7, #6]
 8008b70:	f7ff fef4 	bl	800895c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781a      	ldrb	r2, [r3, #0]
 8008b78:	79b9      	ldrb	r1, [r7, #6]
 8008b7a:	79f8      	ldrb	r0, [r7, #7]
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	230c      	movs	r3, #12
 8008b82:	f7ff ff6b 	bl	8008a5c <OLED_ShowChar>
        x+=8;
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	3308      	adds	r3, #8
 8008b8a:	71fb      	strb	r3, [r7, #7]
        p++;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1db      	bne.n	8008b52 <OLED_ShowString+0x12>
    }  
}	 
 8008b9a:	bf00      	nop
 8008b9c:	bf00      	nop
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <OLED_Init>:

void OLED_Init(void)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8008ba8:	f7f9 fec0 	bl	800292c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8008bac:	4b41      	ldr	r3, [pc, #260]	@ (8008cb4 <OLED_Init+0x110>)
 8008bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bb0:	4a40      	ldr	r2, [pc, #256]	@ (8008cb4 <OLED_Init+0x110>)
 8008bb2:	f023 0301 	bic.w	r3, r3, #1
 8008bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8008cb4 <OLED_Init+0x110>)
 8008bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bbc:	4a3d      	ldr	r2, [pc, #244]	@ (8008cb4 <OLED_Init+0x110>)
 8008bbe:	f023 0304 	bic.w	r3, r3, #4
 8008bc2:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8008bc4:	f7f9 fec6 	bl	8002954 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8008bc8:	2200      	movs	r2, #0
 8008bca:	2180      	movs	r1, #128	@ 0x80
 8008bcc:	483a      	ldr	r0, [pc, #232]	@ (8008cb8 <OLED_Init+0x114>)
 8008bce:	f7f9 fe93 	bl	80028f8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8008bd2:	2064      	movs	r0, #100	@ 0x64
 8008bd4:	f7f9 fb2c 	bl	8002230 <HAL_Delay>
	OLED_RST_Set();
 8008bd8:	2201      	movs	r2, #1
 8008bda:	2180      	movs	r1, #128	@ 0x80
 8008bdc:	4836      	ldr	r0, [pc, #216]	@ (8008cb8 <OLED_Init+0x114>)
 8008bde:	f7f9 fe8b 	bl	80028f8 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8008be2:	2100      	movs	r1, #0
 8008be4:	20ae      	movs	r0, #174	@ 0xae
 8008be6:	f7ff fe6f 	bl	80088c8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8008bea:	2100      	movs	r1, #0
 8008bec:	20d5      	movs	r0, #213	@ 0xd5
 8008bee:	f7ff fe6b 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	2050      	movs	r0, #80	@ 0x50
 8008bf6:	f7ff fe67 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	20a8      	movs	r0, #168	@ 0xa8
 8008bfe:	f7ff fe63 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8008c02:	2100      	movs	r1, #0
 8008c04:	203f      	movs	r0, #63	@ 0x3f
 8008c06:	f7ff fe5f 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	20d3      	movs	r0, #211	@ 0xd3
 8008c0e:	f7ff fe5b 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8008c12:	2100      	movs	r1, #0
 8008c14:	2000      	movs	r0, #0
 8008c16:	f7ff fe57 	bl	80088c8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	2040      	movs	r0, #64	@ 0x40
 8008c1e:	f7ff fe53 	bl	80088c8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8008c22:	2100      	movs	r1, #0
 8008c24:	208d      	movs	r0, #141	@ 0x8d
 8008c26:	f7ff fe4f 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	2014      	movs	r0, #20
 8008c2e:	f7ff fe4b 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8008c32:	2100      	movs	r1, #0
 8008c34:	2020      	movs	r0, #32
 8008c36:	f7ff fe47 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	2002      	movs	r0, #2
 8008c3e:	f7ff fe43 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8008c42:	2100      	movs	r1, #0
 8008c44:	20a1      	movs	r0, #161	@ 0xa1
 8008c46:	f7ff fe3f 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	20c0      	movs	r0, #192	@ 0xc0
 8008c4e:	f7ff fe3b 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8008c52:	2100      	movs	r1, #0
 8008c54:	20da      	movs	r0, #218	@ 0xda
 8008c56:	f7ff fe37 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	2012      	movs	r0, #18
 8008c5e:	f7ff fe33 	bl	80088c8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8008c62:	2100      	movs	r1, #0
 8008c64:	2081      	movs	r0, #129	@ 0x81
 8008c66:	f7ff fe2f 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	20ef      	movs	r0, #239	@ 0xef
 8008c6e:	f7ff fe2b 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8008c72:	2100      	movs	r1, #0
 8008c74:	20d9      	movs	r0, #217	@ 0xd9
 8008c76:	f7ff fe27 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	20f1      	movs	r0, #241	@ 0xf1
 8008c7e:	f7ff fe23 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8008c82:	2100      	movs	r1, #0
 8008c84:	20db      	movs	r0, #219	@ 0xdb
 8008c86:	f7ff fe1f 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	2030      	movs	r0, #48	@ 0x30
 8008c8e:	f7ff fe1b 	bl	80088c8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8008c92:	2100      	movs	r1, #0
 8008c94:	20a4      	movs	r0, #164	@ 0xa4
 8008c96:	f7ff fe17 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	20a6      	movs	r0, #166	@ 0xa6
 8008c9e:	f7ff fe13 	bl	80088c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	20af      	movs	r0, #175	@ 0xaf
 8008ca6:	f7ff fe0f 	bl	80088c8 <OLED_WR_Byte>
	OLED_Clear(); 
 8008caa:	f7ff fe57 	bl	800895c <OLED_Clear>
 8008cae:	bf00      	nop
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	40023800 	.word	0x40023800
 8008cb8:	40021000 	.word	0x40021000

08008cbc <__cvt>:
 8008cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc0:	ec57 6b10 	vmov	r6, r7, d0
 8008cc4:	2f00      	cmp	r7, #0
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	4619      	mov	r1, r3
 8008cca:	463b      	mov	r3, r7
 8008ccc:	bfbb      	ittet	lt
 8008cce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008cd2:	461f      	movlt	r7, r3
 8008cd4:	2300      	movge	r3, #0
 8008cd6:	232d      	movlt	r3, #45	@ 0x2d
 8008cd8:	700b      	strb	r3, [r1, #0]
 8008cda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cdc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008ce0:	4691      	mov	r9, r2
 8008ce2:	f023 0820 	bic.w	r8, r3, #32
 8008ce6:	bfbc      	itt	lt
 8008ce8:	4632      	movlt	r2, r6
 8008cea:	4616      	movlt	r6, r2
 8008cec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008cf0:	d005      	beq.n	8008cfe <__cvt+0x42>
 8008cf2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008cf6:	d100      	bne.n	8008cfa <__cvt+0x3e>
 8008cf8:	3401      	adds	r4, #1
 8008cfa:	2102      	movs	r1, #2
 8008cfc:	e000      	b.n	8008d00 <__cvt+0x44>
 8008cfe:	2103      	movs	r1, #3
 8008d00:	ab03      	add	r3, sp, #12
 8008d02:	9301      	str	r3, [sp, #4]
 8008d04:	ab02      	add	r3, sp, #8
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	ec47 6b10 	vmov	d0, r6, r7
 8008d0c:	4653      	mov	r3, sl
 8008d0e:	4622      	mov	r2, r4
 8008d10:	f000 fe6a 	bl	80099e8 <_dtoa_r>
 8008d14:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008d18:	4605      	mov	r5, r0
 8008d1a:	d119      	bne.n	8008d50 <__cvt+0x94>
 8008d1c:	f019 0f01 	tst.w	r9, #1
 8008d20:	d00e      	beq.n	8008d40 <__cvt+0x84>
 8008d22:	eb00 0904 	add.w	r9, r0, r4
 8008d26:	2200      	movs	r2, #0
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	4639      	mov	r1, r7
 8008d2e:	f7f7 fecb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d32:	b108      	cbz	r0, 8008d38 <__cvt+0x7c>
 8008d34:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d38:	2230      	movs	r2, #48	@ 0x30
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	454b      	cmp	r3, r9
 8008d3e:	d31e      	bcc.n	8008d7e <__cvt+0xc2>
 8008d40:	9b03      	ldr	r3, [sp, #12]
 8008d42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d44:	1b5b      	subs	r3, r3, r5
 8008d46:	4628      	mov	r0, r5
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	b004      	add	sp, #16
 8008d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d54:	eb00 0904 	add.w	r9, r0, r4
 8008d58:	d1e5      	bne.n	8008d26 <__cvt+0x6a>
 8008d5a:	7803      	ldrb	r3, [r0, #0]
 8008d5c:	2b30      	cmp	r3, #48	@ 0x30
 8008d5e:	d10a      	bne.n	8008d76 <__cvt+0xba>
 8008d60:	2200      	movs	r2, #0
 8008d62:	2300      	movs	r3, #0
 8008d64:	4630      	mov	r0, r6
 8008d66:	4639      	mov	r1, r7
 8008d68:	f7f7 feae 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d6c:	b918      	cbnz	r0, 8008d76 <__cvt+0xba>
 8008d6e:	f1c4 0401 	rsb	r4, r4, #1
 8008d72:	f8ca 4000 	str.w	r4, [sl]
 8008d76:	f8da 3000 	ldr.w	r3, [sl]
 8008d7a:	4499      	add	r9, r3
 8008d7c:	e7d3      	b.n	8008d26 <__cvt+0x6a>
 8008d7e:	1c59      	adds	r1, r3, #1
 8008d80:	9103      	str	r1, [sp, #12]
 8008d82:	701a      	strb	r2, [r3, #0]
 8008d84:	e7d9      	b.n	8008d3a <__cvt+0x7e>

08008d86 <__exponent>:
 8008d86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d88:	2900      	cmp	r1, #0
 8008d8a:	bfba      	itte	lt
 8008d8c:	4249      	neglt	r1, r1
 8008d8e:	232d      	movlt	r3, #45	@ 0x2d
 8008d90:	232b      	movge	r3, #43	@ 0x2b
 8008d92:	2909      	cmp	r1, #9
 8008d94:	7002      	strb	r2, [r0, #0]
 8008d96:	7043      	strb	r3, [r0, #1]
 8008d98:	dd29      	ble.n	8008dee <__exponent+0x68>
 8008d9a:	f10d 0307 	add.w	r3, sp, #7
 8008d9e:	461d      	mov	r5, r3
 8008da0:	270a      	movs	r7, #10
 8008da2:	461a      	mov	r2, r3
 8008da4:	fbb1 f6f7 	udiv	r6, r1, r7
 8008da8:	fb07 1416 	mls	r4, r7, r6, r1
 8008dac:	3430      	adds	r4, #48	@ 0x30
 8008dae:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008db2:	460c      	mov	r4, r1
 8008db4:	2c63      	cmp	r4, #99	@ 0x63
 8008db6:	f103 33ff 	add.w	r3, r3, #4294967295
 8008dba:	4631      	mov	r1, r6
 8008dbc:	dcf1      	bgt.n	8008da2 <__exponent+0x1c>
 8008dbe:	3130      	adds	r1, #48	@ 0x30
 8008dc0:	1e94      	subs	r4, r2, #2
 8008dc2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008dc6:	1c41      	adds	r1, r0, #1
 8008dc8:	4623      	mov	r3, r4
 8008dca:	42ab      	cmp	r3, r5
 8008dcc:	d30a      	bcc.n	8008de4 <__exponent+0x5e>
 8008dce:	f10d 0309 	add.w	r3, sp, #9
 8008dd2:	1a9b      	subs	r3, r3, r2
 8008dd4:	42ac      	cmp	r4, r5
 8008dd6:	bf88      	it	hi
 8008dd8:	2300      	movhi	r3, #0
 8008dda:	3302      	adds	r3, #2
 8008ddc:	4403      	add	r3, r0
 8008dde:	1a18      	subs	r0, r3, r0
 8008de0:	b003      	add	sp, #12
 8008de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008de4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008de8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008dec:	e7ed      	b.n	8008dca <__exponent+0x44>
 8008dee:	2330      	movs	r3, #48	@ 0x30
 8008df0:	3130      	adds	r1, #48	@ 0x30
 8008df2:	7083      	strb	r3, [r0, #2]
 8008df4:	70c1      	strb	r1, [r0, #3]
 8008df6:	1d03      	adds	r3, r0, #4
 8008df8:	e7f1      	b.n	8008dde <__exponent+0x58>
	...

08008dfc <_printf_float>:
 8008dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e00:	b08d      	sub	sp, #52	@ 0x34
 8008e02:	460c      	mov	r4, r1
 8008e04:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008e08:	4616      	mov	r6, r2
 8008e0a:	461f      	mov	r7, r3
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	f000 fcdb 	bl	80097c8 <_localeconv_r>
 8008e12:	6803      	ldr	r3, [r0, #0]
 8008e14:	9304      	str	r3, [sp, #16]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7f7 fa2a 	bl	8000270 <strlen>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e20:	f8d8 3000 	ldr.w	r3, [r8]
 8008e24:	9005      	str	r0, [sp, #20]
 8008e26:	3307      	adds	r3, #7
 8008e28:	f023 0307 	bic.w	r3, r3, #7
 8008e2c:	f103 0208 	add.w	r2, r3, #8
 8008e30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008e34:	f8d4 b000 	ldr.w	fp, [r4]
 8008e38:	f8c8 2000 	str.w	r2, [r8]
 8008e3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008e44:	9307      	str	r3, [sp, #28]
 8008e46:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008e4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e52:	4b9c      	ldr	r3, [pc, #624]	@ (80090c4 <_printf_float+0x2c8>)
 8008e54:	f04f 32ff 	mov.w	r2, #4294967295
 8008e58:	f7f7 fe68 	bl	8000b2c <__aeabi_dcmpun>
 8008e5c:	bb70      	cbnz	r0, 8008ebc <_printf_float+0xc0>
 8008e5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e62:	4b98      	ldr	r3, [pc, #608]	@ (80090c4 <_printf_float+0x2c8>)
 8008e64:	f04f 32ff 	mov.w	r2, #4294967295
 8008e68:	f7f7 fe42 	bl	8000af0 <__aeabi_dcmple>
 8008e6c:	bb30      	cbnz	r0, 8008ebc <_printf_float+0xc0>
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2300      	movs	r3, #0
 8008e72:	4640      	mov	r0, r8
 8008e74:	4649      	mov	r1, r9
 8008e76:	f7f7 fe31 	bl	8000adc <__aeabi_dcmplt>
 8008e7a:	b110      	cbz	r0, 8008e82 <_printf_float+0x86>
 8008e7c:	232d      	movs	r3, #45	@ 0x2d
 8008e7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e82:	4a91      	ldr	r2, [pc, #580]	@ (80090c8 <_printf_float+0x2cc>)
 8008e84:	4b91      	ldr	r3, [pc, #580]	@ (80090cc <_printf_float+0x2d0>)
 8008e86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008e8a:	bf94      	ite	ls
 8008e8c:	4690      	movls	r8, r2
 8008e8e:	4698      	movhi	r8, r3
 8008e90:	2303      	movs	r3, #3
 8008e92:	6123      	str	r3, [r4, #16]
 8008e94:	f02b 0304 	bic.w	r3, fp, #4
 8008e98:	6023      	str	r3, [r4, #0]
 8008e9a:	f04f 0900 	mov.w	r9, #0
 8008e9e:	9700      	str	r7, [sp, #0]
 8008ea0:	4633      	mov	r3, r6
 8008ea2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f000 f9d2 	bl	8009250 <_printf_common>
 8008eac:	3001      	adds	r0, #1
 8008eae:	f040 808d 	bne.w	8008fcc <_printf_float+0x1d0>
 8008eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb6:	b00d      	add	sp, #52	@ 0x34
 8008eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ebc:	4642      	mov	r2, r8
 8008ebe:	464b      	mov	r3, r9
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	f7f7 fe32 	bl	8000b2c <__aeabi_dcmpun>
 8008ec8:	b140      	cbz	r0, 8008edc <_printf_float+0xe0>
 8008eca:	464b      	mov	r3, r9
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	bfbc      	itt	lt
 8008ed0:	232d      	movlt	r3, #45	@ 0x2d
 8008ed2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008ed6:	4a7e      	ldr	r2, [pc, #504]	@ (80090d0 <_printf_float+0x2d4>)
 8008ed8:	4b7e      	ldr	r3, [pc, #504]	@ (80090d4 <_printf_float+0x2d8>)
 8008eda:	e7d4      	b.n	8008e86 <_printf_float+0x8a>
 8008edc:	6863      	ldr	r3, [r4, #4]
 8008ede:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008ee2:	9206      	str	r2, [sp, #24]
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	d13b      	bne.n	8008f60 <_printf_float+0x164>
 8008ee8:	2306      	movs	r3, #6
 8008eea:	6063      	str	r3, [r4, #4]
 8008eec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	6022      	str	r2, [r4, #0]
 8008ef4:	9303      	str	r3, [sp, #12]
 8008ef6:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ef8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008efc:	ab09      	add	r3, sp, #36	@ 0x24
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	6861      	ldr	r1, [r4, #4]
 8008f02:	ec49 8b10 	vmov	d0, r8, r9
 8008f06:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f7ff fed6 	bl	8008cbc <__cvt>
 8008f10:	9b06      	ldr	r3, [sp, #24]
 8008f12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f14:	2b47      	cmp	r3, #71	@ 0x47
 8008f16:	4680      	mov	r8, r0
 8008f18:	d129      	bne.n	8008f6e <_printf_float+0x172>
 8008f1a:	1cc8      	adds	r0, r1, #3
 8008f1c:	db02      	blt.n	8008f24 <_printf_float+0x128>
 8008f1e:	6863      	ldr	r3, [r4, #4]
 8008f20:	4299      	cmp	r1, r3
 8008f22:	dd41      	ble.n	8008fa8 <_printf_float+0x1ac>
 8008f24:	f1aa 0a02 	sub.w	sl, sl, #2
 8008f28:	fa5f fa8a 	uxtb.w	sl, sl
 8008f2c:	3901      	subs	r1, #1
 8008f2e:	4652      	mov	r2, sl
 8008f30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008f34:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f36:	f7ff ff26 	bl	8008d86 <__exponent>
 8008f3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f3c:	1813      	adds	r3, r2, r0
 8008f3e:	2a01      	cmp	r2, #1
 8008f40:	4681      	mov	r9, r0
 8008f42:	6123      	str	r3, [r4, #16]
 8008f44:	dc02      	bgt.n	8008f4c <_printf_float+0x150>
 8008f46:	6822      	ldr	r2, [r4, #0]
 8008f48:	07d2      	lsls	r2, r2, #31
 8008f4a:	d501      	bpl.n	8008f50 <_printf_float+0x154>
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	6123      	str	r3, [r4, #16]
 8008f50:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d0a2      	beq.n	8008e9e <_printf_float+0xa2>
 8008f58:	232d      	movs	r3, #45	@ 0x2d
 8008f5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f5e:	e79e      	b.n	8008e9e <_printf_float+0xa2>
 8008f60:	9a06      	ldr	r2, [sp, #24]
 8008f62:	2a47      	cmp	r2, #71	@ 0x47
 8008f64:	d1c2      	bne.n	8008eec <_printf_float+0xf0>
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1c0      	bne.n	8008eec <_printf_float+0xf0>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e7bd      	b.n	8008eea <_printf_float+0xee>
 8008f6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f72:	d9db      	bls.n	8008f2c <_printf_float+0x130>
 8008f74:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008f78:	d118      	bne.n	8008fac <_printf_float+0x1b0>
 8008f7a:	2900      	cmp	r1, #0
 8008f7c:	6863      	ldr	r3, [r4, #4]
 8008f7e:	dd0b      	ble.n	8008f98 <_printf_float+0x19c>
 8008f80:	6121      	str	r1, [r4, #16]
 8008f82:	b913      	cbnz	r3, 8008f8a <_printf_float+0x18e>
 8008f84:	6822      	ldr	r2, [r4, #0]
 8008f86:	07d0      	lsls	r0, r2, #31
 8008f88:	d502      	bpl.n	8008f90 <_printf_float+0x194>
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	440b      	add	r3, r1
 8008f8e:	6123      	str	r3, [r4, #16]
 8008f90:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f92:	f04f 0900 	mov.w	r9, #0
 8008f96:	e7db      	b.n	8008f50 <_printf_float+0x154>
 8008f98:	b913      	cbnz	r3, 8008fa0 <_printf_float+0x1a4>
 8008f9a:	6822      	ldr	r2, [r4, #0]
 8008f9c:	07d2      	lsls	r2, r2, #31
 8008f9e:	d501      	bpl.n	8008fa4 <_printf_float+0x1a8>
 8008fa0:	3302      	adds	r3, #2
 8008fa2:	e7f4      	b.n	8008f8e <_printf_float+0x192>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e7f2      	b.n	8008f8e <_printf_float+0x192>
 8008fa8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fae:	4299      	cmp	r1, r3
 8008fb0:	db05      	blt.n	8008fbe <_printf_float+0x1c2>
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	6121      	str	r1, [r4, #16]
 8008fb6:	07d8      	lsls	r0, r3, #31
 8008fb8:	d5ea      	bpl.n	8008f90 <_printf_float+0x194>
 8008fba:	1c4b      	adds	r3, r1, #1
 8008fbc:	e7e7      	b.n	8008f8e <_printf_float+0x192>
 8008fbe:	2900      	cmp	r1, #0
 8008fc0:	bfd4      	ite	le
 8008fc2:	f1c1 0202 	rsble	r2, r1, #2
 8008fc6:	2201      	movgt	r2, #1
 8008fc8:	4413      	add	r3, r2
 8008fca:	e7e0      	b.n	8008f8e <_printf_float+0x192>
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	055a      	lsls	r2, r3, #21
 8008fd0:	d407      	bmi.n	8008fe2 <_printf_float+0x1e6>
 8008fd2:	6923      	ldr	r3, [r4, #16]
 8008fd4:	4642      	mov	r2, r8
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4628      	mov	r0, r5
 8008fda:	47b8      	blx	r7
 8008fdc:	3001      	adds	r0, #1
 8008fde:	d12b      	bne.n	8009038 <_printf_float+0x23c>
 8008fe0:	e767      	b.n	8008eb2 <_printf_float+0xb6>
 8008fe2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008fe6:	f240 80dd 	bls.w	80091a4 <_printf_float+0x3a8>
 8008fea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008fee:	2200      	movs	r2, #0
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	f7f7 fd69 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d033      	beq.n	8009062 <_printf_float+0x266>
 8008ffa:	4a37      	ldr	r2, [pc, #220]	@ (80090d8 <_printf_float+0x2dc>)
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	4631      	mov	r1, r6
 8009000:	4628      	mov	r0, r5
 8009002:	47b8      	blx	r7
 8009004:	3001      	adds	r0, #1
 8009006:	f43f af54 	beq.w	8008eb2 <_printf_float+0xb6>
 800900a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800900e:	4543      	cmp	r3, r8
 8009010:	db02      	blt.n	8009018 <_printf_float+0x21c>
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	07d8      	lsls	r0, r3, #31
 8009016:	d50f      	bpl.n	8009038 <_printf_float+0x23c>
 8009018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800901c:	4631      	mov	r1, r6
 800901e:	4628      	mov	r0, r5
 8009020:	47b8      	blx	r7
 8009022:	3001      	adds	r0, #1
 8009024:	f43f af45 	beq.w	8008eb2 <_printf_float+0xb6>
 8009028:	f04f 0900 	mov.w	r9, #0
 800902c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009030:	f104 0a1a 	add.w	sl, r4, #26
 8009034:	45c8      	cmp	r8, r9
 8009036:	dc09      	bgt.n	800904c <_printf_float+0x250>
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	079b      	lsls	r3, r3, #30
 800903c:	f100 8103 	bmi.w	8009246 <_printf_float+0x44a>
 8009040:	68e0      	ldr	r0, [r4, #12]
 8009042:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009044:	4298      	cmp	r0, r3
 8009046:	bfb8      	it	lt
 8009048:	4618      	movlt	r0, r3
 800904a:	e734      	b.n	8008eb6 <_printf_float+0xba>
 800904c:	2301      	movs	r3, #1
 800904e:	4652      	mov	r2, sl
 8009050:	4631      	mov	r1, r6
 8009052:	4628      	mov	r0, r5
 8009054:	47b8      	blx	r7
 8009056:	3001      	adds	r0, #1
 8009058:	f43f af2b 	beq.w	8008eb2 <_printf_float+0xb6>
 800905c:	f109 0901 	add.w	r9, r9, #1
 8009060:	e7e8      	b.n	8009034 <_printf_float+0x238>
 8009062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009064:	2b00      	cmp	r3, #0
 8009066:	dc39      	bgt.n	80090dc <_printf_float+0x2e0>
 8009068:	4a1b      	ldr	r2, [pc, #108]	@ (80090d8 <_printf_float+0x2dc>)
 800906a:	2301      	movs	r3, #1
 800906c:	4631      	mov	r1, r6
 800906e:	4628      	mov	r0, r5
 8009070:	47b8      	blx	r7
 8009072:	3001      	adds	r0, #1
 8009074:	f43f af1d 	beq.w	8008eb2 <_printf_float+0xb6>
 8009078:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800907c:	ea59 0303 	orrs.w	r3, r9, r3
 8009080:	d102      	bne.n	8009088 <_printf_float+0x28c>
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	07d9      	lsls	r1, r3, #31
 8009086:	d5d7      	bpl.n	8009038 <_printf_float+0x23c>
 8009088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800908c:	4631      	mov	r1, r6
 800908e:	4628      	mov	r0, r5
 8009090:	47b8      	blx	r7
 8009092:	3001      	adds	r0, #1
 8009094:	f43f af0d 	beq.w	8008eb2 <_printf_float+0xb6>
 8009098:	f04f 0a00 	mov.w	sl, #0
 800909c:	f104 0b1a 	add.w	fp, r4, #26
 80090a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090a2:	425b      	negs	r3, r3
 80090a4:	4553      	cmp	r3, sl
 80090a6:	dc01      	bgt.n	80090ac <_printf_float+0x2b0>
 80090a8:	464b      	mov	r3, r9
 80090aa:	e793      	b.n	8008fd4 <_printf_float+0x1d8>
 80090ac:	2301      	movs	r3, #1
 80090ae:	465a      	mov	r2, fp
 80090b0:	4631      	mov	r1, r6
 80090b2:	4628      	mov	r0, r5
 80090b4:	47b8      	blx	r7
 80090b6:	3001      	adds	r0, #1
 80090b8:	f43f aefb 	beq.w	8008eb2 <_printf_float+0xb6>
 80090bc:	f10a 0a01 	add.w	sl, sl, #1
 80090c0:	e7ee      	b.n	80090a0 <_printf_float+0x2a4>
 80090c2:	bf00      	nop
 80090c4:	7fefffff 	.word	0x7fefffff
 80090c8:	0800c4d8 	.word	0x0800c4d8
 80090cc:	0800c4dc 	.word	0x0800c4dc
 80090d0:	0800c4e0 	.word	0x0800c4e0
 80090d4:	0800c4e4 	.word	0x0800c4e4
 80090d8:	0800c4e8 	.word	0x0800c4e8
 80090dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80090e2:	4553      	cmp	r3, sl
 80090e4:	bfa8      	it	ge
 80090e6:	4653      	movge	r3, sl
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	4699      	mov	r9, r3
 80090ec:	dc36      	bgt.n	800915c <_printf_float+0x360>
 80090ee:	f04f 0b00 	mov.w	fp, #0
 80090f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090f6:	f104 021a 	add.w	r2, r4, #26
 80090fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090fc:	9306      	str	r3, [sp, #24]
 80090fe:	eba3 0309 	sub.w	r3, r3, r9
 8009102:	455b      	cmp	r3, fp
 8009104:	dc31      	bgt.n	800916a <_printf_float+0x36e>
 8009106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009108:	459a      	cmp	sl, r3
 800910a:	dc3a      	bgt.n	8009182 <_printf_float+0x386>
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	07da      	lsls	r2, r3, #31
 8009110:	d437      	bmi.n	8009182 <_printf_float+0x386>
 8009112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009114:	ebaa 0903 	sub.w	r9, sl, r3
 8009118:	9b06      	ldr	r3, [sp, #24]
 800911a:	ebaa 0303 	sub.w	r3, sl, r3
 800911e:	4599      	cmp	r9, r3
 8009120:	bfa8      	it	ge
 8009122:	4699      	movge	r9, r3
 8009124:	f1b9 0f00 	cmp.w	r9, #0
 8009128:	dc33      	bgt.n	8009192 <_printf_float+0x396>
 800912a:	f04f 0800 	mov.w	r8, #0
 800912e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009132:	f104 0b1a 	add.w	fp, r4, #26
 8009136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009138:	ebaa 0303 	sub.w	r3, sl, r3
 800913c:	eba3 0309 	sub.w	r3, r3, r9
 8009140:	4543      	cmp	r3, r8
 8009142:	f77f af79 	ble.w	8009038 <_printf_float+0x23c>
 8009146:	2301      	movs	r3, #1
 8009148:	465a      	mov	r2, fp
 800914a:	4631      	mov	r1, r6
 800914c:	4628      	mov	r0, r5
 800914e:	47b8      	blx	r7
 8009150:	3001      	adds	r0, #1
 8009152:	f43f aeae 	beq.w	8008eb2 <_printf_float+0xb6>
 8009156:	f108 0801 	add.w	r8, r8, #1
 800915a:	e7ec      	b.n	8009136 <_printf_float+0x33a>
 800915c:	4642      	mov	r2, r8
 800915e:	4631      	mov	r1, r6
 8009160:	4628      	mov	r0, r5
 8009162:	47b8      	blx	r7
 8009164:	3001      	adds	r0, #1
 8009166:	d1c2      	bne.n	80090ee <_printf_float+0x2f2>
 8009168:	e6a3      	b.n	8008eb2 <_printf_float+0xb6>
 800916a:	2301      	movs	r3, #1
 800916c:	4631      	mov	r1, r6
 800916e:	4628      	mov	r0, r5
 8009170:	9206      	str	r2, [sp, #24]
 8009172:	47b8      	blx	r7
 8009174:	3001      	adds	r0, #1
 8009176:	f43f ae9c 	beq.w	8008eb2 <_printf_float+0xb6>
 800917a:	9a06      	ldr	r2, [sp, #24]
 800917c:	f10b 0b01 	add.w	fp, fp, #1
 8009180:	e7bb      	b.n	80090fa <_printf_float+0x2fe>
 8009182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009186:	4631      	mov	r1, r6
 8009188:	4628      	mov	r0, r5
 800918a:	47b8      	blx	r7
 800918c:	3001      	adds	r0, #1
 800918e:	d1c0      	bne.n	8009112 <_printf_float+0x316>
 8009190:	e68f      	b.n	8008eb2 <_printf_float+0xb6>
 8009192:	9a06      	ldr	r2, [sp, #24]
 8009194:	464b      	mov	r3, r9
 8009196:	4442      	add	r2, r8
 8009198:	4631      	mov	r1, r6
 800919a:	4628      	mov	r0, r5
 800919c:	47b8      	blx	r7
 800919e:	3001      	adds	r0, #1
 80091a0:	d1c3      	bne.n	800912a <_printf_float+0x32e>
 80091a2:	e686      	b.n	8008eb2 <_printf_float+0xb6>
 80091a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80091a8:	f1ba 0f01 	cmp.w	sl, #1
 80091ac:	dc01      	bgt.n	80091b2 <_printf_float+0x3b6>
 80091ae:	07db      	lsls	r3, r3, #31
 80091b0:	d536      	bpl.n	8009220 <_printf_float+0x424>
 80091b2:	2301      	movs	r3, #1
 80091b4:	4642      	mov	r2, r8
 80091b6:	4631      	mov	r1, r6
 80091b8:	4628      	mov	r0, r5
 80091ba:	47b8      	blx	r7
 80091bc:	3001      	adds	r0, #1
 80091be:	f43f ae78 	beq.w	8008eb2 <_printf_float+0xb6>
 80091c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091c6:	4631      	mov	r1, r6
 80091c8:	4628      	mov	r0, r5
 80091ca:	47b8      	blx	r7
 80091cc:	3001      	adds	r0, #1
 80091ce:	f43f ae70 	beq.w	8008eb2 <_printf_float+0xb6>
 80091d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80091d6:	2200      	movs	r2, #0
 80091d8:	2300      	movs	r3, #0
 80091da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091de:	f7f7 fc73 	bl	8000ac8 <__aeabi_dcmpeq>
 80091e2:	b9c0      	cbnz	r0, 8009216 <_printf_float+0x41a>
 80091e4:	4653      	mov	r3, sl
 80091e6:	f108 0201 	add.w	r2, r8, #1
 80091ea:	4631      	mov	r1, r6
 80091ec:	4628      	mov	r0, r5
 80091ee:	47b8      	blx	r7
 80091f0:	3001      	adds	r0, #1
 80091f2:	d10c      	bne.n	800920e <_printf_float+0x412>
 80091f4:	e65d      	b.n	8008eb2 <_printf_float+0xb6>
 80091f6:	2301      	movs	r3, #1
 80091f8:	465a      	mov	r2, fp
 80091fa:	4631      	mov	r1, r6
 80091fc:	4628      	mov	r0, r5
 80091fe:	47b8      	blx	r7
 8009200:	3001      	adds	r0, #1
 8009202:	f43f ae56 	beq.w	8008eb2 <_printf_float+0xb6>
 8009206:	f108 0801 	add.w	r8, r8, #1
 800920a:	45d0      	cmp	r8, sl
 800920c:	dbf3      	blt.n	80091f6 <_printf_float+0x3fa>
 800920e:	464b      	mov	r3, r9
 8009210:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009214:	e6df      	b.n	8008fd6 <_printf_float+0x1da>
 8009216:	f04f 0800 	mov.w	r8, #0
 800921a:	f104 0b1a 	add.w	fp, r4, #26
 800921e:	e7f4      	b.n	800920a <_printf_float+0x40e>
 8009220:	2301      	movs	r3, #1
 8009222:	4642      	mov	r2, r8
 8009224:	e7e1      	b.n	80091ea <_printf_float+0x3ee>
 8009226:	2301      	movs	r3, #1
 8009228:	464a      	mov	r2, r9
 800922a:	4631      	mov	r1, r6
 800922c:	4628      	mov	r0, r5
 800922e:	47b8      	blx	r7
 8009230:	3001      	adds	r0, #1
 8009232:	f43f ae3e 	beq.w	8008eb2 <_printf_float+0xb6>
 8009236:	f108 0801 	add.w	r8, r8, #1
 800923a:	68e3      	ldr	r3, [r4, #12]
 800923c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800923e:	1a5b      	subs	r3, r3, r1
 8009240:	4543      	cmp	r3, r8
 8009242:	dcf0      	bgt.n	8009226 <_printf_float+0x42a>
 8009244:	e6fc      	b.n	8009040 <_printf_float+0x244>
 8009246:	f04f 0800 	mov.w	r8, #0
 800924a:	f104 0919 	add.w	r9, r4, #25
 800924e:	e7f4      	b.n	800923a <_printf_float+0x43e>

08009250 <_printf_common>:
 8009250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009254:	4616      	mov	r6, r2
 8009256:	4698      	mov	r8, r3
 8009258:	688a      	ldr	r2, [r1, #8]
 800925a:	690b      	ldr	r3, [r1, #16]
 800925c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009260:	4293      	cmp	r3, r2
 8009262:	bfb8      	it	lt
 8009264:	4613      	movlt	r3, r2
 8009266:	6033      	str	r3, [r6, #0]
 8009268:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800926c:	4607      	mov	r7, r0
 800926e:	460c      	mov	r4, r1
 8009270:	b10a      	cbz	r2, 8009276 <_printf_common+0x26>
 8009272:	3301      	adds	r3, #1
 8009274:	6033      	str	r3, [r6, #0]
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	0699      	lsls	r1, r3, #26
 800927a:	bf42      	ittt	mi
 800927c:	6833      	ldrmi	r3, [r6, #0]
 800927e:	3302      	addmi	r3, #2
 8009280:	6033      	strmi	r3, [r6, #0]
 8009282:	6825      	ldr	r5, [r4, #0]
 8009284:	f015 0506 	ands.w	r5, r5, #6
 8009288:	d106      	bne.n	8009298 <_printf_common+0x48>
 800928a:	f104 0a19 	add.w	sl, r4, #25
 800928e:	68e3      	ldr	r3, [r4, #12]
 8009290:	6832      	ldr	r2, [r6, #0]
 8009292:	1a9b      	subs	r3, r3, r2
 8009294:	42ab      	cmp	r3, r5
 8009296:	dc26      	bgt.n	80092e6 <_printf_common+0x96>
 8009298:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800929c:	6822      	ldr	r2, [r4, #0]
 800929e:	3b00      	subs	r3, #0
 80092a0:	bf18      	it	ne
 80092a2:	2301      	movne	r3, #1
 80092a4:	0692      	lsls	r2, r2, #26
 80092a6:	d42b      	bmi.n	8009300 <_printf_common+0xb0>
 80092a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092ac:	4641      	mov	r1, r8
 80092ae:	4638      	mov	r0, r7
 80092b0:	47c8      	blx	r9
 80092b2:	3001      	adds	r0, #1
 80092b4:	d01e      	beq.n	80092f4 <_printf_common+0xa4>
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	6922      	ldr	r2, [r4, #16]
 80092ba:	f003 0306 	and.w	r3, r3, #6
 80092be:	2b04      	cmp	r3, #4
 80092c0:	bf02      	ittt	eq
 80092c2:	68e5      	ldreq	r5, [r4, #12]
 80092c4:	6833      	ldreq	r3, [r6, #0]
 80092c6:	1aed      	subeq	r5, r5, r3
 80092c8:	68a3      	ldr	r3, [r4, #8]
 80092ca:	bf0c      	ite	eq
 80092cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092d0:	2500      	movne	r5, #0
 80092d2:	4293      	cmp	r3, r2
 80092d4:	bfc4      	itt	gt
 80092d6:	1a9b      	subgt	r3, r3, r2
 80092d8:	18ed      	addgt	r5, r5, r3
 80092da:	2600      	movs	r6, #0
 80092dc:	341a      	adds	r4, #26
 80092de:	42b5      	cmp	r5, r6
 80092e0:	d11a      	bne.n	8009318 <_printf_common+0xc8>
 80092e2:	2000      	movs	r0, #0
 80092e4:	e008      	b.n	80092f8 <_printf_common+0xa8>
 80092e6:	2301      	movs	r3, #1
 80092e8:	4652      	mov	r2, sl
 80092ea:	4641      	mov	r1, r8
 80092ec:	4638      	mov	r0, r7
 80092ee:	47c8      	blx	r9
 80092f0:	3001      	adds	r0, #1
 80092f2:	d103      	bne.n	80092fc <_printf_common+0xac>
 80092f4:	f04f 30ff 	mov.w	r0, #4294967295
 80092f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092fc:	3501      	adds	r5, #1
 80092fe:	e7c6      	b.n	800928e <_printf_common+0x3e>
 8009300:	18e1      	adds	r1, r4, r3
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	2030      	movs	r0, #48	@ 0x30
 8009306:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800930a:	4422      	add	r2, r4
 800930c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009310:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009314:	3302      	adds	r3, #2
 8009316:	e7c7      	b.n	80092a8 <_printf_common+0x58>
 8009318:	2301      	movs	r3, #1
 800931a:	4622      	mov	r2, r4
 800931c:	4641      	mov	r1, r8
 800931e:	4638      	mov	r0, r7
 8009320:	47c8      	blx	r9
 8009322:	3001      	adds	r0, #1
 8009324:	d0e6      	beq.n	80092f4 <_printf_common+0xa4>
 8009326:	3601      	adds	r6, #1
 8009328:	e7d9      	b.n	80092de <_printf_common+0x8e>
	...

0800932c <_printf_i>:
 800932c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009330:	7e0f      	ldrb	r7, [r1, #24]
 8009332:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009334:	2f78      	cmp	r7, #120	@ 0x78
 8009336:	4691      	mov	r9, r2
 8009338:	4680      	mov	r8, r0
 800933a:	460c      	mov	r4, r1
 800933c:	469a      	mov	sl, r3
 800933e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009342:	d807      	bhi.n	8009354 <_printf_i+0x28>
 8009344:	2f62      	cmp	r7, #98	@ 0x62
 8009346:	d80a      	bhi.n	800935e <_printf_i+0x32>
 8009348:	2f00      	cmp	r7, #0
 800934a:	f000 80d2 	beq.w	80094f2 <_printf_i+0x1c6>
 800934e:	2f58      	cmp	r7, #88	@ 0x58
 8009350:	f000 80b9 	beq.w	80094c6 <_printf_i+0x19a>
 8009354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009358:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800935c:	e03a      	b.n	80093d4 <_printf_i+0xa8>
 800935e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009362:	2b15      	cmp	r3, #21
 8009364:	d8f6      	bhi.n	8009354 <_printf_i+0x28>
 8009366:	a101      	add	r1, pc, #4	@ (adr r1, 800936c <_printf_i+0x40>)
 8009368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800936c:	080093c5 	.word	0x080093c5
 8009370:	080093d9 	.word	0x080093d9
 8009374:	08009355 	.word	0x08009355
 8009378:	08009355 	.word	0x08009355
 800937c:	08009355 	.word	0x08009355
 8009380:	08009355 	.word	0x08009355
 8009384:	080093d9 	.word	0x080093d9
 8009388:	08009355 	.word	0x08009355
 800938c:	08009355 	.word	0x08009355
 8009390:	08009355 	.word	0x08009355
 8009394:	08009355 	.word	0x08009355
 8009398:	080094d9 	.word	0x080094d9
 800939c:	08009403 	.word	0x08009403
 80093a0:	08009493 	.word	0x08009493
 80093a4:	08009355 	.word	0x08009355
 80093a8:	08009355 	.word	0x08009355
 80093ac:	080094fb 	.word	0x080094fb
 80093b0:	08009355 	.word	0x08009355
 80093b4:	08009403 	.word	0x08009403
 80093b8:	08009355 	.word	0x08009355
 80093bc:	08009355 	.word	0x08009355
 80093c0:	0800949b 	.word	0x0800949b
 80093c4:	6833      	ldr	r3, [r6, #0]
 80093c6:	1d1a      	adds	r2, r3, #4
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6032      	str	r2, [r6, #0]
 80093cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093d4:	2301      	movs	r3, #1
 80093d6:	e09d      	b.n	8009514 <_printf_i+0x1e8>
 80093d8:	6833      	ldr	r3, [r6, #0]
 80093da:	6820      	ldr	r0, [r4, #0]
 80093dc:	1d19      	adds	r1, r3, #4
 80093de:	6031      	str	r1, [r6, #0]
 80093e0:	0606      	lsls	r6, r0, #24
 80093e2:	d501      	bpl.n	80093e8 <_printf_i+0xbc>
 80093e4:	681d      	ldr	r5, [r3, #0]
 80093e6:	e003      	b.n	80093f0 <_printf_i+0xc4>
 80093e8:	0645      	lsls	r5, r0, #25
 80093ea:	d5fb      	bpl.n	80093e4 <_printf_i+0xb8>
 80093ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093f0:	2d00      	cmp	r5, #0
 80093f2:	da03      	bge.n	80093fc <_printf_i+0xd0>
 80093f4:	232d      	movs	r3, #45	@ 0x2d
 80093f6:	426d      	negs	r5, r5
 80093f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093fc:	4859      	ldr	r0, [pc, #356]	@ (8009564 <_printf_i+0x238>)
 80093fe:	230a      	movs	r3, #10
 8009400:	e011      	b.n	8009426 <_printf_i+0xfa>
 8009402:	6821      	ldr	r1, [r4, #0]
 8009404:	6833      	ldr	r3, [r6, #0]
 8009406:	0608      	lsls	r0, r1, #24
 8009408:	f853 5b04 	ldr.w	r5, [r3], #4
 800940c:	d402      	bmi.n	8009414 <_printf_i+0xe8>
 800940e:	0649      	lsls	r1, r1, #25
 8009410:	bf48      	it	mi
 8009412:	b2ad      	uxthmi	r5, r5
 8009414:	2f6f      	cmp	r7, #111	@ 0x6f
 8009416:	4853      	ldr	r0, [pc, #332]	@ (8009564 <_printf_i+0x238>)
 8009418:	6033      	str	r3, [r6, #0]
 800941a:	bf14      	ite	ne
 800941c:	230a      	movne	r3, #10
 800941e:	2308      	moveq	r3, #8
 8009420:	2100      	movs	r1, #0
 8009422:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009426:	6866      	ldr	r6, [r4, #4]
 8009428:	60a6      	str	r6, [r4, #8]
 800942a:	2e00      	cmp	r6, #0
 800942c:	bfa2      	ittt	ge
 800942e:	6821      	ldrge	r1, [r4, #0]
 8009430:	f021 0104 	bicge.w	r1, r1, #4
 8009434:	6021      	strge	r1, [r4, #0]
 8009436:	b90d      	cbnz	r5, 800943c <_printf_i+0x110>
 8009438:	2e00      	cmp	r6, #0
 800943a:	d04b      	beq.n	80094d4 <_printf_i+0x1a8>
 800943c:	4616      	mov	r6, r2
 800943e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009442:	fb03 5711 	mls	r7, r3, r1, r5
 8009446:	5dc7      	ldrb	r7, [r0, r7]
 8009448:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800944c:	462f      	mov	r7, r5
 800944e:	42bb      	cmp	r3, r7
 8009450:	460d      	mov	r5, r1
 8009452:	d9f4      	bls.n	800943e <_printf_i+0x112>
 8009454:	2b08      	cmp	r3, #8
 8009456:	d10b      	bne.n	8009470 <_printf_i+0x144>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	07df      	lsls	r7, r3, #31
 800945c:	d508      	bpl.n	8009470 <_printf_i+0x144>
 800945e:	6923      	ldr	r3, [r4, #16]
 8009460:	6861      	ldr	r1, [r4, #4]
 8009462:	4299      	cmp	r1, r3
 8009464:	bfde      	ittt	le
 8009466:	2330      	movle	r3, #48	@ 0x30
 8009468:	f806 3c01 	strble.w	r3, [r6, #-1]
 800946c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009470:	1b92      	subs	r2, r2, r6
 8009472:	6122      	str	r2, [r4, #16]
 8009474:	f8cd a000 	str.w	sl, [sp]
 8009478:	464b      	mov	r3, r9
 800947a:	aa03      	add	r2, sp, #12
 800947c:	4621      	mov	r1, r4
 800947e:	4640      	mov	r0, r8
 8009480:	f7ff fee6 	bl	8009250 <_printf_common>
 8009484:	3001      	adds	r0, #1
 8009486:	d14a      	bne.n	800951e <_printf_i+0x1f2>
 8009488:	f04f 30ff 	mov.w	r0, #4294967295
 800948c:	b004      	add	sp, #16
 800948e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	f043 0320 	orr.w	r3, r3, #32
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	4833      	ldr	r0, [pc, #204]	@ (8009568 <_printf_i+0x23c>)
 800949c:	2778      	movs	r7, #120	@ 0x78
 800949e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	6831      	ldr	r1, [r6, #0]
 80094a6:	061f      	lsls	r7, r3, #24
 80094a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80094ac:	d402      	bmi.n	80094b4 <_printf_i+0x188>
 80094ae:	065f      	lsls	r7, r3, #25
 80094b0:	bf48      	it	mi
 80094b2:	b2ad      	uxthmi	r5, r5
 80094b4:	6031      	str	r1, [r6, #0]
 80094b6:	07d9      	lsls	r1, r3, #31
 80094b8:	bf44      	itt	mi
 80094ba:	f043 0320 	orrmi.w	r3, r3, #32
 80094be:	6023      	strmi	r3, [r4, #0]
 80094c0:	b11d      	cbz	r5, 80094ca <_printf_i+0x19e>
 80094c2:	2310      	movs	r3, #16
 80094c4:	e7ac      	b.n	8009420 <_printf_i+0xf4>
 80094c6:	4827      	ldr	r0, [pc, #156]	@ (8009564 <_printf_i+0x238>)
 80094c8:	e7e9      	b.n	800949e <_printf_i+0x172>
 80094ca:	6823      	ldr	r3, [r4, #0]
 80094cc:	f023 0320 	bic.w	r3, r3, #32
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	e7f6      	b.n	80094c2 <_printf_i+0x196>
 80094d4:	4616      	mov	r6, r2
 80094d6:	e7bd      	b.n	8009454 <_printf_i+0x128>
 80094d8:	6833      	ldr	r3, [r6, #0]
 80094da:	6825      	ldr	r5, [r4, #0]
 80094dc:	6961      	ldr	r1, [r4, #20]
 80094de:	1d18      	adds	r0, r3, #4
 80094e0:	6030      	str	r0, [r6, #0]
 80094e2:	062e      	lsls	r6, r5, #24
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	d501      	bpl.n	80094ec <_printf_i+0x1c0>
 80094e8:	6019      	str	r1, [r3, #0]
 80094ea:	e002      	b.n	80094f2 <_printf_i+0x1c6>
 80094ec:	0668      	lsls	r0, r5, #25
 80094ee:	d5fb      	bpl.n	80094e8 <_printf_i+0x1bc>
 80094f0:	8019      	strh	r1, [r3, #0]
 80094f2:	2300      	movs	r3, #0
 80094f4:	6123      	str	r3, [r4, #16]
 80094f6:	4616      	mov	r6, r2
 80094f8:	e7bc      	b.n	8009474 <_printf_i+0x148>
 80094fa:	6833      	ldr	r3, [r6, #0]
 80094fc:	1d1a      	adds	r2, r3, #4
 80094fe:	6032      	str	r2, [r6, #0]
 8009500:	681e      	ldr	r6, [r3, #0]
 8009502:	6862      	ldr	r2, [r4, #4]
 8009504:	2100      	movs	r1, #0
 8009506:	4630      	mov	r0, r6
 8009508:	f7f6 fe62 	bl	80001d0 <memchr>
 800950c:	b108      	cbz	r0, 8009512 <_printf_i+0x1e6>
 800950e:	1b80      	subs	r0, r0, r6
 8009510:	6060      	str	r0, [r4, #4]
 8009512:	6863      	ldr	r3, [r4, #4]
 8009514:	6123      	str	r3, [r4, #16]
 8009516:	2300      	movs	r3, #0
 8009518:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800951c:	e7aa      	b.n	8009474 <_printf_i+0x148>
 800951e:	6923      	ldr	r3, [r4, #16]
 8009520:	4632      	mov	r2, r6
 8009522:	4649      	mov	r1, r9
 8009524:	4640      	mov	r0, r8
 8009526:	47d0      	blx	sl
 8009528:	3001      	adds	r0, #1
 800952a:	d0ad      	beq.n	8009488 <_printf_i+0x15c>
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	079b      	lsls	r3, r3, #30
 8009530:	d413      	bmi.n	800955a <_printf_i+0x22e>
 8009532:	68e0      	ldr	r0, [r4, #12]
 8009534:	9b03      	ldr	r3, [sp, #12]
 8009536:	4298      	cmp	r0, r3
 8009538:	bfb8      	it	lt
 800953a:	4618      	movlt	r0, r3
 800953c:	e7a6      	b.n	800948c <_printf_i+0x160>
 800953e:	2301      	movs	r3, #1
 8009540:	4632      	mov	r2, r6
 8009542:	4649      	mov	r1, r9
 8009544:	4640      	mov	r0, r8
 8009546:	47d0      	blx	sl
 8009548:	3001      	adds	r0, #1
 800954a:	d09d      	beq.n	8009488 <_printf_i+0x15c>
 800954c:	3501      	adds	r5, #1
 800954e:	68e3      	ldr	r3, [r4, #12]
 8009550:	9903      	ldr	r1, [sp, #12]
 8009552:	1a5b      	subs	r3, r3, r1
 8009554:	42ab      	cmp	r3, r5
 8009556:	dcf2      	bgt.n	800953e <_printf_i+0x212>
 8009558:	e7eb      	b.n	8009532 <_printf_i+0x206>
 800955a:	2500      	movs	r5, #0
 800955c:	f104 0619 	add.w	r6, r4, #25
 8009560:	e7f5      	b.n	800954e <_printf_i+0x222>
 8009562:	bf00      	nop
 8009564:	0800c4ea 	.word	0x0800c4ea
 8009568:	0800c4fb 	.word	0x0800c4fb

0800956c <std>:
 800956c:	2300      	movs	r3, #0
 800956e:	b510      	push	{r4, lr}
 8009570:	4604      	mov	r4, r0
 8009572:	e9c0 3300 	strd	r3, r3, [r0]
 8009576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800957a:	6083      	str	r3, [r0, #8]
 800957c:	8181      	strh	r1, [r0, #12]
 800957e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009580:	81c2      	strh	r2, [r0, #14]
 8009582:	6183      	str	r3, [r0, #24]
 8009584:	4619      	mov	r1, r3
 8009586:	2208      	movs	r2, #8
 8009588:	305c      	adds	r0, #92	@ 0x5c
 800958a:	f000 f914 	bl	80097b6 <memset>
 800958e:	4b0d      	ldr	r3, [pc, #52]	@ (80095c4 <std+0x58>)
 8009590:	6263      	str	r3, [r4, #36]	@ 0x24
 8009592:	4b0d      	ldr	r3, [pc, #52]	@ (80095c8 <std+0x5c>)
 8009594:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009596:	4b0d      	ldr	r3, [pc, #52]	@ (80095cc <std+0x60>)
 8009598:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800959a:	4b0d      	ldr	r3, [pc, #52]	@ (80095d0 <std+0x64>)
 800959c:	6323      	str	r3, [r4, #48]	@ 0x30
 800959e:	4b0d      	ldr	r3, [pc, #52]	@ (80095d4 <std+0x68>)
 80095a0:	6224      	str	r4, [r4, #32]
 80095a2:	429c      	cmp	r4, r3
 80095a4:	d006      	beq.n	80095b4 <std+0x48>
 80095a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80095aa:	4294      	cmp	r4, r2
 80095ac:	d002      	beq.n	80095b4 <std+0x48>
 80095ae:	33d0      	adds	r3, #208	@ 0xd0
 80095b0:	429c      	cmp	r4, r3
 80095b2:	d105      	bne.n	80095c0 <std+0x54>
 80095b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80095b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095bc:	f000 b978 	b.w	80098b0 <__retarget_lock_init_recursive>
 80095c0:	bd10      	pop	{r4, pc}
 80095c2:	bf00      	nop
 80095c4:	08009731 	.word	0x08009731
 80095c8:	08009753 	.word	0x08009753
 80095cc:	0800978b 	.word	0x0800978b
 80095d0:	080097af 	.word	0x080097af
 80095d4:	2000516c 	.word	0x2000516c

080095d8 <stdio_exit_handler>:
 80095d8:	4a02      	ldr	r2, [pc, #8]	@ (80095e4 <stdio_exit_handler+0xc>)
 80095da:	4903      	ldr	r1, [pc, #12]	@ (80095e8 <stdio_exit_handler+0x10>)
 80095dc:	4803      	ldr	r0, [pc, #12]	@ (80095ec <stdio_exit_handler+0x14>)
 80095de:	f000 b869 	b.w	80096b4 <_fwalk_sglue>
 80095e2:	bf00      	nop
 80095e4:	20000010 	.word	0x20000010
 80095e8:	0800b22d 	.word	0x0800b22d
 80095ec:	20000020 	.word	0x20000020

080095f0 <cleanup_stdio>:
 80095f0:	6841      	ldr	r1, [r0, #4]
 80095f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009624 <cleanup_stdio+0x34>)
 80095f4:	4299      	cmp	r1, r3
 80095f6:	b510      	push	{r4, lr}
 80095f8:	4604      	mov	r4, r0
 80095fa:	d001      	beq.n	8009600 <cleanup_stdio+0x10>
 80095fc:	f001 fe16 	bl	800b22c <_fflush_r>
 8009600:	68a1      	ldr	r1, [r4, #8]
 8009602:	4b09      	ldr	r3, [pc, #36]	@ (8009628 <cleanup_stdio+0x38>)
 8009604:	4299      	cmp	r1, r3
 8009606:	d002      	beq.n	800960e <cleanup_stdio+0x1e>
 8009608:	4620      	mov	r0, r4
 800960a:	f001 fe0f 	bl	800b22c <_fflush_r>
 800960e:	68e1      	ldr	r1, [r4, #12]
 8009610:	4b06      	ldr	r3, [pc, #24]	@ (800962c <cleanup_stdio+0x3c>)
 8009612:	4299      	cmp	r1, r3
 8009614:	d004      	beq.n	8009620 <cleanup_stdio+0x30>
 8009616:	4620      	mov	r0, r4
 8009618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800961c:	f001 be06 	b.w	800b22c <_fflush_r>
 8009620:	bd10      	pop	{r4, pc}
 8009622:	bf00      	nop
 8009624:	2000516c 	.word	0x2000516c
 8009628:	200051d4 	.word	0x200051d4
 800962c:	2000523c 	.word	0x2000523c

08009630 <global_stdio_init.part.0>:
 8009630:	b510      	push	{r4, lr}
 8009632:	4b0b      	ldr	r3, [pc, #44]	@ (8009660 <global_stdio_init.part.0+0x30>)
 8009634:	4c0b      	ldr	r4, [pc, #44]	@ (8009664 <global_stdio_init.part.0+0x34>)
 8009636:	4a0c      	ldr	r2, [pc, #48]	@ (8009668 <global_stdio_init.part.0+0x38>)
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	4620      	mov	r0, r4
 800963c:	2200      	movs	r2, #0
 800963e:	2104      	movs	r1, #4
 8009640:	f7ff ff94 	bl	800956c <std>
 8009644:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009648:	2201      	movs	r2, #1
 800964a:	2109      	movs	r1, #9
 800964c:	f7ff ff8e 	bl	800956c <std>
 8009650:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009654:	2202      	movs	r2, #2
 8009656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800965a:	2112      	movs	r1, #18
 800965c:	f7ff bf86 	b.w	800956c <std>
 8009660:	200052a4 	.word	0x200052a4
 8009664:	2000516c 	.word	0x2000516c
 8009668:	080095d9 	.word	0x080095d9

0800966c <__sfp_lock_acquire>:
 800966c:	4801      	ldr	r0, [pc, #4]	@ (8009674 <__sfp_lock_acquire+0x8>)
 800966e:	f000 b920 	b.w	80098b2 <__retarget_lock_acquire_recursive>
 8009672:	bf00      	nop
 8009674:	200052ad 	.word	0x200052ad

08009678 <__sfp_lock_release>:
 8009678:	4801      	ldr	r0, [pc, #4]	@ (8009680 <__sfp_lock_release+0x8>)
 800967a:	f000 b91b 	b.w	80098b4 <__retarget_lock_release_recursive>
 800967e:	bf00      	nop
 8009680:	200052ad 	.word	0x200052ad

08009684 <__sinit>:
 8009684:	b510      	push	{r4, lr}
 8009686:	4604      	mov	r4, r0
 8009688:	f7ff fff0 	bl	800966c <__sfp_lock_acquire>
 800968c:	6a23      	ldr	r3, [r4, #32]
 800968e:	b11b      	cbz	r3, 8009698 <__sinit+0x14>
 8009690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009694:	f7ff bff0 	b.w	8009678 <__sfp_lock_release>
 8009698:	4b04      	ldr	r3, [pc, #16]	@ (80096ac <__sinit+0x28>)
 800969a:	6223      	str	r3, [r4, #32]
 800969c:	4b04      	ldr	r3, [pc, #16]	@ (80096b0 <__sinit+0x2c>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1f5      	bne.n	8009690 <__sinit+0xc>
 80096a4:	f7ff ffc4 	bl	8009630 <global_stdio_init.part.0>
 80096a8:	e7f2      	b.n	8009690 <__sinit+0xc>
 80096aa:	bf00      	nop
 80096ac:	080095f1 	.word	0x080095f1
 80096b0:	200052a4 	.word	0x200052a4

080096b4 <_fwalk_sglue>:
 80096b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096b8:	4607      	mov	r7, r0
 80096ba:	4688      	mov	r8, r1
 80096bc:	4614      	mov	r4, r2
 80096be:	2600      	movs	r6, #0
 80096c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096c4:	f1b9 0901 	subs.w	r9, r9, #1
 80096c8:	d505      	bpl.n	80096d6 <_fwalk_sglue+0x22>
 80096ca:	6824      	ldr	r4, [r4, #0]
 80096cc:	2c00      	cmp	r4, #0
 80096ce:	d1f7      	bne.n	80096c0 <_fwalk_sglue+0xc>
 80096d0:	4630      	mov	r0, r6
 80096d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096d6:	89ab      	ldrh	r3, [r5, #12]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d907      	bls.n	80096ec <_fwalk_sglue+0x38>
 80096dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096e0:	3301      	adds	r3, #1
 80096e2:	d003      	beq.n	80096ec <_fwalk_sglue+0x38>
 80096e4:	4629      	mov	r1, r5
 80096e6:	4638      	mov	r0, r7
 80096e8:	47c0      	blx	r8
 80096ea:	4306      	orrs	r6, r0
 80096ec:	3568      	adds	r5, #104	@ 0x68
 80096ee:	e7e9      	b.n	80096c4 <_fwalk_sglue+0x10>

080096f0 <siprintf>:
 80096f0:	b40e      	push	{r1, r2, r3}
 80096f2:	b500      	push	{lr}
 80096f4:	b09c      	sub	sp, #112	@ 0x70
 80096f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80096f8:	9002      	str	r0, [sp, #8]
 80096fa:	9006      	str	r0, [sp, #24]
 80096fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009700:	4809      	ldr	r0, [pc, #36]	@ (8009728 <siprintf+0x38>)
 8009702:	9107      	str	r1, [sp, #28]
 8009704:	9104      	str	r1, [sp, #16]
 8009706:	4909      	ldr	r1, [pc, #36]	@ (800972c <siprintf+0x3c>)
 8009708:	f853 2b04 	ldr.w	r2, [r3], #4
 800970c:	9105      	str	r1, [sp, #20]
 800970e:	6800      	ldr	r0, [r0, #0]
 8009710:	9301      	str	r3, [sp, #4]
 8009712:	a902      	add	r1, sp, #8
 8009714:	f001 fc0a 	bl	800af2c <_svfiprintf_r>
 8009718:	9b02      	ldr	r3, [sp, #8]
 800971a:	2200      	movs	r2, #0
 800971c:	701a      	strb	r2, [r3, #0]
 800971e:	b01c      	add	sp, #112	@ 0x70
 8009720:	f85d eb04 	ldr.w	lr, [sp], #4
 8009724:	b003      	add	sp, #12
 8009726:	4770      	bx	lr
 8009728:	2000001c 	.word	0x2000001c
 800972c:	ffff0208 	.word	0xffff0208

08009730 <__sread>:
 8009730:	b510      	push	{r4, lr}
 8009732:	460c      	mov	r4, r1
 8009734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009738:	f000 f86c 	bl	8009814 <_read_r>
 800973c:	2800      	cmp	r0, #0
 800973e:	bfab      	itete	ge
 8009740:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009742:	89a3      	ldrhlt	r3, [r4, #12]
 8009744:	181b      	addge	r3, r3, r0
 8009746:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800974a:	bfac      	ite	ge
 800974c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800974e:	81a3      	strhlt	r3, [r4, #12]
 8009750:	bd10      	pop	{r4, pc}

08009752 <__swrite>:
 8009752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009756:	461f      	mov	r7, r3
 8009758:	898b      	ldrh	r3, [r1, #12]
 800975a:	05db      	lsls	r3, r3, #23
 800975c:	4605      	mov	r5, r0
 800975e:	460c      	mov	r4, r1
 8009760:	4616      	mov	r6, r2
 8009762:	d505      	bpl.n	8009770 <__swrite+0x1e>
 8009764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009768:	2302      	movs	r3, #2
 800976a:	2200      	movs	r2, #0
 800976c:	f000 f840 	bl	80097f0 <_lseek_r>
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009776:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800977a:	81a3      	strh	r3, [r4, #12]
 800977c:	4632      	mov	r2, r6
 800977e:	463b      	mov	r3, r7
 8009780:	4628      	mov	r0, r5
 8009782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009786:	f000 b857 	b.w	8009838 <_write_r>

0800978a <__sseek>:
 800978a:	b510      	push	{r4, lr}
 800978c:	460c      	mov	r4, r1
 800978e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009792:	f000 f82d 	bl	80097f0 <_lseek_r>
 8009796:	1c43      	adds	r3, r0, #1
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	bf15      	itete	ne
 800979c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800979e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097a6:	81a3      	strheq	r3, [r4, #12]
 80097a8:	bf18      	it	ne
 80097aa:	81a3      	strhne	r3, [r4, #12]
 80097ac:	bd10      	pop	{r4, pc}

080097ae <__sclose>:
 80097ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097b2:	f000 b80d 	b.w	80097d0 <_close_r>

080097b6 <memset>:
 80097b6:	4402      	add	r2, r0
 80097b8:	4603      	mov	r3, r0
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d100      	bne.n	80097c0 <memset+0xa>
 80097be:	4770      	bx	lr
 80097c0:	f803 1b01 	strb.w	r1, [r3], #1
 80097c4:	e7f9      	b.n	80097ba <memset+0x4>
	...

080097c8 <_localeconv_r>:
 80097c8:	4800      	ldr	r0, [pc, #0]	@ (80097cc <_localeconv_r+0x4>)
 80097ca:	4770      	bx	lr
 80097cc:	2000015c 	.word	0x2000015c

080097d0 <_close_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4d06      	ldr	r5, [pc, #24]	@ (80097ec <_close_r+0x1c>)
 80097d4:	2300      	movs	r3, #0
 80097d6:	4604      	mov	r4, r0
 80097d8:	4608      	mov	r0, r1
 80097da:	602b      	str	r3, [r5, #0]
 80097dc:	f7f8 fc10 	bl	8002000 <_close>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d102      	bne.n	80097ea <_close_r+0x1a>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	b103      	cbz	r3, 80097ea <_close_r+0x1a>
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	200052a8 	.word	0x200052a8

080097f0 <_lseek_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	4d07      	ldr	r5, [pc, #28]	@ (8009810 <_lseek_r+0x20>)
 80097f4:	4604      	mov	r4, r0
 80097f6:	4608      	mov	r0, r1
 80097f8:	4611      	mov	r1, r2
 80097fa:	2200      	movs	r2, #0
 80097fc:	602a      	str	r2, [r5, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	f7f8 fc25 	bl	800204e <_lseek>
 8009804:	1c43      	adds	r3, r0, #1
 8009806:	d102      	bne.n	800980e <_lseek_r+0x1e>
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	b103      	cbz	r3, 800980e <_lseek_r+0x1e>
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	200052a8 	.word	0x200052a8

08009814 <_read_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4d07      	ldr	r5, [pc, #28]	@ (8009834 <_read_r+0x20>)
 8009818:	4604      	mov	r4, r0
 800981a:	4608      	mov	r0, r1
 800981c:	4611      	mov	r1, r2
 800981e:	2200      	movs	r2, #0
 8009820:	602a      	str	r2, [r5, #0]
 8009822:	461a      	mov	r2, r3
 8009824:	f7f8 fbb3 	bl	8001f8e <_read>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d102      	bne.n	8009832 <_read_r+0x1e>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	b103      	cbz	r3, 8009832 <_read_r+0x1e>
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	200052a8 	.word	0x200052a8

08009838 <_write_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4d07      	ldr	r5, [pc, #28]	@ (8009858 <_write_r+0x20>)
 800983c:	4604      	mov	r4, r0
 800983e:	4608      	mov	r0, r1
 8009840:	4611      	mov	r1, r2
 8009842:	2200      	movs	r2, #0
 8009844:	602a      	str	r2, [r5, #0]
 8009846:	461a      	mov	r2, r3
 8009848:	f7f8 fbbe 	bl	8001fc8 <_write>
 800984c:	1c43      	adds	r3, r0, #1
 800984e:	d102      	bne.n	8009856 <_write_r+0x1e>
 8009850:	682b      	ldr	r3, [r5, #0]
 8009852:	b103      	cbz	r3, 8009856 <_write_r+0x1e>
 8009854:	6023      	str	r3, [r4, #0]
 8009856:	bd38      	pop	{r3, r4, r5, pc}
 8009858:	200052a8 	.word	0x200052a8

0800985c <__errno>:
 800985c:	4b01      	ldr	r3, [pc, #4]	@ (8009864 <__errno+0x8>)
 800985e:	6818      	ldr	r0, [r3, #0]
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	2000001c 	.word	0x2000001c

08009868 <__libc_init_array>:
 8009868:	b570      	push	{r4, r5, r6, lr}
 800986a:	4d0d      	ldr	r5, [pc, #52]	@ (80098a0 <__libc_init_array+0x38>)
 800986c:	4c0d      	ldr	r4, [pc, #52]	@ (80098a4 <__libc_init_array+0x3c>)
 800986e:	1b64      	subs	r4, r4, r5
 8009870:	10a4      	asrs	r4, r4, #2
 8009872:	2600      	movs	r6, #0
 8009874:	42a6      	cmp	r6, r4
 8009876:	d109      	bne.n	800988c <__libc_init_array+0x24>
 8009878:	4d0b      	ldr	r5, [pc, #44]	@ (80098a8 <__libc_init_array+0x40>)
 800987a:	4c0c      	ldr	r4, [pc, #48]	@ (80098ac <__libc_init_array+0x44>)
 800987c:	f002 f866 	bl	800b94c <_init>
 8009880:	1b64      	subs	r4, r4, r5
 8009882:	10a4      	asrs	r4, r4, #2
 8009884:	2600      	movs	r6, #0
 8009886:	42a6      	cmp	r6, r4
 8009888:	d105      	bne.n	8009896 <__libc_init_array+0x2e>
 800988a:	bd70      	pop	{r4, r5, r6, pc}
 800988c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009890:	4798      	blx	r3
 8009892:	3601      	adds	r6, #1
 8009894:	e7ee      	b.n	8009874 <__libc_init_array+0xc>
 8009896:	f855 3b04 	ldr.w	r3, [r5], #4
 800989a:	4798      	blx	r3
 800989c:	3601      	adds	r6, #1
 800989e:	e7f2      	b.n	8009886 <__libc_init_array+0x1e>
 80098a0:	0800c850 	.word	0x0800c850
 80098a4:	0800c850 	.word	0x0800c850
 80098a8:	0800c850 	.word	0x0800c850
 80098ac:	0800c854 	.word	0x0800c854

080098b0 <__retarget_lock_init_recursive>:
 80098b0:	4770      	bx	lr

080098b2 <__retarget_lock_acquire_recursive>:
 80098b2:	4770      	bx	lr

080098b4 <__retarget_lock_release_recursive>:
 80098b4:	4770      	bx	lr

080098b6 <memcpy>:
 80098b6:	440a      	add	r2, r1
 80098b8:	4291      	cmp	r1, r2
 80098ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80098be:	d100      	bne.n	80098c2 <memcpy+0xc>
 80098c0:	4770      	bx	lr
 80098c2:	b510      	push	{r4, lr}
 80098c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098cc:	4291      	cmp	r1, r2
 80098ce:	d1f9      	bne.n	80098c4 <memcpy+0xe>
 80098d0:	bd10      	pop	{r4, pc}

080098d2 <quorem>:
 80098d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d6:	6903      	ldr	r3, [r0, #16]
 80098d8:	690c      	ldr	r4, [r1, #16]
 80098da:	42a3      	cmp	r3, r4
 80098dc:	4607      	mov	r7, r0
 80098de:	db7e      	blt.n	80099de <quorem+0x10c>
 80098e0:	3c01      	subs	r4, #1
 80098e2:	f101 0814 	add.w	r8, r1, #20
 80098e6:	00a3      	lsls	r3, r4, #2
 80098e8:	f100 0514 	add.w	r5, r0, #20
 80098ec:	9300      	str	r3, [sp, #0]
 80098ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098f2:	9301      	str	r3, [sp, #4]
 80098f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098fc:	3301      	adds	r3, #1
 80098fe:	429a      	cmp	r2, r3
 8009900:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009904:	fbb2 f6f3 	udiv	r6, r2, r3
 8009908:	d32e      	bcc.n	8009968 <quorem+0x96>
 800990a:	f04f 0a00 	mov.w	sl, #0
 800990e:	46c4      	mov	ip, r8
 8009910:	46ae      	mov	lr, r5
 8009912:	46d3      	mov	fp, sl
 8009914:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009918:	b298      	uxth	r0, r3
 800991a:	fb06 a000 	mla	r0, r6, r0, sl
 800991e:	0c02      	lsrs	r2, r0, #16
 8009920:	0c1b      	lsrs	r3, r3, #16
 8009922:	fb06 2303 	mla	r3, r6, r3, r2
 8009926:	f8de 2000 	ldr.w	r2, [lr]
 800992a:	b280      	uxth	r0, r0
 800992c:	b292      	uxth	r2, r2
 800992e:	1a12      	subs	r2, r2, r0
 8009930:	445a      	add	r2, fp
 8009932:	f8de 0000 	ldr.w	r0, [lr]
 8009936:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800993a:	b29b      	uxth	r3, r3
 800993c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009940:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009944:	b292      	uxth	r2, r2
 8009946:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800994a:	45e1      	cmp	r9, ip
 800994c:	f84e 2b04 	str.w	r2, [lr], #4
 8009950:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009954:	d2de      	bcs.n	8009914 <quorem+0x42>
 8009956:	9b00      	ldr	r3, [sp, #0]
 8009958:	58eb      	ldr	r3, [r5, r3]
 800995a:	b92b      	cbnz	r3, 8009968 <quorem+0x96>
 800995c:	9b01      	ldr	r3, [sp, #4]
 800995e:	3b04      	subs	r3, #4
 8009960:	429d      	cmp	r5, r3
 8009962:	461a      	mov	r2, r3
 8009964:	d32f      	bcc.n	80099c6 <quorem+0xf4>
 8009966:	613c      	str	r4, [r7, #16]
 8009968:	4638      	mov	r0, r7
 800996a:	f001 f97b 	bl	800ac64 <__mcmp>
 800996e:	2800      	cmp	r0, #0
 8009970:	db25      	blt.n	80099be <quorem+0xec>
 8009972:	4629      	mov	r1, r5
 8009974:	2000      	movs	r0, #0
 8009976:	f858 2b04 	ldr.w	r2, [r8], #4
 800997a:	f8d1 c000 	ldr.w	ip, [r1]
 800997e:	fa1f fe82 	uxth.w	lr, r2
 8009982:	fa1f f38c 	uxth.w	r3, ip
 8009986:	eba3 030e 	sub.w	r3, r3, lr
 800998a:	4403      	add	r3, r0
 800998c:	0c12      	lsrs	r2, r2, #16
 800998e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009992:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009996:	b29b      	uxth	r3, r3
 8009998:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800999c:	45c1      	cmp	r9, r8
 800999e:	f841 3b04 	str.w	r3, [r1], #4
 80099a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80099a6:	d2e6      	bcs.n	8009976 <quorem+0xa4>
 80099a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099b0:	b922      	cbnz	r2, 80099bc <quorem+0xea>
 80099b2:	3b04      	subs	r3, #4
 80099b4:	429d      	cmp	r5, r3
 80099b6:	461a      	mov	r2, r3
 80099b8:	d30b      	bcc.n	80099d2 <quorem+0x100>
 80099ba:	613c      	str	r4, [r7, #16]
 80099bc:	3601      	adds	r6, #1
 80099be:	4630      	mov	r0, r6
 80099c0:	b003      	add	sp, #12
 80099c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c6:	6812      	ldr	r2, [r2, #0]
 80099c8:	3b04      	subs	r3, #4
 80099ca:	2a00      	cmp	r2, #0
 80099cc:	d1cb      	bne.n	8009966 <quorem+0x94>
 80099ce:	3c01      	subs	r4, #1
 80099d0:	e7c6      	b.n	8009960 <quorem+0x8e>
 80099d2:	6812      	ldr	r2, [r2, #0]
 80099d4:	3b04      	subs	r3, #4
 80099d6:	2a00      	cmp	r2, #0
 80099d8:	d1ef      	bne.n	80099ba <quorem+0xe8>
 80099da:	3c01      	subs	r4, #1
 80099dc:	e7ea      	b.n	80099b4 <quorem+0xe2>
 80099de:	2000      	movs	r0, #0
 80099e0:	e7ee      	b.n	80099c0 <quorem+0xee>
 80099e2:	0000      	movs	r0, r0
 80099e4:	0000      	movs	r0, r0
	...

080099e8 <_dtoa_r>:
 80099e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	69c7      	ldr	r7, [r0, #28]
 80099ee:	b099      	sub	sp, #100	@ 0x64
 80099f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80099f4:	ec55 4b10 	vmov	r4, r5, d0
 80099f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80099fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80099fc:	4683      	mov	fp, r0
 80099fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a02:	b97f      	cbnz	r7, 8009a24 <_dtoa_r+0x3c>
 8009a04:	2010      	movs	r0, #16
 8009a06:	f000 fdfd 	bl	800a604 <malloc>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009a10:	b920      	cbnz	r0, 8009a1c <_dtoa_r+0x34>
 8009a12:	4ba7      	ldr	r3, [pc, #668]	@ (8009cb0 <_dtoa_r+0x2c8>)
 8009a14:	21ef      	movs	r1, #239	@ 0xef
 8009a16:	48a7      	ldr	r0, [pc, #668]	@ (8009cb4 <_dtoa_r+0x2cc>)
 8009a18:	f001 fc5a 	bl	800b2d0 <__assert_func>
 8009a1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009a20:	6007      	str	r7, [r0, #0]
 8009a22:	60c7      	str	r7, [r0, #12]
 8009a24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a28:	6819      	ldr	r1, [r3, #0]
 8009a2a:	b159      	cbz	r1, 8009a44 <_dtoa_r+0x5c>
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	604a      	str	r2, [r1, #4]
 8009a30:	2301      	movs	r3, #1
 8009a32:	4093      	lsls	r3, r2
 8009a34:	608b      	str	r3, [r1, #8]
 8009a36:	4658      	mov	r0, fp
 8009a38:	f000 feda 	bl	800a7f0 <_Bfree>
 8009a3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a40:	2200      	movs	r2, #0
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	1e2b      	subs	r3, r5, #0
 8009a46:	bfb9      	ittee	lt
 8009a48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a4c:	9303      	strlt	r3, [sp, #12]
 8009a4e:	2300      	movge	r3, #0
 8009a50:	6033      	strge	r3, [r6, #0]
 8009a52:	9f03      	ldr	r7, [sp, #12]
 8009a54:	4b98      	ldr	r3, [pc, #608]	@ (8009cb8 <_dtoa_r+0x2d0>)
 8009a56:	bfbc      	itt	lt
 8009a58:	2201      	movlt	r2, #1
 8009a5a:	6032      	strlt	r2, [r6, #0]
 8009a5c:	43bb      	bics	r3, r7
 8009a5e:	d112      	bne.n	8009a86 <_dtoa_r+0x9e>
 8009a60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a66:	6013      	str	r3, [r2, #0]
 8009a68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a6c:	4323      	orrs	r3, r4
 8009a6e:	f000 854d 	beq.w	800a50c <_dtoa_r+0xb24>
 8009a72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009ccc <_dtoa_r+0x2e4>
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 854f 	beq.w	800a51c <_dtoa_r+0xb34>
 8009a7e:	f10a 0303 	add.w	r3, sl, #3
 8009a82:	f000 bd49 	b.w	800a518 <_dtoa_r+0xb30>
 8009a86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	ec51 0b17 	vmov	r0, r1, d7
 8009a90:	2300      	movs	r3, #0
 8009a92:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009a96:	f7f7 f817 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a9a:	4680      	mov	r8, r0
 8009a9c:	b158      	cbz	r0, 8009ab6 <_dtoa_r+0xce>
 8009a9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009aa6:	b113      	cbz	r3, 8009aae <_dtoa_r+0xc6>
 8009aa8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009aaa:	4b84      	ldr	r3, [pc, #528]	@ (8009cbc <_dtoa_r+0x2d4>)
 8009aac:	6013      	str	r3, [r2, #0]
 8009aae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009cd0 <_dtoa_r+0x2e8>
 8009ab2:	f000 bd33 	b.w	800a51c <_dtoa_r+0xb34>
 8009ab6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009aba:	aa16      	add	r2, sp, #88	@ 0x58
 8009abc:	a917      	add	r1, sp, #92	@ 0x5c
 8009abe:	4658      	mov	r0, fp
 8009ac0:	f001 f980 	bl	800adc4 <__d2b>
 8009ac4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009ac8:	4681      	mov	r9, r0
 8009aca:	2e00      	cmp	r6, #0
 8009acc:	d077      	beq.n	8009bbe <_dtoa_r+0x1d6>
 8009ace:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ad0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ad8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009adc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009ae0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009ae4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009ae8:	4619      	mov	r1, r3
 8009aea:	2200      	movs	r2, #0
 8009aec:	4b74      	ldr	r3, [pc, #464]	@ (8009cc0 <_dtoa_r+0x2d8>)
 8009aee:	f7f6 fbcb 	bl	8000288 <__aeabi_dsub>
 8009af2:	a369      	add	r3, pc, #420	@ (adr r3, 8009c98 <_dtoa_r+0x2b0>)
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	f7f6 fd7e 	bl	80005f8 <__aeabi_dmul>
 8009afc:	a368      	add	r3, pc, #416	@ (adr r3, 8009ca0 <_dtoa_r+0x2b8>)
 8009afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b02:	f7f6 fbc3 	bl	800028c <__adddf3>
 8009b06:	4604      	mov	r4, r0
 8009b08:	4630      	mov	r0, r6
 8009b0a:	460d      	mov	r5, r1
 8009b0c:	f7f6 fd0a 	bl	8000524 <__aeabi_i2d>
 8009b10:	a365      	add	r3, pc, #404	@ (adr r3, 8009ca8 <_dtoa_r+0x2c0>)
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f7f6 fd6f 	bl	80005f8 <__aeabi_dmul>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4620      	mov	r0, r4
 8009b20:	4629      	mov	r1, r5
 8009b22:	f7f6 fbb3 	bl	800028c <__adddf3>
 8009b26:	4604      	mov	r4, r0
 8009b28:	460d      	mov	r5, r1
 8009b2a:	f7f7 f815 	bl	8000b58 <__aeabi_d2iz>
 8009b2e:	2200      	movs	r2, #0
 8009b30:	4607      	mov	r7, r0
 8009b32:	2300      	movs	r3, #0
 8009b34:	4620      	mov	r0, r4
 8009b36:	4629      	mov	r1, r5
 8009b38:	f7f6 ffd0 	bl	8000adc <__aeabi_dcmplt>
 8009b3c:	b140      	cbz	r0, 8009b50 <_dtoa_r+0x168>
 8009b3e:	4638      	mov	r0, r7
 8009b40:	f7f6 fcf0 	bl	8000524 <__aeabi_i2d>
 8009b44:	4622      	mov	r2, r4
 8009b46:	462b      	mov	r3, r5
 8009b48:	f7f6 ffbe 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b4c:	b900      	cbnz	r0, 8009b50 <_dtoa_r+0x168>
 8009b4e:	3f01      	subs	r7, #1
 8009b50:	2f16      	cmp	r7, #22
 8009b52:	d851      	bhi.n	8009bf8 <_dtoa_r+0x210>
 8009b54:	4b5b      	ldr	r3, [pc, #364]	@ (8009cc4 <_dtoa_r+0x2dc>)
 8009b56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b62:	f7f6 ffbb 	bl	8000adc <__aeabi_dcmplt>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d048      	beq.n	8009bfc <_dtoa_r+0x214>
 8009b6a:	3f01      	subs	r7, #1
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b72:	1b9b      	subs	r3, r3, r6
 8009b74:	1e5a      	subs	r2, r3, #1
 8009b76:	bf44      	itt	mi
 8009b78:	f1c3 0801 	rsbmi	r8, r3, #1
 8009b7c:	2300      	movmi	r3, #0
 8009b7e:	9208      	str	r2, [sp, #32]
 8009b80:	bf54      	ite	pl
 8009b82:	f04f 0800 	movpl.w	r8, #0
 8009b86:	9308      	strmi	r3, [sp, #32]
 8009b88:	2f00      	cmp	r7, #0
 8009b8a:	db39      	blt.n	8009c00 <_dtoa_r+0x218>
 8009b8c:	9b08      	ldr	r3, [sp, #32]
 8009b8e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009b90:	443b      	add	r3, r7
 8009b92:	9308      	str	r3, [sp, #32]
 8009b94:	2300      	movs	r3, #0
 8009b96:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b9a:	2b09      	cmp	r3, #9
 8009b9c:	d864      	bhi.n	8009c68 <_dtoa_r+0x280>
 8009b9e:	2b05      	cmp	r3, #5
 8009ba0:	bfc4      	itt	gt
 8009ba2:	3b04      	subgt	r3, #4
 8009ba4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba8:	f1a3 0302 	sub.w	r3, r3, #2
 8009bac:	bfcc      	ite	gt
 8009bae:	2400      	movgt	r4, #0
 8009bb0:	2401      	movle	r4, #1
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d863      	bhi.n	8009c7e <_dtoa_r+0x296>
 8009bb6:	e8df f003 	tbb	[pc, r3]
 8009bba:	372a      	.short	0x372a
 8009bbc:	5535      	.short	0x5535
 8009bbe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009bc2:	441e      	add	r6, r3
 8009bc4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009bc8:	2b20      	cmp	r3, #32
 8009bca:	bfc1      	itttt	gt
 8009bcc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009bd0:	409f      	lslgt	r7, r3
 8009bd2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009bd6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009bda:	bfd6      	itet	le
 8009bdc:	f1c3 0320 	rsble	r3, r3, #32
 8009be0:	ea47 0003 	orrgt.w	r0, r7, r3
 8009be4:	fa04 f003 	lslle.w	r0, r4, r3
 8009be8:	f7f6 fc8c 	bl	8000504 <__aeabi_ui2d>
 8009bec:	2201      	movs	r2, #1
 8009bee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009bf2:	3e01      	subs	r6, #1
 8009bf4:	9214      	str	r2, [sp, #80]	@ 0x50
 8009bf6:	e777      	b.n	8009ae8 <_dtoa_r+0x100>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e7b8      	b.n	8009b6e <_dtoa_r+0x186>
 8009bfc:	9012      	str	r0, [sp, #72]	@ 0x48
 8009bfe:	e7b7      	b.n	8009b70 <_dtoa_r+0x188>
 8009c00:	427b      	negs	r3, r7
 8009c02:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c04:	2300      	movs	r3, #0
 8009c06:	eba8 0807 	sub.w	r8, r8, r7
 8009c0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c0c:	e7c4      	b.n	8009b98 <_dtoa_r+0x1b0>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	dc35      	bgt.n	8009c84 <_dtoa_r+0x29c>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	9307      	str	r3, [sp, #28]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c22:	e00b      	b.n	8009c3c <_dtoa_r+0x254>
 8009c24:	2301      	movs	r3, #1
 8009c26:	e7f3      	b.n	8009c10 <_dtoa_r+0x228>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c2e:	18fb      	adds	r3, r7, r3
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	3301      	adds	r3, #1
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	9307      	str	r3, [sp, #28]
 8009c38:	bfb8      	it	lt
 8009c3a:	2301      	movlt	r3, #1
 8009c3c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009c40:	2100      	movs	r1, #0
 8009c42:	2204      	movs	r2, #4
 8009c44:	f102 0514 	add.w	r5, r2, #20
 8009c48:	429d      	cmp	r5, r3
 8009c4a:	d91f      	bls.n	8009c8c <_dtoa_r+0x2a4>
 8009c4c:	6041      	str	r1, [r0, #4]
 8009c4e:	4658      	mov	r0, fp
 8009c50:	f000 fd8e 	bl	800a770 <_Balloc>
 8009c54:	4682      	mov	sl, r0
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d13c      	bne.n	8009cd4 <_dtoa_r+0x2ec>
 8009c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8009cc8 <_dtoa_r+0x2e0>)
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c62:	e6d8      	b.n	8009a16 <_dtoa_r+0x2e>
 8009c64:	2301      	movs	r3, #1
 8009c66:	e7e0      	b.n	8009c2a <_dtoa_r+0x242>
 8009c68:	2401      	movs	r4, #1
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009c70:	f04f 33ff 	mov.w	r3, #4294967295
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	9307      	str	r3, [sp, #28]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	2312      	movs	r3, #18
 8009c7c:	e7d0      	b.n	8009c20 <_dtoa_r+0x238>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c82:	e7f5      	b.n	8009c70 <_dtoa_r+0x288>
 8009c84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	9307      	str	r3, [sp, #28]
 8009c8a:	e7d7      	b.n	8009c3c <_dtoa_r+0x254>
 8009c8c:	3101      	adds	r1, #1
 8009c8e:	0052      	lsls	r2, r2, #1
 8009c90:	e7d8      	b.n	8009c44 <_dtoa_r+0x25c>
 8009c92:	bf00      	nop
 8009c94:	f3af 8000 	nop.w
 8009c98:	636f4361 	.word	0x636f4361
 8009c9c:	3fd287a7 	.word	0x3fd287a7
 8009ca0:	8b60c8b3 	.word	0x8b60c8b3
 8009ca4:	3fc68a28 	.word	0x3fc68a28
 8009ca8:	509f79fb 	.word	0x509f79fb
 8009cac:	3fd34413 	.word	0x3fd34413
 8009cb0:	0800c519 	.word	0x0800c519
 8009cb4:	0800c530 	.word	0x0800c530
 8009cb8:	7ff00000 	.word	0x7ff00000
 8009cbc:	0800c4e9 	.word	0x0800c4e9
 8009cc0:	3ff80000 	.word	0x3ff80000
 8009cc4:	0800c628 	.word	0x0800c628
 8009cc8:	0800c588 	.word	0x0800c588
 8009ccc:	0800c515 	.word	0x0800c515
 8009cd0:	0800c4e8 	.word	0x0800c4e8
 8009cd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009cd8:	6018      	str	r0, [r3, #0]
 8009cda:	9b07      	ldr	r3, [sp, #28]
 8009cdc:	2b0e      	cmp	r3, #14
 8009cde:	f200 80a4 	bhi.w	8009e2a <_dtoa_r+0x442>
 8009ce2:	2c00      	cmp	r4, #0
 8009ce4:	f000 80a1 	beq.w	8009e2a <_dtoa_r+0x442>
 8009ce8:	2f00      	cmp	r7, #0
 8009cea:	dd33      	ble.n	8009d54 <_dtoa_r+0x36c>
 8009cec:	4bad      	ldr	r3, [pc, #692]	@ (8009fa4 <_dtoa_r+0x5bc>)
 8009cee:	f007 020f 	and.w	r2, r7, #15
 8009cf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cf6:	ed93 7b00 	vldr	d7, [r3]
 8009cfa:	05f8      	lsls	r0, r7, #23
 8009cfc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009d00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009d04:	d516      	bpl.n	8009d34 <_dtoa_r+0x34c>
 8009d06:	4ba8      	ldr	r3, [pc, #672]	@ (8009fa8 <_dtoa_r+0x5c0>)
 8009d08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d10:	f7f6 fd9c 	bl	800084c <__aeabi_ddiv>
 8009d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d18:	f004 040f 	and.w	r4, r4, #15
 8009d1c:	2603      	movs	r6, #3
 8009d1e:	4da2      	ldr	r5, [pc, #648]	@ (8009fa8 <_dtoa_r+0x5c0>)
 8009d20:	b954      	cbnz	r4, 8009d38 <_dtoa_r+0x350>
 8009d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d2a:	f7f6 fd8f 	bl	800084c <__aeabi_ddiv>
 8009d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d32:	e028      	b.n	8009d86 <_dtoa_r+0x39e>
 8009d34:	2602      	movs	r6, #2
 8009d36:	e7f2      	b.n	8009d1e <_dtoa_r+0x336>
 8009d38:	07e1      	lsls	r1, r4, #31
 8009d3a:	d508      	bpl.n	8009d4e <_dtoa_r+0x366>
 8009d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d44:	f7f6 fc58 	bl	80005f8 <__aeabi_dmul>
 8009d48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d4c:	3601      	adds	r6, #1
 8009d4e:	1064      	asrs	r4, r4, #1
 8009d50:	3508      	adds	r5, #8
 8009d52:	e7e5      	b.n	8009d20 <_dtoa_r+0x338>
 8009d54:	f000 80d2 	beq.w	8009efc <_dtoa_r+0x514>
 8009d58:	427c      	negs	r4, r7
 8009d5a:	4b92      	ldr	r3, [pc, #584]	@ (8009fa4 <_dtoa_r+0x5bc>)
 8009d5c:	4d92      	ldr	r5, [pc, #584]	@ (8009fa8 <_dtoa_r+0x5c0>)
 8009d5e:	f004 020f 	and.w	r2, r4, #15
 8009d62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d6e:	f7f6 fc43 	bl	80005f8 <__aeabi_dmul>
 8009d72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d76:	1124      	asrs	r4, r4, #4
 8009d78:	2300      	movs	r3, #0
 8009d7a:	2602      	movs	r6, #2
 8009d7c:	2c00      	cmp	r4, #0
 8009d7e:	f040 80b2 	bne.w	8009ee6 <_dtoa_r+0x4fe>
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1d3      	bne.n	8009d2e <_dtoa_r+0x346>
 8009d86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d88:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f000 80b7 	beq.w	8009f00 <_dtoa_r+0x518>
 8009d92:	4b86      	ldr	r3, [pc, #536]	@ (8009fac <_dtoa_r+0x5c4>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	4620      	mov	r0, r4
 8009d98:	4629      	mov	r1, r5
 8009d9a:	f7f6 fe9f 	bl	8000adc <__aeabi_dcmplt>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	f000 80ae 	beq.w	8009f00 <_dtoa_r+0x518>
 8009da4:	9b07      	ldr	r3, [sp, #28]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 80aa 	beq.w	8009f00 <_dtoa_r+0x518>
 8009dac:	9b00      	ldr	r3, [sp, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	dd37      	ble.n	8009e22 <_dtoa_r+0x43a>
 8009db2:	1e7b      	subs	r3, r7, #1
 8009db4:	9304      	str	r3, [sp, #16]
 8009db6:	4620      	mov	r0, r4
 8009db8:	4b7d      	ldr	r3, [pc, #500]	@ (8009fb0 <_dtoa_r+0x5c8>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	f7f6 fc1b 	bl	80005f8 <__aeabi_dmul>
 8009dc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dc6:	9c00      	ldr	r4, [sp, #0]
 8009dc8:	3601      	adds	r6, #1
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f7f6 fbaa 	bl	8000524 <__aeabi_i2d>
 8009dd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dd4:	f7f6 fc10 	bl	80005f8 <__aeabi_dmul>
 8009dd8:	4b76      	ldr	r3, [pc, #472]	@ (8009fb4 <_dtoa_r+0x5cc>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f7f6 fa56 	bl	800028c <__adddf3>
 8009de0:	4605      	mov	r5, r0
 8009de2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009de6:	2c00      	cmp	r4, #0
 8009de8:	f040 808d 	bne.w	8009f06 <_dtoa_r+0x51e>
 8009dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009df0:	4b71      	ldr	r3, [pc, #452]	@ (8009fb8 <_dtoa_r+0x5d0>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	f7f6 fa48 	bl	8000288 <__aeabi_dsub>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e00:	462a      	mov	r2, r5
 8009e02:	4633      	mov	r3, r6
 8009e04:	f7f6 fe88 	bl	8000b18 <__aeabi_dcmpgt>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	f040 828b 	bne.w	800a324 <_dtoa_r+0x93c>
 8009e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e12:	462a      	mov	r2, r5
 8009e14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009e18:	f7f6 fe60 	bl	8000adc <__aeabi_dcmplt>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	f040 8128 	bne.w	800a072 <_dtoa_r+0x68a>
 8009e22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009e26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009e2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f2c0 815a 	blt.w	800a0e6 <_dtoa_r+0x6fe>
 8009e32:	2f0e      	cmp	r7, #14
 8009e34:	f300 8157 	bgt.w	800a0e6 <_dtoa_r+0x6fe>
 8009e38:	4b5a      	ldr	r3, [pc, #360]	@ (8009fa4 <_dtoa_r+0x5bc>)
 8009e3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e3e:	ed93 7b00 	vldr	d7, [r3]
 8009e42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	ed8d 7b00 	vstr	d7, [sp]
 8009e4a:	da03      	bge.n	8009e54 <_dtoa_r+0x46c>
 8009e4c:	9b07      	ldr	r3, [sp, #28]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f340 8101 	ble.w	800a056 <_dtoa_r+0x66e>
 8009e54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e58:	4656      	mov	r6, sl
 8009e5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e5e:	4620      	mov	r0, r4
 8009e60:	4629      	mov	r1, r5
 8009e62:	f7f6 fcf3 	bl	800084c <__aeabi_ddiv>
 8009e66:	f7f6 fe77 	bl	8000b58 <__aeabi_d2iz>
 8009e6a:	4680      	mov	r8, r0
 8009e6c:	f7f6 fb5a 	bl	8000524 <__aeabi_i2d>
 8009e70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e74:	f7f6 fbc0 	bl	80005f8 <__aeabi_dmul>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	4629      	mov	r1, r5
 8009e80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009e84:	f7f6 fa00 	bl	8000288 <__aeabi_dsub>
 8009e88:	f806 4b01 	strb.w	r4, [r6], #1
 8009e8c:	9d07      	ldr	r5, [sp, #28]
 8009e8e:	eba6 040a 	sub.w	r4, r6, sl
 8009e92:	42a5      	cmp	r5, r4
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	f040 8117 	bne.w	800a0ca <_dtoa_r+0x6e2>
 8009e9c:	f7f6 f9f6 	bl	800028c <__adddf3>
 8009ea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	460d      	mov	r5, r1
 8009ea8:	f7f6 fe36 	bl	8000b18 <__aeabi_dcmpgt>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	f040 80f9 	bne.w	800a0a4 <_dtoa_r+0x6bc>
 8009eb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	4629      	mov	r1, r5
 8009eba:	f7f6 fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ebe:	b118      	cbz	r0, 8009ec8 <_dtoa_r+0x4e0>
 8009ec0:	f018 0f01 	tst.w	r8, #1
 8009ec4:	f040 80ee 	bne.w	800a0a4 <_dtoa_r+0x6bc>
 8009ec8:	4649      	mov	r1, r9
 8009eca:	4658      	mov	r0, fp
 8009ecc:	f000 fc90 	bl	800a7f0 <_Bfree>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	7033      	strb	r3, [r6, #0]
 8009ed4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ed6:	3701      	adds	r7, #1
 8009ed8:	601f      	str	r7, [r3, #0]
 8009eda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f000 831d 	beq.w	800a51c <_dtoa_r+0xb34>
 8009ee2:	601e      	str	r6, [r3, #0]
 8009ee4:	e31a      	b.n	800a51c <_dtoa_r+0xb34>
 8009ee6:	07e2      	lsls	r2, r4, #31
 8009ee8:	d505      	bpl.n	8009ef6 <_dtoa_r+0x50e>
 8009eea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009eee:	f7f6 fb83 	bl	80005f8 <__aeabi_dmul>
 8009ef2:	3601      	adds	r6, #1
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	1064      	asrs	r4, r4, #1
 8009ef8:	3508      	adds	r5, #8
 8009efa:	e73f      	b.n	8009d7c <_dtoa_r+0x394>
 8009efc:	2602      	movs	r6, #2
 8009efe:	e742      	b.n	8009d86 <_dtoa_r+0x39e>
 8009f00:	9c07      	ldr	r4, [sp, #28]
 8009f02:	9704      	str	r7, [sp, #16]
 8009f04:	e761      	b.n	8009dca <_dtoa_r+0x3e2>
 8009f06:	4b27      	ldr	r3, [pc, #156]	@ (8009fa4 <_dtoa_r+0x5bc>)
 8009f08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f12:	4454      	add	r4, sl
 8009f14:	2900      	cmp	r1, #0
 8009f16:	d053      	beq.n	8009fc0 <_dtoa_r+0x5d8>
 8009f18:	4928      	ldr	r1, [pc, #160]	@ (8009fbc <_dtoa_r+0x5d4>)
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	f7f6 fc96 	bl	800084c <__aeabi_ddiv>
 8009f20:	4633      	mov	r3, r6
 8009f22:	462a      	mov	r2, r5
 8009f24:	f7f6 f9b0 	bl	8000288 <__aeabi_dsub>
 8009f28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f2c:	4656      	mov	r6, sl
 8009f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f32:	f7f6 fe11 	bl	8000b58 <__aeabi_d2iz>
 8009f36:	4605      	mov	r5, r0
 8009f38:	f7f6 faf4 	bl	8000524 <__aeabi_i2d>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f44:	f7f6 f9a0 	bl	8000288 <__aeabi_dsub>
 8009f48:	3530      	adds	r5, #48	@ 0x30
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f52:	f806 5b01 	strb.w	r5, [r6], #1
 8009f56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f5a:	f7f6 fdbf 	bl	8000adc <__aeabi_dcmplt>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d171      	bne.n	800a046 <_dtoa_r+0x65e>
 8009f62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f66:	4911      	ldr	r1, [pc, #68]	@ (8009fac <_dtoa_r+0x5c4>)
 8009f68:	2000      	movs	r0, #0
 8009f6a:	f7f6 f98d 	bl	8000288 <__aeabi_dsub>
 8009f6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f72:	f7f6 fdb3 	bl	8000adc <__aeabi_dcmplt>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	f040 8095 	bne.w	800a0a6 <_dtoa_r+0x6be>
 8009f7c:	42a6      	cmp	r6, r4
 8009f7e:	f43f af50 	beq.w	8009e22 <_dtoa_r+0x43a>
 8009f82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f86:	4b0a      	ldr	r3, [pc, #40]	@ (8009fb0 <_dtoa_r+0x5c8>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f7f6 fb35 	bl	80005f8 <__aeabi_dmul>
 8009f8e:	4b08      	ldr	r3, [pc, #32]	@ (8009fb0 <_dtoa_r+0x5c8>)
 8009f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f94:	2200      	movs	r2, #0
 8009f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f9a:	f7f6 fb2d 	bl	80005f8 <__aeabi_dmul>
 8009f9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fa2:	e7c4      	b.n	8009f2e <_dtoa_r+0x546>
 8009fa4:	0800c628 	.word	0x0800c628
 8009fa8:	0800c600 	.word	0x0800c600
 8009fac:	3ff00000 	.word	0x3ff00000
 8009fb0:	40240000 	.word	0x40240000
 8009fb4:	401c0000 	.word	0x401c0000
 8009fb8:	40140000 	.word	0x40140000
 8009fbc:	3fe00000 	.word	0x3fe00000
 8009fc0:	4631      	mov	r1, r6
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	f7f6 fb18 	bl	80005f8 <__aeabi_dmul>
 8009fc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009fcc:	9415      	str	r4, [sp, #84]	@ 0x54
 8009fce:	4656      	mov	r6, sl
 8009fd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fd4:	f7f6 fdc0 	bl	8000b58 <__aeabi_d2iz>
 8009fd8:	4605      	mov	r5, r0
 8009fda:	f7f6 faa3 	bl	8000524 <__aeabi_i2d>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fe6:	f7f6 f94f 	bl	8000288 <__aeabi_dsub>
 8009fea:	3530      	adds	r5, #48	@ 0x30
 8009fec:	f806 5b01 	strb.w	r5, [r6], #1
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	42a6      	cmp	r6, r4
 8009ff6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ffa:	f04f 0200 	mov.w	r2, #0
 8009ffe:	d124      	bne.n	800a04a <_dtoa_r+0x662>
 800a000:	4bac      	ldr	r3, [pc, #688]	@ (800a2b4 <_dtoa_r+0x8cc>)
 800a002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a006:	f7f6 f941 	bl	800028c <__adddf3>
 800a00a:	4602      	mov	r2, r0
 800a00c:	460b      	mov	r3, r1
 800a00e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a012:	f7f6 fd81 	bl	8000b18 <__aeabi_dcmpgt>
 800a016:	2800      	cmp	r0, #0
 800a018:	d145      	bne.n	800a0a6 <_dtoa_r+0x6be>
 800a01a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a01e:	49a5      	ldr	r1, [pc, #660]	@ (800a2b4 <_dtoa_r+0x8cc>)
 800a020:	2000      	movs	r0, #0
 800a022:	f7f6 f931 	bl	8000288 <__aeabi_dsub>
 800a026:	4602      	mov	r2, r0
 800a028:	460b      	mov	r3, r1
 800a02a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a02e:	f7f6 fd55 	bl	8000adc <__aeabi_dcmplt>
 800a032:	2800      	cmp	r0, #0
 800a034:	f43f aef5 	beq.w	8009e22 <_dtoa_r+0x43a>
 800a038:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a03a:	1e73      	subs	r3, r6, #1
 800a03c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a03e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a042:	2b30      	cmp	r3, #48	@ 0x30
 800a044:	d0f8      	beq.n	800a038 <_dtoa_r+0x650>
 800a046:	9f04      	ldr	r7, [sp, #16]
 800a048:	e73e      	b.n	8009ec8 <_dtoa_r+0x4e0>
 800a04a:	4b9b      	ldr	r3, [pc, #620]	@ (800a2b8 <_dtoa_r+0x8d0>)
 800a04c:	f7f6 fad4 	bl	80005f8 <__aeabi_dmul>
 800a050:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a054:	e7bc      	b.n	8009fd0 <_dtoa_r+0x5e8>
 800a056:	d10c      	bne.n	800a072 <_dtoa_r+0x68a>
 800a058:	4b98      	ldr	r3, [pc, #608]	@ (800a2bc <_dtoa_r+0x8d4>)
 800a05a:	2200      	movs	r2, #0
 800a05c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a060:	f7f6 faca 	bl	80005f8 <__aeabi_dmul>
 800a064:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a068:	f7f6 fd4c 	bl	8000b04 <__aeabi_dcmpge>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	f000 8157 	beq.w	800a320 <_dtoa_r+0x938>
 800a072:	2400      	movs	r4, #0
 800a074:	4625      	mov	r5, r4
 800a076:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a078:	43db      	mvns	r3, r3
 800a07a:	9304      	str	r3, [sp, #16]
 800a07c:	4656      	mov	r6, sl
 800a07e:	2700      	movs	r7, #0
 800a080:	4621      	mov	r1, r4
 800a082:	4658      	mov	r0, fp
 800a084:	f000 fbb4 	bl	800a7f0 <_Bfree>
 800a088:	2d00      	cmp	r5, #0
 800a08a:	d0dc      	beq.n	800a046 <_dtoa_r+0x65e>
 800a08c:	b12f      	cbz	r7, 800a09a <_dtoa_r+0x6b2>
 800a08e:	42af      	cmp	r7, r5
 800a090:	d003      	beq.n	800a09a <_dtoa_r+0x6b2>
 800a092:	4639      	mov	r1, r7
 800a094:	4658      	mov	r0, fp
 800a096:	f000 fbab 	bl	800a7f0 <_Bfree>
 800a09a:	4629      	mov	r1, r5
 800a09c:	4658      	mov	r0, fp
 800a09e:	f000 fba7 	bl	800a7f0 <_Bfree>
 800a0a2:	e7d0      	b.n	800a046 <_dtoa_r+0x65e>
 800a0a4:	9704      	str	r7, [sp, #16]
 800a0a6:	4633      	mov	r3, r6
 800a0a8:	461e      	mov	r6, r3
 800a0aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0ae:	2a39      	cmp	r2, #57	@ 0x39
 800a0b0:	d107      	bne.n	800a0c2 <_dtoa_r+0x6da>
 800a0b2:	459a      	cmp	sl, r3
 800a0b4:	d1f8      	bne.n	800a0a8 <_dtoa_r+0x6c0>
 800a0b6:	9a04      	ldr	r2, [sp, #16]
 800a0b8:	3201      	adds	r2, #1
 800a0ba:	9204      	str	r2, [sp, #16]
 800a0bc:	2230      	movs	r2, #48	@ 0x30
 800a0be:	f88a 2000 	strb.w	r2, [sl]
 800a0c2:	781a      	ldrb	r2, [r3, #0]
 800a0c4:	3201      	adds	r2, #1
 800a0c6:	701a      	strb	r2, [r3, #0]
 800a0c8:	e7bd      	b.n	800a046 <_dtoa_r+0x65e>
 800a0ca:	4b7b      	ldr	r3, [pc, #492]	@ (800a2b8 <_dtoa_r+0x8d0>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f7f6 fa93 	bl	80005f8 <__aeabi_dmul>
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	460d      	mov	r5, r1
 800a0da:	f7f6 fcf5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	f43f aebb 	beq.w	8009e5a <_dtoa_r+0x472>
 800a0e4:	e6f0      	b.n	8009ec8 <_dtoa_r+0x4e0>
 800a0e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a0e8:	2a00      	cmp	r2, #0
 800a0ea:	f000 80db 	beq.w	800a2a4 <_dtoa_r+0x8bc>
 800a0ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0f0:	2a01      	cmp	r2, #1
 800a0f2:	f300 80bf 	bgt.w	800a274 <_dtoa_r+0x88c>
 800a0f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a0f8:	2a00      	cmp	r2, #0
 800a0fa:	f000 80b7 	beq.w	800a26c <_dtoa_r+0x884>
 800a0fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a102:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a104:	4646      	mov	r6, r8
 800a106:	9a08      	ldr	r2, [sp, #32]
 800a108:	2101      	movs	r1, #1
 800a10a:	441a      	add	r2, r3
 800a10c:	4658      	mov	r0, fp
 800a10e:	4498      	add	r8, r3
 800a110:	9208      	str	r2, [sp, #32]
 800a112:	f000 fc21 	bl	800a958 <__i2b>
 800a116:	4605      	mov	r5, r0
 800a118:	b15e      	cbz	r6, 800a132 <_dtoa_r+0x74a>
 800a11a:	9b08      	ldr	r3, [sp, #32]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	dd08      	ble.n	800a132 <_dtoa_r+0x74a>
 800a120:	42b3      	cmp	r3, r6
 800a122:	9a08      	ldr	r2, [sp, #32]
 800a124:	bfa8      	it	ge
 800a126:	4633      	movge	r3, r6
 800a128:	eba8 0803 	sub.w	r8, r8, r3
 800a12c:	1af6      	subs	r6, r6, r3
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	9308      	str	r3, [sp, #32]
 800a132:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a134:	b1f3      	cbz	r3, 800a174 <_dtoa_r+0x78c>
 800a136:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 80b7 	beq.w	800a2ac <_dtoa_r+0x8c4>
 800a13e:	b18c      	cbz	r4, 800a164 <_dtoa_r+0x77c>
 800a140:	4629      	mov	r1, r5
 800a142:	4622      	mov	r2, r4
 800a144:	4658      	mov	r0, fp
 800a146:	f000 fcc7 	bl	800aad8 <__pow5mult>
 800a14a:	464a      	mov	r2, r9
 800a14c:	4601      	mov	r1, r0
 800a14e:	4605      	mov	r5, r0
 800a150:	4658      	mov	r0, fp
 800a152:	f000 fc17 	bl	800a984 <__multiply>
 800a156:	4649      	mov	r1, r9
 800a158:	9004      	str	r0, [sp, #16]
 800a15a:	4658      	mov	r0, fp
 800a15c:	f000 fb48 	bl	800a7f0 <_Bfree>
 800a160:	9b04      	ldr	r3, [sp, #16]
 800a162:	4699      	mov	r9, r3
 800a164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a166:	1b1a      	subs	r2, r3, r4
 800a168:	d004      	beq.n	800a174 <_dtoa_r+0x78c>
 800a16a:	4649      	mov	r1, r9
 800a16c:	4658      	mov	r0, fp
 800a16e:	f000 fcb3 	bl	800aad8 <__pow5mult>
 800a172:	4681      	mov	r9, r0
 800a174:	2101      	movs	r1, #1
 800a176:	4658      	mov	r0, fp
 800a178:	f000 fbee 	bl	800a958 <__i2b>
 800a17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a17e:	4604      	mov	r4, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 81cf 	beq.w	800a524 <_dtoa_r+0xb3c>
 800a186:	461a      	mov	r2, r3
 800a188:	4601      	mov	r1, r0
 800a18a:	4658      	mov	r0, fp
 800a18c:	f000 fca4 	bl	800aad8 <__pow5mult>
 800a190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a192:	2b01      	cmp	r3, #1
 800a194:	4604      	mov	r4, r0
 800a196:	f300 8095 	bgt.w	800a2c4 <_dtoa_r+0x8dc>
 800a19a:	9b02      	ldr	r3, [sp, #8]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f040 8087 	bne.w	800a2b0 <_dtoa_r+0x8c8>
 800a1a2:	9b03      	ldr	r3, [sp, #12]
 800a1a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f040 8089 	bne.w	800a2c0 <_dtoa_r+0x8d8>
 800a1ae:	9b03      	ldr	r3, [sp, #12]
 800a1b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1b4:	0d1b      	lsrs	r3, r3, #20
 800a1b6:	051b      	lsls	r3, r3, #20
 800a1b8:	b12b      	cbz	r3, 800a1c6 <_dtoa_r+0x7de>
 800a1ba:	9b08      	ldr	r3, [sp, #32]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	9308      	str	r3, [sp, #32]
 800a1c0:	f108 0801 	add.w	r8, r8, #1
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	f000 81b0 	beq.w	800a530 <_dtoa_r+0xb48>
 800a1d0:	6923      	ldr	r3, [r4, #16]
 800a1d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1d6:	6918      	ldr	r0, [r3, #16]
 800a1d8:	f000 fb72 	bl	800a8c0 <__hi0bits>
 800a1dc:	f1c0 0020 	rsb	r0, r0, #32
 800a1e0:	9b08      	ldr	r3, [sp, #32]
 800a1e2:	4418      	add	r0, r3
 800a1e4:	f010 001f 	ands.w	r0, r0, #31
 800a1e8:	d077      	beq.n	800a2da <_dtoa_r+0x8f2>
 800a1ea:	f1c0 0320 	rsb	r3, r0, #32
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	dd6b      	ble.n	800a2ca <_dtoa_r+0x8e2>
 800a1f2:	9b08      	ldr	r3, [sp, #32]
 800a1f4:	f1c0 001c 	rsb	r0, r0, #28
 800a1f8:	4403      	add	r3, r0
 800a1fa:	4480      	add	r8, r0
 800a1fc:	4406      	add	r6, r0
 800a1fe:	9308      	str	r3, [sp, #32]
 800a200:	f1b8 0f00 	cmp.w	r8, #0
 800a204:	dd05      	ble.n	800a212 <_dtoa_r+0x82a>
 800a206:	4649      	mov	r1, r9
 800a208:	4642      	mov	r2, r8
 800a20a:	4658      	mov	r0, fp
 800a20c:	f000 fcbe 	bl	800ab8c <__lshift>
 800a210:	4681      	mov	r9, r0
 800a212:	9b08      	ldr	r3, [sp, #32]
 800a214:	2b00      	cmp	r3, #0
 800a216:	dd05      	ble.n	800a224 <_dtoa_r+0x83c>
 800a218:	4621      	mov	r1, r4
 800a21a:	461a      	mov	r2, r3
 800a21c:	4658      	mov	r0, fp
 800a21e:	f000 fcb5 	bl	800ab8c <__lshift>
 800a222:	4604      	mov	r4, r0
 800a224:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a226:	2b00      	cmp	r3, #0
 800a228:	d059      	beq.n	800a2de <_dtoa_r+0x8f6>
 800a22a:	4621      	mov	r1, r4
 800a22c:	4648      	mov	r0, r9
 800a22e:	f000 fd19 	bl	800ac64 <__mcmp>
 800a232:	2800      	cmp	r0, #0
 800a234:	da53      	bge.n	800a2de <_dtoa_r+0x8f6>
 800a236:	1e7b      	subs	r3, r7, #1
 800a238:	9304      	str	r3, [sp, #16]
 800a23a:	4649      	mov	r1, r9
 800a23c:	2300      	movs	r3, #0
 800a23e:	220a      	movs	r2, #10
 800a240:	4658      	mov	r0, fp
 800a242:	f000 faf7 	bl	800a834 <__multadd>
 800a246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a248:	4681      	mov	r9, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f000 8172 	beq.w	800a534 <_dtoa_r+0xb4c>
 800a250:	2300      	movs	r3, #0
 800a252:	4629      	mov	r1, r5
 800a254:	220a      	movs	r2, #10
 800a256:	4658      	mov	r0, fp
 800a258:	f000 faec 	bl	800a834 <__multadd>
 800a25c:	9b00      	ldr	r3, [sp, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	4605      	mov	r5, r0
 800a262:	dc67      	bgt.n	800a334 <_dtoa_r+0x94c>
 800a264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a266:	2b02      	cmp	r3, #2
 800a268:	dc41      	bgt.n	800a2ee <_dtoa_r+0x906>
 800a26a:	e063      	b.n	800a334 <_dtoa_r+0x94c>
 800a26c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a26e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a272:	e746      	b.n	800a102 <_dtoa_r+0x71a>
 800a274:	9b07      	ldr	r3, [sp, #28]
 800a276:	1e5c      	subs	r4, r3, #1
 800a278:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a27a:	42a3      	cmp	r3, r4
 800a27c:	bfbf      	itttt	lt
 800a27e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a280:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a282:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a284:	1ae3      	sublt	r3, r4, r3
 800a286:	bfb4      	ite	lt
 800a288:	18d2      	addlt	r2, r2, r3
 800a28a:	1b1c      	subge	r4, r3, r4
 800a28c:	9b07      	ldr	r3, [sp, #28]
 800a28e:	bfbc      	itt	lt
 800a290:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a292:	2400      	movlt	r4, #0
 800a294:	2b00      	cmp	r3, #0
 800a296:	bfb5      	itete	lt
 800a298:	eba8 0603 	sublt.w	r6, r8, r3
 800a29c:	9b07      	ldrge	r3, [sp, #28]
 800a29e:	2300      	movlt	r3, #0
 800a2a0:	4646      	movge	r6, r8
 800a2a2:	e730      	b.n	800a106 <_dtoa_r+0x71e>
 800a2a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a2a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a2a8:	4646      	mov	r6, r8
 800a2aa:	e735      	b.n	800a118 <_dtoa_r+0x730>
 800a2ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2ae:	e75c      	b.n	800a16a <_dtoa_r+0x782>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	e788      	b.n	800a1c6 <_dtoa_r+0x7de>
 800a2b4:	3fe00000 	.word	0x3fe00000
 800a2b8:	40240000 	.word	0x40240000
 800a2bc:	40140000 	.word	0x40140000
 800a2c0:	9b02      	ldr	r3, [sp, #8]
 800a2c2:	e780      	b.n	800a1c6 <_dtoa_r+0x7de>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2c8:	e782      	b.n	800a1d0 <_dtoa_r+0x7e8>
 800a2ca:	d099      	beq.n	800a200 <_dtoa_r+0x818>
 800a2cc:	9a08      	ldr	r2, [sp, #32]
 800a2ce:	331c      	adds	r3, #28
 800a2d0:	441a      	add	r2, r3
 800a2d2:	4498      	add	r8, r3
 800a2d4:	441e      	add	r6, r3
 800a2d6:	9208      	str	r2, [sp, #32]
 800a2d8:	e792      	b.n	800a200 <_dtoa_r+0x818>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	e7f6      	b.n	800a2cc <_dtoa_r+0x8e4>
 800a2de:	9b07      	ldr	r3, [sp, #28]
 800a2e0:	9704      	str	r7, [sp, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	dc20      	bgt.n	800a328 <_dtoa_r+0x940>
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	dd1e      	ble.n	800a32c <_dtoa_r+0x944>
 800a2ee:	9b00      	ldr	r3, [sp, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f47f aec0 	bne.w	800a076 <_dtoa_r+0x68e>
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	2205      	movs	r2, #5
 800a2fa:	4658      	mov	r0, fp
 800a2fc:	f000 fa9a 	bl	800a834 <__multadd>
 800a300:	4601      	mov	r1, r0
 800a302:	4604      	mov	r4, r0
 800a304:	4648      	mov	r0, r9
 800a306:	f000 fcad 	bl	800ac64 <__mcmp>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	f77f aeb3 	ble.w	800a076 <_dtoa_r+0x68e>
 800a310:	4656      	mov	r6, sl
 800a312:	2331      	movs	r3, #49	@ 0x31
 800a314:	f806 3b01 	strb.w	r3, [r6], #1
 800a318:	9b04      	ldr	r3, [sp, #16]
 800a31a:	3301      	adds	r3, #1
 800a31c:	9304      	str	r3, [sp, #16]
 800a31e:	e6ae      	b.n	800a07e <_dtoa_r+0x696>
 800a320:	9c07      	ldr	r4, [sp, #28]
 800a322:	9704      	str	r7, [sp, #16]
 800a324:	4625      	mov	r5, r4
 800a326:	e7f3      	b.n	800a310 <_dtoa_r+0x928>
 800a328:	9b07      	ldr	r3, [sp, #28]
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f000 8104 	beq.w	800a53c <_dtoa_r+0xb54>
 800a334:	2e00      	cmp	r6, #0
 800a336:	dd05      	ble.n	800a344 <_dtoa_r+0x95c>
 800a338:	4629      	mov	r1, r5
 800a33a:	4632      	mov	r2, r6
 800a33c:	4658      	mov	r0, fp
 800a33e:	f000 fc25 	bl	800ab8c <__lshift>
 800a342:	4605      	mov	r5, r0
 800a344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a346:	2b00      	cmp	r3, #0
 800a348:	d05a      	beq.n	800a400 <_dtoa_r+0xa18>
 800a34a:	6869      	ldr	r1, [r5, #4]
 800a34c:	4658      	mov	r0, fp
 800a34e:	f000 fa0f 	bl	800a770 <_Balloc>
 800a352:	4606      	mov	r6, r0
 800a354:	b928      	cbnz	r0, 800a362 <_dtoa_r+0x97a>
 800a356:	4b84      	ldr	r3, [pc, #528]	@ (800a568 <_dtoa_r+0xb80>)
 800a358:	4602      	mov	r2, r0
 800a35a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a35e:	f7ff bb5a 	b.w	8009a16 <_dtoa_r+0x2e>
 800a362:	692a      	ldr	r2, [r5, #16]
 800a364:	3202      	adds	r2, #2
 800a366:	0092      	lsls	r2, r2, #2
 800a368:	f105 010c 	add.w	r1, r5, #12
 800a36c:	300c      	adds	r0, #12
 800a36e:	f7ff faa2 	bl	80098b6 <memcpy>
 800a372:	2201      	movs	r2, #1
 800a374:	4631      	mov	r1, r6
 800a376:	4658      	mov	r0, fp
 800a378:	f000 fc08 	bl	800ab8c <__lshift>
 800a37c:	f10a 0301 	add.w	r3, sl, #1
 800a380:	9307      	str	r3, [sp, #28]
 800a382:	9b00      	ldr	r3, [sp, #0]
 800a384:	4453      	add	r3, sl
 800a386:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a388:	9b02      	ldr	r3, [sp, #8]
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	462f      	mov	r7, r5
 800a390:	930a      	str	r3, [sp, #40]	@ 0x28
 800a392:	4605      	mov	r5, r0
 800a394:	9b07      	ldr	r3, [sp, #28]
 800a396:	4621      	mov	r1, r4
 800a398:	3b01      	subs	r3, #1
 800a39a:	4648      	mov	r0, r9
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	f7ff fa98 	bl	80098d2 <quorem>
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	9002      	str	r0, [sp, #8]
 800a3a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a3aa:	4648      	mov	r0, r9
 800a3ac:	f000 fc5a 	bl	800ac64 <__mcmp>
 800a3b0:	462a      	mov	r2, r5
 800a3b2:	9008      	str	r0, [sp, #32]
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	4658      	mov	r0, fp
 800a3b8:	f000 fc70 	bl	800ac9c <__mdiff>
 800a3bc:	68c2      	ldr	r2, [r0, #12]
 800a3be:	4606      	mov	r6, r0
 800a3c0:	bb02      	cbnz	r2, 800a404 <_dtoa_r+0xa1c>
 800a3c2:	4601      	mov	r1, r0
 800a3c4:	4648      	mov	r0, r9
 800a3c6:	f000 fc4d 	bl	800ac64 <__mcmp>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	4631      	mov	r1, r6
 800a3ce:	4658      	mov	r0, fp
 800a3d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3d2:	f000 fa0d 	bl	800a7f0 <_Bfree>
 800a3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3da:	9e07      	ldr	r6, [sp, #28]
 800a3dc:	ea43 0102 	orr.w	r1, r3, r2
 800a3e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3e2:	4319      	orrs	r1, r3
 800a3e4:	d110      	bne.n	800a408 <_dtoa_r+0xa20>
 800a3e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3ea:	d029      	beq.n	800a440 <_dtoa_r+0xa58>
 800a3ec:	9b08      	ldr	r3, [sp, #32]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	dd02      	ble.n	800a3f8 <_dtoa_r+0xa10>
 800a3f2:	9b02      	ldr	r3, [sp, #8]
 800a3f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a3f8:	9b00      	ldr	r3, [sp, #0]
 800a3fa:	f883 8000 	strb.w	r8, [r3]
 800a3fe:	e63f      	b.n	800a080 <_dtoa_r+0x698>
 800a400:	4628      	mov	r0, r5
 800a402:	e7bb      	b.n	800a37c <_dtoa_r+0x994>
 800a404:	2201      	movs	r2, #1
 800a406:	e7e1      	b.n	800a3cc <_dtoa_r+0x9e4>
 800a408:	9b08      	ldr	r3, [sp, #32]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	db04      	blt.n	800a418 <_dtoa_r+0xa30>
 800a40e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a410:	430b      	orrs	r3, r1
 800a412:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a414:	430b      	orrs	r3, r1
 800a416:	d120      	bne.n	800a45a <_dtoa_r+0xa72>
 800a418:	2a00      	cmp	r2, #0
 800a41a:	dded      	ble.n	800a3f8 <_dtoa_r+0xa10>
 800a41c:	4649      	mov	r1, r9
 800a41e:	2201      	movs	r2, #1
 800a420:	4658      	mov	r0, fp
 800a422:	f000 fbb3 	bl	800ab8c <__lshift>
 800a426:	4621      	mov	r1, r4
 800a428:	4681      	mov	r9, r0
 800a42a:	f000 fc1b 	bl	800ac64 <__mcmp>
 800a42e:	2800      	cmp	r0, #0
 800a430:	dc03      	bgt.n	800a43a <_dtoa_r+0xa52>
 800a432:	d1e1      	bne.n	800a3f8 <_dtoa_r+0xa10>
 800a434:	f018 0f01 	tst.w	r8, #1
 800a438:	d0de      	beq.n	800a3f8 <_dtoa_r+0xa10>
 800a43a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a43e:	d1d8      	bne.n	800a3f2 <_dtoa_r+0xa0a>
 800a440:	9a00      	ldr	r2, [sp, #0]
 800a442:	2339      	movs	r3, #57	@ 0x39
 800a444:	7013      	strb	r3, [r2, #0]
 800a446:	4633      	mov	r3, r6
 800a448:	461e      	mov	r6, r3
 800a44a:	3b01      	subs	r3, #1
 800a44c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a450:	2a39      	cmp	r2, #57	@ 0x39
 800a452:	d052      	beq.n	800a4fa <_dtoa_r+0xb12>
 800a454:	3201      	adds	r2, #1
 800a456:	701a      	strb	r2, [r3, #0]
 800a458:	e612      	b.n	800a080 <_dtoa_r+0x698>
 800a45a:	2a00      	cmp	r2, #0
 800a45c:	dd07      	ble.n	800a46e <_dtoa_r+0xa86>
 800a45e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a462:	d0ed      	beq.n	800a440 <_dtoa_r+0xa58>
 800a464:	9a00      	ldr	r2, [sp, #0]
 800a466:	f108 0301 	add.w	r3, r8, #1
 800a46a:	7013      	strb	r3, [r2, #0]
 800a46c:	e608      	b.n	800a080 <_dtoa_r+0x698>
 800a46e:	9b07      	ldr	r3, [sp, #28]
 800a470:	9a07      	ldr	r2, [sp, #28]
 800a472:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a478:	4293      	cmp	r3, r2
 800a47a:	d028      	beq.n	800a4ce <_dtoa_r+0xae6>
 800a47c:	4649      	mov	r1, r9
 800a47e:	2300      	movs	r3, #0
 800a480:	220a      	movs	r2, #10
 800a482:	4658      	mov	r0, fp
 800a484:	f000 f9d6 	bl	800a834 <__multadd>
 800a488:	42af      	cmp	r7, r5
 800a48a:	4681      	mov	r9, r0
 800a48c:	f04f 0300 	mov.w	r3, #0
 800a490:	f04f 020a 	mov.w	r2, #10
 800a494:	4639      	mov	r1, r7
 800a496:	4658      	mov	r0, fp
 800a498:	d107      	bne.n	800a4aa <_dtoa_r+0xac2>
 800a49a:	f000 f9cb 	bl	800a834 <__multadd>
 800a49e:	4607      	mov	r7, r0
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	9b07      	ldr	r3, [sp, #28]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	9307      	str	r3, [sp, #28]
 800a4a8:	e774      	b.n	800a394 <_dtoa_r+0x9ac>
 800a4aa:	f000 f9c3 	bl	800a834 <__multadd>
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	4607      	mov	r7, r0
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	220a      	movs	r2, #10
 800a4b6:	4658      	mov	r0, fp
 800a4b8:	f000 f9bc 	bl	800a834 <__multadd>
 800a4bc:	4605      	mov	r5, r0
 800a4be:	e7f0      	b.n	800a4a2 <_dtoa_r+0xaba>
 800a4c0:	9b00      	ldr	r3, [sp, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	bfcc      	ite	gt
 800a4c6:	461e      	movgt	r6, r3
 800a4c8:	2601      	movle	r6, #1
 800a4ca:	4456      	add	r6, sl
 800a4cc:	2700      	movs	r7, #0
 800a4ce:	4649      	mov	r1, r9
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	4658      	mov	r0, fp
 800a4d4:	f000 fb5a 	bl	800ab8c <__lshift>
 800a4d8:	4621      	mov	r1, r4
 800a4da:	4681      	mov	r9, r0
 800a4dc:	f000 fbc2 	bl	800ac64 <__mcmp>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	dcb0      	bgt.n	800a446 <_dtoa_r+0xa5e>
 800a4e4:	d102      	bne.n	800a4ec <_dtoa_r+0xb04>
 800a4e6:	f018 0f01 	tst.w	r8, #1
 800a4ea:	d1ac      	bne.n	800a446 <_dtoa_r+0xa5e>
 800a4ec:	4633      	mov	r3, r6
 800a4ee:	461e      	mov	r6, r3
 800a4f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4f4:	2a30      	cmp	r2, #48	@ 0x30
 800a4f6:	d0fa      	beq.n	800a4ee <_dtoa_r+0xb06>
 800a4f8:	e5c2      	b.n	800a080 <_dtoa_r+0x698>
 800a4fa:	459a      	cmp	sl, r3
 800a4fc:	d1a4      	bne.n	800a448 <_dtoa_r+0xa60>
 800a4fe:	9b04      	ldr	r3, [sp, #16]
 800a500:	3301      	adds	r3, #1
 800a502:	9304      	str	r3, [sp, #16]
 800a504:	2331      	movs	r3, #49	@ 0x31
 800a506:	f88a 3000 	strb.w	r3, [sl]
 800a50a:	e5b9      	b.n	800a080 <_dtoa_r+0x698>
 800a50c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a50e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a56c <_dtoa_r+0xb84>
 800a512:	b11b      	cbz	r3, 800a51c <_dtoa_r+0xb34>
 800a514:	f10a 0308 	add.w	r3, sl, #8
 800a518:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a51a:	6013      	str	r3, [r2, #0]
 800a51c:	4650      	mov	r0, sl
 800a51e:	b019      	add	sp, #100	@ 0x64
 800a520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a526:	2b01      	cmp	r3, #1
 800a528:	f77f ae37 	ble.w	800a19a <_dtoa_r+0x7b2>
 800a52c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a52e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a530:	2001      	movs	r0, #1
 800a532:	e655      	b.n	800a1e0 <_dtoa_r+0x7f8>
 800a534:	9b00      	ldr	r3, [sp, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	f77f aed6 	ble.w	800a2e8 <_dtoa_r+0x900>
 800a53c:	4656      	mov	r6, sl
 800a53e:	4621      	mov	r1, r4
 800a540:	4648      	mov	r0, r9
 800a542:	f7ff f9c6 	bl	80098d2 <quorem>
 800a546:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a54a:	f806 8b01 	strb.w	r8, [r6], #1
 800a54e:	9b00      	ldr	r3, [sp, #0]
 800a550:	eba6 020a 	sub.w	r2, r6, sl
 800a554:	4293      	cmp	r3, r2
 800a556:	ddb3      	ble.n	800a4c0 <_dtoa_r+0xad8>
 800a558:	4649      	mov	r1, r9
 800a55a:	2300      	movs	r3, #0
 800a55c:	220a      	movs	r2, #10
 800a55e:	4658      	mov	r0, fp
 800a560:	f000 f968 	bl	800a834 <__multadd>
 800a564:	4681      	mov	r9, r0
 800a566:	e7ea      	b.n	800a53e <_dtoa_r+0xb56>
 800a568:	0800c588 	.word	0x0800c588
 800a56c:	0800c50c 	.word	0x0800c50c

0800a570 <_free_r>:
 800a570:	b538      	push	{r3, r4, r5, lr}
 800a572:	4605      	mov	r5, r0
 800a574:	2900      	cmp	r1, #0
 800a576:	d041      	beq.n	800a5fc <_free_r+0x8c>
 800a578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a57c:	1f0c      	subs	r4, r1, #4
 800a57e:	2b00      	cmp	r3, #0
 800a580:	bfb8      	it	lt
 800a582:	18e4      	addlt	r4, r4, r3
 800a584:	f000 f8e8 	bl	800a758 <__malloc_lock>
 800a588:	4a1d      	ldr	r2, [pc, #116]	@ (800a600 <_free_r+0x90>)
 800a58a:	6813      	ldr	r3, [r2, #0]
 800a58c:	b933      	cbnz	r3, 800a59c <_free_r+0x2c>
 800a58e:	6063      	str	r3, [r4, #4]
 800a590:	6014      	str	r4, [r2, #0]
 800a592:	4628      	mov	r0, r5
 800a594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a598:	f000 b8e4 	b.w	800a764 <__malloc_unlock>
 800a59c:	42a3      	cmp	r3, r4
 800a59e:	d908      	bls.n	800a5b2 <_free_r+0x42>
 800a5a0:	6820      	ldr	r0, [r4, #0]
 800a5a2:	1821      	adds	r1, r4, r0
 800a5a4:	428b      	cmp	r3, r1
 800a5a6:	bf01      	itttt	eq
 800a5a8:	6819      	ldreq	r1, [r3, #0]
 800a5aa:	685b      	ldreq	r3, [r3, #4]
 800a5ac:	1809      	addeq	r1, r1, r0
 800a5ae:	6021      	streq	r1, [r4, #0]
 800a5b0:	e7ed      	b.n	800a58e <_free_r+0x1e>
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	b10b      	cbz	r3, 800a5bc <_free_r+0x4c>
 800a5b8:	42a3      	cmp	r3, r4
 800a5ba:	d9fa      	bls.n	800a5b2 <_free_r+0x42>
 800a5bc:	6811      	ldr	r1, [r2, #0]
 800a5be:	1850      	adds	r0, r2, r1
 800a5c0:	42a0      	cmp	r0, r4
 800a5c2:	d10b      	bne.n	800a5dc <_free_r+0x6c>
 800a5c4:	6820      	ldr	r0, [r4, #0]
 800a5c6:	4401      	add	r1, r0
 800a5c8:	1850      	adds	r0, r2, r1
 800a5ca:	4283      	cmp	r3, r0
 800a5cc:	6011      	str	r1, [r2, #0]
 800a5ce:	d1e0      	bne.n	800a592 <_free_r+0x22>
 800a5d0:	6818      	ldr	r0, [r3, #0]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	6053      	str	r3, [r2, #4]
 800a5d6:	4408      	add	r0, r1
 800a5d8:	6010      	str	r0, [r2, #0]
 800a5da:	e7da      	b.n	800a592 <_free_r+0x22>
 800a5dc:	d902      	bls.n	800a5e4 <_free_r+0x74>
 800a5de:	230c      	movs	r3, #12
 800a5e0:	602b      	str	r3, [r5, #0]
 800a5e2:	e7d6      	b.n	800a592 <_free_r+0x22>
 800a5e4:	6820      	ldr	r0, [r4, #0]
 800a5e6:	1821      	adds	r1, r4, r0
 800a5e8:	428b      	cmp	r3, r1
 800a5ea:	bf04      	itt	eq
 800a5ec:	6819      	ldreq	r1, [r3, #0]
 800a5ee:	685b      	ldreq	r3, [r3, #4]
 800a5f0:	6063      	str	r3, [r4, #4]
 800a5f2:	bf04      	itt	eq
 800a5f4:	1809      	addeq	r1, r1, r0
 800a5f6:	6021      	streq	r1, [r4, #0]
 800a5f8:	6054      	str	r4, [r2, #4]
 800a5fa:	e7ca      	b.n	800a592 <_free_r+0x22>
 800a5fc:	bd38      	pop	{r3, r4, r5, pc}
 800a5fe:	bf00      	nop
 800a600:	200052b4 	.word	0x200052b4

0800a604 <malloc>:
 800a604:	4b02      	ldr	r3, [pc, #8]	@ (800a610 <malloc+0xc>)
 800a606:	4601      	mov	r1, r0
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	f000 b825 	b.w	800a658 <_malloc_r>
 800a60e:	bf00      	nop
 800a610:	2000001c 	.word	0x2000001c

0800a614 <sbrk_aligned>:
 800a614:	b570      	push	{r4, r5, r6, lr}
 800a616:	4e0f      	ldr	r6, [pc, #60]	@ (800a654 <sbrk_aligned+0x40>)
 800a618:	460c      	mov	r4, r1
 800a61a:	6831      	ldr	r1, [r6, #0]
 800a61c:	4605      	mov	r5, r0
 800a61e:	b911      	cbnz	r1, 800a626 <sbrk_aligned+0x12>
 800a620:	f000 fe46 	bl	800b2b0 <_sbrk_r>
 800a624:	6030      	str	r0, [r6, #0]
 800a626:	4621      	mov	r1, r4
 800a628:	4628      	mov	r0, r5
 800a62a:	f000 fe41 	bl	800b2b0 <_sbrk_r>
 800a62e:	1c43      	adds	r3, r0, #1
 800a630:	d103      	bne.n	800a63a <sbrk_aligned+0x26>
 800a632:	f04f 34ff 	mov.w	r4, #4294967295
 800a636:	4620      	mov	r0, r4
 800a638:	bd70      	pop	{r4, r5, r6, pc}
 800a63a:	1cc4      	adds	r4, r0, #3
 800a63c:	f024 0403 	bic.w	r4, r4, #3
 800a640:	42a0      	cmp	r0, r4
 800a642:	d0f8      	beq.n	800a636 <sbrk_aligned+0x22>
 800a644:	1a21      	subs	r1, r4, r0
 800a646:	4628      	mov	r0, r5
 800a648:	f000 fe32 	bl	800b2b0 <_sbrk_r>
 800a64c:	3001      	adds	r0, #1
 800a64e:	d1f2      	bne.n	800a636 <sbrk_aligned+0x22>
 800a650:	e7ef      	b.n	800a632 <sbrk_aligned+0x1e>
 800a652:	bf00      	nop
 800a654:	200052b0 	.word	0x200052b0

0800a658 <_malloc_r>:
 800a658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a65c:	1ccd      	adds	r5, r1, #3
 800a65e:	f025 0503 	bic.w	r5, r5, #3
 800a662:	3508      	adds	r5, #8
 800a664:	2d0c      	cmp	r5, #12
 800a666:	bf38      	it	cc
 800a668:	250c      	movcc	r5, #12
 800a66a:	2d00      	cmp	r5, #0
 800a66c:	4606      	mov	r6, r0
 800a66e:	db01      	blt.n	800a674 <_malloc_r+0x1c>
 800a670:	42a9      	cmp	r1, r5
 800a672:	d904      	bls.n	800a67e <_malloc_r+0x26>
 800a674:	230c      	movs	r3, #12
 800a676:	6033      	str	r3, [r6, #0]
 800a678:	2000      	movs	r0, #0
 800a67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a67e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a754 <_malloc_r+0xfc>
 800a682:	f000 f869 	bl	800a758 <__malloc_lock>
 800a686:	f8d8 3000 	ldr.w	r3, [r8]
 800a68a:	461c      	mov	r4, r3
 800a68c:	bb44      	cbnz	r4, 800a6e0 <_malloc_r+0x88>
 800a68e:	4629      	mov	r1, r5
 800a690:	4630      	mov	r0, r6
 800a692:	f7ff ffbf 	bl	800a614 <sbrk_aligned>
 800a696:	1c43      	adds	r3, r0, #1
 800a698:	4604      	mov	r4, r0
 800a69a:	d158      	bne.n	800a74e <_malloc_r+0xf6>
 800a69c:	f8d8 4000 	ldr.w	r4, [r8]
 800a6a0:	4627      	mov	r7, r4
 800a6a2:	2f00      	cmp	r7, #0
 800a6a4:	d143      	bne.n	800a72e <_malloc_r+0xd6>
 800a6a6:	2c00      	cmp	r4, #0
 800a6a8:	d04b      	beq.n	800a742 <_malloc_r+0xea>
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	4639      	mov	r1, r7
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	eb04 0903 	add.w	r9, r4, r3
 800a6b4:	f000 fdfc 	bl	800b2b0 <_sbrk_r>
 800a6b8:	4581      	cmp	r9, r0
 800a6ba:	d142      	bne.n	800a742 <_malloc_r+0xea>
 800a6bc:	6821      	ldr	r1, [r4, #0]
 800a6be:	1a6d      	subs	r5, r5, r1
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f7ff ffa6 	bl	800a614 <sbrk_aligned>
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	d03a      	beq.n	800a742 <_malloc_r+0xea>
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	442b      	add	r3, r5
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	f8d8 3000 	ldr.w	r3, [r8]
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	bb62      	cbnz	r2, 800a734 <_malloc_r+0xdc>
 800a6da:	f8c8 7000 	str.w	r7, [r8]
 800a6de:	e00f      	b.n	800a700 <_malloc_r+0xa8>
 800a6e0:	6822      	ldr	r2, [r4, #0]
 800a6e2:	1b52      	subs	r2, r2, r5
 800a6e4:	d420      	bmi.n	800a728 <_malloc_r+0xd0>
 800a6e6:	2a0b      	cmp	r2, #11
 800a6e8:	d917      	bls.n	800a71a <_malloc_r+0xc2>
 800a6ea:	1961      	adds	r1, r4, r5
 800a6ec:	42a3      	cmp	r3, r4
 800a6ee:	6025      	str	r5, [r4, #0]
 800a6f0:	bf18      	it	ne
 800a6f2:	6059      	strne	r1, [r3, #4]
 800a6f4:	6863      	ldr	r3, [r4, #4]
 800a6f6:	bf08      	it	eq
 800a6f8:	f8c8 1000 	streq.w	r1, [r8]
 800a6fc:	5162      	str	r2, [r4, r5]
 800a6fe:	604b      	str	r3, [r1, #4]
 800a700:	4630      	mov	r0, r6
 800a702:	f000 f82f 	bl	800a764 <__malloc_unlock>
 800a706:	f104 000b 	add.w	r0, r4, #11
 800a70a:	1d23      	adds	r3, r4, #4
 800a70c:	f020 0007 	bic.w	r0, r0, #7
 800a710:	1ac2      	subs	r2, r0, r3
 800a712:	bf1c      	itt	ne
 800a714:	1a1b      	subne	r3, r3, r0
 800a716:	50a3      	strne	r3, [r4, r2]
 800a718:	e7af      	b.n	800a67a <_malloc_r+0x22>
 800a71a:	6862      	ldr	r2, [r4, #4]
 800a71c:	42a3      	cmp	r3, r4
 800a71e:	bf0c      	ite	eq
 800a720:	f8c8 2000 	streq.w	r2, [r8]
 800a724:	605a      	strne	r2, [r3, #4]
 800a726:	e7eb      	b.n	800a700 <_malloc_r+0xa8>
 800a728:	4623      	mov	r3, r4
 800a72a:	6864      	ldr	r4, [r4, #4]
 800a72c:	e7ae      	b.n	800a68c <_malloc_r+0x34>
 800a72e:	463c      	mov	r4, r7
 800a730:	687f      	ldr	r7, [r7, #4]
 800a732:	e7b6      	b.n	800a6a2 <_malloc_r+0x4a>
 800a734:	461a      	mov	r2, r3
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	42a3      	cmp	r3, r4
 800a73a:	d1fb      	bne.n	800a734 <_malloc_r+0xdc>
 800a73c:	2300      	movs	r3, #0
 800a73e:	6053      	str	r3, [r2, #4]
 800a740:	e7de      	b.n	800a700 <_malloc_r+0xa8>
 800a742:	230c      	movs	r3, #12
 800a744:	6033      	str	r3, [r6, #0]
 800a746:	4630      	mov	r0, r6
 800a748:	f000 f80c 	bl	800a764 <__malloc_unlock>
 800a74c:	e794      	b.n	800a678 <_malloc_r+0x20>
 800a74e:	6005      	str	r5, [r0, #0]
 800a750:	e7d6      	b.n	800a700 <_malloc_r+0xa8>
 800a752:	bf00      	nop
 800a754:	200052b4 	.word	0x200052b4

0800a758 <__malloc_lock>:
 800a758:	4801      	ldr	r0, [pc, #4]	@ (800a760 <__malloc_lock+0x8>)
 800a75a:	f7ff b8aa 	b.w	80098b2 <__retarget_lock_acquire_recursive>
 800a75e:	bf00      	nop
 800a760:	200052ac 	.word	0x200052ac

0800a764 <__malloc_unlock>:
 800a764:	4801      	ldr	r0, [pc, #4]	@ (800a76c <__malloc_unlock+0x8>)
 800a766:	f7ff b8a5 	b.w	80098b4 <__retarget_lock_release_recursive>
 800a76a:	bf00      	nop
 800a76c:	200052ac 	.word	0x200052ac

0800a770 <_Balloc>:
 800a770:	b570      	push	{r4, r5, r6, lr}
 800a772:	69c6      	ldr	r6, [r0, #28]
 800a774:	4604      	mov	r4, r0
 800a776:	460d      	mov	r5, r1
 800a778:	b976      	cbnz	r6, 800a798 <_Balloc+0x28>
 800a77a:	2010      	movs	r0, #16
 800a77c:	f7ff ff42 	bl	800a604 <malloc>
 800a780:	4602      	mov	r2, r0
 800a782:	61e0      	str	r0, [r4, #28]
 800a784:	b920      	cbnz	r0, 800a790 <_Balloc+0x20>
 800a786:	4b18      	ldr	r3, [pc, #96]	@ (800a7e8 <_Balloc+0x78>)
 800a788:	4818      	ldr	r0, [pc, #96]	@ (800a7ec <_Balloc+0x7c>)
 800a78a:	216b      	movs	r1, #107	@ 0x6b
 800a78c:	f000 fda0 	bl	800b2d0 <__assert_func>
 800a790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a794:	6006      	str	r6, [r0, #0]
 800a796:	60c6      	str	r6, [r0, #12]
 800a798:	69e6      	ldr	r6, [r4, #28]
 800a79a:	68f3      	ldr	r3, [r6, #12]
 800a79c:	b183      	cbz	r3, 800a7c0 <_Balloc+0x50>
 800a79e:	69e3      	ldr	r3, [r4, #28]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7a6:	b9b8      	cbnz	r0, 800a7d8 <_Balloc+0x68>
 800a7a8:	2101      	movs	r1, #1
 800a7aa:	fa01 f605 	lsl.w	r6, r1, r5
 800a7ae:	1d72      	adds	r2, r6, #5
 800a7b0:	0092      	lsls	r2, r2, #2
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f000 fdaa 	bl	800b30c <_calloc_r>
 800a7b8:	b160      	cbz	r0, 800a7d4 <_Balloc+0x64>
 800a7ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7be:	e00e      	b.n	800a7de <_Balloc+0x6e>
 800a7c0:	2221      	movs	r2, #33	@ 0x21
 800a7c2:	2104      	movs	r1, #4
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f000 fda1 	bl	800b30c <_calloc_r>
 800a7ca:	69e3      	ldr	r3, [r4, #28]
 800a7cc:	60f0      	str	r0, [r6, #12]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1e4      	bne.n	800a79e <_Balloc+0x2e>
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}
 800a7d8:	6802      	ldr	r2, [r0, #0]
 800a7da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7de:	2300      	movs	r3, #0
 800a7e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7e4:	e7f7      	b.n	800a7d6 <_Balloc+0x66>
 800a7e6:	bf00      	nop
 800a7e8:	0800c519 	.word	0x0800c519
 800a7ec:	0800c599 	.word	0x0800c599

0800a7f0 <_Bfree>:
 800a7f0:	b570      	push	{r4, r5, r6, lr}
 800a7f2:	69c6      	ldr	r6, [r0, #28]
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	b976      	cbnz	r6, 800a818 <_Bfree+0x28>
 800a7fa:	2010      	movs	r0, #16
 800a7fc:	f7ff ff02 	bl	800a604 <malloc>
 800a800:	4602      	mov	r2, r0
 800a802:	61e8      	str	r0, [r5, #28]
 800a804:	b920      	cbnz	r0, 800a810 <_Bfree+0x20>
 800a806:	4b09      	ldr	r3, [pc, #36]	@ (800a82c <_Bfree+0x3c>)
 800a808:	4809      	ldr	r0, [pc, #36]	@ (800a830 <_Bfree+0x40>)
 800a80a:	218f      	movs	r1, #143	@ 0x8f
 800a80c:	f000 fd60 	bl	800b2d0 <__assert_func>
 800a810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a814:	6006      	str	r6, [r0, #0]
 800a816:	60c6      	str	r6, [r0, #12]
 800a818:	b13c      	cbz	r4, 800a82a <_Bfree+0x3a>
 800a81a:	69eb      	ldr	r3, [r5, #28]
 800a81c:	6862      	ldr	r2, [r4, #4]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a824:	6021      	str	r1, [r4, #0]
 800a826:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a82a:	bd70      	pop	{r4, r5, r6, pc}
 800a82c:	0800c519 	.word	0x0800c519
 800a830:	0800c599 	.word	0x0800c599

0800a834 <__multadd>:
 800a834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a838:	690d      	ldr	r5, [r1, #16]
 800a83a:	4607      	mov	r7, r0
 800a83c:	460c      	mov	r4, r1
 800a83e:	461e      	mov	r6, r3
 800a840:	f101 0c14 	add.w	ip, r1, #20
 800a844:	2000      	movs	r0, #0
 800a846:	f8dc 3000 	ldr.w	r3, [ip]
 800a84a:	b299      	uxth	r1, r3
 800a84c:	fb02 6101 	mla	r1, r2, r1, r6
 800a850:	0c1e      	lsrs	r6, r3, #16
 800a852:	0c0b      	lsrs	r3, r1, #16
 800a854:	fb02 3306 	mla	r3, r2, r6, r3
 800a858:	b289      	uxth	r1, r1
 800a85a:	3001      	adds	r0, #1
 800a85c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a860:	4285      	cmp	r5, r0
 800a862:	f84c 1b04 	str.w	r1, [ip], #4
 800a866:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a86a:	dcec      	bgt.n	800a846 <__multadd+0x12>
 800a86c:	b30e      	cbz	r6, 800a8b2 <__multadd+0x7e>
 800a86e:	68a3      	ldr	r3, [r4, #8]
 800a870:	42ab      	cmp	r3, r5
 800a872:	dc19      	bgt.n	800a8a8 <__multadd+0x74>
 800a874:	6861      	ldr	r1, [r4, #4]
 800a876:	4638      	mov	r0, r7
 800a878:	3101      	adds	r1, #1
 800a87a:	f7ff ff79 	bl	800a770 <_Balloc>
 800a87e:	4680      	mov	r8, r0
 800a880:	b928      	cbnz	r0, 800a88e <__multadd+0x5a>
 800a882:	4602      	mov	r2, r0
 800a884:	4b0c      	ldr	r3, [pc, #48]	@ (800a8b8 <__multadd+0x84>)
 800a886:	480d      	ldr	r0, [pc, #52]	@ (800a8bc <__multadd+0x88>)
 800a888:	21ba      	movs	r1, #186	@ 0xba
 800a88a:	f000 fd21 	bl	800b2d0 <__assert_func>
 800a88e:	6922      	ldr	r2, [r4, #16]
 800a890:	3202      	adds	r2, #2
 800a892:	f104 010c 	add.w	r1, r4, #12
 800a896:	0092      	lsls	r2, r2, #2
 800a898:	300c      	adds	r0, #12
 800a89a:	f7ff f80c 	bl	80098b6 <memcpy>
 800a89e:	4621      	mov	r1, r4
 800a8a0:	4638      	mov	r0, r7
 800a8a2:	f7ff ffa5 	bl	800a7f0 <_Bfree>
 800a8a6:	4644      	mov	r4, r8
 800a8a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8ac:	3501      	adds	r5, #1
 800a8ae:	615e      	str	r6, [r3, #20]
 800a8b0:	6125      	str	r5, [r4, #16]
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b8:	0800c588 	.word	0x0800c588
 800a8bc:	0800c599 	.word	0x0800c599

0800a8c0 <__hi0bits>:
 800a8c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	bf36      	itet	cc
 800a8c8:	0403      	lslcc	r3, r0, #16
 800a8ca:	2000      	movcs	r0, #0
 800a8cc:	2010      	movcc	r0, #16
 800a8ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8d2:	bf3c      	itt	cc
 800a8d4:	021b      	lslcc	r3, r3, #8
 800a8d6:	3008      	addcc	r0, #8
 800a8d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8dc:	bf3c      	itt	cc
 800a8de:	011b      	lslcc	r3, r3, #4
 800a8e0:	3004      	addcc	r0, #4
 800a8e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8e6:	bf3c      	itt	cc
 800a8e8:	009b      	lslcc	r3, r3, #2
 800a8ea:	3002      	addcc	r0, #2
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	db05      	blt.n	800a8fc <__hi0bits+0x3c>
 800a8f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a8f4:	f100 0001 	add.w	r0, r0, #1
 800a8f8:	bf08      	it	eq
 800a8fa:	2020      	moveq	r0, #32
 800a8fc:	4770      	bx	lr

0800a8fe <__lo0bits>:
 800a8fe:	6803      	ldr	r3, [r0, #0]
 800a900:	4602      	mov	r2, r0
 800a902:	f013 0007 	ands.w	r0, r3, #7
 800a906:	d00b      	beq.n	800a920 <__lo0bits+0x22>
 800a908:	07d9      	lsls	r1, r3, #31
 800a90a:	d421      	bmi.n	800a950 <__lo0bits+0x52>
 800a90c:	0798      	lsls	r0, r3, #30
 800a90e:	bf49      	itett	mi
 800a910:	085b      	lsrmi	r3, r3, #1
 800a912:	089b      	lsrpl	r3, r3, #2
 800a914:	2001      	movmi	r0, #1
 800a916:	6013      	strmi	r3, [r2, #0]
 800a918:	bf5c      	itt	pl
 800a91a:	6013      	strpl	r3, [r2, #0]
 800a91c:	2002      	movpl	r0, #2
 800a91e:	4770      	bx	lr
 800a920:	b299      	uxth	r1, r3
 800a922:	b909      	cbnz	r1, 800a928 <__lo0bits+0x2a>
 800a924:	0c1b      	lsrs	r3, r3, #16
 800a926:	2010      	movs	r0, #16
 800a928:	b2d9      	uxtb	r1, r3
 800a92a:	b909      	cbnz	r1, 800a930 <__lo0bits+0x32>
 800a92c:	3008      	adds	r0, #8
 800a92e:	0a1b      	lsrs	r3, r3, #8
 800a930:	0719      	lsls	r1, r3, #28
 800a932:	bf04      	itt	eq
 800a934:	091b      	lsreq	r3, r3, #4
 800a936:	3004      	addeq	r0, #4
 800a938:	0799      	lsls	r1, r3, #30
 800a93a:	bf04      	itt	eq
 800a93c:	089b      	lsreq	r3, r3, #2
 800a93e:	3002      	addeq	r0, #2
 800a940:	07d9      	lsls	r1, r3, #31
 800a942:	d403      	bmi.n	800a94c <__lo0bits+0x4e>
 800a944:	085b      	lsrs	r3, r3, #1
 800a946:	f100 0001 	add.w	r0, r0, #1
 800a94a:	d003      	beq.n	800a954 <__lo0bits+0x56>
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	4770      	bx	lr
 800a950:	2000      	movs	r0, #0
 800a952:	4770      	bx	lr
 800a954:	2020      	movs	r0, #32
 800a956:	4770      	bx	lr

0800a958 <__i2b>:
 800a958:	b510      	push	{r4, lr}
 800a95a:	460c      	mov	r4, r1
 800a95c:	2101      	movs	r1, #1
 800a95e:	f7ff ff07 	bl	800a770 <_Balloc>
 800a962:	4602      	mov	r2, r0
 800a964:	b928      	cbnz	r0, 800a972 <__i2b+0x1a>
 800a966:	4b05      	ldr	r3, [pc, #20]	@ (800a97c <__i2b+0x24>)
 800a968:	4805      	ldr	r0, [pc, #20]	@ (800a980 <__i2b+0x28>)
 800a96a:	f240 1145 	movw	r1, #325	@ 0x145
 800a96e:	f000 fcaf 	bl	800b2d0 <__assert_func>
 800a972:	2301      	movs	r3, #1
 800a974:	6144      	str	r4, [r0, #20]
 800a976:	6103      	str	r3, [r0, #16]
 800a978:	bd10      	pop	{r4, pc}
 800a97a:	bf00      	nop
 800a97c:	0800c588 	.word	0x0800c588
 800a980:	0800c599 	.word	0x0800c599

0800a984 <__multiply>:
 800a984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a988:	4614      	mov	r4, r2
 800a98a:	690a      	ldr	r2, [r1, #16]
 800a98c:	6923      	ldr	r3, [r4, #16]
 800a98e:	429a      	cmp	r2, r3
 800a990:	bfa8      	it	ge
 800a992:	4623      	movge	r3, r4
 800a994:	460f      	mov	r7, r1
 800a996:	bfa4      	itt	ge
 800a998:	460c      	movge	r4, r1
 800a99a:	461f      	movge	r7, r3
 800a99c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a9a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a9a4:	68a3      	ldr	r3, [r4, #8]
 800a9a6:	6861      	ldr	r1, [r4, #4]
 800a9a8:	eb0a 0609 	add.w	r6, sl, r9
 800a9ac:	42b3      	cmp	r3, r6
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	bfb8      	it	lt
 800a9b2:	3101      	addlt	r1, #1
 800a9b4:	f7ff fedc 	bl	800a770 <_Balloc>
 800a9b8:	b930      	cbnz	r0, 800a9c8 <__multiply+0x44>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	4b44      	ldr	r3, [pc, #272]	@ (800aad0 <__multiply+0x14c>)
 800a9be:	4845      	ldr	r0, [pc, #276]	@ (800aad4 <__multiply+0x150>)
 800a9c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a9c4:	f000 fc84 	bl	800b2d0 <__assert_func>
 800a9c8:	f100 0514 	add.w	r5, r0, #20
 800a9cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a9d0:	462b      	mov	r3, r5
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	4543      	cmp	r3, r8
 800a9d6:	d321      	bcc.n	800aa1c <__multiply+0x98>
 800a9d8:	f107 0114 	add.w	r1, r7, #20
 800a9dc:	f104 0214 	add.w	r2, r4, #20
 800a9e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a9e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a9e8:	9302      	str	r3, [sp, #8]
 800a9ea:	1b13      	subs	r3, r2, r4
 800a9ec:	3b15      	subs	r3, #21
 800a9ee:	f023 0303 	bic.w	r3, r3, #3
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	f104 0715 	add.w	r7, r4, #21
 800a9f8:	42ba      	cmp	r2, r7
 800a9fa:	bf38      	it	cc
 800a9fc:	2304      	movcc	r3, #4
 800a9fe:	9301      	str	r3, [sp, #4]
 800aa00:	9b02      	ldr	r3, [sp, #8]
 800aa02:	9103      	str	r1, [sp, #12]
 800aa04:	428b      	cmp	r3, r1
 800aa06:	d80c      	bhi.n	800aa22 <__multiply+0x9e>
 800aa08:	2e00      	cmp	r6, #0
 800aa0a:	dd03      	ble.n	800aa14 <__multiply+0x90>
 800aa0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d05b      	beq.n	800aacc <__multiply+0x148>
 800aa14:	6106      	str	r6, [r0, #16]
 800aa16:	b005      	add	sp, #20
 800aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1c:	f843 2b04 	str.w	r2, [r3], #4
 800aa20:	e7d8      	b.n	800a9d4 <__multiply+0x50>
 800aa22:	f8b1 a000 	ldrh.w	sl, [r1]
 800aa26:	f1ba 0f00 	cmp.w	sl, #0
 800aa2a:	d024      	beq.n	800aa76 <__multiply+0xf2>
 800aa2c:	f104 0e14 	add.w	lr, r4, #20
 800aa30:	46a9      	mov	r9, r5
 800aa32:	f04f 0c00 	mov.w	ip, #0
 800aa36:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa3a:	f8d9 3000 	ldr.w	r3, [r9]
 800aa3e:	fa1f fb87 	uxth.w	fp, r7
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa48:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aa4c:	f8d9 7000 	ldr.w	r7, [r9]
 800aa50:	4463      	add	r3, ip
 800aa52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa56:	fb0a c70b 	mla	r7, sl, fp, ip
 800aa5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa64:	4572      	cmp	r2, lr
 800aa66:	f849 3b04 	str.w	r3, [r9], #4
 800aa6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa6e:	d8e2      	bhi.n	800aa36 <__multiply+0xb2>
 800aa70:	9b01      	ldr	r3, [sp, #4]
 800aa72:	f845 c003 	str.w	ip, [r5, r3]
 800aa76:	9b03      	ldr	r3, [sp, #12]
 800aa78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aa7c:	3104      	adds	r1, #4
 800aa7e:	f1b9 0f00 	cmp.w	r9, #0
 800aa82:	d021      	beq.n	800aac8 <__multiply+0x144>
 800aa84:	682b      	ldr	r3, [r5, #0]
 800aa86:	f104 0c14 	add.w	ip, r4, #20
 800aa8a:	46ae      	mov	lr, r5
 800aa8c:	f04f 0a00 	mov.w	sl, #0
 800aa90:	f8bc b000 	ldrh.w	fp, [ip]
 800aa94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aa98:	fb09 770b 	mla	r7, r9, fp, r7
 800aa9c:	4457      	add	r7, sl
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aaa4:	f84e 3b04 	str.w	r3, [lr], #4
 800aaa8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aaac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aab0:	f8be 3000 	ldrh.w	r3, [lr]
 800aab4:	fb09 330a 	mla	r3, r9, sl, r3
 800aab8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aabc:	4562      	cmp	r2, ip
 800aabe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aac2:	d8e5      	bhi.n	800aa90 <__multiply+0x10c>
 800aac4:	9f01      	ldr	r7, [sp, #4]
 800aac6:	51eb      	str	r3, [r5, r7]
 800aac8:	3504      	adds	r5, #4
 800aaca:	e799      	b.n	800aa00 <__multiply+0x7c>
 800aacc:	3e01      	subs	r6, #1
 800aace:	e79b      	b.n	800aa08 <__multiply+0x84>
 800aad0:	0800c588 	.word	0x0800c588
 800aad4:	0800c599 	.word	0x0800c599

0800aad8 <__pow5mult>:
 800aad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aadc:	4615      	mov	r5, r2
 800aade:	f012 0203 	ands.w	r2, r2, #3
 800aae2:	4607      	mov	r7, r0
 800aae4:	460e      	mov	r6, r1
 800aae6:	d007      	beq.n	800aaf8 <__pow5mult+0x20>
 800aae8:	4c25      	ldr	r4, [pc, #148]	@ (800ab80 <__pow5mult+0xa8>)
 800aaea:	3a01      	subs	r2, #1
 800aaec:	2300      	movs	r3, #0
 800aaee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aaf2:	f7ff fe9f 	bl	800a834 <__multadd>
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	10ad      	asrs	r5, r5, #2
 800aafa:	d03d      	beq.n	800ab78 <__pow5mult+0xa0>
 800aafc:	69fc      	ldr	r4, [r7, #28]
 800aafe:	b97c      	cbnz	r4, 800ab20 <__pow5mult+0x48>
 800ab00:	2010      	movs	r0, #16
 800ab02:	f7ff fd7f 	bl	800a604 <malloc>
 800ab06:	4602      	mov	r2, r0
 800ab08:	61f8      	str	r0, [r7, #28]
 800ab0a:	b928      	cbnz	r0, 800ab18 <__pow5mult+0x40>
 800ab0c:	4b1d      	ldr	r3, [pc, #116]	@ (800ab84 <__pow5mult+0xac>)
 800ab0e:	481e      	ldr	r0, [pc, #120]	@ (800ab88 <__pow5mult+0xb0>)
 800ab10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ab14:	f000 fbdc 	bl	800b2d0 <__assert_func>
 800ab18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab1c:	6004      	str	r4, [r0, #0]
 800ab1e:	60c4      	str	r4, [r0, #12]
 800ab20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ab24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab28:	b94c      	cbnz	r4, 800ab3e <__pow5mult+0x66>
 800ab2a:	f240 2171 	movw	r1, #625	@ 0x271
 800ab2e:	4638      	mov	r0, r7
 800ab30:	f7ff ff12 	bl	800a958 <__i2b>
 800ab34:	2300      	movs	r3, #0
 800ab36:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	6003      	str	r3, [r0, #0]
 800ab3e:	f04f 0900 	mov.w	r9, #0
 800ab42:	07eb      	lsls	r3, r5, #31
 800ab44:	d50a      	bpl.n	800ab5c <__pow5mult+0x84>
 800ab46:	4631      	mov	r1, r6
 800ab48:	4622      	mov	r2, r4
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	f7ff ff1a 	bl	800a984 <__multiply>
 800ab50:	4631      	mov	r1, r6
 800ab52:	4680      	mov	r8, r0
 800ab54:	4638      	mov	r0, r7
 800ab56:	f7ff fe4b 	bl	800a7f0 <_Bfree>
 800ab5a:	4646      	mov	r6, r8
 800ab5c:	106d      	asrs	r5, r5, #1
 800ab5e:	d00b      	beq.n	800ab78 <__pow5mult+0xa0>
 800ab60:	6820      	ldr	r0, [r4, #0]
 800ab62:	b938      	cbnz	r0, 800ab74 <__pow5mult+0x9c>
 800ab64:	4622      	mov	r2, r4
 800ab66:	4621      	mov	r1, r4
 800ab68:	4638      	mov	r0, r7
 800ab6a:	f7ff ff0b 	bl	800a984 <__multiply>
 800ab6e:	6020      	str	r0, [r4, #0]
 800ab70:	f8c0 9000 	str.w	r9, [r0]
 800ab74:	4604      	mov	r4, r0
 800ab76:	e7e4      	b.n	800ab42 <__pow5mult+0x6a>
 800ab78:	4630      	mov	r0, r6
 800ab7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab7e:	bf00      	nop
 800ab80:	0800c5f4 	.word	0x0800c5f4
 800ab84:	0800c519 	.word	0x0800c519
 800ab88:	0800c599 	.word	0x0800c599

0800ab8c <__lshift>:
 800ab8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab90:	460c      	mov	r4, r1
 800ab92:	6849      	ldr	r1, [r1, #4]
 800ab94:	6923      	ldr	r3, [r4, #16]
 800ab96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab9a:	68a3      	ldr	r3, [r4, #8]
 800ab9c:	4607      	mov	r7, r0
 800ab9e:	4691      	mov	r9, r2
 800aba0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aba4:	f108 0601 	add.w	r6, r8, #1
 800aba8:	42b3      	cmp	r3, r6
 800abaa:	db0b      	blt.n	800abc4 <__lshift+0x38>
 800abac:	4638      	mov	r0, r7
 800abae:	f7ff fddf 	bl	800a770 <_Balloc>
 800abb2:	4605      	mov	r5, r0
 800abb4:	b948      	cbnz	r0, 800abca <__lshift+0x3e>
 800abb6:	4602      	mov	r2, r0
 800abb8:	4b28      	ldr	r3, [pc, #160]	@ (800ac5c <__lshift+0xd0>)
 800abba:	4829      	ldr	r0, [pc, #164]	@ (800ac60 <__lshift+0xd4>)
 800abbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800abc0:	f000 fb86 	bl	800b2d0 <__assert_func>
 800abc4:	3101      	adds	r1, #1
 800abc6:	005b      	lsls	r3, r3, #1
 800abc8:	e7ee      	b.n	800aba8 <__lshift+0x1c>
 800abca:	2300      	movs	r3, #0
 800abcc:	f100 0114 	add.w	r1, r0, #20
 800abd0:	f100 0210 	add.w	r2, r0, #16
 800abd4:	4618      	mov	r0, r3
 800abd6:	4553      	cmp	r3, sl
 800abd8:	db33      	blt.n	800ac42 <__lshift+0xb6>
 800abda:	6920      	ldr	r0, [r4, #16]
 800abdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abe0:	f104 0314 	add.w	r3, r4, #20
 800abe4:	f019 091f 	ands.w	r9, r9, #31
 800abe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abf0:	d02b      	beq.n	800ac4a <__lshift+0xbe>
 800abf2:	f1c9 0e20 	rsb	lr, r9, #32
 800abf6:	468a      	mov	sl, r1
 800abf8:	2200      	movs	r2, #0
 800abfa:	6818      	ldr	r0, [r3, #0]
 800abfc:	fa00 f009 	lsl.w	r0, r0, r9
 800ac00:	4310      	orrs	r0, r2
 800ac02:	f84a 0b04 	str.w	r0, [sl], #4
 800ac06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac0a:	459c      	cmp	ip, r3
 800ac0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac10:	d8f3      	bhi.n	800abfa <__lshift+0x6e>
 800ac12:	ebac 0304 	sub.w	r3, ip, r4
 800ac16:	3b15      	subs	r3, #21
 800ac18:	f023 0303 	bic.w	r3, r3, #3
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	f104 0015 	add.w	r0, r4, #21
 800ac22:	4584      	cmp	ip, r0
 800ac24:	bf38      	it	cc
 800ac26:	2304      	movcc	r3, #4
 800ac28:	50ca      	str	r2, [r1, r3]
 800ac2a:	b10a      	cbz	r2, 800ac30 <__lshift+0xa4>
 800ac2c:	f108 0602 	add.w	r6, r8, #2
 800ac30:	3e01      	subs	r6, #1
 800ac32:	4638      	mov	r0, r7
 800ac34:	612e      	str	r6, [r5, #16]
 800ac36:	4621      	mov	r1, r4
 800ac38:	f7ff fdda 	bl	800a7f0 <_Bfree>
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac42:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac46:	3301      	adds	r3, #1
 800ac48:	e7c5      	b.n	800abd6 <__lshift+0x4a>
 800ac4a:	3904      	subs	r1, #4
 800ac4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac50:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac54:	459c      	cmp	ip, r3
 800ac56:	d8f9      	bhi.n	800ac4c <__lshift+0xc0>
 800ac58:	e7ea      	b.n	800ac30 <__lshift+0xa4>
 800ac5a:	bf00      	nop
 800ac5c:	0800c588 	.word	0x0800c588
 800ac60:	0800c599 	.word	0x0800c599

0800ac64 <__mcmp>:
 800ac64:	690a      	ldr	r2, [r1, #16]
 800ac66:	4603      	mov	r3, r0
 800ac68:	6900      	ldr	r0, [r0, #16]
 800ac6a:	1a80      	subs	r0, r0, r2
 800ac6c:	b530      	push	{r4, r5, lr}
 800ac6e:	d10e      	bne.n	800ac8e <__mcmp+0x2a>
 800ac70:	3314      	adds	r3, #20
 800ac72:	3114      	adds	r1, #20
 800ac74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ac78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ac7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac84:	4295      	cmp	r5, r2
 800ac86:	d003      	beq.n	800ac90 <__mcmp+0x2c>
 800ac88:	d205      	bcs.n	800ac96 <__mcmp+0x32>
 800ac8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac8e:	bd30      	pop	{r4, r5, pc}
 800ac90:	42a3      	cmp	r3, r4
 800ac92:	d3f3      	bcc.n	800ac7c <__mcmp+0x18>
 800ac94:	e7fb      	b.n	800ac8e <__mcmp+0x2a>
 800ac96:	2001      	movs	r0, #1
 800ac98:	e7f9      	b.n	800ac8e <__mcmp+0x2a>
	...

0800ac9c <__mdiff>:
 800ac9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	4689      	mov	r9, r1
 800aca2:	4606      	mov	r6, r0
 800aca4:	4611      	mov	r1, r2
 800aca6:	4648      	mov	r0, r9
 800aca8:	4614      	mov	r4, r2
 800acaa:	f7ff ffdb 	bl	800ac64 <__mcmp>
 800acae:	1e05      	subs	r5, r0, #0
 800acb0:	d112      	bne.n	800acd8 <__mdiff+0x3c>
 800acb2:	4629      	mov	r1, r5
 800acb4:	4630      	mov	r0, r6
 800acb6:	f7ff fd5b 	bl	800a770 <_Balloc>
 800acba:	4602      	mov	r2, r0
 800acbc:	b928      	cbnz	r0, 800acca <__mdiff+0x2e>
 800acbe:	4b3f      	ldr	r3, [pc, #252]	@ (800adbc <__mdiff+0x120>)
 800acc0:	f240 2137 	movw	r1, #567	@ 0x237
 800acc4:	483e      	ldr	r0, [pc, #248]	@ (800adc0 <__mdiff+0x124>)
 800acc6:	f000 fb03 	bl	800b2d0 <__assert_func>
 800acca:	2301      	movs	r3, #1
 800accc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800acd0:	4610      	mov	r0, r2
 800acd2:	b003      	add	sp, #12
 800acd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd8:	bfbc      	itt	lt
 800acda:	464b      	movlt	r3, r9
 800acdc:	46a1      	movlt	r9, r4
 800acde:	4630      	mov	r0, r6
 800ace0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ace4:	bfba      	itte	lt
 800ace6:	461c      	movlt	r4, r3
 800ace8:	2501      	movlt	r5, #1
 800acea:	2500      	movge	r5, #0
 800acec:	f7ff fd40 	bl	800a770 <_Balloc>
 800acf0:	4602      	mov	r2, r0
 800acf2:	b918      	cbnz	r0, 800acfc <__mdiff+0x60>
 800acf4:	4b31      	ldr	r3, [pc, #196]	@ (800adbc <__mdiff+0x120>)
 800acf6:	f240 2145 	movw	r1, #581	@ 0x245
 800acfa:	e7e3      	b.n	800acc4 <__mdiff+0x28>
 800acfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ad00:	6926      	ldr	r6, [r4, #16]
 800ad02:	60c5      	str	r5, [r0, #12]
 800ad04:	f109 0310 	add.w	r3, r9, #16
 800ad08:	f109 0514 	add.w	r5, r9, #20
 800ad0c:	f104 0e14 	add.w	lr, r4, #20
 800ad10:	f100 0b14 	add.w	fp, r0, #20
 800ad14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ad18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ad1c:	9301      	str	r3, [sp, #4]
 800ad1e:	46d9      	mov	r9, fp
 800ad20:	f04f 0c00 	mov.w	ip, #0
 800ad24:	9b01      	ldr	r3, [sp, #4]
 800ad26:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ad2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ad2e:	9301      	str	r3, [sp, #4]
 800ad30:	fa1f f38a 	uxth.w	r3, sl
 800ad34:	4619      	mov	r1, r3
 800ad36:	b283      	uxth	r3, r0
 800ad38:	1acb      	subs	r3, r1, r3
 800ad3a:	0c00      	lsrs	r0, r0, #16
 800ad3c:	4463      	add	r3, ip
 800ad3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad4c:	4576      	cmp	r6, lr
 800ad4e:	f849 3b04 	str.w	r3, [r9], #4
 800ad52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad56:	d8e5      	bhi.n	800ad24 <__mdiff+0x88>
 800ad58:	1b33      	subs	r3, r6, r4
 800ad5a:	3b15      	subs	r3, #21
 800ad5c:	f023 0303 	bic.w	r3, r3, #3
 800ad60:	3415      	adds	r4, #21
 800ad62:	3304      	adds	r3, #4
 800ad64:	42a6      	cmp	r6, r4
 800ad66:	bf38      	it	cc
 800ad68:	2304      	movcc	r3, #4
 800ad6a:	441d      	add	r5, r3
 800ad6c:	445b      	add	r3, fp
 800ad6e:	461e      	mov	r6, r3
 800ad70:	462c      	mov	r4, r5
 800ad72:	4544      	cmp	r4, r8
 800ad74:	d30e      	bcc.n	800ad94 <__mdiff+0xf8>
 800ad76:	f108 0103 	add.w	r1, r8, #3
 800ad7a:	1b49      	subs	r1, r1, r5
 800ad7c:	f021 0103 	bic.w	r1, r1, #3
 800ad80:	3d03      	subs	r5, #3
 800ad82:	45a8      	cmp	r8, r5
 800ad84:	bf38      	it	cc
 800ad86:	2100      	movcc	r1, #0
 800ad88:	440b      	add	r3, r1
 800ad8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad8e:	b191      	cbz	r1, 800adb6 <__mdiff+0x11a>
 800ad90:	6117      	str	r7, [r2, #16]
 800ad92:	e79d      	b.n	800acd0 <__mdiff+0x34>
 800ad94:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad98:	46e6      	mov	lr, ip
 800ad9a:	0c08      	lsrs	r0, r1, #16
 800ad9c:	fa1c fc81 	uxtah	ip, ip, r1
 800ada0:	4471      	add	r1, lr
 800ada2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ada6:	b289      	uxth	r1, r1
 800ada8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800adac:	f846 1b04 	str.w	r1, [r6], #4
 800adb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800adb4:	e7dd      	b.n	800ad72 <__mdiff+0xd6>
 800adb6:	3f01      	subs	r7, #1
 800adb8:	e7e7      	b.n	800ad8a <__mdiff+0xee>
 800adba:	bf00      	nop
 800adbc:	0800c588 	.word	0x0800c588
 800adc0:	0800c599 	.word	0x0800c599

0800adc4 <__d2b>:
 800adc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adc8:	460f      	mov	r7, r1
 800adca:	2101      	movs	r1, #1
 800adcc:	ec59 8b10 	vmov	r8, r9, d0
 800add0:	4616      	mov	r6, r2
 800add2:	f7ff fccd 	bl	800a770 <_Balloc>
 800add6:	4604      	mov	r4, r0
 800add8:	b930      	cbnz	r0, 800ade8 <__d2b+0x24>
 800adda:	4602      	mov	r2, r0
 800addc:	4b23      	ldr	r3, [pc, #140]	@ (800ae6c <__d2b+0xa8>)
 800adde:	4824      	ldr	r0, [pc, #144]	@ (800ae70 <__d2b+0xac>)
 800ade0:	f240 310f 	movw	r1, #783	@ 0x30f
 800ade4:	f000 fa74 	bl	800b2d0 <__assert_func>
 800ade8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800adec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adf0:	b10d      	cbz	r5, 800adf6 <__d2b+0x32>
 800adf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800adf6:	9301      	str	r3, [sp, #4]
 800adf8:	f1b8 0300 	subs.w	r3, r8, #0
 800adfc:	d023      	beq.n	800ae46 <__d2b+0x82>
 800adfe:	4668      	mov	r0, sp
 800ae00:	9300      	str	r3, [sp, #0]
 800ae02:	f7ff fd7c 	bl	800a8fe <__lo0bits>
 800ae06:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae0a:	b1d0      	cbz	r0, 800ae42 <__d2b+0x7e>
 800ae0c:	f1c0 0320 	rsb	r3, r0, #32
 800ae10:	fa02 f303 	lsl.w	r3, r2, r3
 800ae14:	430b      	orrs	r3, r1
 800ae16:	40c2      	lsrs	r2, r0
 800ae18:	6163      	str	r3, [r4, #20]
 800ae1a:	9201      	str	r2, [sp, #4]
 800ae1c:	9b01      	ldr	r3, [sp, #4]
 800ae1e:	61a3      	str	r3, [r4, #24]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	bf0c      	ite	eq
 800ae24:	2201      	moveq	r2, #1
 800ae26:	2202      	movne	r2, #2
 800ae28:	6122      	str	r2, [r4, #16]
 800ae2a:	b1a5      	cbz	r5, 800ae56 <__d2b+0x92>
 800ae2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ae30:	4405      	add	r5, r0
 800ae32:	603d      	str	r5, [r7, #0]
 800ae34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ae38:	6030      	str	r0, [r6, #0]
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	b003      	add	sp, #12
 800ae3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae42:	6161      	str	r1, [r4, #20]
 800ae44:	e7ea      	b.n	800ae1c <__d2b+0x58>
 800ae46:	a801      	add	r0, sp, #4
 800ae48:	f7ff fd59 	bl	800a8fe <__lo0bits>
 800ae4c:	9b01      	ldr	r3, [sp, #4]
 800ae4e:	6163      	str	r3, [r4, #20]
 800ae50:	3020      	adds	r0, #32
 800ae52:	2201      	movs	r2, #1
 800ae54:	e7e8      	b.n	800ae28 <__d2b+0x64>
 800ae56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ae5e:	6038      	str	r0, [r7, #0]
 800ae60:	6918      	ldr	r0, [r3, #16]
 800ae62:	f7ff fd2d 	bl	800a8c0 <__hi0bits>
 800ae66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae6a:	e7e5      	b.n	800ae38 <__d2b+0x74>
 800ae6c:	0800c588 	.word	0x0800c588
 800ae70:	0800c599 	.word	0x0800c599

0800ae74 <__ssputs_r>:
 800ae74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae78:	688e      	ldr	r6, [r1, #8]
 800ae7a:	461f      	mov	r7, r3
 800ae7c:	42be      	cmp	r6, r7
 800ae7e:	680b      	ldr	r3, [r1, #0]
 800ae80:	4682      	mov	sl, r0
 800ae82:	460c      	mov	r4, r1
 800ae84:	4690      	mov	r8, r2
 800ae86:	d82d      	bhi.n	800aee4 <__ssputs_r+0x70>
 800ae88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae90:	d026      	beq.n	800aee0 <__ssputs_r+0x6c>
 800ae92:	6965      	ldr	r5, [r4, #20]
 800ae94:	6909      	ldr	r1, [r1, #16]
 800ae96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae9a:	eba3 0901 	sub.w	r9, r3, r1
 800ae9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aea2:	1c7b      	adds	r3, r7, #1
 800aea4:	444b      	add	r3, r9
 800aea6:	106d      	asrs	r5, r5, #1
 800aea8:	429d      	cmp	r5, r3
 800aeaa:	bf38      	it	cc
 800aeac:	461d      	movcc	r5, r3
 800aeae:	0553      	lsls	r3, r2, #21
 800aeb0:	d527      	bpl.n	800af02 <__ssputs_r+0x8e>
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	f7ff fbd0 	bl	800a658 <_malloc_r>
 800aeb8:	4606      	mov	r6, r0
 800aeba:	b360      	cbz	r0, 800af16 <__ssputs_r+0xa2>
 800aebc:	6921      	ldr	r1, [r4, #16]
 800aebe:	464a      	mov	r2, r9
 800aec0:	f7fe fcf9 	bl	80098b6 <memcpy>
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aeca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aece:	81a3      	strh	r3, [r4, #12]
 800aed0:	6126      	str	r6, [r4, #16]
 800aed2:	6165      	str	r5, [r4, #20]
 800aed4:	444e      	add	r6, r9
 800aed6:	eba5 0509 	sub.w	r5, r5, r9
 800aeda:	6026      	str	r6, [r4, #0]
 800aedc:	60a5      	str	r5, [r4, #8]
 800aede:	463e      	mov	r6, r7
 800aee0:	42be      	cmp	r6, r7
 800aee2:	d900      	bls.n	800aee6 <__ssputs_r+0x72>
 800aee4:	463e      	mov	r6, r7
 800aee6:	6820      	ldr	r0, [r4, #0]
 800aee8:	4632      	mov	r2, r6
 800aeea:	4641      	mov	r1, r8
 800aeec:	f000 f9c6 	bl	800b27c <memmove>
 800aef0:	68a3      	ldr	r3, [r4, #8]
 800aef2:	1b9b      	subs	r3, r3, r6
 800aef4:	60a3      	str	r3, [r4, #8]
 800aef6:	6823      	ldr	r3, [r4, #0]
 800aef8:	4433      	add	r3, r6
 800aefa:	6023      	str	r3, [r4, #0]
 800aefc:	2000      	movs	r0, #0
 800aefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af02:	462a      	mov	r2, r5
 800af04:	f000 fa28 	bl	800b358 <_realloc_r>
 800af08:	4606      	mov	r6, r0
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d1e0      	bne.n	800aed0 <__ssputs_r+0x5c>
 800af0e:	6921      	ldr	r1, [r4, #16]
 800af10:	4650      	mov	r0, sl
 800af12:	f7ff fb2d 	bl	800a570 <_free_r>
 800af16:	230c      	movs	r3, #12
 800af18:	f8ca 3000 	str.w	r3, [sl]
 800af1c:	89a3      	ldrh	r3, [r4, #12]
 800af1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af22:	81a3      	strh	r3, [r4, #12]
 800af24:	f04f 30ff 	mov.w	r0, #4294967295
 800af28:	e7e9      	b.n	800aefe <__ssputs_r+0x8a>
	...

0800af2c <_svfiprintf_r>:
 800af2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af30:	4698      	mov	r8, r3
 800af32:	898b      	ldrh	r3, [r1, #12]
 800af34:	061b      	lsls	r3, r3, #24
 800af36:	b09d      	sub	sp, #116	@ 0x74
 800af38:	4607      	mov	r7, r0
 800af3a:	460d      	mov	r5, r1
 800af3c:	4614      	mov	r4, r2
 800af3e:	d510      	bpl.n	800af62 <_svfiprintf_r+0x36>
 800af40:	690b      	ldr	r3, [r1, #16]
 800af42:	b973      	cbnz	r3, 800af62 <_svfiprintf_r+0x36>
 800af44:	2140      	movs	r1, #64	@ 0x40
 800af46:	f7ff fb87 	bl	800a658 <_malloc_r>
 800af4a:	6028      	str	r0, [r5, #0]
 800af4c:	6128      	str	r0, [r5, #16]
 800af4e:	b930      	cbnz	r0, 800af5e <_svfiprintf_r+0x32>
 800af50:	230c      	movs	r3, #12
 800af52:	603b      	str	r3, [r7, #0]
 800af54:	f04f 30ff 	mov.w	r0, #4294967295
 800af58:	b01d      	add	sp, #116	@ 0x74
 800af5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af5e:	2340      	movs	r3, #64	@ 0x40
 800af60:	616b      	str	r3, [r5, #20]
 800af62:	2300      	movs	r3, #0
 800af64:	9309      	str	r3, [sp, #36]	@ 0x24
 800af66:	2320      	movs	r3, #32
 800af68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af70:	2330      	movs	r3, #48	@ 0x30
 800af72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b110 <_svfiprintf_r+0x1e4>
 800af76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af7a:	f04f 0901 	mov.w	r9, #1
 800af7e:	4623      	mov	r3, r4
 800af80:	469a      	mov	sl, r3
 800af82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af86:	b10a      	cbz	r2, 800af8c <_svfiprintf_r+0x60>
 800af88:	2a25      	cmp	r2, #37	@ 0x25
 800af8a:	d1f9      	bne.n	800af80 <_svfiprintf_r+0x54>
 800af8c:	ebba 0b04 	subs.w	fp, sl, r4
 800af90:	d00b      	beq.n	800afaa <_svfiprintf_r+0x7e>
 800af92:	465b      	mov	r3, fp
 800af94:	4622      	mov	r2, r4
 800af96:	4629      	mov	r1, r5
 800af98:	4638      	mov	r0, r7
 800af9a:	f7ff ff6b 	bl	800ae74 <__ssputs_r>
 800af9e:	3001      	adds	r0, #1
 800afa0:	f000 80a7 	beq.w	800b0f2 <_svfiprintf_r+0x1c6>
 800afa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afa6:	445a      	add	r2, fp
 800afa8:	9209      	str	r2, [sp, #36]	@ 0x24
 800afaa:	f89a 3000 	ldrb.w	r3, [sl]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f000 809f 	beq.w	800b0f2 <_svfiprintf_r+0x1c6>
 800afb4:	2300      	movs	r3, #0
 800afb6:	f04f 32ff 	mov.w	r2, #4294967295
 800afba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afbe:	f10a 0a01 	add.w	sl, sl, #1
 800afc2:	9304      	str	r3, [sp, #16]
 800afc4:	9307      	str	r3, [sp, #28]
 800afc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afca:	931a      	str	r3, [sp, #104]	@ 0x68
 800afcc:	4654      	mov	r4, sl
 800afce:	2205      	movs	r2, #5
 800afd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd4:	484e      	ldr	r0, [pc, #312]	@ (800b110 <_svfiprintf_r+0x1e4>)
 800afd6:	f7f5 f8fb 	bl	80001d0 <memchr>
 800afda:	9a04      	ldr	r2, [sp, #16]
 800afdc:	b9d8      	cbnz	r0, 800b016 <_svfiprintf_r+0xea>
 800afde:	06d0      	lsls	r0, r2, #27
 800afe0:	bf44      	itt	mi
 800afe2:	2320      	movmi	r3, #32
 800afe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afe8:	0711      	lsls	r1, r2, #28
 800afea:	bf44      	itt	mi
 800afec:	232b      	movmi	r3, #43	@ 0x2b
 800afee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aff2:	f89a 3000 	ldrb.w	r3, [sl]
 800aff6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aff8:	d015      	beq.n	800b026 <_svfiprintf_r+0xfa>
 800affa:	9a07      	ldr	r2, [sp, #28]
 800affc:	4654      	mov	r4, sl
 800affe:	2000      	movs	r0, #0
 800b000:	f04f 0c0a 	mov.w	ip, #10
 800b004:	4621      	mov	r1, r4
 800b006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b00a:	3b30      	subs	r3, #48	@ 0x30
 800b00c:	2b09      	cmp	r3, #9
 800b00e:	d94b      	bls.n	800b0a8 <_svfiprintf_r+0x17c>
 800b010:	b1b0      	cbz	r0, 800b040 <_svfiprintf_r+0x114>
 800b012:	9207      	str	r2, [sp, #28]
 800b014:	e014      	b.n	800b040 <_svfiprintf_r+0x114>
 800b016:	eba0 0308 	sub.w	r3, r0, r8
 800b01a:	fa09 f303 	lsl.w	r3, r9, r3
 800b01e:	4313      	orrs	r3, r2
 800b020:	9304      	str	r3, [sp, #16]
 800b022:	46a2      	mov	sl, r4
 800b024:	e7d2      	b.n	800afcc <_svfiprintf_r+0xa0>
 800b026:	9b03      	ldr	r3, [sp, #12]
 800b028:	1d19      	adds	r1, r3, #4
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	9103      	str	r1, [sp, #12]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	bfbb      	ittet	lt
 800b032:	425b      	neglt	r3, r3
 800b034:	f042 0202 	orrlt.w	r2, r2, #2
 800b038:	9307      	strge	r3, [sp, #28]
 800b03a:	9307      	strlt	r3, [sp, #28]
 800b03c:	bfb8      	it	lt
 800b03e:	9204      	strlt	r2, [sp, #16]
 800b040:	7823      	ldrb	r3, [r4, #0]
 800b042:	2b2e      	cmp	r3, #46	@ 0x2e
 800b044:	d10a      	bne.n	800b05c <_svfiprintf_r+0x130>
 800b046:	7863      	ldrb	r3, [r4, #1]
 800b048:	2b2a      	cmp	r3, #42	@ 0x2a
 800b04a:	d132      	bne.n	800b0b2 <_svfiprintf_r+0x186>
 800b04c:	9b03      	ldr	r3, [sp, #12]
 800b04e:	1d1a      	adds	r2, r3, #4
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	9203      	str	r2, [sp, #12]
 800b054:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b058:	3402      	adds	r4, #2
 800b05a:	9305      	str	r3, [sp, #20]
 800b05c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b120 <_svfiprintf_r+0x1f4>
 800b060:	7821      	ldrb	r1, [r4, #0]
 800b062:	2203      	movs	r2, #3
 800b064:	4650      	mov	r0, sl
 800b066:	f7f5 f8b3 	bl	80001d0 <memchr>
 800b06a:	b138      	cbz	r0, 800b07c <_svfiprintf_r+0x150>
 800b06c:	9b04      	ldr	r3, [sp, #16]
 800b06e:	eba0 000a 	sub.w	r0, r0, sl
 800b072:	2240      	movs	r2, #64	@ 0x40
 800b074:	4082      	lsls	r2, r0
 800b076:	4313      	orrs	r3, r2
 800b078:	3401      	adds	r4, #1
 800b07a:	9304      	str	r3, [sp, #16]
 800b07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b080:	4824      	ldr	r0, [pc, #144]	@ (800b114 <_svfiprintf_r+0x1e8>)
 800b082:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b086:	2206      	movs	r2, #6
 800b088:	f7f5 f8a2 	bl	80001d0 <memchr>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d036      	beq.n	800b0fe <_svfiprintf_r+0x1d2>
 800b090:	4b21      	ldr	r3, [pc, #132]	@ (800b118 <_svfiprintf_r+0x1ec>)
 800b092:	bb1b      	cbnz	r3, 800b0dc <_svfiprintf_r+0x1b0>
 800b094:	9b03      	ldr	r3, [sp, #12]
 800b096:	3307      	adds	r3, #7
 800b098:	f023 0307 	bic.w	r3, r3, #7
 800b09c:	3308      	adds	r3, #8
 800b09e:	9303      	str	r3, [sp, #12]
 800b0a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0a2:	4433      	add	r3, r6
 800b0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0a6:	e76a      	b.n	800af7e <_svfiprintf_r+0x52>
 800b0a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	2001      	movs	r0, #1
 800b0b0:	e7a8      	b.n	800b004 <_svfiprintf_r+0xd8>
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	3401      	adds	r4, #1
 800b0b6:	9305      	str	r3, [sp, #20]
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	f04f 0c0a 	mov.w	ip, #10
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0c4:	3a30      	subs	r2, #48	@ 0x30
 800b0c6:	2a09      	cmp	r2, #9
 800b0c8:	d903      	bls.n	800b0d2 <_svfiprintf_r+0x1a6>
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d0c6      	beq.n	800b05c <_svfiprintf_r+0x130>
 800b0ce:	9105      	str	r1, [sp, #20]
 800b0d0:	e7c4      	b.n	800b05c <_svfiprintf_r+0x130>
 800b0d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e7f0      	b.n	800b0be <_svfiprintf_r+0x192>
 800b0dc:	ab03      	add	r3, sp, #12
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	462a      	mov	r2, r5
 800b0e2:	4b0e      	ldr	r3, [pc, #56]	@ (800b11c <_svfiprintf_r+0x1f0>)
 800b0e4:	a904      	add	r1, sp, #16
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	f7fd fe88 	bl	8008dfc <_printf_float>
 800b0ec:	1c42      	adds	r2, r0, #1
 800b0ee:	4606      	mov	r6, r0
 800b0f0:	d1d6      	bne.n	800b0a0 <_svfiprintf_r+0x174>
 800b0f2:	89ab      	ldrh	r3, [r5, #12]
 800b0f4:	065b      	lsls	r3, r3, #25
 800b0f6:	f53f af2d 	bmi.w	800af54 <_svfiprintf_r+0x28>
 800b0fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0fc:	e72c      	b.n	800af58 <_svfiprintf_r+0x2c>
 800b0fe:	ab03      	add	r3, sp, #12
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	462a      	mov	r2, r5
 800b104:	4b05      	ldr	r3, [pc, #20]	@ (800b11c <_svfiprintf_r+0x1f0>)
 800b106:	a904      	add	r1, sp, #16
 800b108:	4638      	mov	r0, r7
 800b10a:	f7fe f90f 	bl	800932c <_printf_i>
 800b10e:	e7ed      	b.n	800b0ec <_svfiprintf_r+0x1c0>
 800b110:	0800c6f0 	.word	0x0800c6f0
 800b114:	0800c6fa 	.word	0x0800c6fa
 800b118:	08008dfd 	.word	0x08008dfd
 800b11c:	0800ae75 	.word	0x0800ae75
 800b120:	0800c6f6 	.word	0x0800c6f6

0800b124 <__sflush_r>:
 800b124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b12c:	0716      	lsls	r6, r2, #28
 800b12e:	4605      	mov	r5, r0
 800b130:	460c      	mov	r4, r1
 800b132:	d454      	bmi.n	800b1de <__sflush_r+0xba>
 800b134:	684b      	ldr	r3, [r1, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	dc02      	bgt.n	800b140 <__sflush_r+0x1c>
 800b13a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	dd48      	ble.n	800b1d2 <__sflush_r+0xae>
 800b140:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b142:	2e00      	cmp	r6, #0
 800b144:	d045      	beq.n	800b1d2 <__sflush_r+0xae>
 800b146:	2300      	movs	r3, #0
 800b148:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b14c:	682f      	ldr	r7, [r5, #0]
 800b14e:	6a21      	ldr	r1, [r4, #32]
 800b150:	602b      	str	r3, [r5, #0]
 800b152:	d030      	beq.n	800b1b6 <__sflush_r+0x92>
 800b154:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b156:	89a3      	ldrh	r3, [r4, #12]
 800b158:	0759      	lsls	r1, r3, #29
 800b15a:	d505      	bpl.n	800b168 <__sflush_r+0x44>
 800b15c:	6863      	ldr	r3, [r4, #4]
 800b15e:	1ad2      	subs	r2, r2, r3
 800b160:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b162:	b10b      	cbz	r3, 800b168 <__sflush_r+0x44>
 800b164:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b166:	1ad2      	subs	r2, r2, r3
 800b168:	2300      	movs	r3, #0
 800b16a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b16c:	6a21      	ldr	r1, [r4, #32]
 800b16e:	4628      	mov	r0, r5
 800b170:	47b0      	blx	r6
 800b172:	1c43      	adds	r3, r0, #1
 800b174:	89a3      	ldrh	r3, [r4, #12]
 800b176:	d106      	bne.n	800b186 <__sflush_r+0x62>
 800b178:	6829      	ldr	r1, [r5, #0]
 800b17a:	291d      	cmp	r1, #29
 800b17c:	d82b      	bhi.n	800b1d6 <__sflush_r+0xb2>
 800b17e:	4a2a      	ldr	r2, [pc, #168]	@ (800b228 <__sflush_r+0x104>)
 800b180:	410a      	asrs	r2, r1
 800b182:	07d6      	lsls	r6, r2, #31
 800b184:	d427      	bmi.n	800b1d6 <__sflush_r+0xb2>
 800b186:	2200      	movs	r2, #0
 800b188:	6062      	str	r2, [r4, #4]
 800b18a:	04d9      	lsls	r1, r3, #19
 800b18c:	6922      	ldr	r2, [r4, #16]
 800b18e:	6022      	str	r2, [r4, #0]
 800b190:	d504      	bpl.n	800b19c <__sflush_r+0x78>
 800b192:	1c42      	adds	r2, r0, #1
 800b194:	d101      	bne.n	800b19a <__sflush_r+0x76>
 800b196:	682b      	ldr	r3, [r5, #0]
 800b198:	b903      	cbnz	r3, 800b19c <__sflush_r+0x78>
 800b19a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b19c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b19e:	602f      	str	r7, [r5, #0]
 800b1a0:	b1b9      	cbz	r1, 800b1d2 <__sflush_r+0xae>
 800b1a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1a6:	4299      	cmp	r1, r3
 800b1a8:	d002      	beq.n	800b1b0 <__sflush_r+0x8c>
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	f7ff f9e0 	bl	800a570 <_free_r>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1b4:	e00d      	b.n	800b1d2 <__sflush_r+0xae>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	47b0      	blx	r6
 800b1bc:	4602      	mov	r2, r0
 800b1be:	1c50      	adds	r0, r2, #1
 800b1c0:	d1c9      	bne.n	800b156 <__sflush_r+0x32>
 800b1c2:	682b      	ldr	r3, [r5, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d0c6      	beq.n	800b156 <__sflush_r+0x32>
 800b1c8:	2b1d      	cmp	r3, #29
 800b1ca:	d001      	beq.n	800b1d0 <__sflush_r+0xac>
 800b1cc:	2b16      	cmp	r3, #22
 800b1ce:	d11e      	bne.n	800b20e <__sflush_r+0xea>
 800b1d0:	602f      	str	r7, [r5, #0]
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	e022      	b.n	800b21c <__sflush_r+0xf8>
 800b1d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1da:	b21b      	sxth	r3, r3
 800b1dc:	e01b      	b.n	800b216 <__sflush_r+0xf2>
 800b1de:	690f      	ldr	r7, [r1, #16]
 800b1e0:	2f00      	cmp	r7, #0
 800b1e2:	d0f6      	beq.n	800b1d2 <__sflush_r+0xae>
 800b1e4:	0793      	lsls	r3, r2, #30
 800b1e6:	680e      	ldr	r6, [r1, #0]
 800b1e8:	bf08      	it	eq
 800b1ea:	694b      	ldreq	r3, [r1, #20]
 800b1ec:	600f      	str	r7, [r1, #0]
 800b1ee:	bf18      	it	ne
 800b1f0:	2300      	movne	r3, #0
 800b1f2:	eba6 0807 	sub.w	r8, r6, r7
 800b1f6:	608b      	str	r3, [r1, #8]
 800b1f8:	f1b8 0f00 	cmp.w	r8, #0
 800b1fc:	dde9      	ble.n	800b1d2 <__sflush_r+0xae>
 800b1fe:	6a21      	ldr	r1, [r4, #32]
 800b200:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b202:	4643      	mov	r3, r8
 800b204:	463a      	mov	r2, r7
 800b206:	4628      	mov	r0, r5
 800b208:	47b0      	blx	r6
 800b20a:	2800      	cmp	r0, #0
 800b20c:	dc08      	bgt.n	800b220 <__sflush_r+0xfc>
 800b20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b216:	81a3      	strh	r3, [r4, #12]
 800b218:	f04f 30ff 	mov.w	r0, #4294967295
 800b21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b220:	4407      	add	r7, r0
 800b222:	eba8 0800 	sub.w	r8, r8, r0
 800b226:	e7e7      	b.n	800b1f8 <__sflush_r+0xd4>
 800b228:	dfbffffe 	.word	0xdfbffffe

0800b22c <_fflush_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	690b      	ldr	r3, [r1, #16]
 800b230:	4605      	mov	r5, r0
 800b232:	460c      	mov	r4, r1
 800b234:	b913      	cbnz	r3, 800b23c <_fflush_r+0x10>
 800b236:	2500      	movs	r5, #0
 800b238:	4628      	mov	r0, r5
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	b118      	cbz	r0, 800b246 <_fflush_r+0x1a>
 800b23e:	6a03      	ldr	r3, [r0, #32]
 800b240:	b90b      	cbnz	r3, 800b246 <_fflush_r+0x1a>
 800b242:	f7fe fa1f 	bl	8009684 <__sinit>
 800b246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d0f3      	beq.n	800b236 <_fflush_r+0xa>
 800b24e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b250:	07d0      	lsls	r0, r2, #31
 800b252:	d404      	bmi.n	800b25e <_fflush_r+0x32>
 800b254:	0599      	lsls	r1, r3, #22
 800b256:	d402      	bmi.n	800b25e <_fflush_r+0x32>
 800b258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b25a:	f7fe fb2a 	bl	80098b2 <__retarget_lock_acquire_recursive>
 800b25e:	4628      	mov	r0, r5
 800b260:	4621      	mov	r1, r4
 800b262:	f7ff ff5f 	bl	800b124 <__sflush_r>
 800b266:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b268:	07da      	lsls	r2, r3, #31
 800b26a:	4605      	mov	r5, r0
 800b26c:	d4e4      	bmi.n	800b238 <_fflush_r+0xc>
 800b26e:	89a3      	ldrh	r3, [r4, #12]
 800b270:	059b      	lsls	r3, r3, #22
 800b272:	d4e1      	bmi.n	800b238 <_fflush_r+0xc>
 800b274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b276:	f7fe fb1d 	bl	80098b4 <__retarget_lock_release_recursive>
 800b27a:	e7dd      	b.n	800b238 <_fflush_r+0xc>

0800b27c <memmove>:
 800b27c:	4288      	cmp	r0, r1
 800b27e:	b510      	push	{r4, lr}
 800b280:	eb01 0402 	add.w	r4, r1, r2
 800b284:	d902      	bls.n	800b28c <memmove+0x10>
 800b286:	4284      	cmp	r4, r0
 800b288:	4623      	mov	r3, r4
 800b28a:	d807      	bhi.n	800b29c <memmove+0x20>
 800b28c:	1e43      	subs	r3, r0, #1
 800b28e:	42a1      	cmp	r1, r4
 800b290:	d008      	beq.n	800b2a4 <memmove+0x28>
 800b292:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b29a:	e7f8      	b.n	800b28e <memmove+0x12>
 800b29c:	4402      	add	r2, r0
 800b29e:	4601      	mov	r1, r0
 800b2a0:	428a      	cmp	r2, r1
 800b2a2:	d100      	bne.n	800b2a6 <memmove+0x2a>
 800b2a4:	bd10      	pop	{r4, pc}
 800b2a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2ae:	e7f7      	b.n	800b2a0 <memmove+0x24>

0800b2b0 <_sbrk_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	4d06      	ldr	r5, [pc, #24]	@ (800b2cc <_sbrk_r+0x1c>)
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	4608      	mov	r0, r1
 800b2ba:	602b      	str	r3, [r5, #0]
 800b2bc:	f7f6 fed4 	bl	8002068 <_sbrk>
 800b2c0:	1c43      	adds	r3, r0, #1
 800b2c2:	d102      	bne.n	800b2ca <_sbrk_r+0x1a>
 800b2c4:	682b      	ldr	r3, [r5, #0]
 800b2c6:	b103      	cbz	r3, 800b2ca <_sbrk_r+0x1a>
 800b2c8:	6023      	str	r3, [r4, #0]
 800b2ca:	bd38      	pop	{r3, r4, r5, pc}
 800b2cc:	200052a8 	.word	0x200052a8

0800b2d0 <__assert_func>:
 800b2d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2d2:	4614      	mov	r4, r2
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	4b09      	ldr	r3, [pc, #36]	@ (800b2fc <__assert_func+0x2c>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4605      	mov	r5, r0
 800b2dc:	68d8      	ldr	r0, [r3, #12]
 800b2de:	b954      	cbnz	r4, 800b2f6 <__assert_func+0x26>
 800b2e0:	4b07      	ldr	r3, [pc, #28]	@ (800b300 <__assert_func+0x30>)
 800b2e2:	461c      	mov	r4, r3
 800b2e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2e8:	9100      	str	r1, [sp, #0]
 800b2ea:	462b      	mov	r3, r5
 800b2ec:	4905      	ldr	r1, [pc, #20]	@ (800b304 <__assert_func+0x34>)
 800b2ee:	f000 f86f 	bl	800b3d0 <fiprintf>
 800b2f2:	f000 f87f 	bl	800b3f4 <abort>
 800b2f6:	4b04      	ldr	r3, [pc, #16]	@ (800b308 <__assert_func+0x38>)
 800b2f8:	e7f4      	b.n	800b2e4 <__assert_func+0x14>
 800b2fa:	bf00      	nop
 800b2fc:	2000001c 	.word	0x2000001c
 800b300:	0800c746 	.word	0x0800c746
 800b304:	0800c718 	.word	0x0800c718
 800b308:	0800c70b 	.word	0x0800c70b

0800b30c <_calloc_r>:
 800b30c:	b570      	push	{r4, r5, r6, lr}
 800b30e:	fba1 5402 	umull	r5, r4, r1, r2
 800b312:	b93c      	cbnz	r4, 800b324 <_calloc_r+0x18>
 800b314:	4629      	mov	r1, r5
 800b316:	f7ff f99f 	bl	800a658 <_malloc_r>
 800b31a:	4606      	mov	r6, r0
 800b31c:	b928      	cbnz	r0, 800b32a <_calloc_r+0x1e>
 800b31e:	2600      	movs	r6, #0
 800b320:	4630      	mov	r0, r6
 800b322:	bd70      	pop	{r4, r5, r6, pc}
 800b324:	220c      	movs	r2, #12
 800b326:	6002      	str	r2, [r0, #0]
 800b328:	e7f9      	b.n	800b31e <_calloc_r+0x12>
 800b32a:	462a      	mov	r2, r5
 800b32c:	4621      	mov	r1, r4
 800b32e:	f7fe fa42 	bl	80097b6 <memset>
 800b332:	e7f5      	b.n	800b320 <_calloc_r+0x14>

0800b334 <__ascii_mbtowc>:
 800b334:	b082      	sub	sp, #8
 800b336:	b901      	cbnz	r1, 800b33a <__ascii_mbtowc+0x6>
 800b338:	a901      	add	r1, sp, #4
 800b33a:	b142      	cbz	r2, 800b34e <__ascii_mbtowc+0x1a>
 800b33c:	b14b      	cbz	r3, 800b352 <__ascii_mbtowc+0x1e>
 800b33e:	7813      	ldrb	r3, [r2, #0]
 800b340:	600b      	str	r3, [r1, #0]
 800b342:	7812      	ldrb	r2, [r2, #0]
 800b344:	1e10      	subs	r0, r2, #0
 800b346:	bf18      	it	ne
 800b348:	2001      	movne	r0, #1
 800b34a:	b002      	add	sp, #8
 800b34c:	4770      	bx	lr
 800b34e:	4610      	mov	r0, r2
 800b350:	e7fb      	b.n	800b34a <__ascii_mbtowc+0x16>
 800b352:	f06f 0001 	mvn.w	r0, #1
 800b356:	e7f8      	b.n	800b34a <__ascii_mbtowc+0x16>

0800b358 <_realloc_r>:
 800b358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b35c:	4680      	mov	r8, r0
 800b35e:	4615      	mov	r5, r2
 800b360:	460c      	mov	r4, r1
 800b362:	b921      	cbnz	r1, 800b36e <_realloc_r+0x16>
 800b364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b368:	4611      	mov	r1, r2
 800b36a:	f7ff b975 	b.w	800a658 <_malloc_r>
 800b36e:	b92a      	cbnz	r2, 800b37c <_realloc_r+0x24>
 800b370:	f7ff f8fe 	bl	800a570 <_free_r>
 800b374:	2400      	movs	r4, #0
 800b376:	4620      	mov	r0, r4
 800b378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b37c:	f000 f841 	bl	800b402 <_malloc_usable_size_r>
 800b380:	4285      	cmp	r5, r0
 800b382:	4606      	mov	r6, r0
 800b384:	d802      	bhi.n	800b38c <_realloc_r+0x34>
 800b386:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b38a:	d8f4      	bhi.n	800b376 <_realloc_r+0x1e>
 800b38c:	4629      	mov	r1, r5
 800b38e:	4640      	mov	r0, r8
 800b390:	f7ff f962 	bl	800a658 <_malloc_r>
 800b394:	4607      	mov	r7, r0
 800b396:	2800      	cmp	r0, #0
 800b398:	d0ec      	beq.n	800b374 <_realloc_r+0x1c>
 800b39a:	42b5      	cmp	r5, r6
 800b39c:	462a      	mov	r2, r5
 800b39e:	4621      	mov	r1, r4
 800b3a0:	bf28      	it	cs
 800b3a2:	4632      	movcs	r2, r6
 800b3a4:	f7fe fa87 	bl	80098b6 <memcpy>
 800b3a8:	4621      	mov	r1, r4
 800b3aa:	4640      	mov	r0, r8
 800b3ac:	f7ff f8e0 	bl	800a570 <_free_r>
 800b3b0:	463c      	mov	r4, r7
 800b3b2:	e7e0      	b.n	800b376 <_realloc_r+0x1e>

0800b3b4 <__ascii_wctomb>:
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	4608      	mov	r0, r1
 800b3b8:	b141      	cbz	r1, 800b3cc <__ascii_wctomb+0x18>
 800b3ba:	2aff      	cmp	r2, #255	@ 0xff
 800b3bc:	d904      	bls.n	800b3c8 <__ascii_wctomb+0x14>
 800b3be:	228a      	movs	r2, #138	@ 0x8a
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c6:	4770      	bx	lr
 800b3c8:	700a      	strb	r2, [r1, #0]
 800b3ca:	2001      	movs	r0, #1
 800b3cc:	4770      	bx	lr
	...

0800b3d0 <fiprintf>:
 800b3d0:	b40e      	push	{r1, r2, r3}
 800b3d2:	b503      	push	{r0, r1, lr}
 800b3d4:	4601      	mov	r1, r0
 800b3d6:	ab03      	add	r3, sp, #12
 800b3d8:	4805      	ldr	r0, [pc, #20]	@ (800b3f0 <fiprintf+0x20>)
 800b3da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3de:	6800      	ldr	r0, [r0, #0]
 800b3e0:	9301      	str	r3, [sp, #4]
 800b3e2:	f000 f83f 	bl	800b464 <_vfiprintf_r>
 800b3e6:	b002      	add	sp, #8
 800b3e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3ec:	b003      	add	sp, #12
 800b3ee:	4770      	bx	lr
 800b3f0:	2000001c 	.word	0x2000001c

0800b3f4 <abort>:
 800b3f4:	b508      	push	{r3, lr}
 800b3f6:	2006      	movs	r0, #6
 800b3f8:	f000 fa08 	bl	800b80c <raise>
 800b3fc:	2001      	movs	r0, #1
 800b3fe:	f7f6 fdbb 	bl	8001f78 <_exit>

0800b402 <_malloc_usable_size_r>:
 800b402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b406:	1f18      	subs	r0, r3, #4
 800b408:	2b00      	cmp	r3, #0
 800b40a:	bfbc      	itt	lt
 800b40c:	580b      	ldrlt	r3, [r1, r0]
 800b40e:	18c0      	addlt	r0, r0, r3
 800b410:	4770      	bx	lr

0800b412 <__sfputc_r>:
 800b412:	6893      	ldr	r3, [r2, #8]
 800b414:	3b01      	subs	r3, #1
 800b416:	2b00      	cmp	r3, #0
 800b418:	b410      	push	{r4}
 800b41a:	6093      	str	r3, [r2, #8]
 800b41c:	da08      	bge.n	800b430 <__sfputc_r+0x1e>
 800b41e:	6994      	ldr	r4, [r2, #24]
 800b420:	42a3      	cmp	r3, r4
 800b422:	db01      	blt.n	800b428 <__sfputc_r+0x16>
 800b424:	290a      	cmp	r1, #10
 800b426:	d103      	bne.n	800b430 <__sfputc_r+0x1e>
 800b428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b42c:	f000 b932 	b.w	800b694 <__swbuf_r>
 800b430:	6813      	ldr	r3, [r2, #0]
 800b432:	1c58      	adds	r0, r3, #1
 800b434:	6010      	str	r0, [r2, #0]
 800b436:	7019      	strb	r1, [r3, #0]
 800b438:	4608      	mov	r0, r1
 800b43a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <__sfputs_r>:
 800b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b442:	4606      	mov	r6, r0
 800b444:	460f      	mov	r7, r1
 800b446:	4614      	mov	r4, r2
 800b448:	18d5      	adds	r5, r2, r3
 800b44a:	42ac      	cmp	r4, r5
 800b44c:	d101      	bne.n	800b452 <__sfputs_r+0x12>
 800b44e:	2000      	movs	r0, #0
 800b450:	e007      	b.n	800b462 <__sfputs_r+0x22>
 800b452:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b456:	463a      	mov	r2, r7
 800b458:	4630      	mov	r0, r6
 800b45a:	f7ff ffda 	bl	800b412 <__sfputc_r>
 800b45e:	1c43      	adds	r3, r0, #1
 800b460:	d1f3      	bne.n	800b44a <__sfputs_r+0xa>
 800b462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b464 <_vfiprintf_r>:
 800b464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b468:	460d      	mov	r5, r1
 800b46a:	b09d      	sub	sp, #116	@ 0x74
 800b46c:	4614      	mov	r4, r2
 800b46e:	4698      	mov	r8, r3
 800b470:	4606      	mov	r6, r0
 800b472:	b118      	cbz	r0, 800b47c <_vfiprintf_r+0x18>
 800b474:	6a03      	ldr	r3, [r0, #32]
 800b476:	b90b      	cbnz	r3, 800b47c <_vfiprintf_r+0x18>
 800b478:	f7fe f904 	bl	8009684 <__sinit>
 800b47c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b47e:	07d9      	lsls	r1, r3, #31
 800b480:	d405      	bmi.n	800b48e <_vfiprintf_r+0x2a>
 800b482:	89ab      	ldrh	r3, [r5, #12]
 800b484:	059a      	lsls	r2, r3, #22
 800b486:	d402      	bmi.n	800b48e <_vfiprintf_r+0x2a>
 800b488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b48a:	f7fe fa12 	bl	80098b2 <__retarget_lock_acquire_recursive>
 800b48e:	89ab      	ldrh	r3, [r5, #12]
 800b490:	071b      	lsls	r3, r3, #28
 800b492:	d501      	bpl.n	800b498 <_vfiprintf_r+0x34>
 800b494:	692b      	ldr	r3, [r5, #16]
 800b496:	b99b      	cbnz	r3, 800b4c0 <_vfiprintf_r+0x5c>
 800b498:	4629      	mov	r1, r5
 800b49a:	4630      	mov	r0, r6
 800b49c:	f000 f938 	bl	800b710 <__swsetup_r>
 800b4a0:	b170      	cbz	r0, 800b4c0 <_vfiprintf_r+0x5c>
 800b4a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4a4:	07dc      	lsls	r4, r3, #31
 800b4a6:	d504      	bpl.n	800b4b2 <_vfiprintf_r+0x4e>
 800b4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ac:	b01d      	add	sp, #116	@ 0x74
 800b4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b2:	89ab      	ldrh	r3, [r5, #12]
 800b4b4:	0598      	lsls	r0, r3, #22
 800b4b6:	d4f7      	bmi.n	800b4a8 <_vfiprintf_r+0x44>
 800b4b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4ba:	f7fe f9fb 	bl	80098b4 <__retarget_lock_release_recursive>
 800b4be:	e7f3      	b.n	800b4a8 <_vfiprintf_r+0x44>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4c4:	2320      	movs	r3, #32
 800b4c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4ce:	2330      	movs	r3, #48	@ 0x30
 800b4d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b680 <_vfiprintf_r+0x21c>
 800b4d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4d8:	f04f 0901 	mov.w	r9, #1
 800b4dc:	4623      	mov	r3, r4
 800b4de:	469a      	mov	sl, r3
 800b4e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4e4:	b10a      	cbz	r2, 800b4ea <_vfiprintf_r+0x86>
 800b4e6:	2a25      	cmp	r2, #37	@ 0x25
 800b4e8:	d1f9      	bne.n	800b4de <_vfiprintf_r+0x7a>
 800b4ea:	ebba 0b04 	subs.w	fp, sl, r4
 800b4ee:	d00b      	beq.n	800b508 <_vfiprintf_r+0xa4>
 800b4f0:	465b      	mov	r3, fp
 800b4f2:	4622      	mov	r2, r4
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	f7ff ffa2 	bl	800b440 <__sfputs_r>
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	f000 80a7 	beq.w	800b650 <_vfiprintf_r+0x1ec>
 800b502:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b504:	445a      	add	r2, fp
 800b506:	9209      	str	r2, [sp, #36]	@ 0x24
 800b508:	f89a 3000 	ldrb.w	r3, [sl]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f000 809f 	beq.w	800b650 <_vfiprintf_r+0x1ec>
 800b512:	2300      	movs	r3, #0
 800b514:	f04f 32ff 	mov.w	r2, #4294967295
 800b518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b51c:	f10a 0a01 	add.w	sl, sl, #1
 800b520:	9304      	str	r3, [sp, #16]
 800b522:	9307      	str	r3, [sp, #28]
 800b524:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b528:	931a      	str	r3, [sp, #104]	@ 0x68
 800b52a:	4654      	mov	r4, sl
 800b52c:	2205      	movs	r2, #5
 800b52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b532:	4853      	ldr	r0, [pc, #332]	@ (800b680 <_vfiprintf_r+0x21c>)
 800b534:	f7f4 fe4c 	bl	80001d0 <memchr>
 800b538:	9a04      	ldr	r2, [sp, #16]
 800b53a:	b9d8      	cbnz	r0, 800b574 <_vfiprintf_r+0x110>
 800b53c:	06d1      	lsls	r1, r2, #27
 800b53e:	bf44      	itt	mi
 800b540:	2320      	movmi	r3, #32
 800b542:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b546:	0713      	lsls	r3, r2, #28
 800b548:	bf44      	itt	mi
 800b54a:	232b      	movmi	r3, #43	@ 0x2b
 800b54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b550:	f89a 3000 	ldrb.w	r3, [sl]
 800b554:	2b2a      	cmp	r3, #42	@ 0x2a
 800b556:	d015      	beq.n	800b584 <_vfiprintf_r+0x120>
 800b558:	9a07      	ldr	r2, [sp, #28]
 800b55a:	4654      	mov	r4, sl
 800b55c:	2000      	movs	r0, #0
 800b55e:	f04f 0c0a 	mov.w	ip, #10
 800b562:	4621      	mov	r1, r4
 800b564:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b568:	3b30      	subs	r3, #48	@ 0x30
 800b56a:	2b09      	cmp	r3, #9
 800b56c:	d94b      	bls.n	800b606 <_vfiprintf_r+0x1a2>
 800b56e:	b1b0      	cbz	r0, 800b59e <_vfiprintf_r+0x13a>
 800b570:	9207      	str	r2, [sp, #28]
 800b572:	e014      	b.n	800b59e <_vfiprintf_r+0x13a>
 800b574:	eba0 0308 	sub.w	r3, r0, r8
 800b578:	fa09 f303 	lsl.w	r3, r9, r3
 800b57c:	4313      	orrs	r3, r2
 800b57e:	9304      	str	r3, [sp, #16]
 800b580:	46a2      	mov	sl, r4
 800b582:	e7d2      	b.n	800b52a <_vfiprintf_r+0xc6>
 800b584:	9b03      	ldr	r3, [sp, #12]
 800b586:	1d19      	adds	r1, r3, #4
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	9103      	str	r1, [sp, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	bfbb      	ittet	lt
 800b590:	425b      	neglt	r3, r3
 800b592:	f042 0202 	orrlt.w	r2, r2, #2
 800b596:	9307      	strge	r3, [sp, #28]
 800b598:	9307      	strlt	r3, [sp, #28]
 800b59a:	bfb8      	it	lt
 800b59c:	9204      	strlt	r2, [sp, #16]
 800b59e:	7823      	ldrb	r3, [r4, #0]
 800b5a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5a2:	d10a      	bne.n	800b5ba <_vfiprintf_r+0x156>
 800b5a4:	7863      	ldrb	r3, [r4, #1]
 800b5a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5a8:	d132      	bne.n	800b610 <_vfiprintf_r+0x1ac>
 800b5aa:	9b03      	ldr	r3, [sp, #12]
 800b5ac:	1d1a      	adds	r2, r3, #4
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	9203      	str	r2, [sp, #12]
 800b5b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5b6:	3402      	adds	r4, #2
 800b5b8:	9305      	str	r3, [sp, #20]
 800b5ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b690 <_vfiprintf_r+0x22c>
 800b5be:	7821      	ldrb	r1, [r4, #0]
 800b5c0:	2203      	movs	r2, #3
 800b5c2:	4650      	mov	r0, sl
 800b5c4:	f7f4 fe04 	bl	80001d0 <memchr>
 800b5c8:	b138      	cbz	r0, 800b5da <_vfiprintf_r+0x176>
 800b5ca:	9b04      	ldr	r3, [sp, #16]
 800b5cc:	eba0 000a 	sub.w	r0, r0, sl
 800b5d0:	2240      	movs	r2, #64	@ 0x40
 800b5d2:	4082      	lsls	r2, r0
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	3401      	adds	r4, #1
 800b5d8:	9304      	str	r3, [sp, #16]
 800b5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5de:	4829      	ldr	r0, [pc, #164]	@ (800b684 <_vfiprintf_r+0x220>)
 800b5e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5e4:	2206      	movs	r2, #6
 800b5e6:	f7f4 fdf3 	bl	80001d0 <memchr>
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	d03f      	beq.n	800b66e <_vfiprintf_r+0x20a>
 800b5ee:	4b26      	ldr	r3, [pc, #152]	@ (800b688 <_vfiprintf_r+0x224>)
 800b5f0:	bb1b      	cbnz	r3, 800b63a <_vfiprintf_r+0x1d6>
 800b5f2:	9b03      	ldr	r3, [sp, #12]
 800b5f4:	3307      	adds	r3, #7
 800b5f6:	f023 0307 	bic.w	r3, r3, #7
 800b5fa:	3308      	adds	r3, #8
 800b5fc:	9303      	str	r3, [sp, #12]
 800b5fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b600:	443b      	add	r3, r7
 800b602:	9309      	str	r3, [sp, #36]	@ 0x24
 800b604:	e76a      	b.n	800b4dc <_vfiprintf_r+0x78>
 800b606:	fb0c 3202 	mla	r2, ip, r2, r3
 800b60a:	460c      	mov	r4, r1
 800b60c:	2001      	movs	r0, #1
 800b60e:	e7a8      	b.n	800b562 <_vfiprintf_r+0xfe>
 800b610:	2300      	movs	r3, #0
 800b612:	3401      	adds	r4, #1
 800b614:	9305      	str	r3, [sp, #20]
 800b616:	4619      	mov	r1, r3
 800b618:	f04f 0c0a 	mov.w	ip, #10
 800b61c:	4620      	mov	r0, r4
 800b61e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b622:	3a30      	subs	r2, #48	@ 0x30
 800b624:	2a09      	cmp	r2, #9
 800b626:	d903      	bls.n	800b630 <_vfiprintf_r+0x1cc>
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d0c6      	beq.n	800b5ba <_vfiprintf_r+0x156>
 800b62c:	9105      	str	r1, [sp, #20]
 800b62e:	e7c4      	b.n	800b5ba <_vfiprintf_r+0x156>
 800b630:	fb0c 2101 	mla	r1, ip, r1, r2
 800b634:	4604      	mov	r4, r0
 800b636:	2301      	movs	r3, #1
 800b638:	e7f0      	b.n	800b61c <_vfiprintf_r+0x1b8>
 800b63a:	ab03      	add	r3, sp, #12
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	462a      	mov	r2, r5
 800b640:	4b12      	ldr	r3, [pc, #72]	@ (800b68c <_vfiprintf_r+0x228>)
 800b642:	a904      	add	r1, sp, #16
 800b644:	4630      	mov	r0, r6
 800b646:	f7fd fbd9 	bl	8008dfc <_printf_float>
 800b64a:	4607      	mov	r7, r0
 800b64c:	1c78      	adds	r0, r7, #1
 800b64e:	d1d6      	bne.n	800b5fe <_vfiprintf_r+0x19a>
 800b650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b652:	07d9      	lsls	r1, r3, #31
 800b654:	d405      	bmi.n	800b662 <_vfiprintf_r+0x1fe>
 800b656:	89ab      	ldrh	r3, [r5, #12]
 800b658:	059a      	lsls	r2, r3, #22
 800b65a:	d402      	bmi.n	800b662 <_vfiprintf_r+0x1fe>
 800b65c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b65e:	f7fe f929 	bl	80098b4 <__retarget_lock_release_recursive>
 800b662:	89ab      	ldrh	r3, [r5, #12]
 800b664:	065b      	lsls	r3, r3, #25
 800b666:	f53f af1f 	bmi.w	800b4a8 <_vfiprintf_r+0x44>
 800b66a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b66c:	e71e      	b.n	800b4ac <_vfiprintf_r+0x48>
 800b66e:	ab03      	add	r3, sp, #12
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	462a      	mov	r2, r5
 800b674:	4b05      	ldr	r3, [pc, #20]	@ (800b68c <_vfiprintf_r+0x228>)
 800b676:	a904      	add	r1, sp, #16
 800b678:	4630      	mov	r0, r6
 800b67a:	f7fd fe57 	bl	800932c <_printf_i>
 800b67e:	e7e4      	b.n	800b64a <_vfiprintf_r+0x1e6>
 800b680:	0800c6f0 	.word	0x0800c6f0
 800b684:	0800c6fa 	.word	0x0800c6fa
 800b688:	08008dfd 	.word	0x08008dfd
 800b68c:	0800b441 	.word	0x0800b441
 800b690:	0800c6f6 	.word	0x0800c6f6

0800b694 <__swbuf_r>:
 800b694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b696:	460e      	mov	r6, r1
 800b698:	4614      	mov	r4, r2
 800b69a:	4605      	mov	r5, r0
 800b69c:	b118      	cbz	r0, 800b6a6 <__swbuf_r+0x12>
 800b69e:	6a03      	ldr	r3, [r0, #32]
 800b6a0:	b90b      	cbnz	r3, 800b6a6 <__swbuf_r+0x12>
 800b6a2:	f7fd ffef 	bl	8009684 <__sinit>
 800b6a6:	69a3      	ldr	r3, [r4, #24]
 800b6a8:	60a3      	str	r3, [r4, #8]
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	071a      	lsls	r2, r3, #28
 800b6ae:	d501      	bpl.n	800b6b4 <__swbuf_r+0x20>
 800b6b0:	6923      	ldr	r3, [r4, #16]
 800b6b2:	b943      	cbnz	r3, 800b6c6 <__swbuf_r+0x32>
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	f000 f82a 	bl	800b710 <__swsetup_r>
 800b6bc:	b118      	cbz	r0, 800b6c6 <__swbuf_r+0x32>
 800b6be:	f04f 37ff 	mov.w	r7, #4294967295
 800b6c2:	4638      	mov	r0, r7
 800b6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	6922      	ldr	r2, [r4, #16]
 800b6ca:	1a98      	subs	r0, r3, r2
 800b6cc:	6963      	ldr	r3, [r4, #20]
 800b6ce:	b2f6      	uxtb	r6, r6
 800b6d0:	4283      	cmp	r3, r0
 800b6d2:	4637      	mov	r7, r6
 800b6d4:	dc05      	bgt.n	800b6e2 <__swbuf_r+0x4e>
 800b6d6:	4621      	mov	r1, r4
 800b6d8:	4628      	mov	r0, r5
 800b6da:	f7ff fda7 	bl	800b22c <_fflush_r>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d1ed      	bne.n	800b6be <__swbuf_r+0x2a>
 800b6e2:	68a3      	ldr	r3, [r4, #8]
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	60a3      	str	r3, [r4, #8]
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	1c5a      	adds	r2, r3, #1
 800b6ec:	6022      	str	r2, [r4, #0]
 800b6ee:	701e      	strb	r6, [r3, #0]
 800b6f0:	6962      	ldr	r2, [r4, #20]
 800b6f2:	1c43      	adds	r3, r0, #1
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d004      	beq.n	800b702 <__swbuf_r+0x6e>
 800b6f8:	89a3      	ldrh	r3, [r4, #12]
 800b6fa:	07db      	lsls	r3, r3, #31
 800b6fc:	d5e1      	bpl.n	800b6c2 <__swbuf_r+0x2e>
 800b6fe:	2e0a      	cmp	r6, #10
 800b700:	d1df      	bne.n	800b6c2 <__swbuf_r+0x2e>
 800b702:	4621      	mov	r1, r4
 800b704:	4628      	mov	r0, r5
 800b706:	f7ff fd91 	bl	800b22c <_fflush_r>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	d0d9      	beq.n	800b6c2 <__swbuf_r+0x2e>
 800b70e:	e7d6      	b.n	800b6be <__swbuf_r+0x2a>

0800b710 <__swsetup_r>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	4b29      	ldr	r3, [pc, #164]	@ (800b7b8 <__swsetup_r+0xa8>)
 800b714:	4605      	mov	r5, r0
 800b716:	6818      	ldr	r0, [r3, #0]
 800b718:	460c      	mov	r4, r1
 800b71a:	b118      	cbz	r0, 800b724 <__swsetup_r+0x14>
 800b71c:	6a03      	ldr	r3, [r0, #32]
 800b71e:	b90b      	cbnz	r3, 800b724 <__swsetup_r+0x14>
 800b720:	f7fd ffb0 	bl	8009684 <__sinit>
 800b724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b728:	0719      	lsls	r1, r3, #28
 800b72a:	d422      	bmi.n	800b772 <__swsetup_r+0x62>
 800b72c:	06da      	lsls	r2, r3, #27
 800b72e:	d407      	bmi.n	800b740 <__swsetup_r+0x30>
 800b730:	2209      	movs	r2, #9
 800b732:	602a      	str	r2, [r5, #0]
 800b734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b738:	81a3      	strh	r3, [r4, #12]
 800b73a:	f04f 30ff 	mov.w	r0, #4294967295
 800b73e:	e033      	b.n	800b7a8 <__swsetup_r+0x98>
 800b740:	0758      	lsls	r0, r3, #29
 800b742:	d512      	bpl.n	800b76a <__swsetup_r+0x5a>
 800b744:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b746:	b141      	cbz	r1, 800b75a <__swsetup_r+0x4a>
 800b748:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b74c:	4299      	cmp	r1, r3
 800b74e:	d002      	beq.n	800b756 <__swsetup_r+0x46>
 800b750:	4628      	mov	r0, r5
 800b752:	f7fe ff0d 	bl	800a570 <_free_r>
 800b756:	2300      	movs	r3, #0
 800b758:	6363      	str	r3, [r4, #52]	@ 0x34
 800b75a:	89a3      	ldrh	r3, [r4, #12]
 800b75c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b760:	81a3      	strh	r3, [r4, #12]
 800b762:	2300      	movs	r3, #0
 800b764:	6063      	str	r3, [r4, #4]
 800b766:	6923      	ldr	r3, [r4, #16]
 800b768:	6023      	str	r3, [r4, #0]
 800b76a:	89a3      	ldrh	r3, [r4, #12]
 800b76c:	f043 0308 	orr.w	r3, r3, #8
 800b770:	81a3      	strh	r3, [r4, #12]
 800b772:	6923      	ldr	r3, [r4, #16]
 800b774:	b94b      	cbnz	r3, 800b78a <__swsetup_r+0x7a>
 800b776:	89a3      	ldrh	r3, [r4, #12]
 800b778:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b77c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b780:	d003      	beq.n	800b78a <__swsetup_r+0x7a>
 800b782:	4621      	mov	r1, r4
 800b784:	4628      	mov	r0, r5
 800b786:	f000 f883 	bl	800b890 <__smakebuf_r>
 800b78a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b78e:	f013 0201 	ands.w	r2, r3, #1
 800b792:	d00a      	beq.n	800b7aa <__swsetup_r+0x9a>
 800b794:	2200      	movs	r2, #0
 800b796:	60a2      	str	r2, [r4, #8]
 800b798:	6962      	ldr	r2, [r4, #20]
 800b79a:	4252      	negs	r2, r2
 800b79c:	61a2      	str	r2, [r4, #24]
 800b79e:	6922      	ldr	r2, [r4, #16]
 800b7a0:	b942      	cbnz	r2, 800b7b4 <__swsetup_r+0xa4>
 800b7a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7a6:	d1c5      	bne.n	800b734 <__swsetup_r+0x24>
 800b7a8:	bd38      	pop	{r3, r4, r5, pc}
 800b7aa:	0799      	lsls	r1, r3, #30
 800b7ac:	bf58      	it	pl
 800b7ae:	6962      	ldrpl	r2, [r4, #20]
 800b7b0:	60a2      	str	r2, [r4, #8]
 800b7b2:	e7f4      	b.n	800b79e <__swsetup_r+0x8e>
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	e7f7      	b.n	800b7a8 <__swsetup_r+0x98>
 800b7b8:	2000001c 	.word	0x2000001c

0800b7bc <_raise_r>:
 800b7bc:	291f      	cmp	r1, #31
 800b7be:	b538      	push	{r3, r4, r5, lr}
 800b7c0:	4605      	mov	r5, r0
 800b7c2:	460c      	mov	r4, r1
 800b7c4:	d904      	bls.n	800b7d0 <_raise_r+0x14>
 800b7c6:	2316      	movs	r3, #22
 800b7c8:	6003      	str	r3, [r0, #0]
 800b7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ce:	bd38      	pop	{r3, r4, r5, pc}
 800b7d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b7d2:	b112      	cbz	r2, 800b7da <_raise_r+0x1e>
 800b7d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7d8:	b94b      	cbnz	r3, 800b7ee <_raise_r+0x32>
 800b7da:	4628      	mov	r0, r5
 800b7dc:	f000 f830 	bl	800b840 <_getpid_r>
 800b7e0:	4622      	mov	r2, r4
 800b7e2:	4601      	mov	r1, r0
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7ea:	f000 b817 	b.w	800b81c <_kill_r>
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d00a      	beq.n	800b808 <_raise_r+0x4c>
 800b7f2:	1c59      	adds	r1, r3, #1
 800b7f4:	d103      	bne.n	800b7fe <_raise_r+0x42>
 800b7f6:	2316      	movs	r3, #22
 800b7f8:	6003      	str	r3, [r0, #0]
 800b7fa:	2001      	movs	r0, #1
 800b7fc:	e7e7      	b.n	800b7ce <_raise_r+0x12>
 800b7fe:	2100      	movs	r1, #0
 800b800:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b804:	4620      	mov	r0, r4
 800b806:	4798      	blx	r3
 800b808:	2000      	movs	r0, #0
 800b80a:	e7e0      	b.n	800b7ce <_raise_r+0x12>

0800b80c <raise>:
 800b80c:	4b02      	ldr	r3, [pc, #8]	@ (800b818 <raise+0xc>)
 800b80e:	4601      	mov	r1, r0
 800b810:	6818      	ldr	r0, [r3, #0]
 800b812:	f7ff bfd3 	b.w	800b7bc <_raise_r>
 800b816:	bf00      	nop
 800b818:	2000001c 	.word	0x2000001c

0800b81c <_kill_r>:
 800b81c:	b538      	push	{r3, r4, r5, lr}
 800b81e:	4d07      	ldr	r5, [pc, #28]	@ (800b83c <_kill_r+0x20>)
 800b820:	2300      	movs	r3, #0
 800b822:	4604      	mov	r4, r0
 800b824:	4608      	mov	r0, r1
 800b826:	4611      	mov	r1, r2
 800b828:	602b      	str	r3, [r5, #0]
 800b82a:	f7f6 fb95 	bl	8001f58 <_kill>
 800b82e:	1c43      	adds	r3, r0, #1
 800b830:	d102      	bne.n	800b838 <_kill_r+0x1c>
 800b832:	682b      	ldr	r3, [r5, #0]
 800b834:	b103      	cbz	r3, 800b838 <_kill_r+0x1c>
 800b836:	6023      	str	r3, [r4, #0]
 800b838:	bd38      	pop	{r3, r4, r5, pc}
 800b83a:	bf00      	nop
 800b83c:	200052a8 	.word	0x200052a8

0800b840 <_getpid_r>:
 800b840:	f7f6 bb82 	b.w	8001f48 <_getpid>

0800b844 <__swhatbuf_r>:
 800b844:	b570      	push	{r4, r5, r6, lr}
 800b846:	460c      	mov	r4, r1
 800b848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b84c:	2900      	cmp	r1, #0
 800b84e:	b096      	sub	sp, #88	@ 0x58
 800b850:	4615      	mov	r5, r2
 800b852:	461e      	mov	r6, r3
 800b854:	da0d      	bge.n	800b872 <__swhatbuf_r+0x2e>
 800b856:	89a3      	ldrh	r3, [r4, #12]
 800b858:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b85c:	f04f 0100 	mov.w	r1, #0
 800b860:	bf14      	ite	ne
 800b862:	2340      	movne	r3, #64	@ 0x40
 800b864:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b868:	2000      	movs	r0, #0
 800b86a:	6031      	str	r1, [r6, #0]
 800b86c:	602b      	str	r3, [r5, #0]
 800b86e:	b016      	add	sp, #88	@ 0x58
 800b870:	bd70      	pop	{r4, r5, r6, pc}
 800b872:	466a      	mov	r2, sp
 800b874:	f000 f848 	bl	800b908 <_fstat_r>
 800b878:	2800      	cmp	r0, #0
 800b87a:	dbec      	blt.n	800b856 <__swhatbuf_r+0x12>
 800b87c:	9901      	ldr	r1, [sp, #4]
 800b87e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b882:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b886:	4259      	negs	r1, r3
 800b888:	4159      	adcs	r1, r3
 800b88a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b88e:	e7eb      	b.n	800b868 <__swhatbuf_r+0x24>

0800b890 <__smakebuf_r>:
 800b890:	898b      	ldrh	r3, [r1, #12]
 800b892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b894:	079d      	lsls	r5, r3, #30
 800b896:	4606      	mov	r6, r0
 800b898:	460c      	mov	r4, r1
 800b89a:	d507      	bpl.n	800b8ac <__smakebuf_r+0x1c>
 800b89c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	6123      	str	r3, [r4, #16]
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	6163      	str	r3, [r4, #20]
 800b8a8:	b003      	add	sp, #12
 800b8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8ac:	ab01      	add	r3, sp, #4
 800b8ae:	466a      	mov	r2, sp
 800b8b0:	f7ff ffc8 	bl	800b844 <__swhatbuf_r>
 800b8b4:	9f00      	ldr	r7, [sp, #0]
 800b8b6:	4605      	mov	r5, r0
 800b8b8:	4639      	mov	r1, r7
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f7fe fecc 	bl	800a658 <_malloc_r>
 800b8c0:	b948      	cbnz	r0, 800b8d6 <__smakebuf_r+0x46>
 800b8c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8c6:	059a      	lsls	r2, r3, #22
 800b8c8:	d4ee      	bmi.n	800b8a8 <__smakebuf_r+0x18>
 800b8ca:	f023 0303 	bic.w	r3, r3, #3
 800b8ce:	f043 0302 	orr.w	r3, r3, #2
 800b8d2:	81a3      	strh	r3, [r4, #12]
 800b8d4:	e7e2      	b.n	800b89c <__smakebuf_r+0xc>
 800b8d6:	89a3      	ldrh	r3, [r4, #12]
 800b8d8:	6020      	str	r0, [r4, #0]
 800b8da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8de:	81a3      	strh	r3, [r4, #12]
 800b8e0:	9b01      	ldr	r3, [sp, #4]
 800b8e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b8e6:	b15b      	cbz	r3, 800b900 <__smakebuf_r+0x70>
 800b8e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	f000 f81d 	bl	800b92c <_isatty_r>
 800b8f2:	b128      	cbz	r0, 800b900 <__smakebuf_r+0x70>
 800b8f4:	89a3      	ldrh	r3, [r4, #12]
 800b8f6:	f023 0303 	bic.w	r3, r3, #3
 800b8fa:	f043 0301 	orr.w	r3, r3, #1
 800b8fe:	81a3      	strh	r3, [r4, #12]
 800b900:	89a3      	ldrh	r3, [r4, #12]
 800b902:	431d      	orrs	r5, r3
 800b904:	81a5      	strh	r5, [r4, #12]
 800b906:	e7cf      	b.n	800b8a8 <__smakebuf_r+0x18>

0800b908 <_fstat_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	4d07      	ldr	r5, [pc, #28]	@ (800b928 <_fstat_r+0x20>)
 800b90c:	2300      	movs	r3, #0
 800b90e:	4604      	mov	r4, r0
 800b910:	4608      	mov	r0, r1
 800b912:	4611      	mov	r1, r2
 800b914:	602b      	str	r3, [r5, #0]
 800b916:	f7f6 fb7f 	bl	8002018 <_fstat>
 800b91a:	1c43      	adds	r3, r0, #1
 800b91c:	d102      	bne.n	800b924 <_fstat_r+0x1c>
 800b91e:	682b      	ldr	r3, [r5, #0]
 800b920:	b103      	cbz	r3, 800b924 <_fstat_r+0x1c>
 800b922:	6023      	str	r3, [r4, #0]
 800b924:	bd38      	pop	{r3, r4, r5, pc}
 800b926:	bf00      	nop
 800b928:	200052a8 	.word	0x200052a8

0800b92c <_isatty_r>:
 800b92c:	b538      	push	{r3, r4, r5, lr}
 800b92e:	4d06      	ldr	r5, [pc, #24]	@ (800b948 <_isatty_r+0x1c>)
 800b930:	2300      	movs	r3, #0
 800b932:	4604      	mov	r4, r0
 800b934:	4608      	mov	r0, r1
 800b936:	602b      	str	r3, [r5, #0]
 800b938:	f7f6 fb7e 	bl	8002038 <_isatty>
 800b93c:	1c43      	adds	r3, r0, #1
 800b93e:	d102      	bne.n	800b946 <_isatty_r+0x1a>
 800b940:	682b      	ldr	r3, [r5, #0]
 800b942:	b103      	cbz	r3, 800b946 <_isatty_r+0x1a>
 800b944:	6023      	str	r3, [r4, #0]
 800b946:	bd38      	pop	{r3, r4, r5, pc}
 800b948:	200052a8 	.word	0x200052a8

0800b94c <_init>:
 800b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94e:	bf00      	nop
 800b950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b952:	bc08      	pop	{r3}
 800b954:	469e      	mov	lr, r3
 800b956:	4770      	bx	lr

0800b958 <_fini>:
 800b958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95a:	bf00      	nop
 800b95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b95e:	bc08      	pop	{r3}
 800b960:	469e      	mov	lr, r3
 800b962:	4770      	bx	lr
