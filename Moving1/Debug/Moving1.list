
Moving1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b804  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f28  0800b998  0800b998  0000c998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8c0  0800c8c0  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8c0  0800c8c0  0000d8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8c8  0800c8c8  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8c8  0800c8c8  0000d8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c8cc  0800c8cc  0000d8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c8d0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1d8  2**0
                  CONTENTS
 10 .bss          000050dc  200001d8  200001d8  0000e1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200052b4  200052b4  0000e1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018802  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003780  00000000  00000000  00026a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0002a190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001171  00000000  00000000  0002b808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004c7b  00000000  00000000  0002c979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018886  00000000  00000000  000315f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7f7d  00000000  00000000  00049e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121df7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006fb4  00000000  00000000  00121e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00128df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b97c 	.word	0x0800b97c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800b97c 	.word	0x0800b97c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f001 f972 	bl	8002184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f85a 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 fb68 	bl	8001578 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000ea8:	f000 fa92 	bl	80013d0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000eac:	f000 f950 	bl	8001150 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000eb0:	f000 f8b0 	bl	8001014 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000eb4:	f000 fb36 	bl	8001524 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000eb8:	f000 f99e 	bl	80011f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ebc:	f000 f9fe 	bl	80012bc <MX_TIM4_Init>
  MX_TIM6_Init();
 8000ec0:	f000 fa50 	bl	8001364 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000ec4:	f007 fe86 	bl	8008bd4 <OLED_Init>
  HAL_UART_Receive_IT(&huart3, RxBuffer, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4915      	ldr	r1, [pc, #84]	@ (8000f20 <main+0x88>)
 8000ecc:	4815      	ldr	r0, [pc, #84]	@ (8000f24 <main+0x8c>)
 8000ece:	f003 ffae 	bl	8004e2e <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ed2:	f004 ff5b 	bl	8005d8c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ed6:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <main+0x90>)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4814      	ldr	r0, [pc, #80]	@ (8000f2c <main+0x94>)
 8000edc:	f004 ffa0 	bl	8005e20 <osThreadNew>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a13      	ldr	r2, [pc, #76]	@ (8000f30 <main+0x98>)
 8000ee4:	6013      	str	r3, [r2, #0]

  /* creation of DCMotor1 */
  DCMotor1Handle = osThreadNew(motors, NULL, &DCMotor1_attributes);
 8000ee6:	4a13      	ldr	r2, [pc, #76]	@ (8000f34 <main+0x9c>)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4813      	ldr	r0, [pc, #76]	@ (8000f38 <main+0xa0>)
 8000eec:	f004 ff98 	bl	8005e20 <osThreadNew>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <main+0xa4>)
 8000ef4:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(encoder, NULL, &Encoder_attributes);
 8000ef6:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <main+0xa8>)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4812      	ldr	r0, [pc, #72]	@ (8000f44 <main+0xac>)
 8000efc:	f004 ff90 	bl	8005e20 <osThreadNew>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4a11      	ldr	r2, [pc, #68]	@ (8000f48 <main+0xb0>)
 8000f04:	6013      	str	r3, [r2, #0]

  /* creation of UltraSonic */
  UltraSonicHandle = osThreadNew(ultrasonic_task, NULL, &UltraSonic_attributes);
 8000f06:	4a11      	ldr	r2, [pc, #68]	@ (8000f4c <main+0xb4>)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4811      	ldr	r0, [pc, #68]	@ (8000f50 <main+0xb8>)
 8000f0c:	f004 ff88 	bl	8005e20 <osThreadNew>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a10      	ldr	r2, [pc, #64]	@ (8000f54 <main+0xbc>)
 8000f14:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f16:	f004 ff5d 	bl	8005dd4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f1a:	bf00      	nop
 8000f1c:	e7fd      	b.n	8000f1a <main+0x82>
 8000f1e:	bf00      	nop
 8000f20:	200003fc 	.word	0x200003fc
 8000f24:	200003a4 	.word	0x200003a4
 8000f28:	0800ba44 	.word	0x0800ba44
 8000f2c:	08001961 	.word	0x08001961
 8000f30:	200003ec 	.word	0x200003ec
 8000f34:	0800ba68 	.word	0x0800ba68
 8000f38:	08001979 	.word	0x08001979
 8000f3c:	200003f0 	.word	0x200003f0
 8000f40:	0800ba8c 	.word	0x0800ba8c
 8000f44:	08001989 	.word	0x08001989
 8000f48:	200003f4 	.word	0x200003f4
 8000f4c:	0800bab0 	.word	0x0800bab0
 8000f50:	08001aa1 	.word	0x08001aa1
 8000f54:	200003f8 	.word	0x200003f8

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	@ 0x50
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2230      	movs	r2, #48	@ 0x30
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f008 fc3d 	bl	80097e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	4b22      	ldr	r3, [pc, #136]	@ (800100c <SystemClock_Config+0xb4>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f84:	4a21      	ldr	r2, [pc, #132]	@ (800100c <SystemClock_Config+0xb4>)
 8000f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <SystemClock_Config+0xb4>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <SystemClock_Config+0xb8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8001010 <SystemClock_Config+0xb8>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <SystemClock_Config+0xb8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 fcf3 	bl	80029b4 <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000fd4:	f000 fd6a 	bl	8001aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd8:	230f      	movs	r3, #15
 8000fda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 ff56 	bl	8002ea4 <HAL_RCC_ClockConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ffe:	f000 fd55 	bl	8001aac <Error_Handler>
  }
}
 8001002:	bf00      	nop
 8001004:	3750      	adds	r7, #80	@ 0x50
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40007000 	.word	0x40007000

08001014 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b096      	sub	sp, #88	@ 0x58
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f008 fbca 	bl	80097e6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001052:	4b3d      	ldr	r3, [pc, #244]	@ (8001148 <MX_TIM1_Init+0x134>)
 8001054:	4a3d      	ldr	r2, [pc, #244]	@ (800114c <MX_TIM1_Init+0x138>)
 8001056:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001058:	4b3b      	ldr	r3, [pc, #236]	@ (8001148 <MX_TIM1_Init+0x134>)
 800105a:	22a0      	movs	r2, #160	@ 0xa0
 800105c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	4b3a      	ldr	r3, [pc, #232]	@ (8001148 <MX_TIM1_Init+0x134>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001064:	4b38      	ldr	r3, [pc, #224]	@ (8001148 <MX_TIM1_Init+0x134>)
 8001066:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800106a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106c:	4b36      	ldr	r3, [pc, #216]	@ (8001148 <MX_TIM1_Init+0x134>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001072:	4b35      	ldr	r3, [pc, #212]	@ (8001148 <MX_TIM1_Init+0x134>)
 8001074:	2200      	movs	r2, #0
 8001076:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001078:	4b33      	ldr	r3, [pc, #204]	@ (8001148 <MX_TIM1_Init+0x134>)
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800107e:	4832      	ldr	r0, [pc, #200]	@ (8001148 <MX_TIM1_Init+0x134>)
 8001080:	f002 f8f0 	bl	8003264 <HAL_TIM_Base_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800108a:	f000 fd0f 	bl	8001aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001092:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001094:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001098:	4619      	mov	r1, r3
 800109a:	482b      	ldr	r0, [pc, #172]	@ (8001148 <MX_TIM1_Init+0x134>)
 800109c:	f002 ff90 	bl	8003fc0 <HAL_TIM_ConfigClockSource>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010a6:	f000 fd01 	bl	8001aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010aa:	4827      	ldr	r0, [pc, #156]	@ (8001148 <MX_TIM1_Init+0x134>)
 80010ac:	f002 f992 	bl	80033d4 <HAL_TIM_PWM_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80010b6:	f000 fcf9 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010c6:	4619      	mov	r1, r3
 80010c8:	481f      	ldr	r0, [pc, #124]	@ (8001148 <MX_TIM1_Init+0x134>)
 80010ca:	f003 fcf3 	bl	8004ab4 <HAL_TIMEx_MasterConfigSynchronization>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010d4:	f000 fcea 	bl	8001aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d8:	2360      	movs	r3, #96	@ 0x60
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f4:	220c      	movs	r2, #12
 80010f6:	4619      	mov	r1, r3
 80010f8:	4813      	ldr	r0, [pc, #76]	@ (8001148 <MX_TIM1_Init+0x134>)
 80010fa:	f002 fe9f 	bl	8003e3c <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001104:	f000 fcd2 	bl	8001aac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800111c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001120:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4807      	ldr	r0, [pc, #28]	@ (8001148 <MX_TIM1_Init+0x134>)
 800112c:	f003 fd3e 	bl	8004bac <HAL_TIMEx_ConfigBreakDeadTime>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001136:	f000 fcb9 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800113a:	4803      	ldr	r0, [pc, #12]	@ (8001148 <MX_TIM1_Init+0x134>)
 800113c:	f000 fe5a 	bl	8001df4 <HAL_TIM_MspPostInit>

}
 8001140:	bf00      	nop
 8001142:	3758      	adds	r7, #88	@ 0x58
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200001f4 	.word	0x200001f4
 800114c:	40010000 	.word	0x40010000

08001150 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	@ 0x30
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2224      	movs	r2, #36	@ 0x24
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f008 fb41 	bl	80097e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116c:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 800116e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001172:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001174:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 8001176:	2200      	movs	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001180:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 8001182:	f04f 32ff 	mov.w	r2, #4294967295
 8001186:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001194:	2303      	movs	r3, #3
 8001196:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800119c:	2301      	movs	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011ac:	2301      	movs	r3, #1
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 80011c0:	f002 fb7c 	bl	80038bc <HAL_TIM_Encoder_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011ca:	f000 fc6f 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	@ (80011f4 <MX_TIM2_Init+0xa4>)
 80011dc:	f003 fc6a 	bl	8004ab4 <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80011e6:	f000 fc61 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3730      	adds	r7, #48	@ 0x30
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000023c 	.word	0x2000023c

080011f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
 8001216:	615a      	str	r2, [r3, #20]
 8001218:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800121a:	4b26      	ldr	r3, [pc, #152]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 800121c:	4a26      	ldr	r2, [pc, #152]	@ (80012b8 <MX_TIM3_Init+0xc0>)
 800121e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001220:	4b24      	ldr	r3, [pc, #144]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800122c:	4b21      	ldr	r3, [pc, #132]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 800122e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001232:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001234:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123a:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001240:	481c      	ldr	r0, [pc, #112]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 8001242:	f002 f8c7 	bl	80033d4 <HAL_TIM_PWM_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800124c:	f000 fc2e 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	4619      	mov	r1, r3
 800125e:	4815      	ldr	r0, [pc, #84]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 8001260:	f003 fc28 	bl	8004ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800126a:	f000 fc1f 	bl	8001aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126e:	2360      	movs	r3, #96	@ 0x60
 8001270:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	4619      	mov	r1, r3
 8001284:	480b      	ldr	r0, [pc, #44]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 8001286:	f002 fdd9 	bl	8003e3c <HAL_TIM_PWM_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001290:	f000 fc0c 	bl	8001aac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2204      	movs	r2, #4
 8001298:	4619      	mov	r1, r3
 800129a:	4806      	ldr	r0, [pc, #24]	@ (80012b4 <MX_TIM3_Init+0xbc>)
 800129c:	f002 fdce 	bl	8003e3c <HAL_TIM_PWM_ConfigChannel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012a6:	f000 fc01 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	@ 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000284 	.word	0x20000284
 80012b8:	40000400 	.word	0x40000400

080012bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012cc:	463b      	mov	r3, r7
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012d8:	4b20      	ldr	r3, [pc, #128]	@ (800135c <MX_TIM4_Init+0xa0>)
 80012da:	4a21      	ldr	r2, [pc, #132]	@ (8001360 <MX_TIM4_Init+0xa4>)
 80012dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012de:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <MX_TIM4_Init+0xa0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <MX_TIM4_Init+0xa0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	@ (800135c <MX_TIM4_Init+0xa0>)
 80012ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <MX_TIM4_Init+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f8:	4b18      	ldr	r3, [pc, #96]	@ (800135c <MX_TIM4_Init+0xa0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80012fe:	4817      	ldr	r0, [pc, #92]	@ (800135c <MX_TIM4_Init+0xa0>)
 8001300:	f002 f8b7 	bl	8003472 <HAL_TIM_IC_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800130a:	f000 fbcf 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4619      	mov	r1, r3
 800131c:	480f      	ldr	r0, [pc, #60]	@ (800135c <MX_TIM4_Init+0xa0>)
 800131e:	f003 fbc9 	bl	8004ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001328:	f000 fbc0 	bl	8001aac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800132c:	230a      	movs	r3, #10
 800132e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001330:	2301      	movs	r3, #1
 8001332:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	@ (800135c <MX_TIM4_Init+0xa0>)
 8001344:	f002 fcde 	bl	8003d04 <HAL_TIM_IC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800134e:	f000 fbad 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200002cc 	.word	0x200002cc
 8001360:	40000800 	.word	0x40000800

08001364 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <MX_TIM6_Init+0x64>)
 8001374:	4a15      	ldr	r2, [pc, #84]	@ (80013cc <MX_TIM6_Init+0x68>)
 8001376:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <MX_TIM6_Init+0x64>)
 800137a:	220f      	movs	r2, #15
 800137c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <MX_TIM6_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001384:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <MX_TIM6_Init+0x64>)
 8001386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800138a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138c:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <MX_TIM6_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001392:	480d      	ldr	r0, [pc, #52]	@ (80013c8 <MX_TIM6_Init+0x64>)
 8001394:	f001 ff66 	bl	8003264 <HAL_TIM_Base_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800139e:	f000 fb85 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013aa:	463b      	mov	r3, r7
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	@ (80013c8 <MX_TIM6_Init+0x64>)
 80013b0:	f003 fb80 	bl	8004ab4 <HAL_TIMEx_MasterConfigSynchronization>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80013ba:	f000 fb77 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000314 	.word	0x20000314
 80013cc:	40001000 	.word	0x40001000

080013d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b096      	sub	sp, #88	@ 0x58
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2220      	movs	r2, #32
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f008 f9ec 	bl	80097e6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800140e:	4b43      	ldr	r3, [pc, #268]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001410:	4a43      	ldr	r2, [pc, #268]	@ (8001520 <MX_TIM8_Init+0x150>)
 8001412:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001414:	4b41      	ldr	r3, [pc, #260]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b40      	ldr	r3, [pc, #256]	@ (800151c <MX_TIM8_Init+0x14c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001420:	4b3e      	ldr	r3, [pc, #248]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001422:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001426:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b3c      	ldr	r3, [pc, #240]	@ (800151c <MX_TIM8_Init+0x14c>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800142e:	4b3b      	ldr	r3, [pc, #236]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b39      	ldr	r3, [pc, #228]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800143a:	4838      	ldr	r0, [pc, #224]	@ (800151c <MX_TIM8_Init+0x14c>)
 800143c:	f001 ff12 	bl	8003264 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001446:	f000 fb31 	bl	8001aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001454:	4619      	mov	r1, r3
 8001456:	4831      	ldr	r0, [pc, #196]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001458:	f002 fdb2 	bl	8003fc0 <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001462:	f000 fb23 	bl	8001aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001466:	482d      	ldr	r0, [pc, #180]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001468:	f001 ffb4 	bl	80033d4 <HAL_TIM_PWM_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001472:	f000 fb1b 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800147e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001482:	4619      	mov	r1, r3
 8001484:	4825      	ldr	r0, [pc, #148]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001486:	f003 fb15 	bl	8004ab4 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001490:	f000 fb0c 	bl	8001aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001494:	2360      	movs	r3, #96	@ 0x60
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014a0:	2300      	movs	r3, #0
 80014a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ac:	2300      	movs	r3, #0
 80014ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b4:	2200      	movs	r2, #0
 80014b6:	4619      	mov	r1, r3
 80014b8:	4818      	ldr	r0, [pc, #96]	@ (800151c <MX_TIM8_Init+0x14c>)
 80014ba:	f002 fcbf 	bl	8003e3c <HAL_TIM_PWM_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80014c4:	f000 faf2 	bl	8001aac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014cc:	2204      	movs	r2, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4812      	ldr	r0, [pc, #72]	@ (800151c <MX_TIM8_Init+0x14c>)
 80014d2:	f002 fcb3 	bl	8003e3c <HAL_TIM_PWM_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80014dc:	f000 fae6 	bl	8001aac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	@ (800151c <MX_TIM8_Init+0x14c>)
 8001504:	f003 fb52 	bl	8004bac <HAL_TIMEx_ConfigBreakDeadTime>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800150e:	f000 facd 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3758      	adds	r7, #88	@ 0x58
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000035c 	.word	0x2000035c
 8001520:	40010400 	.word	0x40010400

08001524 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <MX_USART3_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <MX_USART3_UART_Init+0x4c>)
 800155c:	f003 fb8c 	bl	8004c78 <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001566:	f000 faa1 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200003a4 	.word	0x200003a4
 8001574:	40004800 	.word	0x40004800

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	@ 0x28
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b5a      	ldr	r3, [pc, #360]	@ (80016fc <MX_GPIO_Init+0x184>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a59      	ldr	r2, [pc, #356]	@ (80016fc <MX_GPIO_Init+0x184>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b57      	ldr	r3, [pc, #348]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b53      	ldr	r3, [pc, #332]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a52      	ldr	r2, [pc, #328]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	4b50      	ldr	r3, [pc, #320]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b4c      	ldr	r3, [pc, #304]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a4b      	ldr	r2, [pc, #300]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b49      	ldr	r3, [pc, #292]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b45      	ldr	r3, [pc, #276]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a44      	ldr	r2, [pc, #272]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b42      	ldr	r3, [pc, #264]	@ (80016fc <MX_GPIO_Init+0x184>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	4b3e      	ldr	r3, [pc, #248]	@ (80016fc <MX_GPIO_Init+0x184>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a3d      	ldr	r2, [pc, #244]	@ (80016fc <MX_GPIO_Init+0x184>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b3b      	ldr	r3, [pc, #236]	@ (80016fc <MX_GPIO_Init+0x184>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 8001620:	4837      	ldr	r0, [pc, #220]	@ (8001700 <MX_GPIO_Init+0x188>)
 8001622:	f001 f985 	bl	8002930 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	213c      	movs	r1, #60	@ 0x3c
 800162a:	4836      	ldr	r0, [pc, #216]	@ (8001704 <MX_GPIO_Init+0x18c>)
 800162c:	f001 f980 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001636:	4834      	ldr	r0, [pc, #208]	@ (8001708 <MX_GPIO_Init+0x190>)
 8001638:	f001 f97a 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800163c:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 8001640:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	482a      	ldr	r0, [pc, #168]	@ (8001700 <MX_GPIO_Init+0x188>)
 8001656:	f000 ffcf 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 800165a:	230c      	movs	r3, #12
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001666:	2302      	movs	r3, #2
 8001668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4824      	ldr	r0, [pc, #144]	@ (8001704 <MX_GPIO_Init+0x18c>)
 8001672:	f000 ffc1 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 8001676:	2330      	movs	r3, #48	@ 0x30
 8001678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	481d      	ldr	r0, [pc, #116]	@ (8001704 <MX_GPIO_Init+0x18c>)
 800168e:	f000 ffb3 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001692:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4817      	ldr	r0, [pc, #92]	@ (8001708 <MX_GPIO_Init+0x190>)
 80016ac:	f000 ffa4 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c2:	2307      	movs	r3, #7
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	480d      	ldr	r0, [pc, #52]	@ (8001704 <MX_GPIO_Init+0x18c>)
 80016ce:	f000 ff93 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ICM_SCL_Pin ICM_SDA_Pin */
  GPIO_InitStruct.Pin = ICM_SCL_Pin|ICM_SDA_Pin;
 80016d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d8:	2312      	movs	r3, #18
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e4:	2304      	movs	r3, #4
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4807      	ldr	r0, [pc, #28]	@ (800170c <MX_GPIO_Init+0x194>)
 80016f0:	f000 ff82 	bl	80025f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	@ 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	40021000 	.word	0x40021000
 8001704:	40020000 	.word	0x40020000
 8001708:	40020c00 	.word	0x40020c00
 800170c:	40020400 	.word	0x40020400

08001710 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	//Prevent unused argument(s) compilation warning
	UNUSED(huart);
	HAL_UART_Transmit(&huart3, RxBuffer, 1, 1000);
 8001718:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171c:	2201      	movs	r2, #1
 800171e:	4907      	ldr	r1, [pc, #28]	@ (800173c <HAL_UART_RxCpltCallback+0x2c>)
 8001720:	4807      	ldr	r0, [pc, #28]	@ (8001740 <HAL_UART_RxCpltCallback+0x30>)
 8001722:	f003 faf9 	bl	8004d18 <HAL_UART_Transmit>
    OLED_ShowString(10, 10, RxBuffer);
 8001726:	4a05      	ldr	r2, [pc, #20]	@ (800173c <HAL_UART_RxCpltCallback+0x2c>)
 8001728:	210a      	movs	r1, #10
 800172a:	200a      	movs	r0, #10
 800172c:	f007 fa20 	bl	8008b70 <OLED_ShowString>
    OLED_Refresh_Gram();
 8001730:	f007 f8aa 	bl	8008888 <OLED_Refresh_Gram>

}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200003fc 	.word	0x200003fc
 8001740:	200003a4 	.word	0x200003a4
 8001744:	00000000 	.word	0x00000000

08001748 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

	static int tc1, tc2, first=0, echo = 0;
	char buf[15];
	OLED_Refresh_Gram();
 8001750:	f007 f89a 	bl	8008888 <OLED_Refresh_Gram>
	if(htim==&htim4){
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a58      	ldr	r2, [pc, #352]	@ (80018b8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001758:	4293      	cmp	r3, r2
 800175a:	f040 80a4 	bne.w	80018a6 <HAL_TIM_IC_CaptureCallback+0x15e>

		if (first == 0){
 800175e:	4b57      	ldr	r3, [pc, #348]	@ (80018bc <HAL_TIM_IC_CaptureCallback+0x174>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d125      	bne.n	80017b2 <HAL_TIM_IC_CaptureCallback+0x6a>
			tc1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001766:	2100      	movs	r1, #0
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f002 fcf1 	bl	8004150 <HAL_TIM_ReadCapturedValue>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	4b53      	ldr	r3, [pc, #332]	@ (80018c0 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001774:	601a      	str	r2, [r3, #0]
			first=1;
 8001776:	4b51      	ldr	r3, [pc, #324]	@ (80018bc <HAL_TIM_IC_CaptureCallback+0x174>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]
			OLED_ShowString(10,10,"Test_ULTRA");
 800177c:	4a51      	ldr	r2, [pc, #324]	@ (80018c4 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800177e:	210a      	movs	r1, #10
 8001780:	200a      	movs	r0, #10
 8001782:	f007 f9f5 	bl	8008b70 <OLED_ShowString>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6a1a      	ldr	r2, [r3, #32]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 020a 	bic.w	r2, r2, #10
 8001794:	621a      	str	r2, [r3, #32]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6a1a      	ldr	r2, [r3, #32]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0202 	orr.w	r2, r2, #2
 80017a4:	621a      	str	r2, [r3, #32]
			OLED_ShowString(10,40,"Test_ULTRA2");
 80017a6:	4a48      	ldr	r2, [pc, #288]	@ (80018c8 <HAL_TIM_IC_CaptureCallback+0x180>)
 80017a8:	2128      	movs	r1, #40	@ 0x28
 80017aa:	200a      	movs	r0, #10
 80017ac:	f007 f9e0 	bl	8008b70 <OLED_ShowString>
 80017b0:	e074      	b.n	800189c <HAL_TIM_IC_CaptureCallback+0x154>
		}
		else if (first == 1){
 80017b2:	4b42      	ldr	r3, [pc, #264]	@ (80018bc <HAL_TIM_IC_CaptureCallback+0x174>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d170      	bne.n	800189c <HAL_TIM_IC_CaptureCallback+0x154>
			OLED_ShowString(10,50,"Test_ULTRA3");
 80017ba:	4a44      	ldr	r2, [pc, #272]	@ (80018cc <HAL_TIM_IC_CaptureCallback+0x184>)
 80017bc:	2132      	movs	r1, #50	@ 0x32
 80017be:	200a      	movs	r0, #10
 80017c0:	f007 f9d6 	bl	8008b70 <OLED_ShowString>
			tc2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017c4:	2100      	movs	r1, #0
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f002 fcc2 	bl	8004150 <HAL_TIM_ReadCapturedValue>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b3f      	ldr	r3, [pc, #252]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x188>)
 80017d2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2200      	movs	r2, #0
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24

			if(tc2 >= tc1){
 80017dc:	4b3c      	ldr	r3, [pc, #240]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x188>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b37      	ldr	r3, [pc, #220]	@ (80018c0 <HAL_TIM_IC_CaptureCallback+0x178>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	db07      	blt.n	80017f8 <HAL_TIM_IC_CaptureCallback+0xb0>
				echo = tc2 - tc1;
 80017e8:	4b39      	ldr	r3, [pc, #228]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x188>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b34      	ldr	r3, [pc, #208]	@ (80018c0 <HAL_TIM_IC_CaptureCallback+0x178>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	4a38      	ldr	r2, [pc, #224]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e009      	b.n	800180c <HAL_TIM_IC_CaptureCallback+0xc4>
			} else{
				echo = (0xffff - tc1) + tc2;
 80017f8:	4b31      	ldr	r3, [pc, #196]	@ (80018c0 <HAL_TIM_IC_CaptureCallback+0x178>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001800:	33ff      	adds	r3, #255	@ 0xff
 8001802:	4a33      	ldr	r2, [pc, #204]	@ (80018d0 <HAL_TIM_IC_CaptureCallback+0x188>)
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a32      	ldr	r2, [pc, #200]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 800180a:	6013      	str	r3, [r2, #0]
			}

			sprintf(buf, "Echo = %5dus", echo);
 800180c:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	4930      	ldr	r1, [pc, #192]	@ (80018d8 <HAL_TIM_IC_CaptureCallback+0x190>)
 8001816:	4618      	mov	r0, r3
 8001818:	f007 ff82 	bl	8009720 <siprintf>
			OLED_ShowString(10, 40, &buf[0]);
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	461a      	mov	r2, r3
 8001822:	2128      	movs	r1, #40	@ 0x28
 8001824:	200a      	movs	r0, #10
 8001826:	f007 f9a3 	bl	8008b70 <OLED_ShowString>

			sprintf(buf, "Dist = %5.1fcm", echo * 0.0343/2);
 800182a:	4b2a      	ldr	r3, [pc, #168]	@ (80018d4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe78 	bl	8000524 <__aeabi_i2d>
 8001834:	a31e      	add	r3, pc, #120	@ (adr r3, 80018b0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe fedd 	bl	80005f8 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800184e:	f7fe fffd 	bl	800084c <__aeabi_ddiv>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	f107 0008 	add.w	r0, r7, #8
 800185a:	4920      	ldr	r1, [pc, #128]	@ (80018dc <HAL_TIM_IC_CaptureCallback+0x194>)
 800185c:	f007 ff60 	bl	8009720 <siprintf>
			OLED_ShowString(10, 50, &buf[0]);
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	461a      	mov	r2, r3
 8001866:	2132      	movs	r1, #50	@ 0x32
 8001868:	200a      	movs	r0, #10
 800186a:	f007 f981 	bl	8008b70 <OLED_ShowString>
			OLED_Refresh_Gram();
 800186e:	f007 f80b 	bl	8008888 <OLED_Refresh_Gram>

			first=0;
 8001872:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_TIM_IC_CaptureCallback+0x174>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6a1a      	ldr	r2, [r3, #32]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 020a 	bic.w	r2, r2, #10
 8001886:	621a      	str	r2, [r3, #32]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6a12      	ldr	r2, [r2, #32]
 8001892:	621a      	str	r2, [r3, #32]
			HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
 8001894:	2100      	movs	r1, #0
 8001896:	4808      	ldr	r0, [pc, #32]	@ (80018b8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001898:	f001 ff62 	bl	8003760 <HAL_TIM_IC_Stop_IT>
		}
		OLED_ShowString(20,50,"Test_ULTRA4");
 800189c:	4a10      	ldr	r2, [pc, #64]	@ (80018e0 <HAL_TIM_IC_CaptureCallback+0x198>)
 800189e:	2132      	movs	r1, #50	@ 0x32
 80018a0:	2014      	movs	r0, #20
 80018a2:	f007 f965 	bl	8008b70 <OLED_ShowString>
	}
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	04816f00 	.word	0x04816f00
 80018b4:	3fa18fc5 	.word	0x3fa18fc5
 80018b8:	200002cc 	.word	0x200002cc
 80018bc:	20000400 	.word	0x20000400
 80018c0:	20000404 	.word	0x20000404
 80018c4:	0800b9c4 	.word	0x0800b9c4
 80018c8:	0800b9d0 	.word	0x0800b9d0
 80018cc:	0800b9dc 	.word	0x0800b9dc
 80018d0:	20000408 	.word	0x20000408
 80018d4:	2000040c 	.word	0x2000040c
 80018d8:	0800b9e8 	.word	0x0800b9e8
 80018dc:	0800b9f8 	.word	0x0800b9f8
 80018e0:	0800ba08 	.word	0x0800ba08

080018e4 <UltraSonic>:
void UltraSonic(void){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ee:	4819      	ldr	r0, [pc, #100]	@ (8001954 <UltraSonic+0x70>)
 80018f0:	f001 f81e 	bl	8002930 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80018f4:	2032      	movs	r0, #50	@ 0x32
 80018f6:	f000 fcb7 	bl	8002268 <HAL_Delay>

	HAL_TIM_Base_Start(&htim6);
 80018fa:	4817      	ldr	r0, [pc, #92]	@ (8001958 <UltraSonic+0x74>)
 80018fc:	f001 fd02 	bl	8003304 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001900:	2100      	movs	r1, #0
 8001902:	4816      	ldr	r0, [pc, #88]	@ (800195c <UltraSonic+0x78>)
 8001904:	f001 fe04 	bl	8003510 <HAL_TIM_IC_Start_IT>
	__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <UltraSonic+0x78>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6a1a      	ldr	r2, [r3, #32]
 800190e:	4b13      	ldr	r3, [pc, #76]	@ (800195c <UltraSonic+0x78>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 020a 	bic.w	r2, r2, #10
 8001916:	621a      	str	r2, [r3, #32]
 8001918:	4b10      	ldr	r3, [pc, #64]	@ (800195c <UltraSonic+0x78>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <UltraSonic+0x78>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6a12      	ldr	r2, [r2, #32]
 8001922:	621a      	str	r2, [r3, #32]

	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800192a:	480a      	ldr	r0, [pc, #40]	@ (8001954 <UltraSonic+0x70>)
 800192c:	f001 f800 	bl	8002930 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <UltraSonic+0x74>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6)<=10);
 8001938:	bf00      	nop
 800193a:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <UltraSonic+0x74>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001940:	2b0a      	cmp	r3, #10
 8001942:	d9fa      	bls.n	800193a <UltraSonic+0x56>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800194a:	4802      	ldr	r0, [pc, #8]	@ (8001954 <UltraSonic+0x70>)
 800194c:	f000 fff0 	bl	8002930 <HAL_GPIO_WritePin>
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40020c00 	.word	0x40020c00
 8001958:	20000314 	.word	0x20000314
 800195c:	200002cc 	.word	0x200002cc

08001960 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint8_t ch = 'A';
 8001968:	2341      	movs	r3, #65	@ 0x41
 800196a:	73fb      	strb	r3, [r7, #15]
  UltraSonic();
 800196c:	f7ff ffba 	bl	80018e4 <UltraSonic>
		//ch++;
	//}
	//else{
		//ch = 'A';
	//}
    osDelay(1);
 8001970:	2001      	movs	r0, #1
 8001972:	f004 fae7 	bl	8005f44 <osDelay>
 8001976:	e7fb      	b.n	8001970 <StartDefaultTask+0x10>

08001978 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void *argument)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motors */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f004 fadf 	bl	8005f44 <osDelay>
 8001986:	e7fb      	b.n	8001980 <motors+0x8>

08001988 <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08c      	sub	sp, #48	@ 0x30
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001990:	213c      	movs	r1, #60	@ 0x3c
 8001992:	483f      	ldr	r0, [pc, #252]	@ (8001a90 <encoder+0x108>)
 8001994:	f002 f838 	bl	8003a08 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001998:	213c      	movs	r1, #60	@ 0x3c
 800199a:	483e      	ldr	r0, [pc, #248]	@ (8001a94 <encoder+0x10c>)
 800199c:	f002 f834 	bl	8003a08 <HAL_TIM_Encoder_Start>
  int cnt1, cnt2, diff, dir;
  char buffer[20];
  uint32_t tick;
  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 80019a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001a90 <encoder+0x108>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tick = HAL_GetTick();
 80019a8:	f000 fc52 	bl	8002250 <HAL_GetTick>
 80019ac:	6278      	str	r0, [r7, #36]	@ 0x24

  for(;;)
  {
	memset(buffer, 0, sizeof buffer);
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	2214      	movs	r2, #20
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f007 ff15 	bl	80097e6 <memset>
    if (HAL_GetTick() - tick > 1000L)
 80019bc:	f000 fc48 	bl	8002250 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019ca:	d95b      	bls.n	8001a84 <encoder+0xfc>
    {
      cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 80019cc:	4b31      	ldr	r3, [pc, #196]	@ (8001a94 <encoder+0x10c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	623b      	str	r3, [r7, #32]
      if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80019d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a90 <encoder+0x108>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	2b10      	cmp	r3, #16
 80019e0:	d110      	bne.n	8001a04 <encoder+0x7c>
        if (cnt2 < cnt1) {
 80019e2:	6a3a      	ldr	r2, [r7, #32]
 80019e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019e6:	429a      	cmp	r2, r3
 80019e8:	da04      	bge.n	80019f4 <encoder+0x6c>
          diff = cnt1 - cnt2;
 80019ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019f2:	e017      	b.n	8001a24 <encoder+0x9c>
        } else {
          diff = (65535 - cnt2) + cnt1;
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 80019fa:	33ff      	adds	r3, #255	@ 0xff
 80019fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019fe:	4413      	add	r3, r2
 8001a00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a02:	e00f      	b.n	8001a24 <encoder+0x9c>
        }
      }
      else {
        if (cnt2 > cnt1) {
 8001a04:	6a3a      	ldr	r2, [r7, #32]
 8001a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dd04      	ble.n	8001a16 <encoder+0x8e>
          diff = cnt2 - cnt1;
 8001a0c:	6a3a      	ldr	r2, [r7, #32]
 8001a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a14:	e006      	b.n	8001a24 <encoder+0x9c>
        } else {
          diff = (65535 - cnt1) + cnt2;
 8001a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a18:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001a1c:	33ff      	adds	r3, #255	@ 0xff
 8001a1e:	6a3a      	ldr	r2, [r7, #32]
 8001a20:	4413      	add	r3, r2
 8001a22:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
      }

      sprintf(buffer, "Speed:%5d", diff);
 8001a24:	f107 0308 	add.w	r3, r7, #8
 8001a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a2a:	491b      	ldr	r1, [pc, #108]	@ (8001a98 <encoder+0x110>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f007 fe77 	bl	8009720 <siprintf>
      OLED_ShowString(10, 20, buffer);
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	461a      	mov	r2, r3
 8001a38:	2114      	movs	r1, #20
 8001a3a:	200a      	movs	r0, #10
 8001a3c:	f007 f898 	bl	8008b70 <OLED_ShowString>

      dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8001a40:	4b13      	ldr	r3, [pc, #76]	@ (8001a90 <encoder+0x108>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	61fb      	str	r3, [r7, #28]
      sprintf(buffer, "Count1:%5d", cnt1);
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a5c:	490f      	ldr	r1, [pc, #60]	@ (8001a9c <encoder+0x114>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f007 fe5e 	bl	8009720 <siprintf>
      OLED_ShowString(10, 30, buffer);
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	461a      	mov	r2, r3
 8001a6a:	211e      	movs	r1, #30
 8001a6c:	200a      	movs	r0, #10
 8001a6e:	f007 f87f 	bl	8008b70 <OLED_ShowString>


      // Refresh OLED after displaying
      OLED_Refresh_Gram();
 8001a72:	f006 ff09 	bl	8008888 <OLED_Refresh_Gram>



      cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <encoder+0x108>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tick = HAL_GetTick();
 8001a7e:	f000 fbe7 	bl	8002250 <HAL_GetTick>
 8001a82:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    osDelay(500);  // Adjust delay to give enough time for the OLED to update.
 8001a84:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a88:	f004 fa5c 	bl	8005f44 <osDelay>
  {
 8001a8c:	e78f      	b.n	80019ae <encoder+0x26>
 8001a8e:	bf00      	nop
 8001a90:	2000023c 	.word	0x2000023c
 8001a94:	20000284 	.word	0x20000284
 8001a98:	0800ba14 	.word	0x0800ba14
 8001a9c:	0800ba20 	.word	0x0800ba20

08001aa0 <ultrasonic_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ultrasonic_task */
void ultrasonic_task(void *argument)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ultrasonic_task */
  /* Infinite loop */
  for(;;)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <ultrasonic_task+0x8>

08001aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
}
 8001ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <Error_Handler+0x8>

08001ab8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_MspInit+0x54>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	4a11      	ldr	r2, [pc, #68]	@ (8001b0c <HAL_MspInit+0x54>)
 8001ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ace:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <HAL_MspInit+0x54>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <HAL_MspInit+0x54>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b0c <HAL_MspInit+0x54>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aea:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <HAL_MspInit+0x54>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	210f      	movs	r1, #15
 8001afa:	f06f 0001 	mvn.w	r0, #1
 8001afe:	f000 fcb2 	bl	8002466 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800

08001b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	@ 0x30
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a2d      	ldr	r2, [pc, #180]	@ (8001be4 <HAL_TIM_Base_MspInit+0xd4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d10e      	bne.n	8001b50 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	4b2c      	ldr	r3, [pc, #176]	@ (8001be8 <HAL_TIM_Base_MspInit+0xd8>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8001be8 <HAL_TIM_Base_MspInit+0xd8>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b42:	4b29      	ldr	r3, [pc, #164]	@ (8001be8 <HAL_TIM_Base_MspInit+0xd8>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b4e:	e044      	b.n	8001bda <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a25      	ldr	r2, [pc, #148]	@ (8001bec <HAL_TIM_Base_MspInit+0xdc>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10e      	bne.n	8001b78 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	4b22      	ldr	r3, [pc, #136]	@ (8001be8 <HAL_TIM_Base_MspInit+0xd8>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	4a21      	ldr	r2, [pc, #132]	@ (8001be8 <HAL_TIM_Base_MspInit+0xd8>)
 8001b64:	f043 0310 	orr.w	r3, r3, #16
 8001b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001be8 <HAL_TIM_Base_MspInit+0xd8>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697b      	ldr	r3, [r7, #20]
}
 8001b76:	e030      	b.n	8001bda <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001bf0 <HAL_TIM_Base_MspInit+0xe0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d12b      	bne.n	8001bda <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <HAL_TIM_Base_MspInit+0xd8>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	4a17      	ldr	r2, [pc, #92]	@ (8001be8 <HAL_TIM_Base_MspInit+0xd8>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <HAL_TIM_Base_MspInit+0xd8>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <HAL_TIM_Base_MspInit+0xd8>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	4a10      	ldr	r2, [pc, #64]	@ (8001be8 <HAL_TIM_Base_MspInit+0xd8>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bae:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <HAL_TIM_Base_MspInit+0xd8>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bba:	23c0      	movs	r3, #192	@ 0xc0
 8001bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4807      	ldr	r0, [pc, #28]	@ (8001bf4 <HAL_TIM_Base_MspInit+0xe4>)
 8001bd6:	f000 fd0f 	bl	80025f8 <HAL_GPIO_Init>
}
 8001bda:	bf00      	nop
 8001bdc:	3730      	adds	r7, #48	@ 0x30
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40010000 	.word	0x40010000
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40001000 	.word	0x40001000
 8001bf0:	40010400 	.word	0x40010400
 8001bf4:	40020800 	.word	0x40020800

08001bf8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	@ 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c18:	d14a      	bne.n	8001cb0 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b26      	ldr	r3, [pc, #152]	@ (8001cb8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	4a25      	ldr	r2, [pc, #148]	@ (8001cb8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2a:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c46:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	4a17      	ldr	r2, [pc, #92]	@ (8001cb8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c80:	2301      	movs	r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480c      	ldr	r0, [pc, #48]	@ (8001cbc <HAL_TIM_Encoder_MspInit+0xc4>)
 8001c8c:	f000 fcb4 	bl	80025f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c90:	2308      	movs	r3, #8
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001cac:	f000 fca4 	bl	80025f8 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	@ 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020400 	.word	0x40020400

08001cc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	@ 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM3)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	@ (8001d48 <HAL_TIM_PWM_MspInit+0x84>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d12b      	bne.n	8001d3e <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_TIM_PWM_MspInit+0x88>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	4a17      	ldr	r2, [pc, #92]	@ (8001d4c <HAL_TIM_PWM_MspInit+0x88>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_TIM_PWM_MspInit+0x88>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <HAL_TIM_PWM_MspInit+0x88>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a10      	ldr	r2, [pc, #64]	@ (8001d4c <HAL_TIM_PWM_MspInit+0x88>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <HAL_TIM_PWM_MspInit+0x88>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d1e:	23c0      	movs	r3, #192	@ 0xc0
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	4805      	ldr	r0, [pc, #20]	@ (8001d50 <HAL_TIM_PWM_MspInit+0x8c>)
 8001d3a:	f000 fc5d 	bl	80025f8 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	@ 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020000 	.word	0x40020000

08001d54 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1d      	ldr	r2, [pc, #116]	@ (8001de8 <HAL_TIM_IC_MspInit+0x94>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d134      	bne.n	8001de0 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dec <HAL_TIM_IC_MspInit+0x98>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dec <HAL_TIM_IC_MspInit+0x98>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d86:	4b19      	ldr	r3, [pc, #100]	@ (8001dec <HAL_TIM_IC_MspInit+0x98>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <HAL_TIM_IC_MspInit+0x98>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a14      	ldr	r2, [pc, #80]	@ (8001dec <HAL_TIM_IC_MspInit+0x98>)
 8001d9c:	f043 0308 	orr.w	r3, r3, #8
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <HAL_TIM_IC_MspInit+0x98>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8001dae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4809      	ldr	r0, [pc, #36]	@ (8001df0 <HAL_TIM_IC_MspInit+0x9c>)
 8001dcc:	f000 fc14 	bl	80025f8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2105      	movs	r1, #5
 8001dd4:	201e      	movs	r0, #30
 8001dd6:	f000 fb46 	bl	8002466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001dda:	201e      	movs	r0, #30
 8001ddc:	f000 fb5f 	bl	800249e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	@ 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40000800 	.word	0x40000800
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020c00 	.word	0x40020c00

08001df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a12      	ldr	r2, [pc, #72]	@ (8001e5c <HAL_TIM_MspPostInit+0x68>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d11e      	bne.n	8001e54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_TIM_MspPostInit+0x6c>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	4a10      	ldr	r2, [pc, #64]	@ (8001e60 <HAL_TIM_MspPostInit+0x6c>)
 8001e20:	f043 0310 	orr.w	r3, r3, #16
 8001e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <HAL_TIM_MspPostInit+0x6c>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e32:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e44:	2301      	movs	r3, #1
 8001e46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <HAL_TIM_MspPostInit+0x70>)
 8001e50:	f000 fbd2 	bl	80025f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e54:	bf00      	nop
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40021000 	.word	0x40021000

08001e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	@ 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <HAL_UART_MspInit+0x94>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d134      	bne.n	8001ef4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <HAL_UART_MspInit+0x98>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	4a1b      	ldr	r2, [pc, #108]	@ (8001f00 <HAL_UART_MspInit+0x98>)
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <HAL_UART_MspInit+0x98>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <HAL_UART_MspInit+0x98>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a14      	ldr	r2, [pc, #80]	@ (8001f00 <HAL_UART_MspInit+0x98>)
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b12      	ldr	r3, [pc, #72]	@ (8001f00 <HAL_UART_MspInit+0x98>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ec2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	4809      	ldr	r0, [pc, #36]	@ (8001f04 <HAL_UART_MspInit+0x9c>)
 8001ee0:	f000 fb8a 	bl	80025f8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2105      	movs	r1, #5
 8001ee8:	2027      	movs	r0, #39	@ 0x27
 8001eea:	f000 fabc 	bl	8002466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001eee:	2027      	movs	r0, #39	@ 0x27
 8001ef0:	f000 fad5 	bl	800249e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	@ 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40004800 	.word	0x40004800
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020800 	.word	0x40020800

08001f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <NMI_Handler+0x4>

08001f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <HardFault_Handler+0x4>

08001f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <MemManage_Handler+0x4>

08001f20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <BusFault_Handler+0x4>

08001f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <UsageFault_Handler+0x4>

08001f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f42:	f000 f971 	bl	8002228 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f46:	f005 fc25 	bl	8007794 <xTaskGetSchedulerState>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d001      	beq.n	8001f54 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f50:	f006 fa1a 	bl	8008388 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f5c:	4802      	ldr	r0, [pc, #8]	@ (8001f68 <TIM4_IRQHandler+0x10>)
 8001f5e:	f001 fde1 	bl	8003b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200002cc 	.word	0x200002cc

08001f6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f70:	4802      	ldr	r0, [pc, #8]	@ (8001f7c <USART3_IRQHandler+0x10>)
 8001f72:	f002 ff81 	bl	8004e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200003a4 	.word	0x200003a4

08001f80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return 1;
 8001f84:	2301      	movs	r3, #1
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_kill>:

int _kill(int pid, int sig)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f9a:	f007 fc77 	bl	800988c <__errno>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2216      	movs	r2, #22
 8001fa2:	601a      	str	r2, [r3, #0]
  return -1;
 8001fa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_exit>:

void _exit (int status)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ffe7 	bl	8001f90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fc2:	bf00      	nop
 8001fc4:	e7fd      	b.n	8001fc2 <_exit+0x12>

08001fc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e00a      	b.n	8001fee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fd8:	f3af 8000 	nop.w
 8001fdc:	4601      	mov	r1, r0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	60ba      	str	r2, [r7, #8]
 8001fe4:	b2ca      	uxtb	r2, r1
 8001fe6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	dbf0      	blt.n	8001fd8 <_read+0x12>
  }

  return len;
 8001ff6:	687b      	ldr	r3, [r7, #4]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	e009      	b.n	8002026 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	60ba      	str	r2, [r7, #8]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	3301      	adds	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	429a      	cmp	r2, r3
 800202c:	dbf1      	blt.n	8002012 <_write+0x12>
  }
  return len;
 800202e:	687b      	ldr	r3, [r7, #4]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <_close>:

int _close(int file)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002060:	605a      	str	r2, [r3, #4]
  return 0;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_isatty>:

int _isatty(int file)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002078:	2301      	movs	r3, #1
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002086:	b480      	push	{r7}
 8002088:	b085      	sub	sp, #20
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a8:	4a14      	ldr	r2, [pc, #80]	@ (80020fc <_sbrk+0x5c>)
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <_sbrk+0x60>)
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b4:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020bc:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <_sbrk+0x64>)
 80020be:	4a12      	ldr	r2, [pc, #72]	@ (8002108 <_sbrk+0x68>)
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c2:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d207      	bcs.n	80020e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d0:	f007 fbdc 	bl	800988c <__errno>
 80020d4:	4603      	mov	r3, r0
 80020d6:	220c      	movs	r2, #12
 80020d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	e009      	b.n	80020f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e0:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e6:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	4a05      	ldr	r2, [pc, #20]	@ (8002104 <_sbrk+0x64>)
 80020f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f2:	68fb      	ldr	r3, [r7, #12]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20020000 	.word	0x20020000
 8002100:	00000400 	.word	0x00000400
 8002104:	20000410 	.word	0x20000410
 8002108:	200052b8 	.word	0x200052b8

0800210c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002110:	4b06      	ldr	r3, [pc, #24]	@ (800212c <SystemInit+0x20>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002116:	4a05      	ldr	r2, [pc, #20]	@ (800212c <SystemInit+0x20>)
 8002118:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800211c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002168 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002134:	f7ff ffea 	bl	800210c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002138:	480c      	ldr	r0, [pc, #48]	@ (800216c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800213a:	490d      	ldr	r1, [pc, #52]	@ (8002170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800213c:	4a0d      	ldr	r2, [pc, #52]	@ (8002174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002140:	e002      	b.n	8002148 <LoopCopyDataInit>

08002142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002146:	3304      	adds	r3, #4

08002148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800214c:	d3f9      	bcc.n	8002142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214e:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002150:	4c0a      	ldr	r4, [pc, #40]	@ (800217c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002154:	e001      	b.n	800215a <LoopFillZerobss>

08002156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002158:	3204      	adds	r2, #4

0800215a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800215c:	d3fb      	bcc.n	8002156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800215e:	f007 fb9b 	bl	8009898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002162:	f7fe fe99 	bl	8000e98 <main>
  bx  lr    
 8002166:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800216c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002170:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002174:	0800c8d0 	.word	0x0800c8d0
  ldr r2, =_sbss
 8002178:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800217c:	200052b4 	.word	0x200052b4

08002180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002180:	e7fe      	b.n	8002180 <ADC_IRQHandler>
	...

08002184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002188:	4b0e      	ldr	r3, [pc, #56]	@ (80021c4 <HAL_Init+0x40>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0d      	ldr	r2, [pc, #52]	@ (80021c4 <HAL_Init+0x40>)
 800218e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002194:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <HAL_Init+0x40>)
 800219a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800219e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a0:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <HAL_Init+0x40>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a07      	ldr	r2, [pc, #28]	@ (80021c4 <HAL_Init+0x40>)
 80021a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ac:	2003      	movs	r0, #3
 80021ae:	f000 f94f 	bl	8002450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021b2:	200f      	movs	r0, #15
 80021b4:	f000 f808 	bl	80021c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b8:	f7ff fc7e 	bl	8001ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023c00 	.word	0x40023c00

080021c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021d0:	4b12      	ldr	r3, [pc, #72]	@ (800221c <HAL_InitTick+0x54>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b12      	ldr	r3, [pc, #72]	@ (8002220 <HAL_InitTick+0x58>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021de:	fbb3 f3f1 	udiv	r3, r3, r1
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f967 	bl	80024ba <HAL_SYSTICK_Config>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00e      	b.n	8002214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b0f      	cmp	r3, #15
 80021fa:	d80a      	bhi.n	8002212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021fc:	2200      	movs	r2, #0
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	f04f 30ff 	mov.w	r0, #4294967295
 8002204:	f000 f92f 	bl	8002466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002208:	4a06      	ldr	r2, [pc, #24]	@ (8002224 <HAL_InitTick+0x5c>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	e000      	b.n	8002214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000000 	.word	0x20000000
 8002220:	20000008 	.word	0x20000008
 8002224:	20000004 	.word	0x20000004

08002228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_IncTick+0x20>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_IncTick+0x24>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4413      	add	r3, r2
 8002238:	4a04      	ldr	r2, [pc, #16]	@ (800224c <HAL_IncTick+0x24>)
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000008 	.word	0x20000008
 800224c:	20000414 	.word	0x20000414

08002250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return uwTick;
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <HAL_GetTick+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000414 	.word	0x20000414

08002268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff ffee 	bl	8002250 <HAL_GetTick>
 8002274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d005      	beq.n	800228e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002282:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <HAL_Delay+0x44>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800228e:	bf00      	nop
 8002290:	f7ff ffde 	bl	8002250 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	429a      	cmp	r2, r3
 800229e:	d8f7      	bhi.n	8002290 <HAL_Delay+0x28>
  {
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000008 	.word	0x20000008

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4907      	ldr	r1, [pc, #28]	@ (800234c <__NVIC_EnableIRQ+0x38>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	@ (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	@ (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	@ 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
         );
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	@ 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800241c:	d301      	bcc.n	8002422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241e:	2301      	movs	r3, #1
 8002420:	e00f      	b.n	8002442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002422:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <SysTick_Config+0x40>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800242a:	210f      	movs	r1, #15
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	f7ff ff8e 	bl	8002350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <SysTick_Config+0x40>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243a:	4b04      	ldr	r3, [pc, #16]	@ (800244c <SysTick_Config+0x40>)
 800243c:	2207      	movs	r2, #7
 800243e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	e000e010 	.word	0xe000e010

08002450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff29 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002478:	f7ff ff3e 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 800247c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	6978      	ldr	r0, [r7, #20]
 8002484:	f7ff ff8e 	bl	80023a4 <NVIC_EncodePriority>
 8002488:	4602      	mov	r2, r0
 800248a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff5d 	bl	8002350 <__NVIC_SetPriority>
}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff31 	bl	8002314 <__NVIC_EnableIRQ>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ffa2 	bl	800240c <SysTick_Config>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024e0:	f7ff feb6 	bl	8002250 <HAL_GetTick>
 80024e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d008      	beq.n	8002504 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2280      	movs	r2, #128	@ 0x80
 80024f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e052      	b.n	80025aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0216 	bic.w	r2, r2, #22
 8002512:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002522:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <HAL_DMA_Abort+0x62>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0208 	bic.w	r2, r2, #8
 8002542:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002554:	e013      	b.n	800257e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002556:	f7ff fe7b 	bl	8002250 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b05      	cmp	r3, #5
 8002562:	d90c      	bls.n	800257e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2203      	movs	r2, #3
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e015      	b.n	80025aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e4      	bne.n	8002556 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002590:	223f      	movs	r2, #63	@ 0x3f
 8002592:	409a      	lsls	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d004      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2280      	movs	r2, #128	@ 0x80
 80025ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e00c      	b.n	80025ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2205      	movs	r2, #5
 80025d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	@ 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	e16b      	b.n	80028ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002614:	2201      	movs	r2, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	429a      	cmp	r2, r3
 800262e:	f040 815a 	bne.w	80028e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d005      	beq.n	800264a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002646:	2b02      	cmp	r3, #2
 8002648:	d130      	bne.n	80026ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	2203      	movs	r2, #3
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 0201 	and.w	r2, r3, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d017      	beq.n	80026e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d123      	bne.n	800273c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	08da      	lsrs	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3208      	adds	r2, #8
 80026fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	220f      	movs	r2, #15
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	08da      	lsrs	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3208      	adds	r2, #8
 8002736:	69b9      	ldr	r1, [r7, #24]
 8002738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0203 	and.w	r2, r3, #3
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80b4 	beq.w	80028e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b60      	ldr	r3, [pc, #384]	@ (8002904 <HAL_GPIO_Init+0x30c>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	4a5f      	ldr	r2, [pc, #380]	@ (8002904 <HAL_GPIO_Init+0x30c>)
 8002788:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800278c:	6453      	str	r3, [r2, #68]	@ 0x44
 800278e:	4b5d      	ldr	r3, [pc, #372]	@ (8002904 <HAL_GPIO_Init+0x30c>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800279a:	4a5b      	ldr	r2, [pc, #364]	@ (8002908 <HAL_GPIO_Init+0x310>)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	3302      	adds	r3, #2
 80027a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	220f      	movs	r2, #15
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a52      	ldr	r2, [pc, #328]	@ (800290c <HAL_GPIO_Init+0x314>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d02b      	beq.n	800281e <HAL_GPIO_Init+0x226>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a51      	ldr	r2, [pc, #324]	@ (8002910 <HAL_GPIO_Init+0x318>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d025      	beq.n	800281a <HAL_GPIO_Init+0x222>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a50      	ldr	r2, [pc, #320]	@ (8002914 <HAL_GPIO_Init+0x31c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01f      	beq.n	8002816 <HAL_GPIO_Init+0x21e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002918 <HAL_GPIO_Init+0x320>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d019      	beq.n	8002812 <HAL_GPIO_Init+0x21a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4e      	ldr	r2, [pc, #312]	@ (800291c <HAL_GPIO_Init+0x324>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0x216>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002920 <HAL_GPIO_Init+0x328>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00d      	beq.n	800280a <HAL_GPIO_Init+0x212>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002924 <HAL_GPIO_Init+0x32c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x20e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002928 <HAL_GPIO_Init+0x330>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_GPIO_Init+0x20a>
 80027fe:	2307      	movs	r3, #7
 8002800:	e00e      	b.n	8002820 <HAL_GPIO_Init+0x228>
 8002802:	2308      	movs	r3, #8
 8002804:	e00c      	b.n	8002820 <HAL_GPIO_Init+0x228>
 8002806:	2306      	movs	r3, #6
 8002808:	e00a      	b.n	8002820 <HAL_GPIO_Init+0x228>
 800280a:	2305      	movs	r3, #5
 800280c:	e008      	b.n	8002820 <HAL_GPIO_Init+0x228>
 800280e:	2304      	movs	r3, #4
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x228>
 8002812:	2303      	movs	r3, #3
 8002814:	e004      	b.n	8002820 <HAL_GPIO_Init+0x228>
 8002816:	2302      	movs	r3, #2
 8002818:	e002      	b.n	8002820 <HAL_GPIO_Init+0x228>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_GPIO_Init+0x228>
 800281e:	2300      	movs	r3, #0
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	f002 0203 	and.w	r2, r2, #3
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	4093      	lsls	r3, r2
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002830:	4935      	ldr	r1, [pc, #212]	@ (8002908 <HAL_GPIO_Init+0x310>)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283e:	4b3b      	ldr	r3, [pc, #236]	@ (800292c <HAL_GPIO_Init+0x334>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002862:	4a32      	ldr	r2, [pc, #200]	@ (800292c <HAL_GPIO_Init+0x334>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002868:	4b30      	ldr	r3, [pc, #192]	@ (800292c <HAL_GPIO_Init+0x334>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800288c:	4a27      	ldr	r2, [pc, #156]	@ (800292c <HAL_GPIO_Init+0x334>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002892:	4b26      	ldr	r3, [pc, #152]	@ (800292c <HAL_GPIO_Init+0x334>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b6:	4a1d      	ldr	r2, [pc, #116]	@ (800292c <HAL_GPIO_Init+0x334>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	@ (800292c <HAL_GPIO_Init+0x334>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e0:	4a12      	ldr	r2, [pc, #72]	@ (800292c <HAL_GPIO_Init+0x334>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3301      	adds	r3, #1
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	f67f ae90 	bls.w	8002614 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3724      	adds	r7, #36	@ 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	40013800 	.word	0x40013800
 800290c:	40020000 	.word	0x40020000
 8002910:	40020400 	.word	0x40020400
 8002914:	40020800 	.word	0x40020800
 8002918:	40020c00 	.word	0x40020c00
 800291c:	40021000 	.word	0x40021000
 8002920:	40021400 	.word	0x40021400
 8002924:	40021800 	.word	0x40021800
 8002928:	40021c00 	.word	0x40021c00
 800292c:	40013c00 	.word	0x40013c00

08002930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
 800293c:	4613      	mov	r3, r2
 800293e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002940:	787b      	ldrb	r3, [r7, #1]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002946:	887a      	ldrh	r2, [r7, #2]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800294c:	e003      	b.n	8002956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800294e:	887b      	ldrh	r3, [r7, #2]
 8002950:	041a      	lsls	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	619a      	str	r2, [r3, #24]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800296a:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <HAL_PWR_EnableBkUpAccess+0x20>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002970:	4b05      	ldr	r3, [pc, #20]	@ (8002988 <HAL_PWR_EnableBkUpAccess+0x24>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002976:	687b      	ldr	r3, [r7, #4]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	420e0020 	.word	0x420e0020
 8002988:	40007000 	.word	0x40007000

0800298c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8002992:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_PWR_DisableBkUpAccess+0x20>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002998:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <HAL_PWR_DisableBkUpAccess+0x24>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800299e:	687b      	ldr	r3, [r7, #4]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	420e0020 	.word	0x420e0020
 80029b0:	40007000 	.word	0x40007000

080029b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e267      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d075      	beq.n	8002abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029d2:	4b88      	ldr	r3, [pc, #544]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d00c      	beq.n	80029f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029de:	4b85      	ldr	r3, [pc, #532]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d112      	bne.n	8002a10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ea:	4b82      	ldr	r3, [pc, #520]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029f6:	d10b      	bne.n	8002a10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f8:	4b7e      	ldr	r3, [pc, #504]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d05b      	beq.n	8002abc <HAL_RCC_OscConfig+0x108>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d157      	bne.n	8002abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e242      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a18:	d106      	bne.n	8002a28 <HAL_RCC_OscConfig+0x74>
 8002a1a:	4b76      	ldr	r3, [pc, #472]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a75      	ldr	r2, [pc, #468]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e01d      	b.n	8002a64 <HAL_RCC_OscConfig+0xb0>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x98>
 8002a32:	4b70      	ldr	r3, [pc, #448]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a6f      	ldr	r2, [pc, #444]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a6c      	ldr	r2, [pc, #432]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCC_OscConfig+0xb0>
 8002a4c:	4b69      	ldr	r3, [pc, #420]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a68      	ldr	r2, [pc, #416]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	4b66      	ldr	r3, [pc, #408]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a65      	ldr	r2, [pc, #404]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d013      	beq.n	8002a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7ff fbf0 	bl	8002250 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a74:	f7ff fbec 	bl	8002250 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	@ 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e207      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	4b5b      	ldr	r3, [pc, #364]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0xc0>
 8002a92:	e014      	b.n	8002abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7ff fbdc 	bl	8002250 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a9c:	f7ff fbd8 	bl	8002250 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	@ 0x64
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e1f3      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aae:	4b51      	ldr	r3, [pc, #324]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0xe8>
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d063      	beq.n	8002b92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aca:	4b4a      	ldr	r3, [pc, #296]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00b      	beq.n	8002aee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad6:	4b47      	ldr	r3, [pc, #284]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d11c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae2:	4b44      	ldr	r3, [pc, #272]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d116      	bne.n	8002b1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aee:	4b41      	ldr	r3, [pc, #260]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <HAL_RCC_OscConfig+0x152>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d001      	beq.n	8002b06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e1c7      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b06:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4937      	ldr	r1, [pc, #220]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1a:	e03a      	b.n	8002b92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d020      	beq.n	8002b66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b24:	4b34      	ldr	r3, [pc, #208]	@ (8002bf8 <HAL_RCC_OscConfig+0x244>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7ff fb91 	bl	8002250 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b32:	f7ff fb8d 	bl	8002250 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e1a8      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	4b28      	ldr	r3, [pc, #160]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4925      	ldr	r1, [pc, #148]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]
 8002b64:	e015      	b.n	8002b92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b66:	4b24      	ldr	r3, [pc, #144]	@ (8002bf8 <HAL_RCC_OscConfig+0x244>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7ff fb70 	bl	8002250 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b74:	f7ff fb6c 	bl	8002250 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e187      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b86:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d036      	beq.n	8002c0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d016      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba6:	4b15      	ldr	r3, [pc, #84]	@ (8002bfc <HAL_RCC_OscConfig+0x248>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7ff fb50 	bl	8002250 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb4:	f7ff fb4c 	bl	8002250 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e167      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf4 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x200>
 8002bd2:	e01b      	b.n	8002c0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd4:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <HAL_RCC_OscConfig+0x248>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7ff fb39 	bl	8002250 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be0:	e00e      	b.n	8002c00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be2:	f7ff fb35 	bl	8002250 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d907      	bls.n	8002c00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e150      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	42470000 	.word	0x42470000
 8002bfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c00:	4b88      	ldr	r3, [pc, #544]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1ea      	bne.n	8002be2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8097 	beq.w	8002d48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1e:	4b81      	ldr	r3, [pc, #516]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10f      	bne.n	8002c4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	4a7c      	ldr	r2, [pc, #496]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c3a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c46:	2301      	movs	r3, #1
 8002c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4a:	4b77      	ldr	r3, [pc, #476]	@ (8002e28 <HAL_RCC_OscConfig+0x474>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d118      	bne.n	8002c88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c56:	4b74      	ldr	r3, [pc, #464]	@ (8002e28 <HAL_RCC_OscConfig+0x474>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a73      	ldr	r2, [pc, #460]	@ (8002e28 <HAL_RCC_OscConfig+0x474>)
 8002c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c62:	f7ff faf5 	bl	8002250 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6a:	f7ff faf1 	bl	8002250 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e10c      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8002e28 <HAL_RCC_OscConfig+0x474>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCC_OscConfig+0x2ea>
 8002c90:	4b64      	ldr	r3, [pc, #400]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c94:	4a63      	ldr	r2, [pc, #396]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c9c:	e01c      	b.n	8002cd8 <HAL_RCC_OscConfig+0x324>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b05      	cmp	r3, #5
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x30c>
 8002ca6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002caa:	4a5e      	ldr	r2, [pc, #376]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb6:	4a5b      	ldr	r2, [pc, #364]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCC_OscConfig+0x324>
 8002cc0:	4b58      	ldr	r3, [pc, #352]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc4:	4a57      	ldr	r2, [pc, #348]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ccc:	4b55      	ldr	r3, [pc, #340]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd0:	4a54      	ldr	r2, [pc, #336]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	f023 0304 	bic.w	r3, r3, #4
 8002cd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d015      	beq.n	8002d0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce0:	f7ff fab6 	bl	8002250 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce8:	f7ff fab2 	bl	8002250 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e0cb      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfe:	4b49      	ldr	r3, [pc, #292]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0ee      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x334>
 8002d0a:	e014      	b.n	8002d36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0c:	f7ff faa0 	bl	8002250 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d14:	f7ff fa9c 	bl	8002250 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e0b5      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1ee      	bne.n	8002d14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d105      	bne.n	8002d48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3c:	4b39      	ldr	r3, [pc, #228]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d40:	4a38      	ldr	r2, [pc, #224]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80a1 	beq.w	8002e94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d52:	4b34      	ldr	r3, [pc, #208]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d05c      	beq.n	8002e18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d141      	bne.n	8002dea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d66:	4b31      	ldr	r3, [pc, #196]	@ (8002e2c <HAL_RCC_OscConfig+0x478>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7ff fa70 	bl	8002250 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d74:	f7ff fa6c 	bl	8002250 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e087      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d86:	4b27      	ldr	r3, [pc, #156]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69da      	ldr	r2, [r3, #28]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	019b      	lsls	r3, r3, #6
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da8:	085b      	lsrs	r3, r3, #1
 8002daa:	3b01      	subs	r3, #1
 8002dac:	041b      	lsls	r3, r3, #16
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db4:	061b      	lsls	r3, r3, #24
 8002db6:	491b      	ldr	r1, [pc, #108]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <HAL_RCC_OscConfig+0x478>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7ff fa45 	bl	8002250 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dca:	f7ff fa41 	bl	8002250 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e05c      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ddc:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x416>
 8002de8:	e054      	b.n	8002e94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b10      	ldr	r3, [pc, #64]	@ (8002e2c <HAL_RCC_OscConfig+0x478>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7ff fa2e 	bl	8002250 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df8:	f7ff fa2a 	bl	8002250 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e045      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x444>
 8002e16:	e03d      	b.n	8002e94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e038      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40007000 	.word	0x40007000
 8002e2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea0 <HAL_RCC_OscConfig+0x4ec>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d028      	beq.n	8002e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d121      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d11a      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e60:	4013      	ands	r3, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d111      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e76:	085b      	lsrs	r3, r3, #1
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800

08002ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0cc      	b.n	8003052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b68      	ldr	r3, [pc, #416]	@ (800305c <HAL_RCC_ClockConfig+0x1b8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d90c      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b65      	ldr	r3, [pc, #404]	@ (800305c <HAL_RCC_ClockConfig+0x1b8>)
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b63      	ldr	r3, [pc, #396]	@ (800305c <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0b8      	b.n	8003052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d020      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef8:	4b59      	ldr	r3, [pc, #356]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4a58      	ldr	r2, [pc, #352]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f10:	4b53      	ldr	r3, [pc, #332]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4a52      	ldr	r2, [pc, #328]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f1c:	4b50      	ldr	r3, [pc, #320]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	494d      	ldr	r1, [pc, #308]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d044      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b47      	ldr	r3, [pc, #284]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d119      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e07f      	b.n	8003052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d003      	beq.n	8002f62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d107      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f62:	4b3f      	ldr	r3, [pc, #252]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e06f      	b.n	8003052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f72:	4b3b      	ldr	r3, [pc, #236]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e067      	b.n	8003052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f82:	4b37      	ldr	r3, [pc, #220]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f023 0203 	bic.w	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4934      	ldr	r1, [pc, #208]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f94:	f7ff f95c 	bl	8002250 <HAL_GetTick>
 8002f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9a:	e00a      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9c:	f7ff f958 	bl	8002250 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e04f      	b.n	8003052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 020c 	and.w	r2, r3, #12
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d1eb      	bne.n	8002f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b25      	ldr	r3, [pc, #148]	@ (800305c <HAL_RCC_ClockConfig+0x1b8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d20c      	bcs.n	8002fec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b22      	ldr	r3, [pc, #136]	@ (800305c <HAL_RCC_ClockConfig+0x1b8>)
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b20      	ldr	r3, [pc, #128]	@ (800305c <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e032      	b.n	8003052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff8:	4b19      	ldr	r3, [pc, #100]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4916      	ldr	r1, [pc, #88]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003016:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	490e      	ldr	r1, [pc, #56]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800302a:	f000 f821 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 800302e:	4602      	mov	r2, r0
 8003030:	4b0b      	ldr	r3, [pc, #44]	@ (8003060 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	490a      	ldr	r1, [pc, #40]	@ (8003064 <HAL_RCC_ClockConfig+0x1c0>)
 800303c:	5ccb      	ldrb	r3, [r1, r3]
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	4a09      	ldr	r2, [pc, #36]	@ (8003068 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003046:	4b09      	ldr	r3, [pc, #36]	@ (800306c <HAL_RCC_ClockConfig+0x1c8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff f8bc 	bl	80021c8 <HAL_InitTick>

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40023c00 	.word	0x40023c00
 8003060:	40023800 	.word	0x40023800
 8003064:	0800bad4 	.word	0x0800bad4
 8003068:	20000000 	.word	0x20000000
 800306c:	20000004 	.word	0x20000004

08003070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003074:	b090      	sub	sp, #64	@ 0x40
 8003076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	637b      	str	r3, [r7, #52]	@ 0x34
 800307c:	2300      	movs	r3, #0
 800307e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003080:	2300      	movs	r3, #0
 8003082:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003088:	4b59      	ldr	r3, [pc, #356]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 030c 	and.w	r3, r3, #12
 8003090:	2b08      	cmp	r3, #8
 8003092:	d00d      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003094:	2b08      	cmp	r3, #8
 8003096:	f200 80a1 	bhi.w	80031dc <HAL_RCC_GetSysClockFreq+0x16c>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x34>
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d003      	beq.n	80030aa <HAL_RCC_GetSysClockFreq+0x3a>
 80030a2:	e09b      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030a4:	4b53      	ldr	r3, [pc, #332]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80030a6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80030a8:	e09b      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030aa:	4b53      	ldr	r3, [pc, #332]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80030ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030ae:	e098      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b0:	4b4f      	ldr	r3, [pc, #316]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ba:	4b4d      	ldr	r3, [pc, #308]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d028      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c6:	4b4a      	ldr	r3, [pc, #296]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	099b      	lsrs	r3, r3, #6
 80030cc:	2200      	movs	r2, #0
 80030ce:	623b      	str	r3, [r7, #32]
 80030d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030d8:	2100      	movs	r1, #0
 80030da:	4b47      	ldr	r3, [pc, #284]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80030dc:	fb03 f201 	mul.w	r2, r3, r1
 80030e0:	2300      	movs	r3, #0
 80030e2:	fb00 f303 	mul.w	r3, r0, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	4a43      	ldr	r2, [pc, #268]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80030ea:	fba0 1202 	umull	r1, r2, r0, r2
 80030ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030f0:	460a      	mov	r2, r1
 80030f2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030f6:	4413      	add	r3, r2
 80030f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fc:	2200      	movs	r2, #0
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	61fa      	str	r2, [r7, #28]
 8003102:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003106:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800310a:	f7fd fd4d 	bl	8000ba8 <__aeabi_uldivmod>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4613      	mov	r3, r2
 8003114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003116:	e053      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003118:	4b35      	ldr	r3, [pc, #212]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	099b      	lsrs	r3, r3, #6
 800311e:	2200      	movs	r2, #0
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	617a      	str	r2, [r7, #20]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800312a:	f04f 0b00 	mov.w	fp, #0
 800312e:	4652      	mov	r2, sl
 8003130:	465b      	mov	r3, fp
 8003132:	f04f 0000 	mov.w	r0, #0
 8003136:	f04f 0100 	mov.w	r1, #0
 800313a:	0159      	lsls	r1, r3, #5
 800313c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003140:	0150      	lsls	r0, r2, #5
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	ebb2 080a 	subs.w	r8, r2, sl
 800314a:	eb63 090b 	sbc.w	r9, r3, fp
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800315a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800315e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003162:	ebb2 0408 	subs.w	r4, r2, r8
 8003166:	eb63 0509 	sbc.w	r5, r3, r9
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	00eb      	lsls	r3, r5, #3
 8003174:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003178:	00e2      	lsls	r2, r4, #3
 800317a:	4614      	mov	r4, r2
 800317c:	461d      	mov	r5, r3
 800317e:	eb14 030a 	adds.w	r3, r4, sl
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	eb45 030b 	adc.w	r3, r5, fp
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003196:	4629      	mov	r1, r5
 8003198:	028b      	lsls	r3, r1, #10
 800319a:	4621      	mov	r1, r4
 800319c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031a0:	4621      	mov	r1, r4
 80031a2:	028a      	lsls	r2, r1, #10
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031aa:	2200      	movs	r2, #0
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	60fa      	str	r2, [r7, #12]
 80031b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031b4:	f7fd fcf8 	bl	8000ba8 <__aeabi_uldivmod>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4613      	mov	r3, r2
 80031be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031c0:	4b0b      	ldr	r3, [pc, #44]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	0c1b      	lsrs	r3, r3, #16
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	3301      	adds	r3, #1
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80031d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031da:	e002      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031dc:	4b05      	ldr	r3, [pc, #20]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80031de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3740      	adds	r7, #64	@ 0x40
 80031e8:	46bd      	mov	sp, r7
 80031ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800
 80031f4:	00f42400 	.word	0x00f42400
 80031f8:	017d7840 	.word	0x017d7840

080031fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003200:	4b03      	ldr	r3, [pc, #12]	@ (8003210 <HAL_RCC_GetHCLKFreq+0x14>)
 8003202:	681b      	ldr	r3, [r3, #0]
}
 8003204:	4618      	mov	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	20000000 	.word	0x20000000

08003214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003218:	f7ff fff0 	bl	80031fc <HAL_RCC_GetHCLKFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b05      	ldr	r3, [pc, #20]	@ (8003234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	0a9b      	lsrs	r3, r3, #10
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	4903      	ldr	r1, [pc, #12]	@ (8003238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40023800 	.word	0x40023800
 8003238:	0800bae4 	.word	0x0800bae4

0800323c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003240:	f7ff ffdc 	bl	80031fc <HAL_RCC_GetHCLKFreq>
 8003244:	4602      	mov	r2, r0
 8003246:	4b05      	ldr	r3, [pc, #20]	@ (800325c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	0b5b      	lsrs	r3, r3, #13
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	4903      	ldr	r1, [pc, #12]	@ (8003260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003252:	5ccb      	ldrb	r3, [r1, r3]
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003258:	4618      	mov	r0, r3
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40023800 	.word	0x40023800
 8003260:	0800bae4 	.word	0x0800bae4

08003264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e041      	b.n	80032fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fe fc40 	bl	8001b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3304      	adds	r3, #4
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f000 ffc0 	bl	8004228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d001      	beq.n	800331c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e046      	b.n	80033aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a23      	ldr	r2, [pc, #140]	@ (80033b8 <HAL_TIM_Base_Start+0xb4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d022      	beq.n	8003374 <HAL_TIM_Base_Start+0x70>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003336:	d01d      	beq.n	8003374 <HAL_TIM_Base_Start+0x70>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1f      	ldr	r2, [pc, #124]	@ (80033bc <HAL_TIM_Base_Start+0xb8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <HAL_TIM_Base_Start+0x70>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1e      	ldr	r2, [pc, #120]	@ (80033c0 <HAL_TIM_Base_Start+0xbc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_TIM_Base_Start+0x70>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1c      	ldr	r2, [pc, #112]	@ (80033c4 <HAL_TIM_Base_Start+0xc0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_TIM_Base_Start+0x70>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1b      	ldr	r2, [pc, #108]	@ (80033c8 <HAL_TIM_Base_Start+0xc4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_TIM_Base_Start+0x70>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a19      	ldr	r2, [pc, #100]	@ (80033cc <HAL_TIM_Base_Start+0xc8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_TIM_Base_Start+0x70>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a18      	ldr	r2, [pc, #96]	@ (80033d0 <HAL_TIM_Base_Start+0xcc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d111      	bne.n	8003398 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b06      	cmp	r3, #6
 8003384:	d010      	beq.n	80033a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0201 	orr.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003396:	e007      	b.n	80033a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40010000 	.word	0x40010000
 80033bc:	40000400 	.word	0x40000400
 80033c0:	40000800 	.word	0x40000800
 80033c4:	40000c00 	.word	0x40000c00
 80033c8:	40010400 	.word	0x40010400
 80033cc:	40014000 	.word	0x40014000
 80033d0:	40001800 	.word	0x40001800

080033d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e041      	b.n	800346a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe fc62 	bl	8001cc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	4619      	mov	r1, r3
 8003412:	4610      	mov	r0, r2
 8003414:	f000 ff08 	bl	8004228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e041      	b.n	8003508 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d106      	bne.n	800349e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7fe fc5b 	bl	8001d54 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3304      	adds	r3, #4
 80034ae:	4619      	mov	r1, r3
 80034b0:	4610      	mov	r0, r2
 80034b2:	f000 feb9 	bl	8004228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d104      	bne.n	800352e <HAL_TIM_IC_Start_IT+0x1e>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800352a:	b2db      	uxtb	r3, r3
 800352c:	e013      	b.n	8003556 <HAL_TIM_IC_Start_IT+0x46>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b04      	cmp	r3, #4
 8003532:	d104      	bne.n	800353e <HAL_TIM_IC_Start_IT+0x2e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800353a:	b2db      	uxtb	r3, r3
 800353c:	e00b      	b.n	8003556 <HAL_TIM_IC_Start_IT+0x46>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d104      	bne.n	800354e <HAL_TIM_IC_Start_IT+0x3e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e003      	b.n	8003556 <HAL_TIM_IC_Start_IT+0x46>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003554:	b2db      	uxtb	r3, r3
 8003556:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d104      	bne.n	8003568 <HAL_TIM_IC_Start_IT+0x58>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e013      	b.n	8003590 <HAL_TIM_IC_Start_IT+0x80>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b04      	cmp	r3, #4
 800356c:	d104      	bne.n	8003578 <HAL_TIM_IC_Start_IT+0x68>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e00b      	b.n	8003590 <HAL_TIM_IC_Start_IT+0x80>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b08      	cmp	r3, #8
 800357c:	d104      	bne.n	8003588 <HAL_TIM_IC_Start_IT+0x78>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e003      	b.n	8003590 <HAL_TIM_IC_Start_IT+0x80>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800358e:	b2db      	uxtb	r3, r3
 8003590:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003592:	7bbb      	ldrb	r3, [r7, #14]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d102      	bne.n	800359e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003598:	7b7b      	ldrb	r3, [r7, #13]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d001      	beq.n	80035a2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e0cc      	b.n	800373c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_IC_Start_IT+0xa2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035b0:	e013      	b.n	80035da <HAL_TIM_IC_Start_IT+0xca>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_IC_Start_IT+0xb2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035c0:	e00b      	b.n	80035da <HAL_TIM_IC_Start_IT+0xca>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_IC_Start_IT+0xc2>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035d0:	e003      	b.n	80035da <HAL_TIM_IC_Start_IT+0xca>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2202      	movs	r2, #2
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d104      	bne.n	80035ea <HAL_TIM_IC_Start_IT+0xda>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035e8:	e013      	b.n	8003612 <HAL_TIM_IC_Start_IT+0x102>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_IC_Start_IT+0xea>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035f8:	e00b      	b.n	8003612 <HAL_TIM_IC_Start_IT+0x102>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d104      	bne.n	800360a <HAL_TIM_IC_Start_IT+0xfa>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003608:	e003      	b.n	8003612 <HAL_TIM_IC_Start_IT+0x102>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2202      	movs	r2, #2
 800360e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b0c      	cmp	r3, #12
 8003616:	d841      	bhi.n	800369c <HAL_TIM_IC_Start_IT+0x18c>
 8003618:	a201      	add	r2, pc, #4	@ (adr r2, 8003620 <HAL_TIM_IC_Start_IT+0x110>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003655 	.word	0x08003655
 8003624:	0800369d 	.word	0x0800369d
 8003628:	0800369d 	.word	0x0800369d
 800362c:	0800369d 	.word	0x0800369d
 8003630:	08003667 	.word	0x08003667
 8003634:	0800369d 	.word	0x0800369d
 8003638:	0800369d 	.word	0x0800369d
 800363c:	0800369d 	.word	0x0800369d
 8003640:	08003679 	.word	0x08003679
 8003644:	0800369d 	.word	0x0800369d
 8003648:	0800369d 	.word	0x0800369d
 800364c:	0800369d 	.word	0x0800369d
 8003650:	0800368b 	.word	0x0800368b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0202 	orr.w	r2, r2, #2
 8003662:	60da      	str	r2, [r3, #12]
      break;
 8003664:	e01d      	b.n	80036a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0204 	orr.w	r2, r2, #4
 8003674:	60da      	str	r2, [r3, #12]
      break;
 8003676:	e014      	b.n	80036a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0208 	orr.w	r2, r2, #8
 8003686:	60da      	str	r2, [r3, #12]
      break;
 8003688:	e00b      	b.n	80036a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0210 	orr.w	r2, r2, #16
 8003698:	60da      	str	r2, [r3, #12]
      break;
 800369a:	e002      	b.n	80036a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
      break;
 80036a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d148      	bne.n	800373a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2201      	movs	r2, #1
 80036ae:	6839      	ldr	r1, [r7, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f001 f9d9 	bl	8004a68 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a22      	ldr	r2, [pc, #136]	@ (8003744 <HAL_TIM_IC_Start_IT+0x234>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d022      	beq.n	8003706 <HAL_TIM_IC_Start_IT+0x1f6>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c8:	d01d      	beq.n	8003706 <HAL_TIM_IC_Start_IT+0x1f6>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003748 <HAL_TIM_IC_Start_IT+0x238>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d018      	beq.n	8003706 <HAL_TIM_IC_Start_IT+0x1f6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1c      	ldr	r2, [pc, #112]	@ (800374c <HAL_TIM_IC_Start_IT+0x23c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <HAL_TIM_IC_Start_IT+0x1f6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003750 <HAL_TIM_IC_Start_IT+0x240>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00e      	beq.n	8003706 <HAL_TIM_IC_Start_IT+0x1f6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a19      	ldr	r2, [pc, #100]	@ (8003754 <HAL_TIM_IC_Start_IT+0x244>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d009      	beq.n	8003706 <HAL_TIM_IC_Start_IT+0x1f6>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a18      	ldr	r2, [pc, #96]	@ (8003758 <HAL_TIM_IC_Start_IT+0x248>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d004      	beq.n	8003706 <HAL_TIM_IC_Start_IT+0x1f6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a16      	ldr	r2, [pc, #88]	@ (800375c <HAL_TIM_IC_Start_IT+0x24c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d111      	bne.n	800372a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b06      	cmp	r3, #6
 8003716:	d010      	beq.n	800373a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	e007      	b.n	800373a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800373a:	7bfb      	ldrb	r3, [r7, #15]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40010000 	.word	0x40010000
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800
 8003750:	40000c00 	.word	0x40000c00
 8003754:	40010400 	.word	0x40010400
 8003758:	40014000 	.word	0x40014000
 800375c:	40001800 	.word	0x40001800

08003760 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b0c      	cmp	r3, #12
 8003772:	d841      	bhi.n	80037f8 <HAL_TIM_IC_Stop_IT+0x98>
 8003774:	a201      	add	r2, pc, #4	@ (adr r2, 800377c <HAL_TIM_IC_Stop_IT+0x1c>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	080037b1 	.word	0x080037b1
 8003780:	080037f9 	.word	0x080037f9
 8003784:	080037f9 	.word	0x080037f9
 8003788:	080037f9 	.word	0x080037f9
 800378c:	080037c3 	.word	0x080037c3
 8003790:	080037f9 	.word	0x080037f9
 8003794:	080037f9 	.word	0x080037f9
 8003798:	080037f9 	.word	0x080037f9
 800379c:	080037d5 	.word	0x080037d5
 80037a0:	080037f9 	.word	0x080037f9
 80037a4:	080037f9 	.word	0x080037f9
 80037a8:	080037f9 	.word	0x080037f9
 80037ac:	080037e7 	.word	0x080037e7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0202 	bic.w	r2, r2, #2
 80037be:	60da      	str	r2, [r3, #12]
      break;
 80037c0:	e01d      	b.n	80037fe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0204 	bic.w	r2, r2, #4
 80037d0:	60da      	str	r2, [r3, #12]
      break;
 80037d2:	e014      	b.n	80037fe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0208 	bic.w	r2, r2, #8
 80037e2:	60da      	str	r2, [r3, #12]
      break;
 80037e4:	e00b      	b.n	80037fe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0210 	bic.w	r2, r2, #16
 80037f4:	60da      	str	r2, [r3, #12]
      break;
 80037f6:	e002      	b.n	80037fe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      break;
 80037fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d156      	bne.n	80038b2 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2200      	movs	r2, #0
 800380a:	6839      	ldr	r1, [r7, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f001 f92b 	bl	8004a68 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a1a      	ldr	r2, [r3, #32]
 8003818:	f241 1311 	movw	r3, #4369	@ 0x1111
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10f      	bne.n	8003842 <HAL_TIM_IC_Stop_IT+0xe2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a1a      	ldr	r2, [r3, #32]
 8003828:	f240 4344 	movw	r3, #1092	@ 0x444
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d107      	bne.n	8003842 <HAL_TIM_IC_Stop_IT+0xe2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d104      	bne.n	8003852 <HAL_TIM_IC_Stop_IT+0xf2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003850:	e013      	b.n	800387a <HAL_TIM_IC_Stop_IT+0x11a>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d104      	bne.n	8003862 <HAL_TIM_IC_Stop_IT+0x102>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003860:	e00b      	b.n	800387a <HAL_TIM_IC_Stop_IT+0x11a>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b08      	cmp	r3, #8
 8003866:	d104      	bne.n	8003872 <HAL_TIM_IC_Stop_IT+0x112>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003870:	e003      	b.n	800387a <HAL_TIM_IC_Stop_IT+0x11a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d104      	bne.n	800388a <HAL_TIM_IC_Stop_IT+0x12a>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003888:	e013      	b.n	80038b2 <HAL_TIM_IC_Stop_IT+0x152>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b04      	cmp	r3, #4
 800388e:	d104      	bne.n	800389a <HAL_TIM_IC_Stop_IT+0x13a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003898:	e00b      	b.n	80038b2 <HAL_TIM_IC_Stop_IT+0x152>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b08      	cmp	r3, #8
 800389e:	d104      	bne.n	80038aa <HAL_TIM_IC_Stop_IT+0x14a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038a8:	e003      	b.n	80038b2 <HAL_TIM_IC_Stop_IT+0x152>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e097      	b.n	8003a00 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7fe f987 	bl	8001bf8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003900:	f023 0307 	bic.w	r3, r3, #7
 8003904:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3304      	adds	r3, #4
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f000 fc89 	bl	8004228 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	4313      	orrs	r3, r2
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800395c:	f023 030c 	bic.w	r3, r3, #12
 8003960:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003968:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800396c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	4313      	orrs	r3, r2
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	011a      	lsls	r2, r3, #4
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	031b      	lsls	r3, r3, #12
 800398c:	4313      	orrs	r3, r2
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800399a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80039a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	4313      	orrs	r3, r2
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a30:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d110      	bne.n	8003a5a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d102      	bne.n	8003a44 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a3e:	7b7b      	ldrb	r3, [r7, #13]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d001      	beq.n	8003a48 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e069      	b.n	8003b1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a58:	e031      	b.n	8003abe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d110      	bne.n	8003a82 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a60:	7bbb      	ldrb	r3, [r7, #14]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d102      	bne.n	8003a6c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a66:	7b3b      	ldrb	r3, [r7, #12]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d001      	beq.n	8003a70 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e055      	b.n	8003b1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a80:	e01d      	b.n	8003abe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d108      	bne.n	8003a9a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a88:	7bbb      	ldrb	r3, [r7, #14]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d105      	bne.n	8003a9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a8e:	7b7b      	ldrb	r3, [r7, #13]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d102      	bne.n	8003a9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a94:	7b3b      	ldrb	r3, [r7, #12]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d001      	beq.n	8003a9e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e03e      	b.n	8003b1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_TIM_Encoder_Start+0xc4>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d008      	beq.n	8003adc <HAL_TIM_Encoder_Start+0xd4>
 8003aca:	e00f      	b.n	8003aec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 ffc7 	bl	8004a68 <TIM_CCxChannelCmd>
      break;
 8003ada:	e016      	b.n	8003b0a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	2104      	movs	r1, #4
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 ffbf 	bl	8004a68 <TIM_CCxChannelCmd>
      break;
 8003aea:	e00e      	b.n	8003b0a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2201      	movs	r2, #1
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 ffb7 	bl	8004a68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2201      	movs	r2, #1
 8003b00:	2104      	movs	r1, #4
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 ffb0 	bl	8004a68 <TIM_CCxChannelCmd>
      break;
 8003b08:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d020      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01b      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0202 	mvn.w	r2, #2
 8003b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd fdea 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 8003b74:	e005      	b.n	8003b82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fb38 	bl	80041ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fb3f 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d020      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01b      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0204 	mvn.w	r2, #4
 8003ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fd fdc4 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fb12 	bl	80041ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fb19 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d020      	beq.n	8003c20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01b      	beq.n	8003c20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0208 	mvn.w	r2, #8
 8003bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fd fd9e 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 8003c0c:	e005      	b.n	8003c1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 faec 	bl	80041ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 faf3 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d020      	beq.n	8003c6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01b      	beq.n	8003c6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0210 	mvn.w	r2, #16
 8003c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2208      	movs	r2, #8
 8003c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd fd78 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 8003c58:	e005      	b.n	8003c66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fac6 	bl	80041ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 facd 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00c      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0201 	mvn.w	r2, #1
 8003c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 faa4 	bl	80041d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00c      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 ffd8 	bl	8004c64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00c      	beq.n	8003cd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fa9e 	bl	8004214 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00c      	beq.n	8003cfc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0220 	mvn.w	r2, #32
 8003cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 ffaa 	bl	8004c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e088      	b.n	8003e34 <HAL_TIM_IC_ConfigChannel+0x130>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d11b      	bne.n	8003d68 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003d40:	f000 fcce 	bl	80046e0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 020c 	bic.w	r2, r2, #12
 8003d52:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6999      	ldr	r1, [r3, #24]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	619a      	str	r2, [r3, #24]
 8003d66:	e060      	b.n	8003e2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d11c      	bne.n	8003da8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003d7e:	f000 fd52 	bl	8004826 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003d90:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6999      	ldr	r1, [r3, #24]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	021a      	lsls	r2, r3, #8
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	619a      	str	r2, [r3, #24]
 8003da6:	e040      	b.n	8003e2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d11b      	bne.n	8003de6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003dbe:	f000 fd9f 	bl	8004900 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 020c 	bic.w	r2, r2, #12
 8003dd0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69d9      	ldr	r1, [r3, #28]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	61da      	str	r2, [r3, #28]
 8003de4:	e021      	b.n	8003e2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b0c      	cmp	r3, #12
 8003dea:	d11c      	bne.n	8003e26 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003dfc:	f000 fdbc 	bl	8004978 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69da      	ldr	r2, [r3, #28]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003e0e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69d9      	ldr	r1, [r3, #28]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	021a      	lsls	r2, r3, #8
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	61da      	str	r2, [r3, #28]
 8003e24:	e001      	b.n	8003e2a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e0ae      	b.n	8003fb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b0c      	cmp	r3, #12
 8003e66:	f200 809f 	bhi.w	8003fa8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e70:	08003ea5 	.word	0x08003ea5
 8003e74:	08003fa9 	.word	0x08003fa9
 8003e78:	08003fa9 	.word	0x08003fa9
 8003e7c:	08003fa9 	.word	0x08003fa9
 8003e80:	08003ee5 	.word	0x08003ee5
 8003e84:	08003fa9 	.word	0x08003fa9
 8003e88:	08003fa9 	.word	0x08003fa9
 8003e8c:	08003fa9 	.word	0x08003fa9
 8003e90:	08003f27 	.word	0x08003f27
 8003e94:	08003fa9 	.word	0x08003fa9
 8003e98:	08003fa9 	.word	0x08003fa9
 8003e9c:	08003fa9 	.word	0x08003fa9
 8003ea0:	08003f67 	.word	0x08003f67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fa68 	bl	8004380 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0208 	orr.w	r2, r2, #8
 8003ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0204 	bic.w	r2, r2, #4
 8003ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6999      	ldr	r1, [r3, #24]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	619a      	str	r2, [r3, #24]
      break;
 8003ee2:	e064      	b.n	8003fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fab8 	bl	8004460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6999      	ldr	r1, [r3, #24]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	021a      	lsls	r2, r3, #8
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	619a      	str	r2, [r3, #24]
      break;
 8003f24:	e043      	b.n	8003fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fb0d 	bl	800454c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0208 	orr.w	r2, r2, #8
 8003f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0204 	bic.w	r2, r2, #4
 8003f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69d9      	ldr	r1, [r3, #28]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	61da      	str	r2, [r3, #28]
      break;
 8003f64:	e023      	b.n	8003fae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fb61 	bl	8004634 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69da      	ldr	r2, [r3, #28]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69d9      	ldr	r1, [r3, #28]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	021a      	lsls	r2, r3, #8
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	61da      	str	r2, [r3, #28]
      break;
 8003fa6:	e002      	b.n	8003fae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	75fb      	strb	r3, [r7, #23]
      break;
 8003fac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_TIM_ConfigClockSource+0x1c>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e0b4      	b.n	8004146 <HAL_TIM_ConfigClockSource+0x186>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004002:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004014:	d03e      	beq.n	8004094 <HAL_TIM_ConfigClockSource+0xd4>
 8004016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800401a:	f200 8087 	bhi.w	800412c <HAL_TIM_ConfigClockSource+0x16c>
 800401e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004022:	f000 8086 	beq.w	8004132 <HAL_TIM_ConfigClockSource+0x172>
 8004026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800402a:	d87f      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
 800402c:	2b70      	cmp	r3, #112	@ 0x70
 800402e:	d01a      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0xa6>
 8004030:	2b70      	cmp	r3, #112	@ 0x70
 8004032:	d87b      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
 8004034:	2b60      	cmp	r3, #96	@ 0x60
 8004036:	d050      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x11a>
 8004038:	2b60      	cmp	r3, #96	@ 0x60
 800403a:	d877      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
 800403c:	2b50      	cmp	r3, #80	@ 0x50
 800403e:	d03c      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0xfa>
 8004040:	2b50      	cmp	r3, #80	@ 0x50
 8004042:	d873      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
 8004044:	2b40      	cmp	r3, #64	@ 0x40
 8004046:	d058      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x13a>
 8004048:	2b40      	cmp	r3, #64	@ 0x40
 800404a:	d86f      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
 800404c:	2b30      	cmp	r3, #48	@ 0x30
 800404e:	d064      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x15a>
 8004050:	2b30      	cmp	r3, #48	@ 0x30
 8004052:	d86b      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
 8004054:	2b20      	cmp	r3, #32
 8004056:	d060      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x15a>
 8004058:	2b20      	cmp	r3, #32
 800405a:	d867      	bhi.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d05c      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x15a>
 8004060:	2b10      	cmp	r3, #16
 8004062:	d05a      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x15a>
 8004064:	e062      	b.n	800412c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004076:	f000 fcd7 	bl	8004a28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	609a      	str	r2, [r3, #8]
      break;
 8004092:	e04f      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040a4:	f000 fcc0 	bl	8004a28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040b6:	609a      	str	r2, [r3, #8]
      break;
 80040b8:	e03c      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c6:	461a      	mov	r2, r3
 80040c8:	f000 fb7e 	bl	80047c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2150      	movs	r1, #80	@ 0x50
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fc8d 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 80040d8:	e02c      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040e6:	461a      	mov	r2, r3
 80040e8:	f000 fbda 	bl	80048a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2160      	movs	r1, #96	@ 0x60
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fc7d 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 80040f8:	e01c      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004106:	461a      	mov	r2, r3
 8004108:	f000 fb5e 	bl	80047c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2140      	movs	r1, #64	@ 0x40
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fc6d 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 8004118:	e00c      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4619      	mov	r1, r3
 8004124:	4610      	mov	r0, r2
 8004126:	f000 fc64 	bl	80049f2 <TIM_ITRx_SetConfig>
      break;
 800412a:	e003      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      break;
 8004130:	e000      	b.n	8004134 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004144:	7bfb      	ldrb	r3, [r7, #15]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b0c      	cmp	r3, #12
 8004162:	d831      	bhi.n	80041c8 <HAL_TIM_ReadCapturedValue+0x78>
 8004164:	a201      	add	r2, pc, #4	@ (adr r2, 800416c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	080041a1 	.word	0x080041a1
 8004170:	080041c9 	.word	0x080041c9
 8004174:	080041c9 	.word	0x080041c9
 8004178:	080041c9 	.word	0x080041c9
 800417c:	080041ab 	.word	0x080041ab
 8004180:	080041c9 	.word	0x080041c9
 8004184:	080041c9 	.word	0x080041c9
 8004188:	080041c9 	.word	0x080041c9
 800418c:	080041b5 	.word	0x080041b5
 8004190:	080041c9 	.word	0x080041c9
 8004194:	080041c9 	.word	0x080041c9
 8004198:	080041c9 	.word	0x080041c9
 800419c:	080041bf 	.word	0x080041bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a6:	60fb      	str	r3, [r7, #12]

      break;
 80041a8:	e00f      	b.n	80041ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b0:	60fb      	str	r3, [r7, #12]

      break;
 80041b2:	e00a      	b.n	80041ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ba:	60fb      	str	r3, [r7, #12]

      break;
 80041bc:	e005      	b.n	80041ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	60fb      	str	r3, [r7, #12]

      break;
 80041c6:	e000      	b.n	80041ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80041c8:	bf00      	nop
  }

  return tmpreg;
 80041ca:	68fb      	ldr	r3, [r7, #12]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a46      	ldr	r2, [pc, #280]	@ (8004354 <TIM_Base_SetConfig+0x12c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <TIM_Base_SetConfig+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004246:	d00f      	beq.n	8004268 <TIM_Base_SetConfig+0x40>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a43      	ldr	r2, [pc, #268]	@ (8004358 <TIM_Base_SetConfig+0x130>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00b      	beq.n	8004268 <TIM_Base_SetConfig+0x40>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a42      	ldr	r2, [pc, #264]	@ (800435c <TIM_Base_SetConfig+0x134>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d007      	beq.n	8004268 <TIM_Base_SetConfig+0x40>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a41      	ldr	r2, [pc, #260]	@ (8004360 <TIM_Base_SetConfig+0x138>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_Base_SetConfig+0x40>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a40      	ldr	r2, [pc, #256]	@ (8004364 <TIM_Base_SetConfig+0x13c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d108      	bne.n	800427a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800426e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a35      	ldr	r2, [pc, #212]	@ (8004354 <TIM_Base_SetConfig+0x12c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d02b      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004288:	d027      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a32      	ldr	r2, [pc, #200]	@ (8004358 <TIM_Base_SetConfig+0x130>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d023      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a31      	ldr	r2, [pc, #196]	@ (800435c <TIM_Base_SetConfig+0x134>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01f      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a30      	ldr	r2, [pc, #192]	@ (8004360 <TIM_Base_SetConfig+0x138>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01b      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004364 <TIM_Base_SetConfig+0x13c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d017      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a2e      	ldr	r2, [pc, #184]	@ (8004368 <TIM_Base_SetConfig+0x140>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a2d      	ldr	r2, [pc, #180]	@ (800436c <TIM_Base_SetConfig+0x144>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00f      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004370 <TIM_Base_SetConfig+0x148>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00b      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004374 <TIM_Base_SetConfig+0x14c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004378 <TIM_Base_SetConfig+0x150>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a29      	ldr	r2, [pc, #164]	@ (800437c <TIM_Base_SetConfig+0x154>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d108      	bne.n	80042ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a10      	ldr	r2, [pc, #64]	@ (8004354 <TIM_Base_SetConfig+0x12c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_Base_SetConfig+0xf8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a12      	ldr	r2, [pc, #72]	@ (8004364 <TIM_Base_SetConfig+0x13c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d103      	bne.n	8004328 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d105      	bne.n	8004346 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f023 0201 	bic.w	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	611a      	str	r2, [r3, #16]
  }
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40010000 	.word	0x40010000
 8004358:	40000400 	.word	0x40000400
 800435c:	40000800 	.word	0x40000800
 8004360:	40000c00 	.word	0x40000c00
 8004364:	40010400 	.word	0x40010400
 8004368:	40014000 	.word	0x40014000
 800436c:	40014400 	.word	0x40014400
 8004370:	40014800 	.word	0x40014800
 8004374:	40001800 	.word	0x40001800
 8004378:	40001c00 	.word	0x40001c00
 800437c:	40002000 	.word	0x40002000

08004380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	f023 0201 	bic.w	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0303 	bic.w	r3, r3, #3
 80043b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f023 0302 	bic.w	r3, r3, #2
 80043c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a20      	ldr	r2, [pc, #128]	@ (8004458 <TIM_OC1_SetConfig+0xd8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d003      	beq.n	80043e4 <TIM_OC1_SetConfig+0x64>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a1f      	ldr	r2, [pc, #124]	@ (800445c <TIM_OC1_SetConfig+0xdc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d10c      	bne.n	80043fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f023 0308 	bic.w	r3, r3, #8
 80043ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f023 0304 	bic.w	r3, r3, #4
 80043fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a15      	ldr	r2, [pc, #84]	@ (8004458 <TIM_OC1_SetConfig+0xd8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d003      	beq.n	800440e <TIM_OC1_SetConfig+0x8e>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a14      	ldr	r2, [pc, #80]	@ (800445c <TIM_OC1_SetConfig+0xdc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d111      	bne.n	8004432 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800441c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	621a      	str	r2, [r3, #32]
}
 800444c:	bf00      	nop
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	40010000 	.word	0x40010000
 800445c:	40010400 	.word	0x40010400

08004460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f023 0210 	bic.w	r2, r3, #16
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800448e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f023 0320 	bic.w	r3, r3, #32
 80044aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a22      	ldr	r2, [pc, #136]	@ (8004544 <TIM_OC2_SetConfig+0xe4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_OC2_SetConfig+0x68>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a21      	ldr	r2, [pc, #132]	@ (8004548 <TIM_OC2_SetConfig+0xe8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d10d      	bne.n	80044e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a17      	ldr	r2, [pc, #92]	@ (8004544 <TIM_OC2_SetConfig+0xe4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d003      	beq.n	80044f4 <TIM_OC2_SetConfig+0x94>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a16      	ldr	r2, [pc, #88]	@ (8004548 <TIM_OC2_SetConfig+0xe8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d113      	bne.n	800451c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004502:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	621a      	str	r2, [r3, #32]
}
 8004536:	bf00      	nop
 8004538:	371c      	adds	r7, #28
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40010000 	.word	0x40010000
 8004548:	40010400 	.word	0x40010400

0800454c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800457a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0303 	bic.w	r3, r3, #3
 8004582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a21      	ldr	r2, [pc, #132]	@ (800462c <TIM_OC3_SetConfig+0xe0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d003      	beq.n	80045b2 <TIM_OC3_SetConfig+0x66>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a20      	ldr	r2, [pc, #128]	@ (8004630 <TIM_OC3_SetConfig+0xe4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d10d      	bne.n	80045ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	021b      	lsls	r3, r3, #8
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a16      	ldr	r2, [pc, #88]	@ (800462c <TIM_OC3_SetConfig+0xe0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d003      	beq.n	80045de <TIM_OC3_SetConfig+0x92>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a15      	ldr	r2, [pc, #84]	@ (8004630 <TIM_OC3_SetConfig+0xe4>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d113      	bne.n	8004606 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	621a      	str	r2, [r3, #32]
}
 8004620:	bf00      	nop
 8004622:	371c      	adds	r7, #28
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	40010000 	.word	0x40010000
 8004630:	40010400 	.word	0x40010400

08004634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800466a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800467e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	031b      	lsls	r3, r3, #12
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a12      	ldr	r2, [pc, #72]	@ (80046d8 <TIM_OC4_SetConfig+0xa4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <TIM_OC4_SetConfig+0x68>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a11      	ldr	r2, [pc, #68]	@ (80046dc <TIM_OC4_SetConfig+0xa8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d109      	bne.n	80046b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40010400 	.word	0x40010400

080046e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f023 0201 	bic.w	r2, r3, #1
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a28      	ldr	r2, [pc, #160]	@ (80047ac <TIM_TI1_SetConfig+0xcc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d01b      	beq.n	8004746 <TIM_TI1_SetConfig+0x66>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004714:	d017      	beq.n	8004746 <TIM_TI1_SetConfig+0x66>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a25      	ldr	r2, [pc, #148]	@ (80047b0 <TIM_TI1_SetConfig+0xd0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <TIM_TI1_SetConfig+0x66>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a24      	ldr	r2, [pc, #144]	@ (80047b4 <TIM_TI1_SetConfig+0xd4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00f      	beq.n	8004746 <TIM_TI1_SetConfig+0x66>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4a23      	ldr	r2, [pc, #140]	@ (80047b8 <TIM_TI1_SetConfig+0xd8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00b      	beq.n	8004746 <TIM_TI1_SetConfig+0x66>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a22      	ldr	r2, [pc, #136]	@ (80047bc <TIM_TI1_SetConfig+0xdc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d007      	beq.n	8004746 <TIM_TI1_SetConfig+0x66>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a21      	ldr	r2, [pc, #132]	@ (80047c0 <TIM_TI1_SetConfig+0xe0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d003      	beq.n	8004746 <TIM_TI1_SetConfig+0x66>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a20      	ldr	r2, [pc, #128]	@ (80047c4 <TIM_TI1_SetConfig+0xe4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d101      	bne.n	800474a <TIM_TI1_SetConfig+0x6a>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <TIM_TI1_SetConfig+0x6c>
 800474a:	2300      	movs	r3, #0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	e003      	b.n	800476a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004770:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	b2db      	uxtb	r3, r3
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f023 030a 	bic.w	r3, r3, #10
 8004784:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f003 030a 	and.w	r3, r3, #10
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40010000 	.word	0x40010000
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40000c00 	.word	0x40000c00
 80047bc:	40010400 	.word	0x40010400
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40001800 	.word	0x40001800

080047c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f023 0201 	bic.w	r2, r3, #1
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f023 030a 	bic.w	r3, r3, #10
 8004804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004826:	b480      	push	{r7}
 8004828:	b087      	sub	sp, #28
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	607a      	str	r2, [r7, #4]
 8004832:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f023 0210 	bic.w	r2, r3, #16
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004864:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	031b      	lsls	r3, r3, #12
 800486a:	b29b      	uxth	r3, r3
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004878:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	621a      	str	r2, [r3, #32]
}
 8004894:	bf00      	nop
 8004896:	371c      	adds	r7, #28
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f023 0210 	bic.w	r2, r3, #16
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	031b      	lsls	r3, r3, #12
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	621a      	str	r2, [r3, #32]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f023 0303 	bic.w	r3, r3, #3
 800492c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4313      	orrs	r3, r2
 8004934:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800493c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	b2db      	uxtb	r3, r3
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004950:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	621a      	str	r2, [r3, #32]
}
 800496c:	bf00      	nop
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049a4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	021b      	lsls	r3, r3, #8
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049b6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	031b      	lsls	r3, r3, #12
 80049bc:	b29b      	uxth	r3, r3
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80049ca:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	031b      	lsls	r3, r3, #12
 80049d0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	621a      	str	r2, [r3, #32]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f043 0307 	orr.w	r3, r3, #7
 8004a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	609a      	str	r2, [r3, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	021a      	lsls	r2, r3, #8
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	609a      	str	r2, [r3, #8]
}
 8004a5c:	bf00      	nop
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a1a      	ldr	r2, [r3, #32]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	401a      	ands	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a1a      	ldr	r2, [r3, #32]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	621a      	str	r2, [r3, #32]
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
	...

08004ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e05a      	b.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a21      	ldr	r2, [pc, #132]	@ (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d022      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b18:	d01d      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d018      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1b      	ldr	r2, [pc, #108]	@ (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1a      	ldr	r2, [pc, #104]	@ (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00e      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a18      	ldr	r2, [pc, #96]	@ (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d009      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a17      	ldr	r2, [pc, #92]	@ (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d004      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a15      	ldr	r2, [pc, #84]	@ (8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d10c      	bne.n	8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40010000 	.word	0x40010000
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800
 8004b9c:	40000c00 	.word	0x40000c00
 8004ba0:	40010400 	.word	0x40010400
 8004ba4:	40014000 	.word	0x40014000
 8004ba8:	40001800 	.word	0x40001800

08004bac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e03d      	b.n	8004c44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e042      	b.n	8004d10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fd f8e2 	bl	8001e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2224      	movs	r2, #36	@ 0x24
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fdbd 	bl	800583c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695a      	ldr	r2, [r3, #20]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ce0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	@ 0x28
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	4613      	mov	r3, r2
 8004d26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d175      	bne.n	8004e24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_UART_Transmit+0x2c>
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e06e      	b.n	8004e26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2221      	movs	r2, #33	@ 0x21
 8004d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d56:	f7fd fa7b 	bl	8002250 <HAL_GetTick>
 8004d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	88fa      	ldrh	r2, [r7, #6]
 8004d60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	88fa      	ldrh	r2, [r7, #6]
 8004d66:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d70:	d108      	bne.n	8004d84 <HAL_UART_Transmit+0x6c>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d104      	bne.n	8004d84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	e003      	b.n	8004d8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d8c:	e02e      	b.n	8004dec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2200      	movs	r2, #0
 8004d96:	2180      	movs	r1, #128	@ 0x80
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 fb1f 	bl	80053dc <UART_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e03a      	b.n	8004e26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10b      	bne.n	8004dce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	3302      	adds	r3, #2
 8004dca:	61bb      	str	r3, [r7, #24]
 8004dcc:	e007      	b.n	8004dde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	781a      	ldrb	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1cb      	bne.n	8004d8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2140      	movs	r1, #64	@ 0x40
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 faeb 	bl	80053dc <UART_WaitOnFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e006      	b.n	8004e26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	e000      	b.n	8004e26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e24:	2302      	movs	r3, #2
  }
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d112      	bne.n	8004e6e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_UART_Receive_IT+0x26>
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e00b      	b.n	8004e70 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e5e:	88fb      	ldrh	r3, [r7, #6]
 8004e60:	461a      	mov	r2, r3
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 fb12 	bl	800548e <UART_Start_Receive_IT>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	e000      	b.n	8004e70 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004e6e:	2302      	movs	r3, #2
  }
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b0ba      	sub	sp, #232	@ 0xe8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10f      	bne.n	8004ede <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_UART_IRQHandler+0x66>
 8004eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fbf2 	bl	80056c0 <UART_Receive_IT>
      return;
 8004edc:	e25b      	b.n	8005396 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 80de 	beq.w	80050a4 <HAL_UART_IRQHandler+0x22c>
 8004ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80d1 	beq.w	80050a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_UART_IRQHandler+0xae>
 8004f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1e:	f043 0201 	orr.w	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <HAL_UART_IRQHandler+0xd2>
 8004f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f42:	f043 0202 	orr.w	r2, r3, #2
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <HAL_UART_IRQHandler+0xf6>
 8004f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f66:	f043 0204 	orr.w	r2, r3, #4
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d011      	beq.n	8004f9e <HAL_UART_IRQHandler+0x126>
 8004f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d105      	bne.n	8004f92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f96:	f043 0208 	orr.w	r2, r3, #8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 81f2 	beq.w	800538c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x14e>
 8004fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fb7d 	bl	80056c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd0:	2b40      	cmp	r3, #64	@ 0x40
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2301      	moveq	r3, #1
 8004fd6:	2300      	movne	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d103      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x17a>
 8004fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d04f      	beq.n	8005092 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fa85 	bl	8005502 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005002:	2b40      	cmp	r3, #64	@ 0x40
 8005004:	d141      	bne.n	800508a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3314      	adds	r3, #20
 800500c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800501c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005020:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005024:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3314      	adds	r3, #20
 800502e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005032:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005036:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800503e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800504a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1d9      	bne.n	8005006 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005056:	2b00      	cmp	r3, #0
 8005058:	d013      	beq.n	8005082 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505e:	4a7e      	ldr	r2, [pc, #504]	@ (8005258 <HAL_UART_IRQHandler+0x3e0>)
 8005060:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005066:	4618      	mov	r0, r3
 8005068:	f7fd faa3 	bl	80025b2 <HAL_DMA_Abort_IT>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800507c:	4610      	mov	r0, r2
 800507e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005080:	e00e      	b.n	80050a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f994 	bl	80053b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005088:	e00a      	b.n	80050a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f990 	bl	80053b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	e006      	b.n	80050a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f98c 	bl	80053b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800509e:	e175      	b.n	800538c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a0:	bf00      	nop
    return;
 80050a2:	e173      	b.n	800538c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	f040 814f 	bne.w	800534c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 8148 	beq.w	800534c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8141 	beq.w	800534c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050ca:	2300      	movs	r3, #0
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60bb      	str	r3, [r7, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ea:	2b40      	cmp	r3, #64	@ 0x40
 80050ec:	f040 80b6 	bne.w	800525c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 8145 	beq.w	8005390 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800510a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800510e:	429a      	cmp	r2, r3
 8005110:	f080 813e 	bcs.w	8005390 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800511a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005126:	f000 8088 	beq.w	800523a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005140:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005148:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	330c      	adds	r3, #12
 8005152:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005156:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800515a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005162:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800516e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1d9      	bne.n	800512a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3314      	adds	r3, #20
 800517c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005186:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3314      	adds	r3, #20
 8005196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800519a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800519e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80051a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80051ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e1      	bne.n	8005176 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3314      	adds	r3, #20
 80051b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80051c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3314      	adds	r3, #20
 80051d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e3      	bne.n	80051b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005202:	e853 3f00 	ldrex	r3, [r3]
 8005206:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005208:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800520a:	f023 0310 	bic.w	r3, r3, #16
 800520e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	330c      	adds	r3, #12
 8005218:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800521c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800521e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005222:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800522a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e3      	bne.n	80051f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005234:	4618      	mov	r0, r3
 8005236:	f7fd f94c 	bl	80024d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2202      	movs	r2, #2
 800523e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005248:	b29b      	uxth	r3, r3
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	b29b      	uxth	r3, r3
 800524e:	4619      	mov	r1, r3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f8b7 	bl	80053c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005256:	e09b      	b.n	8005390 <HAL_UART_IRQHandler+0x518>
 8005258:	080055c9 	.word	0x080055c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005264:	b29b      	uxth	r3, r3
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 808e 	beq.w	8005394 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8089 	beq.w	8005394 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	330c      	adds	r3, #12
 8005288:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528c:	e853 3f00 	ldrex	r3, [r3]
 8005290:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005298:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	330c      	adds	r3, #12
 80052a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80052a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80052a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e3      	bne.n	8005282 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3314      	adds	r3, #20
 80052c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	623b      	str	r3, [r7, #32]
   return(result);
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	f023 0301 	bic.w	r3, r3, #1
 80052d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3314      	adds	r3, #20
 80052da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052de:	633a      	str	r2, [r7, #48]	@ 0x30
 80052e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e3      	bne.n	80052ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	330c      	adds	r3, #12
 8005306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 0310 	bic.w	r3, r3, #16
 8005316:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330c      	adds	r3, #12
 8005320:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005324:	61fa      	str	r2, [r7, #28]
 8005326:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005328:	69b9      	ldr	r1, [r7, #24]
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	e841 2300 	strex	r3, r2, [r1]
 8005330:	617b      	str	r3, [r7, #20]
   return(result);
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1e3      	bne.n	8005300 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800533e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f83d 	bl	80053c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800534a:	e023      	b.n	8005394 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800534c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005354:	2b00      	cmp	r3, #0
 8005356:	d009      	beq.n	800536c <HAL_UART_IRQHandler+0x4f4>
 8005358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800535c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f943 	bl	80055f0 <UART_Transmit_IT>
    return;
 800536a:	e014      	b.n	8005396 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800536c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00e      	beq.n	8005396 <HAL_UART_IRQHandler+0x51e>
 8005378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800537c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f983 	bl	8005690 <UART_EndTransmit_IT>
    return;
 800538a:	e004      	b.n	8005396 <HAL_UART_IRQHandler+0x51e>
    return;
 800538c:	bf00      	nop
 800538e:	e002      	b.n	8005396 <HAL_UART_IRQHandler+0x51e>
      return;
 8005390:	bf00      	nop
 8005392:	e000      	b.n	8005396 <HAL_UART_IRQHandler+0x51e>
      return;
 8005394:	bf00      	nop
  }
}
 8005396:	37e8      	adds	r7, #232	@ 0xe8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	603b      	str	r3, [r7, #0]
 80053e8:	4613      	mov	r3, r2
 80053ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ec:	e03b      	b.n	8005466 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d037      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f6:	f7fc ff2b 	bl	8002250 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	6a3a      	ldr	r2, [r7, #32]
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <UART_WaitOnFlagUntilTimeout+0x30>
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e03a      	b.n	8005486 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d023      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0x8a>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b80      	cmp	r3, #128	@ 0x80
 8005422:	d020      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b40      	cmp	r3, #64	@ 0x40
 8005428:	d01d      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b08      	cmp	r3, #8
 8005436:	d116      	bne.n	8005466 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f857 	bl	8005502 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2208      	movs	r2, #8
 8005458:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e00f      	b.n	8005486 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4013      	ands	r3, r2
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	429a      	cmp	r2, r3
 8005474:	bf0c      	ite	eq
 8005476:	2301      	moveq	r3, #1
 8005478:	2300      	movne	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	429a      	cmp	r2, r3
 8005482:	d0b4      	beq.n	80053ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	4613      	mov	r3, r2
 800549a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	88fa      	ldrh	r2, [r7, #6]
 80054a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	88fa      	ldrh	r2, [r7, #6]
 80054ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2222      	movs	r2, #34	@ 0x22
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695a      	ldr	r2, [r3, #20]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0220 	orr.w	r2, r2, #32
 80054f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005502:	b480      	push	{r7}
 8005504:	b095      	sub	sp, #84	@ 0x54
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	330c      	adds	r3, #12
 8005510:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800551a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005520:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	330c      	adds	r3, #12
 8005528:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800552a:	643a      	str	r2, [r7, #64]	@ 0x40
 800552c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005530:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e5      	bne.n	800550a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3314      	adds	r3, #20
 8005544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	61fb      	str	r3, [r7, #28]
   return(result);
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	f023 0301 	bic.w	r3, r3, #1
 8005554:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3314      	adds	r3, #20
 800555c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800555e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005560:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e5      	bne.n	800553e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	2b01      	cmp	r3, #1
 8005578:	d119      	bne.n	80055ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	330c      	adds	r3, #12
 8005580:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	60bb      	str	r3, [r7, #8]
   return(result);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f023 0310 	bic.w	r3, r3, #16
 8005590:	647b      	str	r3, [r7, #68]	@ 0x44
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	330c      	adds	r3, #12
 8005598:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800559a:	61ba      	str	r2, [r7, #24]
 800559c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6979      	ldr	r1, [r7, #20]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	613b      	str	r3, [r7, #16]
   return(result);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e5      	bne.n	800557a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055bc:	bf00      	nop
 80055be:	3754      	adds	r7, #84	@ 0x54
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff fee4 	bl	80053b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055e8:	bf00      	nop
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b21      	cmp	r3, #33	@ 0x21
 8005602:	d13e      	bne.n	8005682 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800560c:	d114      	bne.n	8005638 <UART_Transmit_IT+0x48>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d110      	bne.n	8005638 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800562a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	1c9a      	adds	r2, r3, #2
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	621a      	str	r2, [r3, #32]
 8005636:	e008      	b.n	800564a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	1c59      	adds	r1, r3, #1
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6211      	str	r1, [r2, #32]
 8005642:	781a      	ldrb	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29b      	uxth	r3, r3
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	4619      	mov	r1, r3
 8005658:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10f      	bne.n	800567e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800566c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800567c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	e000      	b.n	8005684 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005682:	2302      	movs	r3, #2
  }
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff fe73 	bl	800539c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08c      	sub	sp, #48	@ 0x30
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b22      	cmp	r3, #34	@ 0x22
 80056d2:	f040 80ae 	bne.w	8005832 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056de:	d117      	bne.n	8005710 <UART_Receive_IT+0x50>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d113      	bne.n	8005710 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fe:	b29a      	uxth	r2, r3
 8005700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005702:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005708:	1c9a      	adds	r2, r3, #2
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	629a      	str	r2, [r3, #40]	@ 0x28
 800570e:	e026      	b.n	800575e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005714:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005716:	2300      	movs	r3, #0
 8005718:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005722:	d007      	beq.n	8005734 <UART_Receive_IT+0x74>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <UART_Receive_IT+0x82>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d106      	bne.n	8005742 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	b2da      	uxtb	r2, r3
 800573c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	e008      	b.n	8005754 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800574e:	b2da      	uxtb	r2, r3
 8005750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005752:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29b      	uxth	r3, r3
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	4619      	mov	r1, r3
 800576c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800576e:	2b00      	cmp	r3, #0
 8005770:	d15d      	bne.n	800582e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0220 	bic.w	r2, r2, #32
 8005780:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005790:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695a      	ldr	r2, [r3, #20]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0201 	bic.w	r2, r2, #1
 80057a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d135      	bne.n	8005824 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	613b      	str	r3, [r7, #16]
   return(result);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f023 0310 	bic.w	r3, r3, #16
 80057d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	330c      	adds	r3, #12
 80057dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057de:	623a      	str	r2, [r7, #32]
 80057e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	69f9      	ldr	r1, [r7, #28]
 80057e4:	6a3a      	ldr	r2, [r7, #32]
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e5      	bne.n	80057be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0310 	and.w	r3, r3, #16
 80057fc:	2b10      	cmp	r3, #16
 80057fe:	d10a      	bne.n	8005816 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff fdd1 	bl	80053c4 <HAL_UARTEx_RxEventCallback>
 8005822:	e002      	b.n	800582a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7fb ff73 	bl	8001710 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	e002      	b.n	8005834 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	e000      	b.n	8005834 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005832:	2302      	movs	r3, #2
  }
}
 8005834:	4618      	mov	r0, r3
 8005836:	3730      	adds	r7, #48	@ 0x30
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800583c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005840:	b0c0      	sub	sp, #256	@ 0x100
 8005842:	af00      	add	r7, sp, #0
 8005844:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005858:	68d9      	ldr	r1, [r3, #12]
 800585a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	ea40 0301 	orr.w	r3, r0, r1
 8005864:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	431a      	orrs	r2, r3
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	431a      	orrs	r2, r3
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005894:	f021 010c 	bic.w	r1, r1, #12
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058a2:	430b      	orrs	r3, r1
 80058a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b6:	6999      	ldr	r1, [r3, #24]
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	ea40 0301 	orr.w	r3, r0, r1
 80058c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b8f      	ldr	r3, [pc, #572]	@ (8005b08 <UART_SetConfig+0x2cc>)
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d005      	beq.n	80058dc <UART_SetConfig+0xa0>
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4b8d      	ldr	r3, [pc, #564]	@ (8005b0c <UART_SetConfig+0x2d0>)
 80058d8:	429a      	cmp	r2, r3
 80058da:	d104      	bne.n	80058e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058dc:	f7fd fcae 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 80058e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058e4:	e003      	b.n	80058ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058e6:	f7fd fc95 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 80058ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058f8:	f040 810c 	bne.w	8005b14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005900:	2200      	movs	r2, #0
 8005902:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005906:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800590a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800590e:	4622      	mov	r2, r4
 8005910:	462b      	mov	r3, r5
 8005912:	1891      	adds	r1, r2, r2
 8005914:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005916:	415b      	adcs	r3, r3
 8005918:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800591a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800591e:	4621      	mov	r1, r4
 8005920:	eb12 0801 	adds.w	r8, r2, r1
 8005924:	4629      	mov	r1, r5
 8005926:	eb43 0901 	adc.w	r9, r3, r1
 800592a:	f04f 0200 	mov.w	r2, #0
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800593a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800593e:	4690      	mov	r8, r2
 8005940:	4699      	mov	r9, r3
 8005942:	4623      	mov	r3, r4
 8005944:	eb18 0303 	adds.w	r3, r8, r3
 8005948:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800594c:	462b      	mov	r3, r5
 800594e:	eb49 0303 	adc.w	r3, r9, r3
 8005952:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005962:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800596a:	460b      	mov	r3, r1
 800596c:	18db      	adds	r3, r3, r3
 800596e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005970:	4613      	mov	r3, r2
 8005972:	eb42 0303 	adc.w	r3, r2, r3
 8005976:	657b      	str	r3, [r7, #84]	@ 0x54
 8005978:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800597c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005980:	f7fb f912 	bl	8000ba8 <__aeabi_uldivmod>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4b61      	ldr	r3, [pc, #388]	@ (8005b10 <UART_SetConfig+0x2d4>)
 800598a:	fba3 2302 	umull	r2, r3, r3, r2
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	011c      	lsls	r4, r3, #4
 8005992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005996:	2200      	movs	r2, #0
 8005998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800599c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059a4:	4642      	mov	r2, r8
 80059a6:	464b      	mov	r3, r9
 80059a8:	1891      	adds	r1, r2, r2
 80059aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059ac:	415b      	adcs	r3, r3
 80059ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059b4:	4641      	mov	r1, r8
 80059b6:	eb12 0a01 	adds.w	sl, r2, r1
 80059ba:	4649      	mov	r1, r9
 80059bc:	eb43 0b01 	adc.w	fp, r3, r1
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059d4:	4692      	mov	sl, r2
 80059d6:	469b      	mov	fp, r3
 80059d8:	4643      	mov	r3, r8
 80059da:	eb1a 0303 	adds.w	r3, sl, r3
 80059de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059e2:	464b      	mov	r3, r9
 80059e4:	eb4b 0303 	adc.w	r3, fp, r3
 80059e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a00:	460b      	mov	r3, r1
 8005a02:	18db      	adds	r3, r3, r3
 8005a04:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a06:	4613      	mov	r3, r2
 8005a08:	eb42 0303 	adc.w	r3, r2, r3
 8005a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a16:	f7fb f8c7 	bl	8000ba8 <__aeabi_uldivmod>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4611      	mov	r1, r2
 8005a20:	4b3b      	ldr	r3, [pc, #236]	@ (8005b10 <UART_SetConfig+0x2d4>)
 8005a22:	fba3 2301 	umull	r2, r3, r3, r1
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	2264      	movs	r2, #100	@ 0x64
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	1acb      	subs	r3, r1, r3
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a36:	4b36      	ldr	r3, [pc, #216]	@ (8005b10 <UART_SetConfig+0x2d4>)
 8005a38:	fba3 2302 	umull	r2, r3, r3, r2
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a44:	441c      	add	r4, r3
 8005a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a58:	4642      	mov	r2, r8
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	1891      	adds	r1, r2, r2
 8005a5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a60:	415b      	adcs	r3, r3
 8005a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a68:	4641      	mov	r1, r8
 8005a6a:	1851      	adds	r1, r2, r1
 8005a6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a6e:	4649      	mov	r1, r9
 8005a70:	414b      	adcs	r3, r1
 8005a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a80:	4659      	mov	r1, fp
 8005a82:	00cb      	lsls	r3, r1, #3
 8005a84:	4651      	mov	r1, sl
 8005a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a8a:	4651      	mov	r1, sl
 8005a8c:	00ca      	lsls	r2, r1, #3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	4619      	mov	r1, r3
 8005a92:	4603      	mov	r3, r0
 8005a94:	4642      	mov	r2, r8
 8005a96:	189b      	adds	r3, r3, r2
 8005a98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	460a      	mov	r2, r1
 8005aa0:	eb42 0303 	adc.w	r3, r2, r3
 8005aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ab4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ab8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005abc:	460b      	mov	r3, r1
 8005abe:	18db      	adds	r3, r3, r3
 8005ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	eb42 0303 	adc.w	r3, r2, r3
 8005ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ace:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ad2:	f7fb f869 	bl	8000ba8 <__aeabi_uldivmod>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4b0d      	ldr	r3, [pc, #52]	@ (8005b10 <UART_SetConfig+0x2d4>)
 8005adc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	2164      	movs	r1, #100	@ 0x64
 8005ae4:	fb01 f303 	mul.w	r3, r1, r3
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	3332      	adds	r3, #50	@ 0x32
 8005aee:	4a08      	ldr	r2, [pc, #32]	@ (8005b10 <UART_SetConfig+0x2d4>)
 8005af0:	fba2 2303 	umull	r2, r3, r2, r3
 8005af4:	095b      	lsrs	r3, r3, #5
 8005af6:	f003 0207 	and.w	r2, r3, #7
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4422      	add	r2, r4
 8005b02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b04:	e106      	b.n	8005d14 <UART_SetConfig+0x4d8>
 8005b06:	bf00      	nop
 8005b08:	40011000 	.word	0x40011000
 8005b0c:	40011400 	.word	0x40011400
 8005b10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b26:	4642      	mov	r2, r8
 8005b28:	464b      	mov	r3, r9
 8005b2a:	1891      	adds	r1, r2, r2
 8005b2c:	6239      	str	r1, [r7, #32]
 8005b2e:	415b      	adcs	r3, r3
 8005b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b36:	4641      	mov	r1, r8
 8005b38:	1854      	adds	r4, r2, r1
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	eb43 0501 	adc.w	r5, r3, r1
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	00eb      	lsls	r3, r5, #3
 8005b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b4e:	00e2      	lsls	r2, r4, #3
 8005b50:	4614      	mov	r4, r2
 8005b52:	461d      	mov	r5, r3
 8005b54:	4643      	mov	r3, r8
 8005b56:	18e3      	adds	r3, r4, r3
 8005b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b5c:	464b      	mov	r3, r9
 8005b5e:	eb45 0303 	adc.w	r3, r5, r3
 8005b62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b82:	4629      	mov	r1, r5
 8005b84:	008b      	lsls	r3, r1, #2
 8005b86:	4621      	mov	r1, r4
 8005b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	008a      	lsls	r2, r1, #2
 8005b90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b94:	f7fb f808 	bl	8000ba8 <__aeabi_uldivmod>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4b60      	ldr	r3, [pc, #384]	@ (8005d20 <UART_SetConfig+0x4e4>)
 8005b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	011c      	lsls	r4, r3, #4
 8005ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bb8:	4642      	mov	r2, r8
 8005bba:	464b      	mov	r3, r9
 8005bbc:	1891      	adds	r1, r2, r2
 8005bbe:	61b9      	str	r1, [r7, #24]
 8005bc0:	415b      	adcs	r3, r3
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bc8:	4641      	mov	r1, r8
 8005bca:	1851      	adds	r1, r2, r1
 8005bcc:	6139      	str	r1, [r7, #16]
 8005bce:	4649      	mov	r1, r9
 8005bd0:	414b      	adcs	r3, r1
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005be0:	4659      	mov	r1, fp
 8005be2:	00cb      	lsls	r3, r1, #3
 8005be4:	4651      	mov	r1, sl
 8005be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bea:	4651      	mov	r1, sl
 8005bec:	00ca      	lsls	r2, r1, #3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	189b      	adds	r3, r3, r2
 8005bf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	460a      	mov	r2, r1
 8005c00:	eb42 0303 	adc.w	r3, r2, r3
 8005c04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c20:	4649      	mov	r1, r9
 8005c22:	008b      	lsls	r3, r1, #2
 8005c24:	4641      	mov	r1, r8
 8005c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c2a:	4641      	mov	r1, r8
 8005c2c:	008a      	lsls	r2, r1, #2
 8005c2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c32:	f7fa ffb9 	bl	8000ba8 <__aeabi_uldivmod>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	4b38      	ldr	r3, [pc, #224]	@ (8005d20 <UART_SetConfig+0x4e4>)
 8005c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	2264      	movs	r2, #100	@ 0x64
 8005c46:	fb02 f303 	mul.w	r3, r2, r3
 8005c4a:	1acb      	subs	r3, r1, r3
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	3332      	adds	r3, #50	@ 0x32
 8005c50:	4a33      	ldr	r2, [pc, #204]	@ (8005d20 <UART_SetConfig+0x4e4>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c5c:	441c      	add	r4, r3
 8005c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c62:	2200      	movs	r2, #0
 8005c64:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c66:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c6c:	4642      	mov	r2, r8
 8005c6e:	464b      	mov	r3, r9
 8005c70:	1891      	adds	r1, r2, r2
 8005c72:	60b9      	str	r1, [r7, #8]
 8005c74:	415b      	adcs	r3, r3
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c7c:	4641      	mov	r1, r8
 8005c7e:	1851      	adds	r1, r2, r1
 8005c80:	6039      	str	r1, [r7, #0]
 8005c82:	4649      	mov	r1, r9
 8005c84:	414b      	adcs	r3, r1
 8005c86:	607b      	str	r3, [r7, #4]
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c94:	4659      	mov	r1, fp
 8005c96:	00cb      	lsls	r3, r1, #3
 8005c98:	4651      	mov	r1, sl
 8005c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c9e:	4651      	mov	r1, sl
 8005ca0:	00ca      	lsls	r2, r1, #3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	4642      	mov	r2, r8
 8005caa:	189b      	adds	r3, r3, r2
 8005cac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cae:	464b      	mov	r3, r9
 8005cb0:	460a      	mov	r2, r1
 8005cb2:	eb42 0303 	adc.w	r3, r2, r3
 8005cb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	008b      	lsls	r3, r1, #2
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cda:	4641      	mov	r1, r8
 8005cdc:	008a      	lsls	r2, r1, #2
 8005cde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ce2:	f7fa ff61 	bl	8000ba8 <__aeabi_uldivmod>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4b0d      	ldr	r3, [pc, #52]	@ (8005d20 <UART_SetConfig+0x4e4>)
 8005cec:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	2164      	movs	r1, #100	@ 0x64
 8005cf4:	fb01 f303 	mul.w	r3, r1, r3
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	3332      	adds	r3, #50	@ 0x32
 8005cfe:	4a08      	ldr	r2, [pc, #32]	@ (8005d20 <UART_SetConfig+0x4e4>)
 8005d00:	fba2 2303 	umull	r2, r3, r2, r3
 8005d04:	095b      	lsrs	r3, r3, #5
 8005d06:	f003 020f 	and.w	r2, r3, #15
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4422      	add	r2, r4
 8005d12:	609a      	str	r2, [r3, #8]
}
 8005d14:	bf00      	nop
 8005d16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d20:	51eb851f 	.word	0x51eb851f

08005d24 <__NVIC_SetPriority>:
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	6039      	str	r1, [r7, #0]
 8005d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	db0a      	blt.n	8005d4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	490c      	ldr	r1, [pc, #48]	@ (8005d70 <__NVIC_SetPriority+0x4c>)
 8005d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d42:	0112      	lsls	r2, r2, #4
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	440b      	add	r3, r1
 8005d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005d4c:	e00a      	b.n	8005d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	4908      	ldr	r1, [pc, #32]	@ (8005d74 <__NVIC_SetPriority+0x50>)
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	3b04      	subs	r3, #4
 8005d5c:	0112      	lsls	r2, r2, #4
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	440b      	add	r3, r1
 8005d62:	761a      	strb	r2, [r3, #24]
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	e000e100 	.word	0xe000e100
 8005d74:	e000ed00 	.word	0xe000ed00

08005d78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	f06f 0004 	mvn.w	r0, #4
 8005d82:	f7ff ffcf 	bl	8005d24 <__NVIC_SetPriority>
#endif
}
 8005d86:	bf00      	nop
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d92:	f3ef 8305 	mrs	r3, IPSR
 8005d96:	603b      	str	r3, [r7, #0]
  return(result);
 8005d98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d9e:	f06f 0305 	mvn.w	r3, #5
 8005da2:	607b      	str	r3, [r7, #4]
 8005da4:	e00c      	b.n	8005dc0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005da6:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd0 <osKernelInitialize+0x44>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d105      	bne.n	8005dba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005dae:	4b08      	ldr	r3, [pc, #32]	@ (8005dd0 <osKernelInitialize+0x44>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	607b      	str	r3, [r7, #4]
 8005db8:	e002      	b.n	8005dc0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005dba:	f04f 33ff 	mov.w	r3, #4294967295
 8005dbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005dc0:	687b      	ldr	r3, [r7, #4]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	20000418 	.word	0x20000418

08005dd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dda:	f3ef 8305 	mrs	r3, IPSR
 8005dde:	603b      	str	r3, [r7, #0]
  return(result);
 8005de0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <osKernelStart+0x1a>
    stat = osErrorISR;
 8005de6:	f06f 0305 	mvn.w	r3, #5
 8005dea:	607b      	str	r3, [r7, #4]
 8005dec:	e010      	b.n	8005e10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005dee:	4b0b      	ldr	r3, [pc, #44]	@ (8005e1c <osKernelStart+0x48>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d109      	bne.n	8005e0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005df6:	f7ff ffbf 	bl	8005d78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005dfa:	4b08      	ldr	r3, [pc, #32]	@ (8005e1c <osKernelStart+0x48>)
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e00:	f001 f87a 	bl	8006ef8 <vTaskStartScheduler>
      stat = osOK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	607b      	str	r3, [r7, #4]
 8005e08:	e002      	b.n	8005e10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e10:	687b      	ldr	r3, [r7, #4]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000418 	.word	0x20000418

08005e20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08e      	sub	sp, #56	@ 0x38
 8005e24:	af04      	add	r7, sp, #16
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e30:	f3ef 8305 	mrs	r3, IPSR
 8005e34:	617b      	str	r3, [r7, #20]
  return(result);
 8005e36:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d17e      	bne.n	8005f3a <osThreadNew+0x11a>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d07b      	beq.n	8005f3a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e42:	2380      	movs	r3, #128	@ 0x80
 8005e44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e46:	2318      	movs	r3, #24
 8005e48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d045      	beq.n	8005ee6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <osThreadNew+0x48>
        name = attr->name;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d008      	beq.n	8005e8e <osThreadNew+0x6e>
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	2b38      	cmp	r3, #56	@ 0x38
 8005e80:	d805      	bhi.n	8005e8e <osThreadNew+0x6e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <osThreadNew+0x72>
        return (NULL);
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e054      	b.n	8005f3c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	089b      	lsrs	r3, r3, #2
 8005ea0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00e      	beq.n	8005ec8 <osThreadNew+0xa8>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	2b5b      	cmp	r3, #91	@ 0x5b
 8005eb0:	d90a      	bls.n	8005ec8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d006      	beq.n	8005ec8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <osThreadNew+0xa8>
        mem = 1;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	61bb      	str	r3, [r7, #24]
 8005ec6:	e010      	b.n	8005eea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10c      	bne.n	8005eea <osThreadNew+0xca>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d108      	bne.n	8005eea <osThreadNew+0xca>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d104      	bne.n	8005eea <osThreadNew+0xca>
          mem = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	e001      	b.n	8005eea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d110      	bne.n	8005f12 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ef8:	9202      	str	r2, [sp, #8]
 8005efa:	9301      	str	r3, [sp, #4]
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	6a3a      	ldr	r2, [r7, #32]
 8005f04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fe1a 	bl	8006b40 <xTaskCreateStatic>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	613b      	str	r3, [r7, #16]
 8005f10:	e013      	b.n	8005f3a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d110      	bne.n	8005f3a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	f107 0310 	add.w	r3, r7, #16
 8005f20:	9301      	str	r3, [sp, #4]
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 fe68 	bl	8006c00 <xTaskCreate>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d001      	beq.n	8005f3a <osThreadNew+0x11a>
            hTask = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f3a:	693b      	ldr	r3, [r7, #16]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3728      	adds	r7, #40	@ 0x28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f4c:	f3ef 8305 	mrs	r3, IPSR
 8005f50:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f52:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <osDelay+0x1c>
    stat = osErrorISR;
 8005f58:	f06f 0305 	mvn.w	r3, #5
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	e007      	b.n	8005f70 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 ff8e 	bl	8006e8c <vTaskDelay>
    }
  }

  return (stat);
 8005f70:	68fb      	ldr	r3, [r7, #12]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4a07      	ldr	r2, [pc, #28]	@ (8005fa8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005f8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	4a06      	ldr	r2, [pc, #24]	@ (8005fac <vApplicationGetIdleTaskMemory+0x30>)
 8005f92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2280      	movs	r2, #128	@ 0x80
 8005f98:	601a      	str	r2, [r3, #0]
}
 8005f9a:	bf00      	nop
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	2000041c 	.word	0x2000041c
 8005fac:	20000478 	.word	0x20000478

08005fb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4a07      	ldr	r2, [pc, #28]	@ (8005fdc <vApplicationGetTimerTaskMemory+0x2c>)
 8005fc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4a06      	ldr	r2, [pc, #24]	@ (8005fe0 <vApplicationGetTimerTaskMemory+0x30>)
 8005fc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fce:	601a      	str	r2, [r3, #0]
}
 8005fd0:	bf00      	nop
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	20000678 	.word	0x20000678
 8005fe0:	200006d4 	.word	0x200006d4

08005fe4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f103 0208 	add.w	r2, r3, #8
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ffc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f103 0208 	add.w	r2, r3, #8
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f103 0208 	add.w	r2, r3, #8
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800603e:	b480      	push	{r7}
 8006040:	b085      	sub	sp, #20
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	601a      	str	r2, [r3, #0]
}
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d103      	bne.n	80060a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	e00c      	b.n	80060c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	3308      	adds	r3, #8
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	e002      	b.n	80060b4 <vListInsert+0x2e>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d2f6      	bcs.n	80060ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	601a      	str	r2, [r3, #0]
}
 80060ec:	bf00      	nop
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6892      	ldr	r2, [r2, #8]
 800610e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6852      	ldr	r2, [r2, #4]
 8006118:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	429a      	cmp	r2, r3
 8006122:	d103      	bne.n	800612c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	1e5a      	subs	r2, r3, #1
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10b      	bne.n	8006178 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006172:	bf00      	nop
 8006174:	bf00      	nop
 8006176:	e7fd      	b.n	8006174 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006178:	f002 f876 	bl	8008268 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006184:	68f9      	ldr	r1, [r7, #12]
 8006186:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006188:	fb01 f303 	mul.w	r3, r1, r3
 800618c:	441a      	add	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a8:	3b01      	subs	r3, #1
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061ae:	fb01 f303 	mul.w	r3, r1, r3
 80061b2:	441a      	add	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	22ff      	movs	r2, #255	@ 0xff
 80061bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	22ff      	movs	r2, #255	@ 0xff
 80061c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d114      	bne.n	80061f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d01a      	beq.n	800620c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3310      	adds	r3, #16
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 f91a 	bl	8007414 <xTaskRemoveFromEventList>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d012      	beq.n	800620c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80061e6:	4b0d      	ldr	r3, [pc, #52]	@ (800621c <xQueueGenericReset+0xd0>)
 80061e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	e009      	b.n	800620c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3310      	adds	r3, #16
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7ff fef1 	bl	8005fe4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3324      	adds	r3, #36	@ 0x24
 8006206:	4618      	mov	r0, r3
 8006208:	f7ff feec 	bl	8005fe4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800620c:	f002 f85e 	bl	80082cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006210:	2301      	movs	r3, #1
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	e000ed04 	.word	0xe000ed04

08006220 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08e      	sub	sp, #56	@ 0x38
 8006224:	af02      	add	r7, sp, #8
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10b      	bne.n	800624c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006246:	bf00      	nop
 8006248:	bf00      	nop
 800624a:	e7fd      	b.n	8006248 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10b      	bne.n	800626a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	e7fd      	b.n	8006266 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <xQueueGenericCreateStatic+0x56>
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <xQueueGenericCreateStatic+0x5a>
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <xQueueGenericCreateStatic+0x5c>
 800627a:	2300      	movs	r3, #0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10b      	bne.n	8006298 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	623b      	str	r3, [r7, #32]
}
 8006292:	bf00      	nop
 8006294:	bf00      	nop
 8006296:	e7fd      	b.n	8006294 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d102      	bne.n	80062a4 <xQueueGenericCreateStatic+0x84>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <xQueueGenericCreateStatic+0x88>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e000      	b.n	80062aa <xQueueGenericCreateStatic+0x8a>
 80062a8:	2300      	movs	r3, #0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10b      	bne.n	80062c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	61fb      	str	r3, [r7, #28]
}
 80062c0:	bf00      	nop
 80062c2:	bf00      	nop
 80062c4:	e7fd      	b.n	80062c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062c6:	2350      	movs	r3, #80	@ 0x50
 80062c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b50      	cmp	r3, #80	@ 0x50
 80062ce:	d00b      	beq.n	80062e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	61bb      	str	r3, [r7, #24]
}
 80062e2:	bf00      	nop
 80062e4:	bf00      	nop
 80062e6:	e7fd      	b.n	80062e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80062e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80062ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00d      	beq.n	8006310 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	4613      	mov	r3, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	68b9      	ldr	r1, [r7, #8]
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 f805 	bl	800631a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006312:	4618      	mov	r0, r3
 8006314:	3730      	adds	r7, #48	@ 0x30
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
 8006326:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d103      	bne.n	8006336 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	e002      	b.n	800633c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006348:	2101      	movs	r1, #1
 800634a:	69b8      	ldr	r0, [r7, #24]
 800634c:	f7ff fefe 	bl	800614c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	78fa      	ldrb	r2, [r7, #3]
 8006354:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006358:	bf00      	nop
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08e      	sub	sp, #56	@ 0x38
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800636e:	2300      	movs	r3, #0
 8006370:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10b      	bne.n	8006394 <xQueueGenericSend+0x34>
	__asm volatile
 800637c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800638e:	bf00      	nop
 8006390:	bf00      	nop
 8006392:	e7fd      	b.n	8006390 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d103      	bne.n	80063a2 <xQueueGenericSend+0x42>
 800639a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <xQueueGenericSend+0x46>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <xQueueGenericSend+0x48>
 80063a6:	2300      	movs	r3, #0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10b      	bne.n	80063c4 <xQueueGenericSend+0x64>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063be:	bf00      	nop
 80063c0:	bf00      	nop
 80063c2:	e7fd      	b.n	80063c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d103      	bne.n	80063d2 <xQueueGenericSend+0x72>
 80063ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <xQueueGenericSend+0x76>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e000      	b.n	80063d8 <xQueueGenericSend+0x78>
 80063d6:	2300      	movs	r3, #0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10b      	bne.n	80063f4 <xQueueGenericSend+0x94>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	623b      	str	r3, [r7, #32]
}
 80063ee:	bf00      	nop
 80063f0:	bf00      	nop
 80063f2:	e7fd      	b.n	80063f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063f4:	f001 f9ce 	bl	8007794 <xTaskGetSchedulerState>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d102      	bne.n	8006404 <xQueueGenericSend+0xa4>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <xQueueGenericSend+0xa8>
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <xQueueGenericSend+0xaa>
 8006408:	2300      	movs	r3, #0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10b      	bne.n	8006426 <xQueueGenericSend+0xc6>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	61fb      	str	r3, [r7, #28]
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	e7fd      	b.n	8006422 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006426:	f001 ff1f 	bl	8008268 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800642a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006432:	429a      	cmp	r2, r3
 8006434:	d302      	bcc.n	800643c <xQueueGenericSend+0xdc>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d129      	bne.n	8006490 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006442:	f000 fa0f 	bl	8006864 <prvCopyDataToQueue>
 8006446:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644c:	2b00      	cmp	r3, #0
 800644e:	d010      	beq.n	8006472 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006452:	3324      	adds	r3, #36	@ 0x24
 8006454:	4618      	mov	r0, r3
 8006456:	f000 ffdd 	bl	8007414 <xTaskRemoveFromEventList>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d013      	beq.n	8006488 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006460:	4b3f      	ldr	r3, [pc, #252]	@ (8006560 <xQueueGenericSend+0x200>)
 8006462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	e00a      	b.n	8006488 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006474:	2b00      	cmp	r3, #0
 8006476:	d007      	beq.n	8006488 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006478:	4b39      	ldr	r3, [pc, #228]	@ (8006560 <xQueueGenericSend+0x200>)
 800647a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006488:	f001 ff20 	bl	80082cc <vPortExitCritical>
				return pdPASS;
 800648c:	2301      	movs	r3, #1
 800648e:	e063      	b.n	8006558 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d103      	bne.n	800649e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006496:	f001 ff19 	bl	80082cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800649a:	2300      	movs	r3, #0
 800649c:	e05c      	b.n	8006558 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800649e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d106      	bne.n	80064b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064a4:	f107 0314 	add.w	r3, r7, #20
 80064a8:	4618      	mov	r0, r3
 80064aa:	f001 f817 	bl	80074dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064ae:	2301      	movs	r3, #1
 80064b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064b2:	f001 ff0b 	bl	80082cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064b6:	f000 fd87 	bl	8006fc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064ba:	f001 fed5 	bl	8008268 <vPortEnterCritical>
 80064be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064c4:	b25b      	sxtb	r3, r3
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ca:	d103      	bne.n	80064d4 <xQueueGenericSend+0x174>
 80064cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064da:	b25b      	sxtb	r3, r3
 80064dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e0:	d103      	bne.n	80064ea <xQueueGenericSend+0x18a>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064ea:	f001 feef 	bl	80082cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064ee:	1d3a      	adds	r2, r7, #4
 80064f0:	f107 0314 	add.w	r3, r7, #20
 80064f4:	4611      	mov	r1, r2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f001 f806 	bl	8007508 <xTaskCheckForTimeOut>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d124      	bne.n	800654c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006502:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006504:	f000 faa6 	bl	8006a54 <prvIsQueueFull>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d018      	beq.n	8006540 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800650e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006510:	3310      	adds	r3, #16
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	4611      	mov	r1, r2
 8006516:	4618      	mov	r0, r3
 8006518:	f000 ff2a 	bl	8007370 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800651c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800651e:	f000 fa31 	bl	8006984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006522:	f000 fd5f 	bl	8006fe4 <xTaskResumeAll>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	f47f af7c 	bne.w	8006426 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800652e:	4b0c      	ldr	r3, [pc, #48]	@ (8006560 <xQueueGenericSend+0x200>)
 8006530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	e772      	b.n	8006426 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006540:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006542:	f000 fa1f 	bl	8006984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006546:	f000 fd4d 	bl	8006fe4 <xTaskResumeAll>
 800654a:	e76c      	b.n	8006426 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800654c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800654e:	f000 fa19 	bl	8006984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006552:	f000 fd47 	bl	8006fe4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006556:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006558:	4618      	mov	r0, r3
 800655a:	3738      	adds	r7, #56	@ 0x38
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	e000ed04 	.word	0xe000ed04

08006564 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b090      	sub	sp, #64	@ 0x40
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10b      	bne.n	8006594 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800658e:	bf00      	nop
 8006590:	bf00      	nop
 8006592:	e7fd      	b.n	8006590 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d103      	bne.n	80065a2 <xQueueGenericSendFromISR+0x3e>
 800659a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <xQueueGenericSendFromISR+0x42>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <xQueueGenericSendFromISR+0x44>
 80065a6:	2300      	movs	r3, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10b      	bne.n	80065c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80065be:	bf00      	nop
 80065c0:	bf00      	nop
 80065c2:	e7fd      	b.n	80065c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d103      	bne.n	80065d2 <xQueueGenericSendFromISR+0x6e>
 80065ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d101      	bne.n	80065d6 <xQueueGenericSendFromISR+0x72>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <xQueueGenericSendFromISR+0x74>
 80065d6:	2300      	movs	r3, #0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10b      	bne.n	80065f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	623b      	str	r3, [r7, #32]
}
 80065ee:	bf00      	nop
 80065f0:	bf00      	nop
 80065f2:	e7fd      	b.n	80065f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065f4:	f001 ff18 	bl	8008428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065f8:	f3ef 8211 	mrs	r2, BASEPRI
 80065fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	61fa      	str	r2, [r7, #28]
 800660e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006610:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006612:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800661c:	429a      	cmp	r2, r3
 800661e:	d302      	bcc.n	8006626 <xQueueGenericSendFromISR+0xc2>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b02      	cmp	r3, #2
 8006624:	d12f      	bne.n	8006686 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006628:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800662c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006634:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800663c:	f000 f912 	bl	8006864 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006640:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d112      	bne.n	8006670 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800664a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	d016      	beq.n	8006680 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006654:	3324      	adds	r3, #36	@ 0x24
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fedc 	bl	8007414 <xTaskRemoveFromEventList>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00e      	beq.n	8006680 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e007      	b.n	8006680 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006670:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006674:	3301      	adds	r3, #1
 8006676:	b2db      	uxtb	r3, r3
 8006678:	b25a      	sxtb	r2, r3
 800667a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006680:	2301      	movs	r3, #1
 8006682:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006684:	e001      	b.n	800668a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006686:	2300      	movs	r3, #0
 8006688:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800668a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006694:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006698:	4618      	mov	r0, r3
 800669a:	3740      	adds	r7, #64	@ 0x40
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08c      	sub	sp, #48	@ 0x30
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066ac:	2300      	movs	r3, #0
 80066ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10b      	bne.n	80066d2 <xQueueReceive+0x32>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	623b      	str	r3, [r7, #32]
}
 80066cc:	bf00      	nop
 80066ce:	bf00      	nop
 80066d0:	e7fd      	b.n	80066ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d103      	bne.n	80066e0 <xQueueReceive+0x40>
 80066d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <xQueueReceive+0x44>
 80066e0:	2301      	movs	r3, #1
 80066e2:	e000      	b.n	80066e6 <xQueueReceive+0x46>
 80066e4:	2300      	movs	r3, #0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10b      	bne.n	8006702 <xQueueReceive+0x62>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	61fb      	str	r3, [r7, #28]
}
 80066fc:	bf00      	nop
 80066fe:	bf00      	nop
 8006700:	e7fd      	b.n	80066fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006702:	f001 f847 	bl	8007794 <xTaskGetSchedulerState>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d102      	bne.n	8006712 <xQueueReceive+0x72>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <xQueueReceive+0x76>
 8006712:	2301      	movs	r3, #1
 8006714:	e000      	b.n	8006718 <xQueueReceive+0x78>
 8006716:	2300      	movs	r3, #0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10b      	bne.n	8006734 <xQueueReceive+0x94>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	61bb      	str	r3, [r7, #24]
}
 800672e:	bf00      	nop
 8006730:	bf00      	nop
 8006732:	e7fd      	b.n	8006730 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006734:	f001 fd98 	bl	8008268 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01f      	beq.n	8006784 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006744:	68b9      	ldr	r1, [r7, #8]
 8006746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006748:	f000 f8f6 	bl	8006938 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674e:	1e5a      	subs	r2, r3, #1
 8006750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006752:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00f      	beq.n	800677c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800675c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675e:	3310      	adds	r3, #16
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fe57 	bl	8007414 <xTaskRemoveFromEventList>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d007      	beq.n	800677c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800676c:	4b3c      	ldr	r3, [pc, #240]	@ (8006860 <xQueueReceive+0x1c0>)
 800676e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800677c:	f001 fda6 	bl	80082cc <vPortExitCritical>
				return pdPASS;
 8006780:	2301      	movs	r3, #1
 8006782:	e069      	b.n	8006858 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d103      	bne.n	8006792 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800678a:	f001 fd9f 	bl	80082cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800678e:	2300      	movs	r3, #0
 8006790:	e062      	b.n	8006858 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006798:	f107 0310 	add.w	r3, r7, #16
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fe9d 	bl	80074dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067a2:	2301      	movs	r3, #1
 80067a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067a6:	f001 fd91 	bl	80082cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067aa:	f000 fc0d 	bl	8006fc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ae:	f001 fd5b 	bl	8008268 <vPortEnterCritical>
 80067b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067b8:	b25b      	sxtb	r3, r3
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d103      	bne.n	80067c8 <xQueueReceive+0x128>
 80067c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067ce:	b25b      	sxtb	r3, r3
 80067d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d4:	d103      	bne.n	80067de <xQueueReceive+0x13e>
 80067d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067de:	f001 fd75 	bl	80082cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067e2:	1d3a      	adds	r2, r7, #4
 80067e4:	f107 0310 	add.w	r3, r7, #16
 80067e8:	4611      	mov	r1, r2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fe8c 	bl	8007508 <xTaskCheckForTimeOut>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d123      	bne.n	800683e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067f8:	f000 f916 	bl	8006a28 <prvIsQueueEmpty>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d017      	beq.n	8006832 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006804:	3324      	adds	r3, #36	@ 0x24
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	4611      	mov	r1, r2
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fdb0 	bl	8007370 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006810:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006812:	f000 f8b7 	bl	8006984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006816:	f000 fbe5 	bl	8006fe4 <xTaskResumeAll>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d189      	bne.n	8006734 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006820:	4b0f      	ldr	r3, [pc, #60]	@ (8006860 <xQueueReceive+0x1c0>)
 8006822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	e780      	b.n	8006734 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006832:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006834:	f000 f8a6 	bl	8006984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006838:	f000 fbd4 	bl	8006fe4 <xTaskResumeAll>
 800683c:	e77a      	b.n	8006734 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800683e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006840:	f000 f8a0 	bl	8006984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006844:	f000 fbce 	bl	8006fe4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006848:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800684a:	f000 f8ed 	bl	8006a28 <prvIsQueueEmpty>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	f43f af6f 	beq.w	8006734 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006856:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006858:	4618      	mov	r0, r3
 800685a:	3730      	adds	r7, #48	@ 0x30
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	e000ed04 	.word	0xe000ed04

08006864 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006878:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10d      	bne.n	800689e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d14d      	bne.n	8006926 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	4618      	mov	r0, r3
 8006890:	f000 ff9e 	bl	80077d0 <xTaskPriorityDisinherit>
 8006894:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	609a      	str	r2, [r3, #8]
 800689c:	e043      	b.n	8006926 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d119      	bne.n	80068d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6858      	ldr	r0, [r3, #4]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ac:	461a      	mov	r2, r3
 80068ae:	68b9      	ldr	r1, [r7, #8]
 80068b0:	f003 f819 	bl	80098e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068bc:	441a      	add	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d32b      	bcc.n	8006926 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	605a      	str	r2, [r3, #4]
 80068d6:	e026      	b.n	8006926 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68d8      	ldr	r0, [r3, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e0:	461a      	mov	r2, r3
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	f002 ffff 	bl	80098e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f0:	425b      	negs	r3, r3
 80068f2:	441a      	add	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d207      	bcs.n	8006914 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690c:	425b      	negs	r3, r3
 800690e:	441a      	add	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d105      	bne.n	8006926 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	3b01      	subs	r3, #1
 8006924:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800692e:	697b      	ldr	r3, [r7, #20]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d018      	beq.n	800697c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006952:	441a      	add	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	429a      	cmp	r2, r3
 8006962:	d303      	bcc.n	800696c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68d9      	ldr	r1, [r3, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006974:	461a      	mov	r2, r3
 8006976:	6838      	ldr	r0, [r7, #0]
 8006978:	f002 ffb5 	bl	80098e6 <memcpy>
	}
}
 800697c:	bf00      	nop
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800698c:	f001 fc6c 	bl	8008268 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006996:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006998:	e011      	b.n	80069be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d012      	beq.n	80069c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3324      	adds	r3, #36	@ 0x24
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fd34 	bl	8007414 <xTaskRemoveFromEventList>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069b2:	f000 fe0d 	bl	80075d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	dce9      	bgt.n	800699a <prvUnlockQueue+0x16>
 80069c6:	e000      	b.n	80069ca <prvUnlockQueue+0x46>
					break;
 80069c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	22ff      	movs	r2, #255	@ 0xff
 80069ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80069d2:	f001 fc7b 	bl	80082cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069d6:	f001 fc47 	bl	8008268 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069e2:	e011      	b.n	8006a08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d012      	beq.n	8006a12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3310      	adds	r3, #16
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fd0f 	bl	8007414 <xTaskRemoveFromEventList>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069fc:	f000 fde8 	bl	80075d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	dce9      	bgt.n	80069e4 <prvUnlockQueue+0x60>
 8006a10:	e000      	b.n	8006a14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	22ff      	movs	r2, #255	@ 0xff
 8006a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006a1c:	f001 fc56 	bl	80082cc <vPortExitCritical>
}
 8006a20:	bf00      	nop
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a30:	f001 fc1a 	bl	8008268 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d102      	bne.n	8006a42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	e001      	b.n	8006a46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a46:	f001 fc41 	bl	80082cc <vPortExitCritical>

	return xReturn;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a5c:	f001 fc04 	bl	8008268 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d102      	bne.n	8006a72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e001      	b.n	8006a76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a76:	f001 fc29 	bl	80082cc <vPortExitCritical>

	return xReturn;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	e014      	b.n	8006abe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a94:	4a0f      	ldr	r2, [pc, #60]	@ (8006ad4 <vQueueAddToRegistry+0x50>)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10b      	bne.n	8006ab8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006aa0:	490c      	ldr	r1, [pc, #48]	@ (8006ad4 <vQueueAddToRegistry+0x50>)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8006ad4 <vQueueAddToRegistry+0x50>)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	00db      	lsls	r3, r3, #3
 8006ab0:	4413      	add	r3, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ab6:	e006      	b.n	8006ac6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b07      	cmp	r3, #7
 8006ac2:	d9e7      	bls.n	8006a94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	20000ad4 	.word	0x20000ad4

08006ad8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ae8:	f001 fbbe 	bl	8008268 <vPortEnterCritical>
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006af2:	b25b      	sxtb	r3, r3
 8006af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af8:	d103      	bne.n	8006b02 <vQueueWaitForMessageRestricted+0x2a>
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b08:	b25b      	sxtb	r3, r3
 8006b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0e:	d103      	bne.n	8006b18 <vQueueWaitForMessageRestricted+0x40>
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b18:	f001 fbd8 	bl	80082cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d106      	bne.n	8006b32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	3324      	adds	r3, #36	@ 0x24
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 fc45 	bl	80073bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b32:	6978      	ldr	r0, [r7, #20]
 8006b34:	f7ff ff26 	bl	8006984 <prvUnlockQueue>
	}
 8006b38:	bf00      	nop
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08e      	sub	sp, #56	@ 0x38
 8006b44:	af04      	add	r7, sp, #16
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10b      	bne.n	8006b6c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	623b      	str	r3, [r7, #32]
}
 8006b66:	bf00      	nop
 8006b68:	bf00      	nop
 8006b6a:	e7fd      	b.n	8006b68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10b      	bne.n	8006b8a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	61fb      	str	r3, [r7, #28]
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop
 8006b88:	e7fd      	b.n	8006b86 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b8a:	235c      	movs	r3, #92	@ 0x5c
 8006b8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b5c      	cmp	r3, #92	@ 0x5c
 8006b92:	d00b      	beq.n	8006bac <xTaskCreateStatic+0x6c>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	61bb      	str	r3, [r7, #24]
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006bac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d01e      	beq.n	8006bf2 <xTaskCreateStatic+0xb2>
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d01b      	beq.n	8006bf2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bc2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9303      	str	r3, [sp, #12]
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd2:	9302      	str	r3, [sp, #8]
 8006bd4:	f107 0314 	add.w	r3, r7, #20
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	68b9      	ldr	r1, [r7, #8]
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 f850 	bl	8006c8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006bec:	f000 f8de 	bl	8006dac <prvAddNewTaskToReadyList>
 8006bf0:	e001      	b.n	8006bf6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bf6:	697b      	ldr	r3, [r7, #20]
	}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3728      	adds	r7, #40	@ 0x28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08c      	sub	sp, #48	@ 0x30
 8006c04:	af04      	add	r7, sp, #16
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	603b      	str	r3, [r7, #0]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c10:	88fb      	ldrh	r3, [r7, #6]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4618      	mov	r0, r3
 8006c16:	f001 fc49 	bl	80084ac <pvPortMalloc>
 8006c1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00e      	beq.n	8006c40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c22:	205c      	movs	r0, #92	@ 0x5c
 8006c24:	f001 fc42 	bl	80084ac <pvPortMalloc>
 8006c28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c36:	e005      	b.n	8006c44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c38:	6978      	ldr	r0, [r7, #20]
 8006c3a:	f001 fd05 	bl	8008648 <vPortFree>
 8006c3e:	e001      	b.n	8006c44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c40:	2300      	movs	r3, #0
 8006c42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d017      	beq.n	8006c7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c52:	88fa      	ldrh	r2, [r7, #6]
 8006c54:	2300      	movs	r3, #0
 8006c56:	9303      	str	r3, [sp, #12]
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	9302      	str	r3, [sp, #8]
 8006c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5e:	9301      	str	r3, [sp, #4]
 8006c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f80e 	bl	8006c8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c6e:	69f8      	ldr	r0, [r7, #28]
 8006c70:	f000 f89c 	bl	8006dac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c74:	2301      	movs	r3, #1
 8006c76:	61bb      	str	r3, [r7, #24]
 8006c78:	e002      	b.n	8006c80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c80:	69bb      	ldr	r3, [r7, #24]
	}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3720      	adds	r7, #32
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b088      	sub	sp, #32
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	607a      	str	r2, [r7, #4]
 8006c96:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	21a5      	movs	r1, #165	@ 0xa5
 8006ca4:	f002 fd9f 	bl	80097e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006caa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	f023 0307 	bic.w	r3, r3, #7
 8006cc0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	617b      	str	r3, [r7, #20]
}
 8006cde:	bf00      	nop
 8006ce0:	bf00      	nop
 8006ce2:	e7fd      	b.n	8006ce0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d01f      	beq.n	8006d2a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cea:	2300      	movs	r3, #0
 8006cec:	61fb      	str	r3, [r7, #28]
 8006cee:	e012      	b.n	8006d16 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	7819      	ldrb	r1, [r3, #0]
 8006cf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	3334      	adds	r3, #52	@ 0x34
 8006d00:	460a      	mov	r2, r1
 8006d02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	4413      	add	r3, r2
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d006      	beq.n	8006d1e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	3301      	adds	r3, #1
 8006d14:	61fb      	str	r3, [r7, #28]
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	2b0f      	cmp	r3, #15
 8006d1a:	d9e9      	bls.n	8006cf0 <prvInitialiseNewTask+0x66>
 8006d1c:	e000      	b.n	8006d20 <prvInitialiseNewTask+0x96>
			{
				break;
 8006d1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d28:	e003      	b.n	8006d32 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d34:	2b37      	cmp	r3, #55	@ 0x37
 8006d36:	d901      	bls.n	8006d3c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d38:	2337      	movs	r3, #55	@ 0x37
 8006d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d40:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d46:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	3304      	adds	r3, #4
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff f966 	bl	8006024 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5a:	3318      	adds	r3, #24
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff f961 	bl	8006024 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d76:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	68f9      	ldr	r1, [r7, #12]
 8006d8a:	69b8      	ldr	r0, [r7, #24]
 8006d8c:	f001 f93e 	bl	800800c <pxPortInitialiseStack>
 8006d90:	4602      	mov	r2, r0
 8006d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006da0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006da2:	bf00      	nop
 8006da4:	3720      	adds	r7, #32
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006db4:	f001 fa58 	bl	8008268 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006db8:	4b2d      	ldr	r3, [pc, #180]	@ (8006e70 <prvAddNewTaskToReadyList+0xc4>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8006e70 <prvAddNewTaskToReadyList+0xc4>)
 8006dc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8006e74 <prvAddNewTaskToReadyList+0xc8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d109      	bne.n	8006dde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dca:	4a2a      	ldr	r2, [pc, #168]	@ (8006e74 <prvAddNewTaskToReadyList+0xc8>)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dd0:	4b27      	ldr	r3, [pc, #156]	@ (8006e70 <prvAddNewTaskToReadyList+0xc4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d110      	bne.n	8006dfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006dd8:	f000 fc1e 	bl	8007618 <prvInitialiseTaskLists>
 8006ddc:	e00d      	b.n	8006dfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dde:	4b26      	ldr	r3, [pc, #152]	@ (8006e78 <prvAddNewTaskToReadyList+0xcc>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d109      	bne.n	8006dfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006de6:	4b23      	ldr	r3, [pc, #140]	@ (8006e74 <prvAddNewTaskToReadyList+0xc8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d802      	bhi.n	8006dfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006df4:	4a1f      	ldr	r2, [pc, #124]	@ (8006e74 <prvAddNewTaskToReadyList+0xc8>)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dfa:	4b20      	ldr	r3, [pc, #128]	@ (8006e7c <prvAddNewTaskToReadyList+0xd0>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	4a1e      	ldr	r2, [pc, #120]	@ (8006e7c <prvAddNewTaskToReadyList+0xd0>)
 8006e02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e04:	4b1d      	ldr	r3, [pc, #116]	@ (8006e7c <prvAddNewTaskToReadyList+0xd0>)
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e10:	4b1b      	ldr	r3, [pc, #108]	@ (8006e80 <prvAddNewTaskToReadyList+0xd4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d903      	bls.n	8006e20 <prvAddNewTaskToReadyList+0x74>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1c:	4a18      	ldr	r2, [pc, #96]	@ (8006e80 <prvAddNewTaskToReadyList+0xd4>)
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4a15      	ldr	r2, [pc, #84]	@ (8006e84 <prvAddNewTaskToReadyList+0xd8>)
 8006e2e:	441a      	add	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4619      	mov	r1, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	f7ff f901 	bl	800603e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e3c:	f001 fa46 	bl	80082cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e40:	4b0d      	ldr	r3, [pc, #52]	@ (8006e78 <prvAddNewTaskToReadyList+0xcc>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00e      	beq.n	8006e66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e48:	4b0a      	ldr	r3, [pc, #40]	@ (8006e74 <prvAddNewTaskToReadyList+0xc8>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d207      	bcs.n	8006e66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e56:	4b0c      	ldr	r3, [pc, #48]	@ (8006e88 <prvAddNewTaskToReadyList+0xdc>)
 8006e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e66:	bf00      	nop
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000fe8 	.word	0x20000fe8
 8006e74:	20000b14 	.word	0x20000b14
 8006e78:	20000ff4 	.word	0x20000ff4
 8006e7c:	20001004 	.word	0x20001004
 8006e80:	20000ff0 	.word	0x20000ff0
 8006e84:	20000b18 	.word	0x20000b18
 8006e88:	e000ed04 	.word	0xe000ed04

08006e8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e94:	2300      	movs	r3, #0
 8006e96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d018      	beq.n	8006ed0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e9e:	4b14      	ldr	r3, [pc, #80]	@ (8006ef0 <vTaskDelay+0x64>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00b      	beq.n	8006ebe <vTaskDelay+0x32>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	60bb      	str	r3, [r7, #8]
}
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
 8006ebc:	e7fd      	b.n	8006eba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ebe:	f000 f883 	bl	8006fc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fcf3 	bl	80078b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006eca:	f000 f88b 	bl	8006fe4 <xTaskResumeAll>
 8006ece:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d107      	bne.n	8006ee6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006ed6:	4b07      	ldr	r3, [pc, #28]	@ (8006ef4 <vTaskDelay+0x68>)
 8006ed8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ee6:	bf00      	nop
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20001010 	.word	0x20001010
 8006ef4:	e000ed04 	.word	0xe000ed04

08006ef8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	@ 0x28
 8006efc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f06:	463a      	mov	r2, r7
 8006f08:	1d39      	adds	r1, r7, #4
 8006f0a:	f107 0308 	add.w	r3, r7, #8
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7ff f834 	bl	8005f7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	9202      	str	r2, [sp, #8]
 8006f1c:	9301      	str	r3, [sp, #4]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	2300      	movs	r3, #0
 8006f24:	460a      	mov	r2, r1
 8006f26:	4922      	ldr	r1, [pc, #136]	@ (8006fb0 <vTaskStartScheduler+0xb8>)
 8006f28:	4822      	ldr	r0, [pc, #136]	@ (8006fb4 <vTaskStartScheduler+0xbc>)
 8006f2a:	f7ff fe09 	bl	8006b40 <xTaskCreateStatic>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	4a21      	ldr	r2, [pc, #132]	@ (8006fb8 <vTaskStartScheduler+0xc0>)
 8006f32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f34:	4b20      	ldr	r3, [pc, #128]	@ (8006fb8 <vTaskStartScheduler+0xc0>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	e001      	b.n	8006f46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d102      	bne.n	8006f52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f4c:	f000 fd04 	bl	8007958 <xTimerCreateTimerTask>
 8006f50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d116      	bne.n	8006f86 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	613b      	str	r3, [r7, #16]
}
 8006f6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f6c:	4b13      	ldr	r3, [pc, #76]	@ (8006fbc <vTaskStartScheduler+0xc4>)
 8006f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f74:	4b12      	ldr	r3, [pc, #72]	@ (8006fc0 <vTaskStartScheduler+0xc8>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f7a:	4b12      	ldr	r3, [pc, #72]	@ (8006fc4 <vTaskStartScheduler+0xcc>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f80:	f001 f8ce 	bl	8008120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f84:	e00f      	b.n	8006fa6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8c:	d10b      	bne.n	8006fa6 <vTaskStartScheduler+0xae>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	60fb      	str	r3, [r7, #12]
}
 8006fa0:	bf00      	nop
 8006fa2:	bf00      	nop
 8006fa4:	e7fd      	b.n	8006fa2 <vTaskStartScheduler+0xaa>
}
 8006fa6:	bf00      	nop
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	0800ba2c 	.word	0x0800ba2c
 8006fb4:	080075e9 	.word	0x080075e9
 8006fb8:	2000100c 	.word	0x2000100c
 8006fbc:	20001008 	.word	0x20001008
 8006fc0:	20000ff4 	.word	0x20000ff4
 8006fc4:	20000fec 	.word	0x20000fec

08006fc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fcc:	4b04      	ldr	r3, [pc, #16]	@ (8006fe0 <vTaskSuspendAll+0x18>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	4a03      	ldr	r2, [pc, #12]	@ (8006fe0 <vTaskSuspendAll+0x18>)
 8006fd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fd6:	bf00      	nop
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	20001010 	.word	0x20001010

08006fe4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ff2:	4b42      	ldr	r3, [pc, #264]	@ (80070fc <xTaskResumeAll+0x118>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10b      	bne.n	8007012 <xTaskResumeAll+0x2e>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	603b      	str	r3, [r7, #0]
}
 800700c:	bf00      	nop
 800700e:	bf00      	nop
 8007010:	e7fd      	b.n	800700e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007012:	f001 f929 	bl	8008268 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007016:	4b39      	ldr	r3, [pc, #228]	@ (80070fc <xTaskResumeAll+0x118>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3b01      	subs	r3, #1
 800701c:	4a37      	ldr	r2, [pc, #220]	@ (80070fc <xTaskResumeAll+0x118>)
 800701e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007020:	4b36      	ldr	r3, [pc, #216]	@ (80070fc <xTaskResumeAll+0x118>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d162      	bne.n	80070ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007028:	4b35      	ldr	r3, [pc, #212]	@ (8007100 <xTaskResumeAll+0x11c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d05e      	beq.n	80070ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007030:	e02f      	b.n	8007092 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007032:	4b34      	ldr	r3, [pc, #208]	@ (8007104 <xTaskResumeAll+0x120>)
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3318      	adds	r3, #24
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff f85a 	bl	80060f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	3304      	adds	r3, #4
 8007048:	4618      	mov	r0, r3
 800704a:	f7ff f855 	bl	80060f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007052:	4b2d      	ldr	r3, [pc, #180]	@ (8007108 <xTaskResumeAll+0x124>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	429a      	cmp	r2, r3
 8007058:	d903      	bls.n	8007062 <xTaskResumeAll+0x7e>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705e:	4a2a      	ldr	r2, [pc, #168]	@ (8007108 <xTaskResumeAll+0x124>)
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4a27      	ldr	r2, [pc, #156]	@ (800710c <xTaskResumeAll+0x128>)
 8007070:	441a      	add	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3304      	adds	r3, #4
 8007076:	4619      	mov	r1, r3
 8007078:	4610      	mov	r0, r2
 800707a:	f7fe ffe0 	bl	800603e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007082:	4b23      	ldr	r3, [pc, #140]	@ (8007110 <xTaskResumeAll+0x12c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007088:	429a      	cmp	r2, r3
 800708a:	d302      	bcc.n	8007092 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800708c:	4b21      	ldr	r3, [pc, #132]	@ (8007114 <xTaskResumeAll+0x130>)
 800708e:	2201      	movs	r2, #1
 8007090:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007092:	4b1c      	ldr	r3, [pc, #112]	@ (8007104 <xTaskResumeAll+0x120>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1cb      	bne.n	8007032 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070a0:	f000 fb58 	bl	8007754 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80070a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007118 <xTaskResumeAll+0x134>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d010      	beq.n	80070d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070b0:	f000 f846 	bl	8007140 <xTaskIncrementTick>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80070ba:	4b16      	ldr	r3, [pc, #88]	@ (8007114 <xTaskResumeAll+0x130>)
 80070bc:	2201      	movs	r2, #1
 80070be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1f1      	bne.n	80070b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80070cc:	4b12      	ldr	r3, [pc, #72]	@ (8007118 <xTaskResumeAll+0x134>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070d2:	4b10      	ldr	r3, [pc, #64]	@ (8007114 <xTaskResumeAll+0x130>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070da:	2301      	movs	r3, #1
 80070dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070de:	4b0f      	ldr	r3, [pc, #60]	@ (800711c <xTaskResumeAll+0x138>)
 80070e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070e4:	601a      	str	r2, [r3, #0]
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070ee:	f001 f8ed 	bl	80082cc <vPortExitCritical>

	return xAlreadyYielded;
 80070f2:	68bb      	ldr	r3, [r7, #8]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	20001010 	.word	0x20001010
 8007100:	20000fe8 	.word	0x20000fe8
 8007104:	20000fa8 	.word	0x20000fa8
 8007108:	20000ff0 	.word	0x20000ff0
 800710c:	20000b18 	.word	0x20000b18
 8007110:	20000b14 	.word	0x20000b14
 8007114:	20000ffc 	.word	0x20000ffc
 8007118:	20000ff8 	.word	0x20000ff8
 800711c:	e000ed04 	.word	0xe000ed04

08007120 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007126:	4b05      	ldr	r3, [pc, #20]	@ (800713c <xTaskGetTickCount+0x1c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800712c:	687b      	ldr	r3, [r7, #4]
}
 800712e:	4618      	mov	r0, r3
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	20000fec 	.word	0x20000fec

08007140 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007146:	2300      	movs	r3, #0
 8007148:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800714a:	4b4f      	ldr	r3, [pc, #316]	@ (8007288 <xTaskIncrementTick+0x148>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	f040 8090 	bne.w	8007274 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007154:	4b4d      	ldr	r3, [pc, #308]	@ (800728c <xTaskIncrementTick+0x14c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3301      	adds	r3, #1
 800715a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800715c:	4a4b      	ldr	r2, [pc, #300]	@ (800728c <xTaskIncrementTick+0x14c>)
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d121      	bne.n	80071ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007168:	4b49      	ldr	r3, [pc, #292]	@ (8007290 <xTaskIncrementTick+0x150>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00b      	beq.n	800718a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	603b      	str	r3, [r7, #0]
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop
 8007188:	e7fd      	b.n	8007186 <xTaskIncrementTick+0x46>
 800718a:	4b41      	ldr	r3, [pc, #260]	@ (8007290 <xTaskIncrementTick+0x150>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	4b40      	ldr	r3, [pc, #256]	@ (8007294 <xTaskIncrementTick+0x154>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a3e      	ldr	r2, [pc, #248]	@ (8007290 <xTaskIncrementTick+0x150>)
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	4a3e      	ldr	r2, [pc, #248]	@ (8007294 <xTaskIncrementTick+0x154>)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	4b3e      	ldr	r3, [pc, #248]	@ (8007298 <xTaskIncrementTick+0x158>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3301      	adds	r3, #1
 80071a4:	4a3c      	ldr	r2, [pc, #240]	@ (8007298 <xTaskIncrementTick+0x158>)
 80071a6:	6013      	str	r3, [r2, #0]
 80071a8:	f000 fad4 	bl	8007754 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071ac:	4b3b      	ldr	r3, [pc, #236]	@ (800729c <xTaskIncrementTick+0x15c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d349      	bcc.n	800724a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071b6:	4b36      	ldr	r3, [pc, #216]	@ (8007290 <xTaskIncrementTick+0x150>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d104      	bne.n	80071ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c0:	4b36      	ldr	r3, [pc, #216]	@ (800729c <xTaskIncrementTick+0x15c>)
 80071c2:	f04f 32ff 	mov.w	r2, #4294967295
 80071c6:	601a      	str	r2, [r3, #0]
					break;
 80071c8:	e03f      	b.n	800724a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ca:	4b31      	ldr	r3, [pc, #196]	@ (8007290 <xTaskIncrementTick+0x150>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d203      	bcs.n	80071ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071e2:	4a2e      	ldr	r2, [pc, #184]	@ (800729c <xTaskIncrementTick+0x15c>)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071e8:	e02f      	b.n	800724a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	3304      	adds	r3, #4
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fe ff82 	bl	80060f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d004      	beq.n	8007206 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	3318      	adds	r3, #24
 8007200:	4618      	mov	r0, r3
 8007202:	f7fe ff79 	bl	80060f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800720a:	4b25      	ldr	r3, [pc, #148]	@ (80072a0 <xTaskIncrementTick+0x160>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	429a      	cmp	r2, r3
 8007210:	d903      	bls.n	800721a <xTaskIncrementTick+0xda>
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007216:	4a22      	ldr	r2, [pc, #136]	@ (80072a0 <xTaskIncrementTick+0x160>)
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4a1f      	ldr	r2, [pc, #124]	@ (80072a4 <xTaskIncrementTick+0x164>)
 8007228:	441a      	add	r2, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	3304      	adds	r3, #4
 800722e:	4619      	mov	r1, r3
 8007230:	4610      	mov	r0, r2
 8007232:	f7fe ff04 	bl	800603e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723a:	4b1b      	ldr	r3, [pc, #108]	@ (80072a8 <xTaskIncrementTick+0x168>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007240:	429a      	cmp	r2, r3
 8007242:	d3b8      	bcc.n	80071b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007244:	2301      	movs	r3, #1
 8007246:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007248:	e7b5      	b.n	80071b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800724a:	4b17      	ldr	r3, [pc, #92]	@ (80072a8 <xTaskIncrementTick+0x168>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007250:	4914      	ldr	r1, [pc, #80]	@ (80072a4 <xTaskIncrementTick+0x164>)
 8007252:	4613      	mov	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	440b      	add	r3, r1
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d901      	bls.n	8007266 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007262:	2301      	movs	r3, #1
 8007264:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007266:	4b11      	ldr	r3, [pc, #68]	@ (80072ac <xTaskIncrementTick+0x16c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d007      	beq.n	800727e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800726e:	2301      	movs	r3, #1
 8007270:	617b      	str	r3, [r7, #20]
 8007272:	e004      	b.n	800727e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007274:	4b0e      	ldr	r3, [pc, #56]	@ (80072b0 <xTaskIncrementTick+0x170>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3301      	adds	r3, #1
 800727a:	4a0d      	ldr	r2, [pc, #52]	@ (80072b0 <xTaskIncrementTick+0x170>)
 800727c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800727e:	697b      	ldr	r3, [r7, #20]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	20001010 	.word	0x20001010
 800728c:	20000fec 	.word	0x20000fec
 8007290:	20000fa0 	.word	0x20000fa0
 8007294:	20000fa4 	.word	0x20000fa4
 8007298:	20001000 	.word	0x20001000
 800729c:	20001008 	.word	0x20001008
 80072a0:	20000ff0 	.word	0x20000ff0
 80072a4:	20000b18 	.word	0x20000b18
 80072a8:	20000b14 	.word	0x20000b14
 80072ac:	20000ffc 	.word	0x20000ffc
 80072b0:	20000ff8 	.word	0x20000ff8

080072b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072ba:	4b28      	ldr	r3, [pc, #160]	@ (800735c <vTaskSwitchContext+0xa8>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072c2:	4b27      	ldr	r3, [pc, #156]	@ (8007360 <vTaskSwitchContext+0xac>)
 80072c4:	2201      	movs	r2, #1
 80072c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072c8:	e042      	b.n	8007350 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80072ca:	4b25      	ldr	r3, [pc, #148]	@ (8007360 <vTaskSwitchContext+0xac>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072d0:	4b24      	ldr	r3, [pc, #144]	@ (8007364 <vTaskSwitchContext+0xb0>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	e011      	b.n	80072fc <vTaskSwitchContext+0x48>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10b      	bne.n	80072f6 <vTaskSwitchContext+0x42>
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	607b      	str	r3, [r7, #4]
}
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop
 80072f4:	e7fd      	b.n	80072f2 <vTaskSwitchContext+0x3e>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	491a      	ldr	r1, [pc, #104]	@ (8007368 <vTaskSwitchContext+0xb4>)
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	440b      	add	r3, r1
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0e3      	beq.n	80072d8 <vTaskSwitchContext+0x24>
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4a13      	ldr	r2, [pc, #76]	@ (8007368 <vTaskSwitchContext+0xb4>)
 800731c:	4413      	add	r3, r2
 800731e:	60bb      	str	r3, [r7, #8]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	605a      	str	r2, [r3, #4]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	3308      	adds	r3, #8
 8007332:	429a      	cmp	r2, r3
 8007334:	d104      	bne.n	8007340 <vTaskSwitchContext+0x8c>
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	605a      	str	r2, [r3, #4]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	4a09      	ldr	r2, [pc, #36]	@ (800736c <vTaskSwitchContext+0xb8>)
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	4a06      	ldr	r2, [pc, #24]	@ (8007364 <vTaskSwitchContext+0xb0>)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6013      	str	r3, [r2, #0]
}
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	20001010 	.word	0x20001010
 8007360:	20000ffc 	.word	0x20000ffc
 8007364:	20000ff0 	.word	0x20000ff0
 8007368:	20000b18 	.word	0x20000b18
 800736c:	20000b14 	.word	0x20000b14

08007370 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10b      	bne.n	8007398 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	60fb      	str	r3, [r7, #12]
}
 8007392:	bf00      	nop
 8007394:	bf00      	nop
 8007396:	e7fd      	b.n	8007394 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007398:	4b07      	ldr	r3, [pc, #28]	@ (80073b8 <vTaskPlaceOnEventList+0x48>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3318      	adds	r3, #24
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7fe fe70 	bl	8006086 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073a6:	2101      	movs	r1, #1
 80073a8:	6838      	ldr	r0, [r7, #0]
 80073aa:	f000 fa81 	bl	80078b0 <prvAddCurrentTaskToDelayedList>
}
 80073ae:	bf00      	nop
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20000b14 	.word	0x20000b14

080073bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10b      	bne.n	80073e6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	617b      	str	r3, [r7, #20]
}
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop
 80073e4:	e7fd      	b.n	80073e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007410 <vTaskPlaceOnEventListRestricted+0x54>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3318      	adds	r3, #24
 80073ec:	4619      	mov	r1, r3
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7fe fe25 	bl	800603e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80073fa:	f04f 33ff 	mov.w	r3, #4294967295
 80073fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	68b8      	ldr	r0, [r7, #8]
 8007404:	f000 fa54 	bl	80078b0 <prvAddCurrentTaskToDelayedList>
	}
 8007408:	bf00      	nop
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	20000b14 	.word	0x20000b14

08007414 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10b      	bne.n	8007442 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	60fb      	str	r3, [r7, #12]
}
 800743c:	bf00      	nop
 800743e:	bf00      	nop
 8007440:	e7fd      	b.n	800743e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	3318      	adds	r3, #24
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe fe56 	bl	80060f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800744c:	4b1d      	ldr	r3, [pc, #116]	@ (80074c4 <xTaskRemoveFromEventList+0xb0>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d11d      	bne.n	8007490 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	3304      	adds	r3, #4
 8007458:	4618      	mov	r0, r3
 800745a:	f7fe fe4d 	bl	80060f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007462:	4b19      	ldr	r3, [pc, #100]	@ (80074c8 <xTaskRemoveFromEventList+0xb4>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d903      	bls.n	8007472 <xTaskRemoveFromEventList+0x5e>
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746e:	4a16      	ldr	r2, [pc, #88]	@ (80074c8 <xTaskRemoveFromEventList+0xb4>)
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4a13      	ldr	r2, [pc, #76]	@ (80074cc <xTaskRemoveFromEventList+0xb8>)
 8007480:	441a      	add	r2, r3
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	3304      	adds	r3, #4
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f7fe fdd8 	bl	800603e <vListInsertEnd>
 800748e:	e005      	b.n	800749c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	3318      	adds	r3, #24
 8007494:	4619      	mov	r1, r3
 8007496:	480e      	ldr	r0, [pc, #56]	@ (80074d0 <xTaskRemoveFromEventList+0xbc>)
 8007498:	f7fe fdd1 	bl	800603e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a0:	4b0c      	ldr	r3, [pc, #48]	@ (80074d4 <xTaskRemoveFromEventList+0xc0>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d905      	bls.n	80074b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074aa:	2301      	movs	r3, #1
 80074ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074ae:	4b0a      	ldr	r3, [pc, #40]	@ (80074d8 <xTaskRemoveFromEventList+0xc4>)
 80074b0:	2201      	movs	r2, #1
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	e001      	b.n	80074ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80074b6:	2300      	movs	r3, #0
 80074b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80074ba:	697b      	ldr	r3, [r7, #20]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	20001010 	.word	0x20001010
 80074c8:	20000ff0 	.word	0x20000ff0
 80074cc:	20000b18 	.word	0x20000b18
 80074d0:	20000fa8 	.word	0x20000fa8
 80074d4:	20000b14 	.word	0x20000b14
 80074d8:	20000ffc 	.word	0x20000ffc

080074dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074e4:	4b06      	ldr	r3, [pc, #24]	@ (8007500 <vTaskInternalSetTimeOutState+0x24>)
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074ec:	4b05      	ldr	r3, [pc, #20]	@ (8007504 <vTaskInternalSetTimeOutState+0x28>)
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	605a      	str	r2, [r3, #4]
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	20001000 	.word	0x20001000
 8007504:	20000fec 	.word	0x20000fec

08007508 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b088      	sub	sp, #32
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10b      	bne.n	8007530 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	613b      	str	r3, [r7, #16]
}
 800752a:	bf00      	nop
 800752c:	bf00      	nop
 800752e:	e7fd      	b.n	800752c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10b      	bne.n	800754e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	60fb      	str	r3, [r7, #12]
}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	e7fd      	b.n	800754a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800754e:	f000 fe8b 	bl	8008268 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007552:	4b1d      	ldr	r3, [pc, #116]	@ (80075c8 <xTaskCheckForTimeOut+0xc0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	69ba      	ldr	r2, [r7, #24]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756a:	d102      	bne.n	8007572 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800756c:	2300      	movs	r3, #0
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	e023      	b.n	80075ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	4b15      	ldr	r3, [pc, #84]	@ (80075cc <xTaskCheckForTimeOut+0xc4>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d007      	beq.n	800758e <xTaskCheckForTimeOut+0x86>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	429a      	cmp	r2, r3
 8007586:	d302      	bcc.n	800758e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007588:	2301      	movs	r3, #1
 800758a:	61fb      	str	r3, [r7, #28]
 800758c:	e015      	b.n	80075ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	429a      	cmp	r2, r3
 8007596:	d20b      	bcs.n	80075b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	1ad2      	subs	r2, r2, r3
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7ff ff99 	bl	80074dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80075aa:	2300      	movs	r3, #0
 80075ac:	61fb      	str	r3, [r7, #28]
 80075ae:	e004      	b.n	80075ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075b6:	2301      	movs	r3, #1
 80075b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80075ba:	f000 fe87 	bl	80082cc <vPortExitCritical>

	return xReturn;
 80075be:	69fb      	ldr	r3, [r7, #28]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3720      	adds	r7, #32
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20000fec 	.word	0x20000fec
 80075cc:	20001000 	.word	0x20001000

080075d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075d4:	4b03      	ldr	r3, [pc, #12]	@ (80075e4 <vTaskMissedYield+0x14>)
 80075d6:	2201      	movs	r2, #1
 80075d8:	601a      	str	r2, [r3, #0]
}
 80075da:	bf00      	nop
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	20000ffc 	.word	0x20000ffc

080075e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075f0:	f000 f852 	bl	8007698 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075f4:	4b06      	ldr	r3, [pc, #24]	@ (8007610 <prvIdleTask+0x28>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d9f9      	bls.n	80075f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075fc:	4b05      	ldr	r3, [pc, #20]	@ (8007614 <prvIdleTask+0x2c>)
 80075fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800760c:	e7f0      	b.n	80075f0 <prvIdleTask+0x8>
 800760e:	bf00      	nop
 8007610:	20000b18 	.word	0x20000b18
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800761e:	2300      	movs	r3, #0
 8007620:	607b      	str	r3, [r7, #4]
 8007622:	e00c      	b.n	800763e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4a12      	ldr	r2, [pc, #72]	@ (8007678 <prvInitialiseTaskLists+0x60>)
 8007630:	4413      	add	r3, r2
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe fcd6 	bl	8005fe4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3301      	adds	r3, #1
 800763c:	607b      	str	r3, [r7, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b37      	cmp	r3, #55	@ 0x37
 8007642:	d9ef      	bls.n	8007624 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007644:	480d      	ldr	r0, [pc, #52]	@ (800767c <prvInitialiseTaskLists+0x64>)
 8007646:	f7fe fccd 	bl	8005fe4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800764a:	480d      	ldr	r0, [pc, #52]	@ (8007680 <prvInitialiseTaskLists+0x68>)
 800764c:	f7fe fcca 	bl	8005fe4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007650:	480c      	ldr	r0, [pc, #48]	@ (8007684 <prvInitialiseTaskLists+0x6c>)
 8007652:	f7fe fcc7 	bl	8005fe4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007656:	480c      	ldr	r0, [pc, #48]	@ (8007688 <prvInitialiseTaskLists+0x70>)
 8007658:	f7fe fcc4 	bl	8005fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800765c:	480b      	ldr	r0, [pc, #44]	@ (800768c <prvInitialiseTaskLists+0x74>)
 800765e:	f7fe fcc1 	bl	8005fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007662:	4b0b      	ldr	r3, [pc, #44]	@ (8007690 <prvInitialiseTaskLists+0x78>)
 8007664:	4a05      	ldr	r2, [pc, #20]	@ (800767c <prvInitialiseTaskLists+0x64>)
 8007666:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007668:	4b0a      	ldr	r3, [pc, #40]	@ (8007694 <prvInitialiseTaskLists+0x7c>)
 800766a:	4a05      	ldr	r2, [pc, #20]	@ (8007680 <prvInitialiseTaskLists+0x68>)
 800766c:	601a      	str	r2, [r3, #0]
}
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000b18 	.word	0x20000b18
 800767c:	20000f78 	.word	0x20000f78
 8007680:	20000f8c 	.word	0x20000f8c
 8007684:	20000fa8 	.word	0x20000fa8
 8007688:	20000fbc 	.word	0x20000fbc
 800768c:	20000fd4 	.word	0x20000fd4
 8007690:	20000fa0 	.word	0x20000fa0
 8007694:	20000fa4 	.word	0x20000fa4

08007698 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800769e:	e019      	b.n	80076d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80076a0:	f000 fde2 	bl	8008268 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076a4:	4b10      	ldr	r3, [pc, #64]	@ (80076e8 <prvCheckTasksWaitingTermination+0x50>)
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3304      	adds	r3, #4
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fe fd21 	bl	80060f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076b6:	4b0d      	ldr	r3, [pc, #52]	@ (80076ec <prvCheckTasksWaitingTermination+0x54>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	4a0b      	ldr	r2, [pc, #44]	@ (80076ec <prvCheckTasksWaitingTermination+0x54>)
 80076be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076c0:	4b0b      	ldr	r3, [pc, #44]	@ (80076f0 <prvCheckTasksWaitingTermination+0x58>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	4a0a      	ldr	r2, [pc, #40]	@ (80076f0 <prvCheckTasksWaitingTermination+0x58>)
 80076c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076ca:	f000 fdff 	bl	80082cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f810 	bl	80076f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076d4:	4b06      	ldr	r3, [pc, #24]	@ (80076f0 <prvCheckTasksWaitingTermination+0x58>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1e1      	bne.n	80076a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076dc:	bf00      	nop
 80076de:	bf00      	nop
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20000fbc 	.word	0x20000fbc
 80076ec:	20000fe8 	.word	0x20000fe8
 80076f0:	20000fd0 	.word	0x20000fd0

080076f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007702:	2b00      	cmp	r3, #0
 8007704:	d108      	bne.n	8007718 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770a:	4618      	mov	r0, r3
 800770c:	f000 ff9c 	bl	8008648 <vPortFree>
				vPortFree( pxTCB );
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 ff99 	bl	8008648 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007716:	e019      	b.n	800774c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800771e:	2b01      	cmp	r3, #1
 8007720:	d103      	bne.n	800772a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 ff90 	bl	8008648 <vPortFree>
	}
 8007728:	e010      	b.n	800774c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007730:	2b02      	cmp	r3, #2
 8007732:	d00b      	beq.n	800774c <prvDeleteTCB+0x58>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	60fb      	str	r3, [r7, #12]
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	e7fd      	b.n	8007748 <prvDeleteTCB+0x54>
	}
 800774c:	bf00      	nop
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800775a:	4b0c      	ldr	r3, [pc, #48]	@ (800778c <prvResetNextTaskUnblockTime+0x38>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d104      	bne.n	800776e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007764:	4b0a      	ldr	r3, [pc, #40]	@ (8007790 <prvResetNextTaskUnblockTime+0x3c>)
 8007766:	f04f 32ff 	mov.w	r2, #4294967295
 800776a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800776c:	e008      	b.n	8007780 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800776e:	4b07      	ldr	r3, [pc, #28]	@ (800778c <prvResetNextTaskUnblockTime+0x38>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	4a04      	ldr	r2, [pc, #16]	@ (8007790 <prvResetNextTaskUnblockTime+0x3c>)
 800777e:	6013      	str	r3, [r2, #0]
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	20000fa0 	.word	0x20000fa0
 8007790:	20001008 	.word	0x20001008

08007794 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800779a:	4b0b      	ldr	r3, [pc, #44]	@ (80077c8 <xTaskGetSchedulerState+0x34>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d102      	bne.n	80077a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077a2:	2301      	movs	r3, #1
 80077a4:	607b      	str	r3, [r7, #4]
 80077a6:	e008      	b.n	80077ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077a8:	4b08      	ldr	r3, [pc, #32]	@ (80077cc <xTaskGetSchedulerState+0x38>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d102      	bne.n	80077b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077b0:	2302      	movs	r3, #2
 80077b2:	607b      	str	r3, [r7, #4]
 80077b4:	e001      	b.n	80077ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077b6:	2300      	movs	r3, #0
 80077b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077ba:	687b      	ldr	r3, [r7, #4]
	}
 80077bc:	4618      	mov	r0, r3
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	20000ff4 	.word	0x20000ff4
 80077cc:	20001010 	.word	0x20001010

080077d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077dc:	2300      	movs	r3, #0
 80077de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d058      	beq.n	8007898 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077e6:	4b2f      	ldr	r3, [pc, #188]	@ (80078a4 <xTaskPriorityDisinherit+0xd4>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d00b      	beq.n	8007808 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	60fb      	str	r3, [r7, #12]
}
 8007802:	bf00      	nop
 8007804:	bf00      	nop
 8007806:	e7fd      	b.n	8007804 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10b      	bne.n	8007828 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	60bb      	str	r3, [r7, #8]
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	e7fd      	b.n	8007824 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800782c:	1e5a      	subs	r2, r3, #1
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800783a:	429a      	cmp	r2, r3
 800783c:	d02c      	beq.n	8007898 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007842:	2b00      	cmp	r3, #0
 8007844:	d128      	bne.n	8007898 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	3304      	adds	r3, #4
 800784a:	4618      	mov	r0, r3
 800784c:	f7fe fc54 	bl	80060f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007868:	4b0f      	ldr	r3, [pc, #60]	@ (80078a8 <xTaskPriorityDisinherit+0xd8>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	429a      	cmp	r2, r3
 800786e:	d903      	bls.n	8007878 <xTaskPriorityDisinherit+0xa8>
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007874:	4a0c      	ldr	r2, [pc, #48]	@ (80078a8 <xTaskPriorityDisinherit+0xd8>)
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4a09      	ldr	r2, [pc, #36]	@ (80078ac <xTaskPriorityDisinherit+0xdc>)
 8007886:	441a      	add	r2, r3
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	3304      	adds	r3, #4
 800788c:	4619      	mov	r1, r3
 800788e:	4610      	mov	r0, r2
 8007890:	f7fe fbd5 	bl	800603e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007894:	2301      	movs	r3, #1
 8007896:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007898:	697b      	ldr	r3, [r7, #20]
	}
 800789a:	4618      	mov	r0, r3
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20000b14 	.word	0x20000b14
 80078a8:	20000ff0 	.word	0x20000ff0
 80078ac:	20000b18 	.word	0x20000b18

080078b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078ba:	4b21      	ldr	r3, [pc, #132]	@ (8007940 <prvAddCurrentTaskToDelayedList+0x90>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078c0:	4b20      	ldr	r3, [pc, #128]	@ (8007944 <prvAddCurrentTaskToDelayedList+0x94>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3304      	adds	r3, #4
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fe fc16 	bl	80060f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d2:	d10a      	bne.n	80078ea <prvAddCurrentTaskToDelayedList+0x3a>
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d007      	beq.n	80078ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078da:	4b1a      	ldr	r3, [pc, #104]	@ (8007944 <prvAddCurrentTaskToDelayedList+0x94>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3304      	adds	r3, #4
 80078e0:	4619      	mov	r1, r3
 80078e2:	4819      	ldr	r0, [pc, #100]	@ (8007948 <prvAddCurrentTaskToDelayedList+0x98>)
 80078e4:	f7fe fbab 	bl	800603e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078e8:	e026      	b.n	8007938 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4413      	add	r3, r2
 80078f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078f2:	4b14      	ldr	r3, [pc, #80]	@ (8007944 <prvAddCurrentTaskToDelayedList+0x94>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d209      	bcs.n	8007916 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007902:	4b12      	ldr	r3, [pc, #72]	@ (800794c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	4b0f      	ldr	r3, [pc, #60]	@ (8007944 <prvAddCurrentTaskToDelayedList+0x94>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3304      	adds	r3, #4
 800790c:	4619      	mov	r1, r3
 800790e:	4610      	mov	r0, r2
 8007910:	f7fe fbb9 	bl	8006086 <vListInsert>
}
 8007914:	e010      	b.n	8007938 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007916:	4b0e      	ldr	r3, [pc, #56]	@ (8007950 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	4b0a      	ldr	r3, [pc, #40]	@ (8007944 <prvAddCurrentTaskToDelayedList+0x94>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3304      	adds	r3, #4
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f7fe fbaf 	bl	8006086 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007928:	4b0a      	ldr	r3, [pc, #40]	@ (8007954 <prvAddCurrentTaskToDelayedList+0xa4>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	429a      	cmp	r2, r3
 8007930:	d202      	bcs.n	8007938 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007932:	4a08      	ldr	r2, [pc, #32]	@ (8007954 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	6013      	str	r3, [r2, #0]
}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	20000fec 	.word	0x20000fec
 8007944:	20000b14 	.word	0x20000b14
 8007948:	20000fd4 	.word	0x20000fd4
 800794c:	20000fa4 	.word	0x20000fa4
 8007950:	20000fa0 	.word	0x20000fa0
 8007954:	20001008 	.word	0x20001008

08007958 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08a      	sub	sp, #40	@ 0x28
 800795c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800795e:	2300      	movs	r3, #0
 8007960:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007962:	f000 fb13 	bl	8007f8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007966:	4b1d      	ldr	r3, [pc, #116]	@ (80079dc <xTimerCreateTimerTask+0x84>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d021      	beq.n	80079b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007972:	2300      	movs	r3, #0
 8007974:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007976:	1d3a      	adds	r2, r7, #4
 8007978:	f107 0108 	add.w	r1, r7, #8
 800797c:	f107 030c 	add.w	r3, r7, #12
 8007980:	4618      	mov	r0, r3
 8007982:	f7fe fb15 	bl	8005fb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007986:	6879      	ldr	r1, [r7, #4]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	9202      	str	r2, [sp, #8]
 800798e:	9301      	str	r3, [sp, #4]
 8007990:	2302      	movs	r3, #2
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	2300      	movs	r3, #0
 8007996:	460a      	mov	r2, r1
 8007998:	4911      	ldr	r1, [pc, #68]	@ (80079e0 <xTimerCreateTimerTask+0x88>)
 800799a:	4812      	ldr	r0, [pc, #72]	@ (80079e4 <xTimerCreateTimerTask+0x8c>)
 800799c:	f7ff f8d0 	bl	8006b40 <xTaskCreateStatic>
 80079a0:	4603      	mov	r3, r0
 80079a2:	4a11      	ldr	r2, [pc, #68]	@ (80079e8 <xTimerCreateTimerTask+0x90>)
 80079a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80079a6:	4b10      	ldr	r3, [pc, #64]	@ (80079e8 <xTimerCreateTimerTask+0x90>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80079ae:	2301      	movs	r3, #1
 80079b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10b      	bne.n	80079d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	613b      	str	r3, [r7, #16]
}
 80079ca:	bf00      	nop
 80079cc:	bf00      	nop
 80079ce:	e7fd      	b.n	80079cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80079d0:	697b      	ldr	r3, [r7, #20]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20001044 	.word	0x20001044
 80079e0:	0800ba34 	.word	0x0800ba34
 80079e4:	08007b25 	.word	0x08007b25
 80079e8:	20001048 	.word	0x20001048

080079ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08a      	sub	sp, #40	@ 0x28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10b      	bne.n	8007a1c <xTimerGenericCommand+0x30>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	623b      	str	r3, [r7, #32]
}
 8007a16:	bf00      	nop
 8007a18:	bf00      	nop
 8007a1a:	e7fd      	b.n	8007a18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a1c:	4b19      	ldr	r3, [pc, #100]	@ (8007a84 <xTimerGenericCommand+0x98>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d02a      	beq.n	8007a7a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2b05      	cmp	r3, #5
 8007a34:	dc18      	bgt.n	8007a68 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a36:	f7ff fead 	bl	8007794 <xTaskGetSchedulerState>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d109      	bne.n	8007a54 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a40:	4b10      	ldr	r3, [pc, #64]	@ (8007a84 <xTimerGenericCommand+0x98>)
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	f107 0110 	add.w	r1, r7, #16
 8007a48:	2300      	movs	r3, #0
 8007a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a4c:	f7fe fc88 	bl	8006360 <xQueueGenericSend>
 8007a50:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a52:	e012      	b.n	8007a7a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a54:	4b0b      	ldr	r3, [pc, #44]	@ (8007a84 <xTimerGenericCommand+0x98>)
 8007a56:	6818      	ldr	r0, [r3, #0]
 8007a58:	f107 0110 	add.w	r1, r7, #16
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f7fe fc7e 	bl	8006360 <xQueueGenericSend>
 8007a64:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a66:	e008      	b.n	8007a7a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a68:	4b06      	ldr	r3, [pc, #24]	@ (8007a84 <xTimerGenericCommand+0x98>)
 8007a6a:	6818      	ldr	r0, [r3, #0]
 8007a6c:	f107 0110 	add.w	r1, r7, #16
 8007a70:	2300      	movs	r3, #0
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	f7fe fd76 	bl	8006564 <xQueueGenericSendFromISR>
 8007a78:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3728      	adds	r7, #40	@ 0x28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20001044 	.word	0x20001044

08007a88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b088      	sub	sp, #32
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a92:	4b23      	ldr	r3, [pc, #140]	@ (8007b20 <prvProcessExpiredTimer+0x98>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fe fb29 	bl	80060f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d023      	beq.n	8007afc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	699a      	ldr	r2, [r3, #24]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	18d1      	adds	r1, r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	6978      	ldr	r0, [r7, #20]
 8007ac2:	f000 f8d5 	bl	8007c70 <prvInsertTimerInActiveList>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d020      	beq.n	8007b0e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007acc:	2300      	movs	r3, #0
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	6978      	ldr	r0, [r7, #20]
 8007ad8:	f7ff ff88 	bl	80079ec <xTimerGenericCommand>
 8007adc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d114      	bne.n	8007b0e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	60fb      	str	r3, [r7, #12]
}
 8007af6:	bf00      	nop
 8007af8:	bf00      	nop
 8007afa:	e7fd      	b.n	8007af8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b02:	f023 0301 	bic.w	r3, r3, #1
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	6978      	ldr	r0, [r7, #20]
 8007b14:	4798      	blx	r3
}
 8007b16:	bf00      	nop
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	2000103c 	.word	0x2000103c

08007b24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b2c:	f107 0308 	add.w	r3, r7, #8
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 f859 	bl	8007be8 <prvGetNextExpireTime>
 8007b36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 f805 	bl	8007b4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b42:	f000 f8d7 	bl	8007cf4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b46:	bf00      	nop
 8007b48:	e7f0      	b.n	8007b2c <prvTimerTask+0x8>
	...

08007b4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b56:	f7ff fa37 	bl	8006fc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b5a:	f107 0308 	add.w	r3, r7, #8
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 f866 	bl	8007c30 <prvSampleTimeNow>
 8007b64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d130      	bne.n	8007bce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <prvProcessTimerOrBlockTask+0x3c>
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d806      	bhi.n	8007b88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b7a:	f7ff fa33 	bl	8006fe4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b7e:	68f9      	ldr	r1, [r7, #12]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7ff ff81 	bl	8007a88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b86:	e024      	b.n	8007bd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d008      	beq.n	8007ba0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b8e:	4b13      	ldr	r3, [pc, #76]	@ (8007bdc <prvProcessTimerOrBlockTask+0x90>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <prvProcessTimerOrBlockTask+0x50>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e000      	b.n	8007b9e <prvProcessTimerOrBlockTask+0x52>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8007be0 <prvProcessTimerOrBlockTask+0x94>)
 8007ba2:	6818      	ldr	r0, [r3, #0]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	4619      	mov	r1, r3
 8007bae:	f7fe ff93 	bl	8006ad8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007bb2:	f7ff fa17 	bl	8006fe4 <xTaskResumeAll>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007bbc:	4b09      	ldr	r3, [pc, #36]	@ (8007be4 <prvProcessTimerOrBlockTask+0x98>)
 8007bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	f3bf 8f6f 	isb	sy
}
 8007bcc:	e001      	b.n	8007bd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007bce:	f7ff fa09 	bl	8006fe4 <xTaskResumeAll>
}
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20001040 	.word	0x20001040
 8007be0:	20001044 	.word	0x20001044
 8007be4:	e000ed04 	.word	0xe000ed04

08007be8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8007c2c <prvGetNextExpireTime+0x44>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <prvGetNextExpireTime+0x16>
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	e000      	b.n	8007c00 <prvGetNextExpireTime+0x18>
 8007bfe:	2200      	movs	r2, #0
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d105      	bne.n	8007c18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c0c:	4b07      	ldr	r3, [pc, #28]	@ (8007c2c <prvGetNextExpireTime+0x44>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	e001      	b.n	8007c1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	2000103c 	.word	0x2000103c

08007c30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c38:	f7ff fa72 	bl	8007120 <xTaskGetTickCount>
 8007c3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c6c <prvSampleTimeNow+0x3c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d205      	bcs.n	8007c54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c48:	f000 f93a 	bl	8007ec0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e002      	b.n	8007c5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c5a:	4a04      	ldr	r2, [pc, #16]	@ (8007c6c <prvSampleTimeNow+0x3c>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c60:	68fb      	ldr	r3, [r7, #12]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	2000104c 	.word	0x2000104c

08007c70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d812      	bhi.n	8007cbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	1ad2      	subs	r2, r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d302      	bcc.n	8007caa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	e01b      	b.n	8007ce2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007caa:	4b10      	ldr	r3, [pc, #64]	@ (8007cec <prvInsertTimerInActiveList+0x7c>)
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	f7fe f9e6 	bl	8006086 <vListInsert>
 8007cba:	e012      	b.n	8007ce2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d206      	bcs.n	8007cd2 <prvInsertTimerInActiveList+0x62>
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d302      	bcc.n	8007cd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	e007      	b.n	8007ce2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cd2:	4b07      	ldr	r3, [pc, #28]	@ (8007cf0 <prvInsertTimerInActiveList+0x80>)
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4610      	mov	r0, r2
 8007cde:	f7fe f9d2 	bl	8006086 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ce2:	697b      	ldr	r3, [r7, #20]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	20001040 	.word	0x20001040
 8007cf0:	2000103c 	.word	0x2000103c

08007cf4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08e      	sub	sp, #56	@ 0x38
 8007cf8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cfa:	e0ce      	b.n	8007e9a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	da19      	bge.n	8007d36 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d02:	1d3b      	adds	r3, r7, #4
 8007d04:	3304      	adds	r3, #4
 8007d06:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10b      	bne.n	8007d26 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	61fb      	str	r3, [r7, #28]
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	e7fd      	b.n	8007d22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d2c:	6850      	ldr	r0, [r2, #4]
 8007d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d30:	6892      	ldr	r2, [r2, #8]
 8007d32:	4611      	mov	r1, r2
 8007d34:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f2c0 80ae 	blt.w	8007e9a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d004      	beq.n	8007d54 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe f9d2 	bl	80060f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d54:	463b      	mov	r3, r7
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff ff6a 	bl	8007c30 <prvSampleTimeNow>
 8007d5c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b09      	cmp	r3, #9
 8007d62:	f200 8097 	bhi.w	8007e94 <prvProcessReceivedCommands+0x1a0>
 8007d66:	a201      	add	r2, pc, #4	@ (adr r2, 8007d6c <prvProcessReceivedCommands+0x78>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007d95 	.word	0x08007d95
 8007d70:	08007d95 	.word	0x08007d95
 8007d74:	08007d95 	.word	0x08007d95
 8007d78:	08007e0b 	.word	0x08007e0b
 8007d7c:	08007e1f 	.word	0x08007e1f
 8007d80:	08007e6b 	.word	0x08007e6b
 8007d84:	08007d95 	.word	0x08007d95
 8007d88:	08007d95 	.word	0x08007d95
 8007d8c:	08007e0b 	.word	0x08007e0b
 8007d90:	08007e1f 	.word	0x08007e1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d9a:	f043 0301 	orr.w	r3, r3, #1
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	18d1      	adds	r1, r2, r3
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007db2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007db4:	f7ff ff5c 	bl	8007c70 <prvInsertTimerInActiveList>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d06c      	beq.n	8007e98 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dc4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d061      	beq.n	8007e98 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	441a      	add	r2, r3
 8007ddc:	2300      	movs	r3, #0
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	2300      	movs	r3, #0
 8007de2:	2100      	movs	r1, #0
 8007de4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007de6:	f7ff fe01 	bl	80079ec <xTimerGenericCommand>
 8007dea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d152      	bne.n	8007e98 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	61bb      	str	r3, [r7, #24]
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop
 8007e08:	e7fd      	b.n	8007e06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e10:	f023 0301 	bic.w	r3, r3, #1
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007e1c:	e03d      	b.n	8007e9a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e24:	f043 0301 	orr.w	r3, r3, #1
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10b      	bne.n	8007e56 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	617b      	str	r3, [r7, #20]
}
 8007e50:	bf00      	nop
 8007e52:	bf00      	nop
 8007e54:	e7fd      	b.n	8007e52 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e58:	699a      	ldr	r2, [r3, #24]
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5c:	18d1      	adds	r1, r2, r3
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e64:	f7ff ff04 	bl	8007c70 <prvInsertTimerInActiveList>
					break;
 8007e68:	e017      	b.n	8007e9a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d103      	bne.n	8007e80 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007e78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e7a:	f000 fbe5 	bl	8008648 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e7e:	e00c      	b.n	8007e9a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e86:	f023 0301 	bic.w	r3, r3, #1
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007e92:	e002      	b.n	8007e9a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007e94:	bf00      	nop
 8007e96:	e000      	b.n	8007e9a <prvProcessReceivedCommands+0x1a6>
					break;
 8007e98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e9a:	4b08      	ldr	r3, [pc, #32]	@ (8007ebc <prvProcessReceivedCommands+0x1c8>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	1d39      	adds	r1, r7, #4
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe fbfc 	bl	80066a0 <xQueueReceive>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f47f af26 	bne.w	8007cfc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007eb0:	bf00      	nop
 8007eb2:	bf00      	nop
 8007eb4:	3730      	adds	r7, #48	@ 0x30
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	20001044 	.word	0x20001044

08007ec0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ec6:	e049      	b.n	8007f5c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8007f84 <prvSwitchTimerLists+0xc4>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8007f84 <prvSwitchTimerLists+0xc4>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fe f909 	bl	80060f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ef4:	f003 0304 	and.w	r3, r3, #4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d02f      	beq.n	8007f5c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	4413      	add	r3, r2
 8007f04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d90e      	bls.n	8007f2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8007f84 <prvSwitchTimerLists+0xc4>)
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3304      	adds	r3, #4
 8007f22:	4619      	mov	r1, r3
 8007f24:	4610      	mov	r0, r2
 8007f26:	f7fe f8ae 	bl	8006086 <vListInsert>
 8007f2a:	e017      	b.n	8007f5c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	2300      	movs	r3, #0
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	2100      	movs	r1, #0
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f7ff fd58 	bl	80079ec <xTimerGenericCommand>
 8007f3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10b      	bne.n	8007f5c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	603b      	str	r3, [r7, #0]
}
 8007f56:	bf00      	nop
 8007f58:	bf00      	nop
 8007f5a:	e7fd      	b.n	8007f58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f5c:	4b09      	ldr	r3, [pc, #36]	@ (8007f84 <prvSwitchTimerLists+0xc4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1b0      	bne.n	8007ec8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f66:	4b07      	ldr	r3, [pc, #28]	@ (8007f84 <prvSwitchTimerLists+0xc4>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f6c:	4b06      	ldr	r3, [pc, #24]	@ (8007f88 <prvSwitchTimerLists+0xc8>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a04      	ldr	r2, [pc, #16]	@ (8007f84 <prvSwitchTimerLists+0xc4>)
 8007f72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f74:	4a04      	ldr	r2, [pc, #16]	@ (8007f88 <prvSwitchTimerLists+0xc8>)
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	6013      	str	r3, [r2, #0]
}
 8007f7a:	bf00      	nop
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	2000103c 	.word	0x2000103c
 8007f88:	20001040 	.word	0x20001040

08007f8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f92:	f000 f969 	bl	8008268 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f96:	4b15      	ldr	r3, [pc, #84]	@ (8007fec <prvCheckForValidListAndQueue+0x60>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d120      	bne.n	8007fe0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f9e:	4814      	ldr	r0, [pc, #80]	@ (8007ff0 <prvCheckForValidListAndQueue+0x64>)
 8007fa0:	f7fe f820 	bl	8005fe4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007fa4:	4813      	ldr	r0, [pc, #76]	@ (8007ff4 <prvCheckForValidListAndQueue+0x68>)
 8007fa6:	f7fe f81d 	bl	8005fe4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007faa:	4b13      	ldr	r3, [pc, #76]	@ (8007ff8 <prvCheckForValidListAndQueue+0x6c>)
 8007fac:	4a10      	ldr	r2, [pc, #64]	@ (8007ff0 <prvCheckForValidListAndQueue+0x64>)
 8007fae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007fb0:	4b12      	ldr	r3, [pc, #72]	@ (8007ffc <prvCheckForValidListAndQueue+0x70>)
 8007fb2:	4a10      	ldr	r2, [pc, #64]	@ (8007ff4 <prvCheckForValidListAndQueue+0x68>)
 8007fb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	4b11      	ldr	r3, [pc, #68]	@ (8008000 <prvCheckForValidListAndQueue+0x74>)
 8007fbc:	4a11      	ldr	r2, [pc, #68]	@ (8008004 <prvCheckForValidListAndQueue+0x78>)
 8007fbe:	2110      	movs	r1, #16
 8007fc0:	200a      	movs	r0, #10
 8007fc2:	f7fe f92d 	bl	8006220 <xQueueGenericCreateStatic>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	4a08      	ldr	r2, [pc, #32]	@ (8007fec <prvCheckForValidListAndQueue+0x60>)
 8007fca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007fcc:	4b07      	ldr	r3, [pc, #28]	@ (8007fec <prvCheckForValidListAndQueue+0x60>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d005      	beq.n	8007fe0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007fd4:	4b05      	ldr	r3, [pc, #20]	@ (8007fec <prvCheckForValidListAndQueue+0x60>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	490b      	ldr	r1, [pc, #44]	@ (8008008 <prvCheckForValidListAndQueue+0x7c>)
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fe fd52 	bl	8006a84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fe0:	f000 f974 	bl	80082cc <vPortExitCritical>
}
 8007fe4:	bf00      	nop
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20001044 	.word	0x20001044
 8007ff0:	20001014 	.word	0x20001014
 8007ff4:	20001028 	.word	0x20001028
 8007ff8:	2000103c 	.word	0x2000103c
 8007ffc:	20001040 	.word	0x20001040
 8008000:	200010f0 	.word	0x200010f0
 8008004:	20001050 	.word	0x20001050
 8008008:	0800ba3c 	.word	0x0800ba3c

0800800c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3b04      	subs	r3, #4
 800801c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3b04      	subs	r3, #4
 800802a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f023 0201 	bic.w	r2, r3, #1
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3b04      	subs	r3, #4
 800803a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800803c:	4a0c      	ldr	r2, [pc, #48]	@ (8008070 <pxPortInitialiseStack+0x64>)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	3b14      	subs	r3, #20
 8008046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	3b04      	subs	r3, #4
 8008052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f06f 0202 	mvn.w	r2, #2
 800805a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3b20      	subs	r3, #32
 8008060:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008062:	68fb      	ldr	r3, [r7, #12]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	08008075 	.word	0x08008075

08008074 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800807e:	4b13      	ldr	r3, [pc, #76]	@ (80080cc <prvTaskExitError+0x58>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008086:	d00b      	beq.n	80080a0 <prvTaskExitError+0x2c>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	60fb      	str	r3, [r7, #12]
}
 800809a:	bf00      	nop
 800809c:	bf00      	nop
 800809e:	e7fd      	b.n	800809c <prvTaskExitError+0x28>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	60bb      	str	r3, [r7, #8]
}
 80080b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080b4:	bf00      	nop
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d0fc      	beq.n	80080b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080bc:	bf00      	nop
 80080be:	bf00      	nop
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	2000000c 	.word	0x2000000c

080080d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080d0:	4b07      	ldr	r3, [pc, #28]	@ (80080f0 <pxCurrentTCBConst2>)
 80080d2:	6819      	ldr	r1, [r3, #0]
 80080d4:	6808      	ldr	r0, [r1, #0]
 80080d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080da:	f380 8809 	msr	PSP, r0
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f04f 0000 	mov.w	r0, #0
 80080e6:	f380 8811 	msr	BASEPRI, r0
 80080ea:	4770      	bx	lr
 80080ec:	f3af 8000 	nop.w

080080f0 <pxCurrentTCBConst2>:
 80080f0:	20000b14 	.word	0x20000b14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080f4:	bf00      	nop
 80080f6:	bf00      	nop

080080f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080f8:	4808      	ldr	r0, [pc, #32]	@ (800811c <prvPortStartFirstTask+0x24>)
 80080fa:	6800      	ldr	r0, [r0, #0]
 80080fc:	6800      	ldr	r0, [r0, #0]
 80080fe:	f380 8808 	msr	MSP, r0
 8008102:	f04f 0000 	mov.w	r0, #0
 8008106:	f380 8814 	msr	CONTROL, r0
 800810a:	b662      	cpsie	i
 800810c:	b661      	cpsie	f
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	df00      	svc	0
 8008118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800811a:	bf00      	nop
 800811c:	e000ed08 	.word	0xe000ed08

08008120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008126:	4b47      	ldr	r3, [pc, #284]	@ (8008244 <xPortStartScheduler+0x124>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a47      	ldr	r2, [pc, #284]	@ (8008248 <xPortStartScheduler+0x128>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d10b      	bne.n	8008148 <xPortStartScheduler+0x28>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	613b      	str	r3, [r7, #16]
}
 8008142:	bf00      	nop
 8008144:	bf00      	nop
 8008146:	e7fd      	b.n	8008144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008148:	4b3e      	ldr	r3, [pc, #248]	@ (8008244 <xPortStartScheduler+0x124>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a3f      	ldr	r2, [pc, #252]	@ (800824c <xPortStartScheduler+0x12c>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d10b      	bne.n	800816a <xPortStartScheduler+0x4a>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	60fb      	str	r3, [r7, #12]
}
 8008164:	bf00      	nop
 8008166:	bf00      	nop
 8008168:	e7fd      	b.n	8008166 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800816a:	4b39      	ldr	r3, [pc, #228]	@ (8008250 <xPortStartScheduler+0x130>)
 800816c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	22ff      	movs	r2, #255	@ 0xff
 800817a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008184:	78fb      	ldrb	r3, [r7, #3]
 8008186:	b2db      	uxtb	r3, r3
 8008188:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800818c:	b2da      	uxtb	r2, r3
 800818e:	4b31      	ldr	r3, [pc, #196]	@ (8008254 <xPortStartScheduler+0x134>)
 8008190:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008192:	4b31      	ldr	r3, [pc, #196]	@ (8008258 <xPortStartScheduler+0x138>)
 8008194:	2207      	movs	r2, #7
 8008196:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008198:	e009      	b.n	80081ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800819a:	4b2f      	ldr	r3, [pc, #188]	@ (8008258 <xPortStartScheduler+0x138>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3b01      	subs	r3, #1
 80081a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008258 <xPortStartScheduler+0x138>)
 80081a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081a4:	78fb      	ldrb	r3, [r7, #3]
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	005b      	lsls	r3, r3, #1
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081b6:	2b80      	cmp	r3, #128	@ 0x80
 80081b8:	d0ef      	beq.n	800819a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081ba:	4b27      	ldr	r3, [pc, #156]	@ (8008258 <xPortStartScheduler+0x138>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f1c3 0307 	rsb	r3, r3, #7
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d00b      	beq.n	80081de <xPortStartScheduler+0xbe>
	__asm volatile
 80081c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	60bb      	str	r3, [r7, #8]
}
 80081d8:	bf00      	nop
 80081da:	bf00      	nop
 80081dc:	e7fd      	b.n	80081da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081de:	4b1e      	ldr	r3, [pc, #120]	@ (8008258 <xPortStartScheduler+0x138>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	021b      	lsls	r3, r3, #8
 80081e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008258 <xPortStartScheduler+0x138>)
 80081e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008258 <xPortStartScheduler+0x138>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80081f0:	4a19      	ldr	r2, [pc, #100]	@ (8008258 <xPortStartScheduler+0x138>)
 80081f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081fc:	4b17      	ldr	r3, [pc, #92]	@ (800825c <xPortStartScheduler+0x13c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a16      	ldr	r2, [pc, #88]	@ (800825c <xPortStartScheduler+0x13c>)
 8008202:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008206:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008208:	4b14      	ldr	r3, [pc, #80]	@ (800825c <xPortStartScheduler+0x13c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a13      	ldr	r2, [pc, #76]	@ (800825c <xPortStartScheduler+0x13c>)
 800820e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008212:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008214:	f000 f8da 	bl	80083cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008218:	4b11      	ldr	r3, [pc, #68]	@ (8008260 <xPortStartScheduler+0x140>)
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800821e:	f000 f8f9 	bl	8008414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008222:	4b10      	ldr	r3, [pc, #64]	@ (8008264 <xPortStartScheduler+0x144>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a0f      	ldr	r2, [pc, #60]	@ (8008264 <xPortStartScheduler+0x144>)
 8008228:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800822c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800822e:	f7ff ff63 	bl	80080f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008232:	f7ff f83f 	bl	80072b4 <vTaskSwitchContext>
	prvTaskExitError();
 8008236:	f7ff ff1d 	bl	8008074 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	e000ed00 	.word	0xe000ed00
 8008248:	410fc271 	.word	0x410fc271
 800824c:	410fc270 	.word	0x410fc270
 8008250:	e000e400 	.word	0xe000e400
 8008254:	20001140 	.word	0x20001140
 8008258:	20001144 	.word	0x20001144
 800825c:	e000ed20 	.word	0xe000ed20
 8008260:	2000000c 	.word	0x2000000c
 8008264:	e000ef34 	.word	0xe000ef34

08008268 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	607b      	str	r3, [r7, #4]
}
 8008280:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008282:	4b10      	ldr	r3, [pc, #64]	@ (80082c4 <vPortEnterCritical+0x5c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3301      	adds	r3, #1
 8008288:	4a0e      	ldr	r2, [pc, #56]	@ (80082c4 <vPortEnterCritical+0x5c>)
 800828a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800828c:	4b0d      	ldr	r3, [pc, #52]	@ (80082c4 <vPortEnterCritical+0x5c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d110      	bne.n	80082b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008294:	4b0c      	ldr	r3, [pc, #48]	@ (80082c8 <vPortEnterCritical+0x60>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00b      	beq.n	80082b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	603b      	str	r3, [r7, #0]
}
 80082b0:	bf00      	nop
 80082b2:	bf00      	nop
 80082b4:	e7fd      	b.n	80082b2 <vPortEnterCritical+0x4a>
	}
}
 80082b6:	bf00      	nop
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	2000000c 	.word	0x2000000c
 80082c8:	e000ed04 	.word	0xe000ed04

080082cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082d2:	4b12      	ldr	r3, [pc, #72]	@ (800831c <vPortExitCritical+0x50>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10b      	bne.n	80082f2 <vPortExitCritical+0x26>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	607b      	str	r3, [r7, #4]
}
 80082ec:	bf00      	nop
 80082ee:	bf00      	nop
 80082f0:	e7fd      	b.n	80082ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082f2:	4b0a      	ldr	r3, [pc, #40]	@ (800831c <vPortExitCritical+0x50>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	4a08      	ldr	r2, [pc, #32]	@ (800831c <vPortExitCritical+0x50>)
 80082fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082fc:	4b07      	ldr	r3, [pc, #28]	@ (800831c <vPortExitCritical+0x50>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d105      	bne.n	8008310 <vPortExitCritical+0x44>
 8008304:	2300      	movs	r3, #0
 8008306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	f383 8811 	msr	BASEPRI, r3
}
 800830e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	2000000c 	.word	0x2000000c

08008320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008320:	f3ef 8009 	mrs	r0, PSP
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	4b15      	ldr	r3, [pc, #84]	@ (8008380 <pxCurrentTCBConst>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	f01e 0f10 	tst.w	lr, #16
 8008330:	bf08      	it	eq
 8008332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833a:	6010      	str	r0, [r2, #0]
 800833c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008340:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008344:	f380 8811 	msr	BASEPRI, r0
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f7fe ffb0 	bl	80072b4 <vTaskSwitchContext>
 8008354:	f04f 0000 	mov.w	r0, #0
 8008358:	f380 8811 	msr	BASEPRI, r0
 800835c:	bc09      	pop	{r0, r3}
 800835e:	6819      	ldr	r1, [r3, #0]
 8008360:	6808      	ldr	r0, [r1, #0]
 8008362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008366:	f01e 0f10 	tst.w	lr, #16
 800836a:	bf08      	it	eq
 800836c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008370:	f380 8809 	msr	PSP, r0
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	f3af 8000 	nop.w

08008380 <pxCurrentTCBConst>:
 8008380:	20000b14 	.word	0x20000b14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop

08008388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	607b      	str	r3, [r7, #4]
}
 80083a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083a2:	f7fe fecd 	bl	8007140 <xTaskIncrementTick>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d003      	beq.n	80083b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083ac:	4b06      	ldr	r3, [pc, #24]	@ (80083c8 <xPortSysTickHandler+0x40>)
 80083ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	2300      	movs	r3, #0
 80083b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	f383 8811 	msr	BASEPRI, r3
}
 80083be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	e000ed04 	.word	0xe000ed04

080083cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008400 <vPortSetupTimerInterrupt+0x34>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008404 <vPortSetupTimerInterrupt+0x38>)
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008408 <vPortSetupTimerInterrupt+0x3c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a0a      	ldr	r2, [pc, #40]	@ (800840c <vPortSetupTimerInterrupt+0x40>)
 80083e2:	fba2 2303 	umull	r2, r3, r2, r3
 80083e6:	099b      	lsrs	r3, r3, #6
 80083e8:	4a09      	ldr	r2, [pc, #36]	@ (8008410 <vPortSetupTimerInterrupt+0x44>)
 80083ea:	3b01      	subs	r3, #1
 80083ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083ee:	4b04      	ldr	r3, [pc, #16]	@ (8008400 <vPortSetupTimerInterrupt+0x34>)
 80083f0:	2207      	movs	r2, #7
 80083f2:	601a      	str	r2, [r3, #0]
}
 80083f4:	bf00      	nop
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	e000e010 	.word	0xe000e010
 8008404:	e000e018 	.word	0xe000e018
 8008408:	20000000 	.word	0x20000000
 800840c:	10624dd3 	.word	0x10624dd3
 8008410:	e000e014 	.word	0xe000e014

08008414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008414:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008424 <vPortEnableVFP+0x10>
 8008418:	6801      	ldr	r1, [r0, #0]
 800841a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800841e:	6001      	str	r1, [r0, #0]
 8008420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008422:	bf00      	nop
 8008424:	e000ed88 	.word	0xe000ed88

08008428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800842e:	f3ef 8305 	mrs	r3, IPSR
 8008432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b0f      	cmp	r3, #15
 8008438:	d915      	bls.n	8008466 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800843a:	4a18      	ldr	r2, [pc, #96]	@ (800849c <vPortValidateInterruptPriority+0x74>)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4413      	add	r3, r2
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008444:	4b16      	ldr	r3, [pc, #88]	@ (80084a0 <vPortValidateInterruptPriority+0x78>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	7afa      	ldrb	r2, [r7, #11]
 800844a:	429a      	cmp	r2, r3
 800844c:	d20b      	bcs.n	8008466 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	607b      	str	r3, [r7, #4]
}
 8008460:	bf00      	nop
 8008462:	bf00      	nop
 8008464:	e7fd      	b.n	8008462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008466:	4b0f      	ldr	r3, [pc, #60]	@ (80084a4 <vPortValidateInterruptPriority+0x7c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800846e:	4b0e      	ldr	r3, [pc, #56]	@ (80084a8 <vPortValidateInterruptPriority+0x80>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	429a      	cmp	r2, r3
 8008474:	d90b      	bls.n	800848e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	603b      	str	r3, [r7, #0]
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	e7fd      	b.n	800848a <vPortValidateInterruptPriority+0x62>
	}
 800848e:	bf00      	nop
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	e000e3f0 	.word	0xe000e3f0
 80084a0:	20001140 	.word	0x20001140
 80084a4:	e000ed0c 	.word	0xe000ed0c
 80084a8:	20001144 	.word	0x20001144

080084ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b08a      	sub	sp, #40	@ 0x28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084b4:	2300      	movs	r3, #0
 80084b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084b8:	f7fe fd86 	bl	8006fc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084bc:	4b5c      	ldr	r3, [pc, #368]	@ (8008630 <pvPortMalloc+0x184>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084c4:	f000 f924 	bl	8008710 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084c8:	4b5a      	ldr	r3, [pc, #360]	@ (8008634 <pvPortMalloc+0x188>)
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4013      	ands	r3, r2
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f040 8095 	bne.w	8008600 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01e      	beq.n	800851a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80084dc:	2208      	movs	r2, #8
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4413      	add	r3, r2
 80084e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d015      	beq.n	800851a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f023 0307 	bic.w	r3, r3, #7
 80084f4:	3308      	adds	r3, #8
 80084f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f003 0307 	and.w	r3, r3, #7
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00b      	beq.n	800851a <pvPortMalloc+0x6e>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	617b      	str	r3, [r7, #20]
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop
 8008518:	e7fd      	b.n	8008516 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d06f      	beq.n	8008600 <pvPortMalloc+0x154>
 8008520:	4b45      	ldr	r3, [pc, #276]	@ (8008638 <pvPortMalloc+0x18c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	429a      	cmp	r2, r3
 8008528:	d86a      	bhi.n	8008600 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800852a:	4b44      	ldr	r3, [pc, #272]	@ (800863c <pvPortMalloc+0x190>)
 800852c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800852e:	4b43      	ldr	r3, [pc, #268]	@ (800863c <pvPortMalloc+0x190>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008534:	e004      	b.n	8008540 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008538:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800853a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	429a      	cmp	r2, r3
 8008548:	d903      	bls.n	8008552 <pvPortMalloc+0xa6>
 800854a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1f1      	bne.n	8008536 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008552:	4b37      	ldr	r3, [pc, #220]	@ (8008630 <pvPortMalloc+0x184>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008558:	429a      	cmp	r2, r3
 800855a:	d051      	beq.n	8008600 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2208      	movs	r2, #8
 8008562:	4413      	add	r3, r2
 8008564:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800856e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	1ad2      	subs	r2, r2, r3
 8008576:	2308      	movs	r3, #8
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	429a      	cmp	r2, r3
 800857c:	d920      	bls.n	80085c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800857e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4413      	add	r3, r2
 8008584:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	f003 0307 	and.w	r3, r3, #7
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00b      	beq.n	80085a8 <pvPortMalloc+0xfc>
	__asm volatile
 8008590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	613b      	str	r3, [r7, #16]
}
 80085a2:	bf00      	nop
 80085a4:	bf00      	nop
 80085a6:	e7fd      	b.n	80085a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	1ad2      	subs	r2, r2, r3
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085ba:	69b8      	ldr	r0, [r7, #24]
 80085bc:	f000 f90a 	bl	80087d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008638 <pvPortMalloc+0x18c>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008638 <pvPortMalloc+0x18c>)
 80085cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008638 <pvPortMalloc+0x18c>)
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008640 <pvPortMalloc+0x194>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d203      	bcs.n	80085e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085da:	4b17      	ldr	r3, [pc, #92]	@ (8008638 <pvPortMalloc+0x18c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a18      	ldr	r2, [pc, #96]	@ (8008640 <pvPortMalloc+0x194>)
 80085e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	4b13      	ldr	r3, [pc, #76]	@ (8008634 <pvPortMalloc+0x188>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	431a      	orrs	r2, r3
 80085ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f2:	2200      	movs	r2, #0
 80085f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085f6:	4b13      	ldr	r3, [pc, #76]	@ (8008644 <pvPortMalloc+0x198>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3301      	adds	r3, #1
 80085fc:	4a11      	ldr	r2, [pc, #68]	@ (8008644 <pvPortMalloc+0x198>)
 80085fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008600:	f7fe fcf0 	bl	8006fe4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00b      	beq.n	8008626 <pvPortMalloc+0x17a>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	60fb      	str	r3, [r7, #12]
}
 8008620:	bf00      	nop
 8008622:	bf00      	nop
 8008624:	e7fd      	b.n	8008622 <pvPortMalloc+0x176>
	return pvReturn;
 8008626:	69fb      	ldr	r3, [r7, #28]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3728      	adds	r7, #40	@ 0x28
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	20004d50 	.word	0x20004d50
 8008634:	20004d64 	.word	0x20004d64
 8008638:	20004d54 	.word	0x20004d54
 800863c:	20004d48 	.word	0x20004d48
 8008640:	20004d58 	.word	0x20004d58
 8008644:	20004d5c 	.word	0x20004d5c

08008648 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d04f      	beq.n	80086fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800865a:	2308      	movs	r3, #8
 800865c:	425b      	negs	r3, r3
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	4413      	add	r3, r2
 8008662:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	4b25      	ldr	r3, [pc, #148]	@ (8008704 <vPortFree+0xbc>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4013      	ands	r3, r2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10b      	bne.n	800868e <vPortFree+0x46>
	__asm volatile
 8008676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	60fb      	str	r3, [r7, #12]
}
 8008688:	bf00      	nop
 800868a:	bf00      	nop
 800868c:	e7fd      	b.n	800868a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00b      	beq.n	80086ae <vPortFree+0x66>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	60bb      	str	r3, [r7, #8]
}
 80086a8:	bf00      	nop
 80086aa:	bf00      	nop
 80086ac:	e7fd      	b.n	80086aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	4b14      	ldr	r3, [pc, #80]	@ (8008704 <vPortFree+0xbc>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4013      	ands	r3, r2
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01e      	beq.n	80086fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d11a      	bne.n	80086fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008704 <vPortFree+0xbc>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	43db      	mvns	r3, r3
 80086ce:	401a      	ands	r2, r3
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086d4:	f7fe fc78 	bl	8006fc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008708 <vPortFree+0xc0>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4413      	add	r3, r2
 80086e2:	4a09      	ldr	r2, [pc, #36]	@ (8008708 <vPortFree+0xc0>)
 80086e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086e6:	6938      	ldr	r0, [r7, #16]
 80086e8:	f000 f874 	bl	80087d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086ec:	4b07      	ldr	r3, [pc, #28]	@ (800870c <vPortFree+0xc4>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3301      	adds	r3, #1
 80086f2:	4a06      	ldr	r2, [pc, #24]	@ (800870c <vPortFree+0xc4>)
 80086f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086f6:	f7fe fc75 	bl	8006fe4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086fa:	bf00      	nop
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20004d64 	.word	0x20004d64
 8008708:	20004d54 	.word	0x20004d54
 800870c:	20004d60 	.word	0x20004d60

08008710 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008716:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800871a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800871c:	4b27      	ldr	r3, [pc, #156]	@ (80087bc <prvHeapInit+0xac>)
 800871e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f003 0307 	and.w	r3, r3, #7
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00c      	beq.n	8008744 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3307      	adds	r3, #7
 800872e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f023 0307 	bic.w	r3, r3, #7
 8008736:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	4a1f      	ldr	r2, [pc, #124]	@ (80087bc <prvHeapInit+0xac>)
 8008740:	4413      	add	r3, r2
 8008742:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008748:	4a1d      	ldr	r2, [pc, #116]	@ (80087c0 <prvHeapInit+0xb0>)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800874e:	4b1c      	ldr	r3, [pc, #112]	@ (80087c0 <prvHeapInit+0xb0>)
 8008750:	2200      	movs	r2, #0
 8008752:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	4413      	add	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800875c:	2208      	movs	r2, #8
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	1a9b      	subs	r3, r3, r2
 8008762:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f023 0307 	bic.w	r3, r3, #7
 800876a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4a15      	ldr	r2, [pc, #84]	@ (80087c4 <prvHeapInit+0xb4>)
 8008770:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008772:	4b14      	ldr	r3, [pc, #80]	@ (80087c4 <prvHeapInit+0xb4>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2200      	movs	r2, #0
 8008778:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800877a:	4b12      	ldr	r3, [pc, #72]	@ (80087c4 <prvHeapInit+0xb4>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2200      	movs	r2, #0
 8008780:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	1ad2      	subs	r2, r2, r3
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008790:	4b0c      	ldr	r3, [pc, #48]	@ (80087c4 <prvHeapInit+0xb4>)
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	4a0a      	ldr	r2, [pc, #40]	@ (80087c8 <prvHeapInit+0xb8>)
 800879e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4a09      	ldr	r2, [pc, #36]	@ (80087cc <prvHeapInit+0xbc>)
 80087a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087a8:	4b09      	ldr	r3, [pc, #36]	@ (80087d0 <prvHeapInit+0xc0>)
 80087aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80087ae:	601a      	str	r2, [r3, #0]
}
 80087b0:	bf00      	nop
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	20001148 	.word	0x20001148
 80087c0:	20004d48 	.word	0x20004d48
 80087c4:	20004d50 	.word	0x20004d50
 80087c8:	20004d58 	.word	0x20004d58
 80087cc:	20004d54 	.word	0x20004d54
 80087d0:	20004d64 	.word	0x20004d64

080087d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087dc:	4b28      	ldr	r3, [pc, #160]	@ (8008880 <prvInsertBlockIntoFreeList+0xac>)
 80087de:	60fb      	str	r3, [r7, #12]
 80087e0:	e002      	b.n	80087e8 <prvInsertBlockIntoFreeList+0x14>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	60fb      	str	r3, [r7, #12]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d8f7      	bhi.n	80087e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	4413      	add	r3, r2
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	429a      	cmp	r2, r3
 8008802:	d108      	bne.n	8008816 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	441a      	add	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	441a      	add	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	429a      	cmp	r2, r3
 8008828:	d118      	bne.n	800885c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	4b15      	ldr	r3, [pc, #84]	@ (8008884 <prvInsertBlockIntoFreeList+0xb0>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d00d      	beq.n	8008852 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	441a      	add	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	601a      	str	r2, [r3, #0]
 8008850:	e008      	b.n	8008864 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008852:	4b0c      	ldr	r3, [pc, #48]	@ (8008884 <prvInsertBlockIntoFreeList+0xb0>)
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	e003      	b.n	8008864 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	429a      	cmp	r2, r3
 800886a:	d002      	beq.n	8008872 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008872:	bf00      	nop
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	20004d48 	.word	0x20004d48
 8008884:	20004d50 	.word	0x20004d50

08008888 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800888e:	2300      	movs	r3, #0
 8008890:	71fb      	strb	r3, [r7, #7]
 8008892:	e026      	b.n	80088e2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	3b50      	subs	r3, #80	@ 0x50
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2100      	movs	r1, #0
 800889c:	4618      	mov	r0, r3
 800889e:	f000 f82b 	bl	80088f8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80088a2:	2100      	movs	r1, #0
 80088a4:	2000      	movs	r0, #0
 80088a6:	f000 f827 	bl	80088f8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80088aa:	2100      	movs	r1, #0
 80088ac:	2010      	movs	r0, #16
 80088ae:	f000 f823 	bl	80088f8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80088b2:	2300      	movs	r3, #0
 80088b4:	71bb      	strb	r3, [r7, #6]
 80088b6:	e00d      	b.n	80088d4 <OLED_Refresh_Gram+0x4c>
 80088b8:	79ba      	ldrb	r2, [r7, #6]
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	490d      	ldr	r1, [pc, #52]	@ (80088f4 <OLED_Refresh_Gram+0x6c>)
 80088be:	00d2      	lsls	r2, r2, #3
 80088c0:	440a      	add	r2, r1
 80088c2:	4413      	add	r3, r2
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2101      	movs	r1, #1
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 f815 	bl	80088f8 <OLED_WR_Byte>
 80088ce:	79bb      	ldrb	r3, [r7, #6]
 80088d0:	3301      	adds	r3, #1
 80088d2:	71bb      	strb	r3, [r7, #6]
 80088d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	daed      	bge.n	80088b8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80088dc:	79fb      	ldrb	r3, [r7, #7]
 80088de:	3301      	adds	r3, #1
 80088e0:	71fb      	strb	r3, [r7, #7]
 80088e2:	79fb      	ldrb	r3, [r7, #7]
 80088e4:	2b07      	cmp	r3, #7
 80088e6:	d9d5      	bls.n	8008894 <OLED_Refresh_Gram+0xc>
	}   
}
 80088e8:	bf00      	nop
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20004d68 	.word	0x20004d68

080088f8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4603      	mov	r3, r0
 8008900:	460a      	mov	r2, r1
 8008902:	71fb      	strb	r3, [r7, #7]
 8008904:	4613      	mov	r3, r2
 8008906:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8008908:	79bb      	ldrb	r3, [r7, #6]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d006      	beq.n	800891c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800890e:	2201      	movs	r2, #1
 8008910:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008914:	481c      	ldr	r0, [pc, #112]	@ (8008988 <OLED_WR_Byte+0x90>)
 8008916:	f7fa f80b 	bl	8002930 <HAL_GPIO_WritePin>
 800891a:	e005      	b.n	8008928 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800891c:	2200      	movs	r2, #0
 800891e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008922:	4819      	ldr	r0, [pc, #100]	@ (8008988 <OLED_WR_Byte+0x90>)
 8008924:	f7fa f804 	bl	8002930 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8008928:	2300      	movs	r3, #0
 800892a:	73fb      	strb	r3, [r7, #15]
 800892c:	e01e      	b.n	800896c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800892e:	2200      	movs	r2, #0
 8008930:	2120      	movs	r1, #32
 8008932:	4815      	ldr	r0, [pc, #84]	@ (8008988 <OLED_WR_Byte+0x90>)
 8008934:	f7f9 fffc 	bl	8002930 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8008938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800893c:	2b00      	cmp	r3, #0
 800893e:	da05      	bge.n	800894c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8008940:	2201      	movs	r2, #1
 8008942:	2140      	movs	r1, #64	@ 0x40
 8008944:	4810      	ldr	r0, [pc, #64]	@ (8008988 <OLED_WR_Byte+0x90>)
 8008946:	f7f9 fff3 	bl	8002930 <HAL_GPIO_WritePin>
 800894a:	e004      	b.n	8008956 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800894c:	2200      	movs	r2, #0
 800894e:	2140      	movs	r1, #64	@ 0x40
 8008950:	480d      	ldr	r0, [pc, #52]	@ (8008988 <OLED_WR_Byte+0x90>)
 8008952:	f7f9 ffed 	bl	8002930 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8008956:	2201      	movs	r2, #1
 8008958:	2120      	movs	r1, #32
 800895a:	480b      	ldr	r0, [pc, #44]	@ (8008988 <OLED_WR_Byte+0x90>)
 800895c:	f7f9 ffe8 	bl	8002930 <HAL_GPIO_WritePin>
		dat<<=1;   
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	3301      	adds	r3, #1
 800896a:	73fb      	strb	r3, [r7, #15]
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	2b07      	cmp	r3, #7
 8008970:	d9dd      	bls.n	800892e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8008972:	2201      	movs	r2, #1
 8008974:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008978:	4803      	ldr	r0, [pc, #12]	@ (8008988 <OLED_WR_Byte+0x90>)
 800897a:	f7f9 ffd9 	bl	8002930 <HAL_GPIO_WritePin>
} 
 800897e:	bf00      	nop
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	40021000 	.word	0x40021000

0800898c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8008992:	2300      	movs	r3, #0
 8008994:	71fb      	strb	r3, [r7, #7]
 8008996:	e014      	b.n	80089c2 <OLED_Clear+0x36>
 8008998:	2300      	movs	r3, #0
 800899a:	71bb      	strb	r3, [r7, #6]
 800899c:	e00a      	b.n	80089b4 <OLED_Clear+0x28>
 800899e:	79ba      	ldrb	r2, [r7, #6]
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	490c      	ldr	r1, [pc, #48]	@ (80089d4 <OLED_Clear+0x48>)
 80089a4:	00d2      	lsls	r2, r2, #3
 80089a6:	440a      	add	r2, r1
 80089a8:	4413      	add	r3, r2
 80089aa:	2200      	movs	r2, #0
 80089ac:	701a      	strb	r2, [r3, #0]
 80089ae:	79bb      	ldrb	r3, [r7, #6]
 80089b0:	3301      	adds	r3, #1
 80089b2:	71bb      	strb	r3, [r7, #6]
 80089b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	daf0      	bge.n	800899e <OLED_Clear+0x12>
 80089bc:	79fb      	ldrb	r3, [r7, #7]
 80089be:	3301      	adds	r3, #1
 80089c0:	71fb      	strb	r3, [r7, #7]
 80089c2:	79fb      	ldrb	r3, [r7, #7]
 80089c4:	2b07      	cmp	r3, #7
 80089c6:	d9e7      	bls.n	8008998 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80089c8:	f7ff ff5e 	bl	8008888 <OLED_Refresh_Gram>
}
 80089cc:	bf00      	nop
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20004d68 	.word	0x20004d68

080089d8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	71fb      	strb	r3, [r7, #7]
 80089e2:	460b      	mov	r3, r1
 80089e4:	71bb      	strb	r3, [r7, #6]
 80089e6:	4613      	mov	r3, r2
 80089e8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80089ea:	2300      	movs	r3, #0
 80089ec:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80089ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	db41      	blt.n	8008a7a <OLED_DrawPoint+0xa2>
 80089f6:	79bb      	ldrb	r3, [r7, #6]
 80089f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80089fa:	d83e      	bhi.n	8008a7a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80089fc:	79bb      	ldrb	r3, [r7, #6]
 80089fe:	08db      	lsrs	r3, r3, #3
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	f1c3 0307 	rsb	r3, r3, #7
 8008a06:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8008a08:	79bb      	ldrb	r3, [r7, #6]
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8008a10:	7b7b      	ldrb	r3, [r7, #13]
 8008a12:	f1c3 0307 	rsb	r3, r3, #7
 8008a16:	2201      	movs	r2, #1
 8008a18:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8008a1e:	797b      	ldrb	r3, [r7, #5]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d012      	beq.n	8008a4a <OLED_DrawPoint+0x72>
 8008a24:	79fa      	ldrb	r2, [r7, #7]
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
 8008a28:	4917      	ldr	r1, [pc, #92]	@ (8008a88 <OLED_DrawPoint+0xb0>)
 8008a2a:	00d2      	lsls	r2, r2, #3
 8008a2c:	440a      	add	r2, r1
 8008a2e:	4413      	add	r3, r2
 8008a30:	7818      	ldrb	r0, [r3, #0]
 8008a32:	79fa      	ldrb	r2, [r7, #7]
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
 8008a36:	7bf9      	ldrb	r1, [r7, #15]
 8008a38:	4301      	orrs	r1, r0
 8008a3a:	b2c8      	uxtb	r0, r1
 8008a3c:	4912      	ldr	r1, [pc, #72]	@ (8008a88 <OLED_DrawPoint+0xb0>)
 8008a3e:	00d2      	lsls	r2, r2, #3
 8008a40:	440a      	add	r2, r1
 8008a42:	4413      	add	r3, r2
 8008a44:	4602      	mov	r2, r0
 8008a46:	701a      	strb	r2, [r3, #0]
 8008a48:	e018      	b.n	8008a7c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8008a4a:	79fa      	ldrb	r2, [r7, #7]
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	490e      	ldr	r1, [pc, #56]	@ (8008a88 <OLED_DrawPoint+0xb0>)
 8008a50:	00d2      	lsls	r2, r2, #3
 8008a52:	440a      	add	r2, r1
 8008a54:	4413      	add	r3, r2
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	b25a      	sxtb	r2, r3
 8008a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a5e:	43db      	mvns	r3, r3
 8008a60:	b25b      	sxtb	r3, r3
 8008a62:	4013      	ands	r3, r2
 8008a64:	b259      	sxtb	r1, r3
 8008a66:	79fa      	ldrb	r2, [r7, #7]
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	b2c8      	uxtb	r0, r1
 8008a6c:	4906      	ldr	r1, [pc, #24]	@ (8008a88 <OLED_DrawPoint+0xb0>)
 8008a6e:	00d2      	lsls	r2, r2, #3
 8008a70:	440a      	add	r2, r1
 8008a72:	4413      	add	r3, r2
 8008a74:	4602      	mov	r2, r0
 8008a76:	701a      	strb	r2, [r3, #0]
 8008a78:	e000      	b.n	8008a7c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8008a7a:	bf00      	nop
}
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	20004d68 	.word	0x20004d68

08008a8c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8008a8c:	b590      	push	{r4, r7, lr}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	4604      	mov	r4, r0
 8008a94:	4608      	mov	r0, r1
 8008a96:	4611      	mov	r1, r2
 8008a98:	461a      	mov	r2, r3
 8008a9a:	4623      	mov	r3, r4
 8008a9c:	71fb      	strb	r3, [r7, #7]
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	71bb      	strb	r3, [r7, #6]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	717b      	strb	r3, [r7, #5]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8008aaa:	79bb      	ldrb	r3, [r7, #6]
 8008aac:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8008aae:	797b      	ldrb	r3, [r7, #5]
 8008ab0:	3b20      	subs	r3, #32
 8008ab2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	73bb      	strb	r3, [r7, #14]
 8008ab8:	e04d      	b.n	8008b56 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8008aba:	793b      	ldrb	r3, [r7, #4]
 8008abc:	2b0c      	cmp	r3, #12
 8008abe:	d10b      	bne.n	8008ad8 <OLED_ShowChar+0x4c>
 8008ac0:	797a      	ldrb	r2, [r7, #5]
 8008ac2:	7bb9      	ldrb	r1, [r7, #14]
 8008ac4:	4828      	ldr	r0, [pc, #160]	@ (8008b68 <OLED_ShowChar+0xdc>)
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	4413      	add	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	4403      	add	r3, r0
 8008ad0:	440b      	add	r3, r1
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	73fb      	strb	r3, [r7, #15]
 8008ad6:	e007      	b.n	8008ae8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8008ad8:	797a      	ldrb	r2, [r7, #5]
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	4923      	ldr	r1, [pc, #140]	@ (8008b6c <OLED_ShowChar+0xe0>)
 8008ade:	0112      	lsls	r2, r2, #4
 8008ae0:	440a      	add	r2, r1
 8008ae2:	4413      	add	r3, r2
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8008ae8:	2300      	movs	r3, #0
 8008aea:	737b      	strb	r3, [r7, #13]
 8008aec:	e02d      	b.n	8008b4a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8008aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	da07      	bge.n	8008b06 <OLED_ShowChar+0x7a>
 8008af6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008afa:	79b9      	ldrb	r1, [r7, #6]
 8008afc:	79fb      	ldrb	r3, [r7, #7]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7ff ff6a 	bl	80089d8 <OLED_DrawPoint>
 8008b04:	e00c      	b.n	8008b20 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8008b06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	bf0c      	ite	eq
 8008b0e:	2301      	moveq	r3, #1
 8008b10:	2300      	movne	r3, #0
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	461a      	mov	r2, r3
 8008b16:	79b9      	ldrb	r1, [r7, #6]
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7ff ff5c 	bl	80089d8 <OLED_DrawPoint>
			temp<<=1;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
 8008b22:	005b      	lsls	r3, r3, #1
 8008b24:	73fb      	strb	r3, [r7, #15]
			y++;
 8008b26:	79bb      	ldrb	r3, [r7, #6]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8008b2c:	79ba      	ldrb	r2, [r7, #6]
 8008b2e:	7b3b      	ldrb	r3, [r7, #12]
 8008b30:	1ad2      	subs	r2, r2, r3
 8008b32:	793b      	ldrb	r3, [r7, #4]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d105      	bne.n	8008b44 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8008b38:	7b3b      	ldrb	r3, [r7, #12]
 8008b3a:	71bb      	strb	r3, [r7, #6]
				x++;
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	71fb      	strb	r3, [r7, #7]
				break;
 8008b42:	e005      	b.n	8008b50 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8008b44:	7b7b      	ldrb	r3, [r7, #13]
 8008b46:	3301      	adds	r3, #1
 8008b48:	737b      	strb	r3, [r7, #13]
 8008b4a:	7b7b      	ldrb	r3, [r7, #13]
 8008b4c:	2b07      	cmp	r3, #7
 8008b4e:	d9ce      	bls.n	8008aee <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	3301      	adds	r3, #1
 8008b54:	73bb      	strb	r3, [r7, #14]
 8008b56:	7bba      	ldrb	r2, [r7, #14]
 8008b58:	793b      	ldrb	r3, [r7, #4]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d3ad      	bcc.n	8008aba <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8008b5e:	bf00      	nop
 8008b60:	bf00      	nop
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd90      	pop	{r4, r7, pc}
 8008b68:	0800baec 	.word	0x0800baec
 8008b6c:	0800bf60 	.word	0x0800bf60

08008b70 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af02      	add	r7, sp, #8
 8008b76:	4603      	mov	r3, r0
 8008b78:	603a      	str	r2, [r7, #0]
 8008b7a:	71fb      	strb	r3, [r7, #7]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8008b80:	e01f      	b.n	8008bc2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8008b82:	79fb      	ldrb	r3, [r7, #7]
 8008b84:	2b7a      	cmp	r3, #122	@ 0x7a
 8008b86:	d904      	bls.n	8008b92 <OLED_ShowString+0x22>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	71fb      	strb	r3, [r7, #7]
 8008b8c:	79bb      	ldrb	r3, [r7, #6]
 8008b8e:	3310      	adds	r3, #16
 8008b90:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8008b92:	79bb      	ldrb	r3, [r7, #6]
 8008b94:	2b3a      	cmp	r3, #58	@ 0x3a
 8008b96:	d905      	bls.n	8008ba4 <OLED_ShowString+0x34>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	71fb      	strb	r3, [r7, #7]
 8008b9c:	79fb      	ldrb	r3, [r7, #7]
 8008b9e:	71bb      	strb	r3, [r7, #6]
 8008ba0:	f7ff fef4 	bl	800898c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	781a      	ldrb	r2, [r3, #0]
 8008ba8:	79b9      	ldrb	r1, [r7, #6]
 8008baa:	79f8      	ldrb	r0, [r7, #7]
 8008bac:	2301      	movs	r3, #1
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	230c      	movs	r3, #12
 8008bb2:	f7ff ff6b 	bl	8008a8c <OLED_ShowChar>
        x+=8;
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
 8008bb8:	3308      	adds	r3, #8
 8008bba:	71fb      	strb	r3, [r7, #7]
        p++;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1db      	bne.n	8008b82 <OLED_ShowString+0x12>
    }  
}	 
 8008bca:	bf00      	nop
 8008bcc:	bf00      	nop
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <OLED_Init>:

void OLED_Init(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8008bd8:	f7f9 fec4 	bl	8002964 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8008bdc:	4b41      	ldr	r3, [pc, #260]	@ (8008ce4 <OLED_Init+0x110>)
 8008bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008be0:	4a40      	ldr	r2, [pc, #256]	@ (8008ce4 <OLED_Init+0x110>)
 8008be2:	f023 0301 	bic.w	r3, r3, #1
 8008be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008be8:	4b3e      	ldr	r3, [pc, #248]	@ (8008ce4 <OLED_Init+0x110>)
 8008bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bec:	4a3d      	ldr	r2, [pc, #244]	@ (8008ce4 <OLED_Init+0x110>)
 8008bee:	f023 0304 	bic.w	r3, r3, #4
 8008bf2:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8008bf4:	f7f9 feca 	bl	800298c <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2180      	movs	r1, #128	@ 0x80
 8008bfc:	483a      	ldr	r0, [pc, #232]	@ (8008ce8 <OLED_Init+0x114>)
 8008bfe:	f7f9 fe97 	bl	8002930 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8008c02:	2064      	movs	r0, #100	@ 0x64
 8008c04:	f7f9 fb30 	bl	8002268 <HAL_Delay>
	OLED_RST_Set();
 8008c08:	2201      	movs	r2, #1
 8008c0a:	2180      	movs	r1, #128	@ 0x80
 8008c0c:	4836      	ldr	r0, [pc, #216]	@ (8008ce8 <OLED_Init+0x114>)
 8008c0e:	f7f9 fe8f 	bl	8002930 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8008c12:	2100      	movs	r1, #0
 8008c14:	20ae      	movs	r0, #174	@ 0xae
 8008c16:	f7ff fe6f 	bl	80088f8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	20d5      	movs	r0, #213	@ 0xd5
 8008c1e:	f7ff fe6b 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8008c22:	2100      	movs	r1, #0
 8008c24:	2050      	movs	r0, #80	@ 0x50
 8008c26:	f7ff fe67 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	20a8      	movs	r0, #168	@ 0xa8
 8008c2e:	f7ff fe63 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8008c32:	2100      	movs	r1, #0
 8008c34:	203f      	movs	r0, #63	@ 0x3f
 8008c36:	f7ff fe5f 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	20d3      	movs	r0, #211	@ 0xd3
 8008c3e:	f7ff fe5b 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8008c42:	2100      	movs	r1, #0
 8008c44:	2000      	movs	r0, #0
 8008c46:	f7ff fe57 	bl	80088f8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	2040      	movs	r0, #64	@ 0x40
 8008c4e:	f7ff fe53 	bl	80088f8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8008c52:	2100      	movs	r1, #0
 8008c54:	208d      	movs	r0, #141	@ 0x8d
 8008c56:	f7ff fe4f 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	2014      	movs	r0, #20
 8008c5e:	f7ff fe4b 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8008c62:	2100      	movs	r1, #0
 8008c64:	2020      	movs	r0, #32
 8008c66:	f7ff fe47 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	2002      	movs	r0, #2
 8008c6e:	f7ff fe43 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8008c72:	2100      	movs	r1, #0
 8008c74:	20a1      	movs	r0, #161	@ 0xa1
 8008c76:	f7ff fe3f 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	20c0      	movs	r0, #192	@ 0xc0
 8008c7e:	f7ff fe3b 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8008c82:	2100      	movs	r1, #0
 8008c84:	20da      	movs	r0, #218	@ 0xda
 8008c86:	f7ff fe37 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	2012      	movs	r0, #18
 8008c8e:	f7ff fe33 	bl	80088f8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8008c92:	2100      	movs	r1, #0
 8008c94:	2081      	movs	r0, #129	@ 0x81
 8008c96:	f7ff fe2f 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	20ef      	movs	r0, #239	@ 0xef
 8008c9e:	f7ff fe2b 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	20d9      	movs	r0, #217	@ 0xd9
 8008ca6:	f7ff fe27 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8008caa:	2100      	movs	r1, #0
 8008cac:	20f1      	movs	r0, #241	@ 0xf1
 8008cae:	f7ff fe23 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	20db      	movs	r0, #219	@ 0xdb
 8008cb6:	f7ff fe1f 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8008cba:	2100      	movs	r1, #0
 8008cbc:	2030      	movs	r0, #48	@ 0x30
 8008cbe:	f7ff fe1b 	bl	80088f8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	20a4      	movs	r0, #164	@ 0xa4
 8008cc6:	f7ff fe17 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8008cca:	2100      	movs	r1, #0
 8008ccc:	20a6      	movs	r0, #166	@ 0xa6
 8008cce:	f7ff fe13 	bl	80088f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	20af      	movs	r0, #175	@ 0xaf
 8008cd6:	f7ff fe0f 	bl	80088f8 <OLED_WR_Byte>
	OLED_Clear(); 
 8008cda:	f7ff fe57 	bl	800898c <OLED_Clear>
 8008cde:	bf00      	nop
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	40023800 	.word	0x40023800
 8008ce8:	40021000 	.word	0x40021000

08008cec <__cvt>:
 8008cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf0:	ec57 6b10 	vmov	r6, r7, d0
 8008cf4:	2f00      	cmp	r7, #0
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	bfbb      	ittet	lt
 8008cfe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008d02:	461f      	movlt	r7, r3
 8008d04:	2300      	movge	r3, #0
 8008d06:	232d      	movlt	r3, #45	@ 0x2d
 8008d08:	700b      	strb	r3, [r1, #0]
 8008d0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d0c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008d10:	4691      	mov	r9, r2
 8008d12:	f023 0820 	bic.w	r8, r3, #32
 8008d16:	bfbc      	itt	lt
 8008d18:	4632      	movlt	r2, r6
 8008d1a:	4616      	movlt	r6, r2
 8008d1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d20:	d005      	beq.n	8008d2e <__cvt+0x42>
 8008d22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008d26:	d100      	bne.n	8008d2a <__cvt+0x3e>
 8008d28:	3401      	adds	r4, #1
 8008d2a:	2102      	movs	r1, #2
 8008d2c:	e000      	b.n	8008d30 <__cvt+0x44>
 8008d2e:	2103      	movs	r1, #3
 8008d30:	ab03      	add	r3, sp, #12
 8008d32:	9301      	str	r3, [sp, #4]
 8008d34:	ab02      	add	r3, sp, #8
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	ec47 6b10 	vmov	d0, r6, r7
 8008d3c:	4653      	mov	r3, sl
 8008d3e:	4622      	mov	r2, r4
 8008d40:	f000 fe6a 	bl	8009a18 <_dtoa_r>
 8008d44:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008d48:	4605      	mov	r5, r0
 8008d4a:	d119      	bne.n	8008d80 <__cvt+0x94>
 8008d4c:	f019 0f01 	tst.w	r9, #1
 8008d50:	d00e      	beq.n	8008d70 <__cvt+0x84>
 8008d52:	eb00 0904 	add.w	r9, r0, r4
 8008d56:	2200      	movs	r2, #0
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	4639      	mov	r1, r7
 8008d5e:	f7f7 feb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d62:	b108      	cbz	r0, 8008d68 <__cvt+0x7c>
 8008d64:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d68:	2230      	movs	r2, #48	@ 0x30
 8008d6a:	9b03      	ldr	r3, [sp, #12]
 8008d6c:	454b      	cmp	r3, r9
 8008d6e:	d31e      	bcc.n	8008dae <__cvt+0xc2>
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d74:	1b5b      	subs	r3, r3, r5
 8008d76:	4628      	mov	r0, r5
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	b004      	add	sp, #16
 8008d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d84:	eb00 0904 	add.w	r9, r0, r4
 8008d88:	d1e5      	bne.n	8008d56 <__cvt+0x6a>
 8008d8a:	7803      	ldrb	r3, [r0, #0]
 8008d8c:	2b30      	cmp	r3, #48	@ 0x30
 8008d8e:	d10a      	bne.n	8008da6 <__cvt+0xba>
 8008d90:	2200      	movs	r2, #0
 8008d92:	2300      	movs	r3, #0
 8008d94:	4630      	mov	r0, r6
 8008d96:	4639      	mov	r1, r7
 8008d98:	f7f7 fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d9c:	b918      	cbnz	r0, 8008da6 <__cvt+0xba>
 8008d9e:	f1c4 0401 	rsb	r4, r4, #1
 8008da2:	f8ca 4000 	str.w	r4, [sl]
 8008da6:	f8da 3000 	ldr.w	r3, [sl]
 8008daa:	4499      	add	r9, r3
 8008dac:	e7d3      	b.n	8008d56 <__cvt+0x6a>
 8008dae:	1c59      	adds	r1, r3, #1
 8008db0:	9103      	str	r1, [sp, #12]
 8008db2:	701a      	strb	r2, [r3, #0]
 8008db4:	e7d9      	b.n	8008d6a <__cvt+0x7e>

08008db6 <__exponent>:
 8008db6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008db8:	2900      	cmp	r1, #0
 8008dba:	bfba      	itte	lt
 8008dbc:	4249      	neglt	r1, r1
 8008dbe:	232d      	movlt	r3, #45	@ 0x2d
 8008dc0:	232b      	movge	r3, #43	@ 0x2b
 8008dc2:	2909      	cmp	r1, #9
 8008dc4:	7002      	strb	r2, [r0, #0]
 8008dc6:	7043      	strb	r3, [r0, #1]
 8008dc8:	dd29      	ble.n	8008e1e <__exponent+0x68>
 8008dca:	f10d 0307 	add.w	r3, sp, #7
 8008dce:	461d      	mov	r5, r3
 8008dd0:	270a      	movs	r7, #10
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	fbb1 f6f7 	udiv	r6, r1, r7
 8008dd8:	fb07 1416 	mls	r4, r7, r6, r1
 8008ddc:	3430      	adds	r4, #48	@ 0x30
 8008dde:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008de2:	460c      	mov	r4, r1
 8008de4:	2c63      	cmp	r4, #99	@ 0x63
 8008de6:	f103 33ff 	add.w	r3, r3, #4294967295
 8008dea:	4631      	mov	r1, r6
 8008dec:	dcf1      	bgt.n	8008dd2 <__exponent+0x1c>
 8008dee:	3130      	adds	r1, #48	@ 0x30
 8008df0:	1e94      	subs	r4, r2, #2
 8008df2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008df6:	1c41      	adds	r1, r0, #1
 8008df8:	4623      	mov	r3, r4
 8008dfa:	42ab      	cmp	r3, r5
 8008dfc:	d30a      	bcc.n	8008e14 <__exponent+0x5e>
 8008dfe:	f10d 0309 	add.w	r3, sp, #9
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	42ac      	cmp	r4, r5
 8008e06:	bf88      	it	hi
 8008e08:	2300      	movhi	r3, #0
 8008e0a:	3302      	adds	r3, #2
 8008e0c:	4403      	add	r3, r0
 8008e0e:	1a18      	subs	r0, r3, r0
 8008e10:	b003      	add	sp, #12
 8008e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e14:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008e18:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008e1c:	e7ed      	b.n	8008dfa <__exponent+0x44>
 8008e1e:	2330      	movs	r3, #48	@ 0x30
 8008e20:	3130      	adds	r1, #48	@ 0x30
 8008e22:	7083      	strb	r3, [r0, #2]
 8008e24:	70c1      	strb	r1, [r0, #3]
 8008e26:	1d03      	adds	r3, r0, #4
 8008e28:	e7f1      	b.n	8008e0e <__exponent+0x58>
	...

08008e2c <_printf_float>:
 8008e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e30:	b08d      	sub	sp, #52	@ 0x34
 8008e32:	460c      	mov	r4, r1
 8008e34:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008e38:	4616      	mov	r6, r2
 8008e3a:	461f      	mov	r7, r3
 8008e3c:	4605      	mov	r5, r0
 8008e3e:	f000 fcdb 	bl	80097f8 <_localeconv_r>
 8008e42:	6803      	ldr	r3, [r0, #0]
 8008e44:	9304      	str	r3, [sp, #16]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7f7 fa12 	bl	8000270 <strlen>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e50:	f8d8 3000 	ldr.w	r3, [r8]
 8008e54:	9005      	str	r0, [sp, #20]
 8008e56:	3307      	adds	r3, #7
 8008e58:	f023 0307 	bic.w	r3, r3, #7
 8008e5c:	f103 0208 	add.w	r2, r3, #8
 8008e60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008e64:	f8d4 b000 	ldr.w	fp, [r4]
 8008e68:	f8c8 2000 	str.w	r2, [r8]
 8008e6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008e74:	9307      	str	r3, [sp, #28]
 8008e76:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008e7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e82:	4b9c      	ldr	r3, [pc, #624]	@ (80090f4 <_printf_float+0x2c8>)
 8008e84:	f04f 32ff 	mov.w	r2, #4294967295
 8008e88:	f7f7 fe50 	bl	8000b2c <__aeabi_dcmpun>
 8008e8c:	bb70      	cbnz	r0, 8008eec <_printf_float+0xc0>
 8008e8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e92:	4b98      	ldr	r3, [pc, #608]	@ (80090f4 <_printf_float+0x2c8>)
 8008e94:	f04f 32ff 	mov.w	r2, #4294967295
 8008e98:	f7f7 fe2a 	bl	8000af0 <__aeabi_dcmple>
 8008e9c:	bb30      	cbnz	r0, 8008eec <_printf_float+0xc0>
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	f7f7 fe19 	bl	8000adc <__aeabi_dcmplt>
 8008eaa:	b110      	cbz	r0, 8008eb2 <_printf_float+0x86>
 8008eac:	232d      	movs	r3, #45	@ 0x2d
 8008eae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008eb2:	4a91      	ldr	r2, [pc, #580]	@ (80090f8 <_printf_float+0x2cc>)
 8008eb4:	4b91      	ldr	r3, [pc, #580]	@ (80090fc <_printf_float+0x2d0>)
 8008eb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008eba:	bf94      	ite	ls
 8008ebc:	4690      	movls	r8, r2
 8008ebe:	4698      	movhi	r8, r3
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	6123      	str	r3, [r4, #16]
 8008ec4:	f02b 0304 	bic.w	r3, fp, #4
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	f04f 0900 	mov.w	r9, #0
 8008ece:	9700      	str	r7, [sp, #0]
 8008ed0:	4633      	mov	r3, r6
 8008ed2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	f000 f9d2 	bl	8009280 <_printf_common>
 8008edc:	3001      	adds	r0, #1
 8008ede:	f040 808d 	bne.w	8008ffc <_printf_float+0x1d0>
 8008ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee6:	b00d      	add	sp, #52	@ 0x34
 8008ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eec:	4642      	mov	r2, r8
 8008eee:	464b      	mov	r3, r9
 8008ef0:	4640      	mov	r0, r8
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	f7f7 fe1a 	bl	8000b2c <__aeabi_dcmpun>
 8008ef8:	b140      	cbz	r0, 8008f0c <_printf_float+0xe0>
 8008efa:	464b      	mov	r3, r9
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	bfbc      	itt	lt
 8008f00:	232d      	movlt	r3, #45	@ 0x2d
 8008f02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008f06:	4a7e      	ldr	r2, [pc, #504]	@ (8009100 <_printf_float+0x2d4>)
 8008f08:	4b7e      	ldr	r3, [pc, #504]	@ (8009104 <_printf_float+0x2d8>)
 8008f0a:	e7d4      	b.n	8008eb6 <_printf_float+0x8a>
 8008f0c:	6863      	ldr	r3, [r4, #4]
 8008f0e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008f12:	9206      	str	r2, [sp, #24]
 8008f14:	1c5a      	adds	r2, r3, #1
 8008f16:	d13b      	bne.n	8008f90 <_printf_float+0x164>
 8008f18:	2306      	movs	r3, #6
 8008f1a:	6063      	str	r3, [r4, #4]
 8008f1c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008f20:	2300      	movs	r3, #0
 8008f22:	6022      	str	r2, [r4, #0]
 8008f24:	9303      	str	r3, [sp, #12]
 8008f26:	ab0a      	add	r3, sp, #40	@ 0x28
 8008f28:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008f2c:	ab09      	add	r3, sp, #36	@ 0x24
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	6861      	ldr	r1, [r4, #4]
 8008f32:	ec49 8b10 	vmov	d0, r8, r9
 8008f36:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	f7ff fed6 	bl	8008cec <__cvt>
 8008f40:	9b06      	ldr	r3, [sp, #24]
 8008f42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f44:	2b47      	cmp	r3, #71	@ 0x47
 8008f46:	4680      	mov	r8, r0
 8008f48:	d129      	bne.n	8008f9e <_printf_float+0x172>
 8008f4a:	1cc8      	adds	r0, r1, #3
 8008f4c:	db02      	blt.n	8008f54 <_printf_float+0x128>
 8008f4e:	6863      	ldr	r3, [r4, #4]
 8008f50:	4299      	cmp	r1, r3
 8008f52:	dd41      	ble.n	8008fd8 <_printf_float+0x1ac>
 8008f54:	f1aa 0a02 	sub.w	sl, sl, #2
 8008f58:	fa5f fa8a 	uxtb.w	sl, sl
 8008f5c:	3901      	subs	r1, #1
 8008f5e:	4652      	mov	r2, sl
 8008f60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008f64:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f66:	f7ff ff26 	bl	8008db6 <__exponent>
 8008f6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f6c:	1813      	adds	r3, r2, r0
 8008f6e:	2a01      	cmp	r2, #1
 8008f70:	4681      	mov	r9, r0
 8008f72:	6123      	str	r3, [r4, #16]
 8008f74:	dc02      	bgt.n	8008f7c <_printf_float+0x150>
 8008f76:	6822      	ldr	r2, [r4, #0]
 8008f78:	07d2      	lsls	r2, r2, #31
 8008f7a:	d501      	bpl.n	8008f80 <_printf_float+0x154>
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	6123      	str	r3, [r4, #16]
 8008f80:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0a2      	beq.n	8008ece <_printf_float+0xa2>
 8008f88:	232d      	movs	r3, #45	@ 0x2d
 8008f8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f8e:	e79e      	b.n	8008ece <_printf_float+0xa2>
 8008f90:	9a06      	ldr	r2, [sp, #24]
 8008f92:	2a47      	cmp	r2, #71	@ 0x47
 8008f94:	d1c2      	bne.n	8008f1c <_printf_float+0xf0>
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1c0      	bne.n	8008f1c <_printf_float+0xf0>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e7bd      	b.n	8008f1a <_printf_float+0xee>
 8008f9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008fa2:	d9db      	bls.n	8008f5c <_printf_float+0x130>
 8008fa4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008fa8:	d118      	bne.n	8008fdc <_printf_float+0x1b0>
 8008faa:	2900      	cmp	r1, #0
 8008fac:	6863      	ldr	r3, [r4, #4]
 8008fae:	dd0b      	ble.n	8008fc8 <_printf_float+0x19c>
 8008fb0:	6121      	str	r1, [r4, #16]
 8008fb2:	b913      	cbnz	r3, 8008fba <_printf_float+0x18e>
 8008fb4:	6822      	ldr	r2, [r4, #0]
 8008fb6:	07d0      	lsls	r0, r2, #31
 8008fb8:	d502      	bpl.n	8008fc0 <_printf_float+0x194>
 8008fba:	3301      	adds	r3, #1
 8008fbc:	440b      	add	r3, r1
 8008fbe:	6123      	str	r3, [r4, #16]
 8008fc0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008fc2:	f04f 0900 	mov.w	r9, #0
 8008fc6:	e7db      	b.n	8008f80 <_printf_float+0x154>
 8008fc8:	b913      	cbnz	r3, 8008fd0 <_printf_float+0x1a4>
 8008fca:	6822      	ldr	r2, [r4, #0]
 8008fcc:	07d2      	lsls	r2, r2, #31
 8008fce:	d501      	bpl.n	8008fd4 <_printf_float+0x1a8>
 8008fd0:	3302      	adds	r3, #2
 8008fd2:	e7f4      	b.n	8008fbe <_printf_float+0x192>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e7f2      	b.n	8008fbe <_printf_float+0x192>
 8008fd8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fde:	4299      	cmp	r1, r3
 8008fe0:	db05      	blt.n	8008fee <_printf_float+0x1c2>
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	6121      	str	r1, [r4, #16]
 8008fe6:	07d8      	lsls	r0, r3, #31
 8008fe8:	d5ea      	bpl.n	8008fc0 <_printf_float+0x194>
 8008fea:	1c4b      	adds	r3, r1, #1
 8008fec:	e7e7      	b.n	8008fbe <_printf_float+0x192>
 8008fee:	2900      	cmp	r1, #0
 8008ff0:	bfd4      	ite	le
 8008ff2:	f1c1 0202 	rsble	r2, r1, #2
 8008ff6:	2201      	movgt	r2, #1
 8008ff8:	4413      	add	r3, r2
 8008ffa:	e7e0      	b.n	8008fbe <_printf_float+0x192>
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	055a      	lsls	r2, r3, #21
 8009000:	d407      	bmi.n	8009012 <_printf_float+0x1e6>
 8009002:	6923      	ldr	r3, [r4, #16]
 8009004:	4642      	mov	r2, r8
 8009006:	4631      	mov	r1, r6
 8009008:	4628      	mov	r0, r5
 800900a:	47b8      	blx	r7
 800900c:	3001      	adds	r0, #1
 800900e:	d12b      	bne.n	8009068 <_printf_float+0x23c>
 8009010:	e767      	b.n	8008ee2 <_printf_float+0xb6>
 8009012:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009016:	f240 80dd 	bls.w	80091d4 <_printf_float+0x3a8>
 800901a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800901e:	2200      	movs	r2, #0
 8009020:	2300      	movs	r3, #0
 8009022:	f7f7 fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 8009026:	2800      	cmp	r0, #0
 8009028:	d033      	beq.n	8009092 <_printf_float+0x266>
 800902a:	4a37      	ldr	r2, [pc, #220]	@ (8009108 <_printf_float+0x2dc>)
 800902c:	2301      	movs	r3, #1
 800902e:	4631      	mov	r1, r6
 8009030:	4628      	mov	r0, r5
 8009032:	47b8      	blx	r7
 8009034:	3001      	adds	r0, #1
 8009036:	f43f af54 	beq.w	8008ee2 <_printf_float+0xb6>
 800903a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800903e:	4543      	cmp	r3, r8
 8009040:	db02      	blt.n	8009048 <_printf_float+0x21c>
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	07d8      	lsls	r0, r3, #31
 8009046:	d50f      	bpl.n	8009068 <_printf_float+0x23c>
 8009048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800904c:	4631      	mov	r1, r6
 800904e:	4628      	mov	r0, r5
 8009050:	47b8      	blx	r7
 8009052:	3001      	adds	r0, #1
 8009054:	f43f af45 	beq.w	8008ee2 <_printf_float+0xb6>
 8009058:	f04f 0900 	mov.w	r9, #0
 800905c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009060:	f104 0a1a 	add.w	sl, r4, #26
 8009064:	45c8      	cmp	r8, r9
 8009066:	dc09      	bgt.n	800907c <_printf_float+0x250>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	079b      	lsls	r3, r3, #30
 800906c:	f100 8103 	bmi.w	8009276 <_printf_float+0x44a>
 8009070:	68e0      	ldr	r0, [r4, #12]
 8009072:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009074:	4298      	cmp	r0, r3
 8009076:	bfb8      	it	lt
 8009078:	4618      	movlt	r0, r3
 800907a:	e734      	b.n	8008ee6 <_printf_float+0xba>
 800907c:	2301      	movs	r3, #1
 800907e:	4652      	mov	r2, sl
 8009080:	4631      	mov	r1, r6
 8009082:	4628      	mov	r0, r5
 8009084:	47b8      	blx	r7
 8009086:	3001      	adds	r0, #1
 8009088:	f43f af2b 	beq.w	8008ee2 <_printf_float+0xb6>
 800908c:	f109 0901 	add.w	r9, r9, #1
 8009090:	e7e8      	b.n	8009064 <_printf_float+0x238>
 8009092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009094:	2b00      	cmp	r3, #0
 8009096:	dc39      	bgt.n	800910c <_printf_float+0x2e0>
 8009098:	4a1b      	ldr	r2, [pc, #108]	@ (8009108 <_printf_float+0x2dc>)
 800909a:	2301      	movs	r3, #1
 800909c:	4631      	mov	r1, r6
 800909e:	4628      	mov	r0, r5
 80090a0:	47b8      	blx	r7
 80090a2:	3001      	adds	r0, #1
 80090a4:	f43f af1d 	beq.w	8008ee2 <_printf_float+0xb6>
 80090a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80090ac:	ea59 0303 	orrs.w	r3, r9, r3
 80090b0:	d102      	bne.n	80090b8 <_printf_float+0x28c>
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	07d9      	lsls	r1, r3, #31
 80090b6:	d5d7      	bpl.n	8009068 <_printf_float+0x23c>
 80090b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090bc:	4631      	mov	r1, r6
 80090be:	4628      	mov	r0, r5
 80090c0:	47b8      	blx	r7
 80090c2:	3001      	adds	r0, #1
 80090c4:	f43f af0d 	beq.w	8008ee2 <_printf_float+0xb6>
 80090c8:	f04f 0a00 	mov.w	sl, #0
 80090cc:	f104 0b1a 	add.w	fp, r4, #26
 80090d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d2:	425b      	negs	r3, r3
 80090d4:	4553      	cmp	r3, sl
 80090d6:	dc01      	bgt.n	80090dc <_printf_float+0x2b0>
 80090d8:	464b      	mov	r3, r9
 80090da:	e793      	b.n	8009004 <_printf_float+0x1d8>
 80090dc:	2301      	movs	r3, #1
 80090de:	465a      	mov	r2, fp
 80090e0:	4631      	mov	r1, r6
 80090e2:	4628      	mov	r0, r5
 80090e4:	47b8      	blx	r7
 80090e6:	3001      	adds	r0, #1
 80090e8:	f43f aefb 	beq.w	8008ee2 <_printf_float+0xb6>
 80090ec:	f10a 0a01 	add.w	sl, sl, #1
 80090f0:	e7ee      	b.n	80090d0 <_printf_float+0x2a4>
 80090f2:	bf00      	nop
 80090f4:	7fefffff 	.word	0x7fefffff
 80090f8:	0800c550 	.word	0x0800c550
 80090fc:	0800c554 	.word	0x0800c554
 8009100:	0800c558 	.word	0x0800c558
 8009104:	0800c55c 	.word	0x0800c55c
 8009108:	0800c560 	.word	0x0800c560
 800910c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800910e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009112:	4553      	cmp	r3, sl
 8009114:	bfa8      	it	ge
 8009116:	4653      	movge	r3, sl
 8009118:	2b00      	cmp	r3, #0
 800911a:	4699      	mov	r9, r3
 800911c:	dc36      	bgt.n	800918c <_printf_float+0x360>
 800911e:	f04f 0b00 	mov.w	fp, #0
 8009122:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009126:	f104 021a 	add.w	r2, r4, #26
 800912a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800912c:	9306      	str	r3, [sp, #24]
 800912e:	eba3 0309 	sub.w	r3, r3, r9
 8009132:	455b      	cmp	r3, fp
 8009134:	dc31      	bgt.n	800919a <_printf_float+0x36e>
 8009136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009138:	459a      	cmp	sl, r3
 800913a:	dc3a      	bgt.n	80091b2 <_printf_float+0x386>
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	07da      	lsls	r2, r3, #31
 8009140:	d437      	bmi.n	80091b2 <_printf_float+0x386>
 8009142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009144:	ebaa 0903 	sub.w	r9, sl, r3
 8009148:	9b06      	ldr	r3, [sp, #24]
 800914a:	ebaa 0303 	sub.w	r3, sl, r3
 800914e:	4599      	cmp	r9, r3
 8009150:	bfa8      	it	ge
 8009152:	4699      	movge	r9, r3
 8009154:	f1b9 0f00 	cmp.w	r9, #0
 8009158:	dc33      	bgt.n	80091c2 <_printf_float+0x396>
 800915a:	f04f 0800 	mov.w	r8, #0
 800915e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009162:	f104 0b1a 	add.w	fp, r4, #26
 8009166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009168:	ebaa 0303 	sub.w	r3, sl, r3
 800916c:	eba3 0309 	sub.w	r3, r3, r9
 8009170:	4543      	cmp	r3, r8
 8009172:	f77f af79 	ble.w	8009068 <_printf_float+0x23c>
 8009176:	2301      	movs	r3, #1
 8009178:	465a      	mov	r2, fp
 800917a:	4631      	mov	r1, r6
 800917c:	4628      	mov	r0, r5
 800917e:	47b8      	blx	r7
 8009180:	3001      	adds	r0, #1
 8009182:	f43f aeae 	beq.w	8008ee2 <_printf_float+0xb6>
 8009186:	f108 0801 	add.w	r8, r8, #1
 800918a:	e7ec      	b.n	8009166 <_printf_float+0x33a>
 800918c:	4642      	mov	r2, r8
 800918e:	4631      	mov	r1, r6
 8009190:	4628      	mov	r0, r5
 8009192:	47b8      	blx	r7
 8009194:	3001      	adds	r0, #1
 8009196:	d1c2      	bne.n	800911e <_printf_float+0x2f2>
 8009198:	e6a3      	b.n	8008ee2 <_printf_float+0xb6>
 800919a:	2301      	movs	r3, #1
 800919c:	4631      	mov	r1, r6
 800919e:	4628      	mov	r0, r5
 80091a0:	9206      	str	r2, [sp, #24]
 80091a2:	47b8      	blx	r7
 80091a4:	3001      	adds	r0, #1
 80091a6:	f43f ae9c 	beq.w	8008ee2 <_printf_float+0xb6>
 80091aa:	9a06      	ldr	r2, [sp, #24]
 80091ac:	f10b 0b01 	add.w	fp, fp, #1
 80091b0:	e7bb      	b.n	800912a <_printf_float+0x2fe>
 80091b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091b6:	4631      	mov	r1, r6
 80091b8:	4628      	mov	r0, r5
 80091ba:	47b8      	blx	r7
 80091bc:	3001      	adds	r0, #1
 80091be:	d1c0      	bne.n	8009142 <_printf_float+0x316>
 80091c0:	e68f      	b.n	8008ee2 <_printf_float+0xb6>
 80091c2:	9a06      	ldr	r2, [sp, #24]
 80091c4:	464b      	mov	r3, r9
 80091c6:	4442      	add	r2, r8
 80091c8:	4631      	mov	r1, r6
 80091ca:	4628      	mov	r0, r5
 80091cc:	47b8      	blx	r7
 80091ce:	3001      	adds	r0, #1
 80091d0:	d1c3      	bne.n	800915a <_printf_float+0x32e>
 80091d2:	e686      	b.n	8008ee2 <_printf_float+0xb6>
 80091d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80091d8:	f1ba 0f01 	cmp.w	sl, #1
 80091dc:	dc01      	bgt.n	80091e2 <_printf_float+0x3b6>
 80091de:	07db      	lsls	r3, r3, #31
 80091e0:	d536      	bpl.n	8009250 <_printf_float+0x424>
 80091e2:	2301      	movs	r3, #1
 80091e4:	4642      	mov	r2, r8
 80091e6:	4631      	mov	r1, r6
 80091e8:	4628      	mov	r0, r5
 80091ea:	47b8      	blx	r7
 80091ec:	3001      	adds	r0, #1
 80091ee:	f43f ae78 	beq.w	8008ee2 <_printf_float+0xb6>
 80091f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091f6:	4631      	mov	r1, r6
 80091f8:	4628      	mov	r0, r5
 80091fa:	47b8      	blx	r7
 80091fc:	3001      	adds	r0, #1
 80091fe:	f43f ae70 	beq.w	8008ee2 <_printf_float+0xb6>
 8009202:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009206:	2200      	movs	r2, #0
 8009208:	2300      	movs	r3, #0
 800920a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800920e:	f7f7 fc5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009212:	b9c0      	cbnz	r0, 8009246 <_printf_float+0x41a>
 8009214:	4653      	mov	r3, sl
 8009216:	f108 0201 	add.w	r2, r8, #1
 800921a:	4631      	mov	r1, r6
 800921c:	4628      	mov	r0, r5
 800921e:	47b8      	blx	r7
 8009220:	3001      	adds	r0, #1
 8009222:	d10c      	bne.n	800923e <_printf_float+0x412>
 8009224:	e65d      	b.n	8008ee2 <_printf_float+0xb6>
 8009226:	2301      	movs	r3, #1
 8009228:	465a      	mov	r2, fp
 800922a:	4631      	mov	r1, r6
 800922c:	4628      	mov	r0, r5
 800922e:	47b8      	blx	r7
 8009230:	3001      	adds	r0, #1
 8009232:	f43f ae56 	beq.w	8008ee2 <_printf_float+0xb6>
 8009236:	f108 0801 	add.w	r8, r8, #1
 800923a:	45d0      	cmp	r8, sl
 800923c:	dbf3      	blt.n	8009226 <_printf_float+0x3fa>
 800923e:	464b      	mov	r3, r9
 8009240:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009244:	e6df      	b.n	8009006 <_printf_float+0x1da>
 8009246:	f04f 0800 	mov.w	r8, #0
 800924a:	f104 0b1a 	add.w	fp, r4, #26
 800924e:	e7f4      	b.n	800923a <_printf_float+0x40e>
 8009250:	2301      	movs	r3, #1
 8009252:	4642      	mov	r2, r8
 8009254:	e7e1      	b.n	800921a <_printf_float+0x3ee>
 8009256:	2301      	movs	r3, #1
 8009258:	464a      	mov	r2, r9
 800925a:	4631      	mov	r1, r6
 800925c:	4628      	mov	r0, r5
 800925e:	47b8      	blx	r7
 8009260:	3001      	adds	r0, #1
 8009262:	f43f ae3e 	beq.w	8008ee2 <_printf_float+0xb6>
 8009266:	f108 0801 	add.w	r8, r8, #1
 800926a:	68e3      	ldr	r3, [r4, #12]
 800926c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800926e:	1a5b      	subs	r3, r3, r1
 8009270:	4543      	cmp	r3, r8
 8009272:	dcf0      	bgt.n	8009256 <_printf_float+0x42a>
 8009274:	e6fc      	b.n	8009070 <_printf_float+0x244>
 8009276:	f04f 0800 	mov.w	r8, #0
 800927a:	f104 0919 	add.w	r9, r4, #25
 800927e:	e7f4      	b.n	800926a <_printf_float+0x43e>

08009280 <_printf_common>:
 8009280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009284:	4616      	mov	r6, r2
 8009286:	4698      	mov	r8, r3
 8009288:	688a      	ldr	r2, [r1, #8]
 800928a:	690b      	ldr	r3, [r1, #16]
 800928c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009290:	4293      	cmp	r3, r2
 8009292:	bfb8      	it	lt
 8009294:	4613      	movlt	r3, r2
 8009296:	6033      	str	r3, [r6, #0]
 8009298:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800929c:	4607      	mov	r7, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	b10a      	cbz	r2, 80092a6 <_printf_common+0x26>
 80092a2:	3301      	adds	r3, #1
 80092a4:	6033      	str	r3, [r6, #0]
 80092a6:	6823      	ldr	r3, [r4, #0]
 80092a8:	0699      	lsls	r1, r3, #26
 80092aa:	bf42      	ittt	mi
 80092ac:	6833      	ldrmi	r3, [r6, #0]
 80092ae:	3302      	addmi	r3, #2
 80092b0:	6033      	strmi	r3, [r6, #0]
 80092b2:	6825      	ldr	r5, [r4, #0]
 80092b4:	f015 0506 	ands.w	r5, r5, #6
 80092b8:	d106      	bne.n	80092c8 <_printf_common+0x48>
 80092ba:	f104 0a19 	add.w	sl, r4, #25
 80092be:	68e3      	ldr	r3, [r4, #12]
 80092c0:	6832      	ldr	r2, [r6, #0]
 80092c2:	1a9b      	subs	r3, r3, r2
 80092c4:	42ab      	cmp	r3, r5
 80092c6:	dc26      	bgt.n	8009316 <_printf_common+0x96>
 80092c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80092cc:	6822      	ldr	r2, [r4, #0]
 80092ce:	3b00      	subs	r3, #0
 80092d0:	bf18      	it	ne
 80092d2:	2301      	movne	r3, #1
 80092d4:	0692      	lsls	r2, r2, #26
 80092d6:	d42b      	bmi.n	8009330 <_printf_common+0xb0>
 80092d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092dc:	4641      	mov	r1, r8
 80092de:	4638      	mov	r0, r7
 80092e0:	47c8      	blx	r9
 80092e2:	3001      	adds	r0, #1
 80092e4:	d01e      	beq.n	8009324 <_printf_common+0xa4>
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	6922      	ldr	r2, [r4, #16]
 80092ea:	f003 0306 	and.w	r3, r3, #6
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	bf02      	ittt	eq
 80092f2:	68e5      	ldreq	r5, [r4, #12]
 80092f4:	6833      	ldreq	r3, [r6, #0]
 80092f6:	1aed      	subeq	r5, r5, r3
 80092f8:	68a3      	ldr	r3, [r4, #8]
 80092fa:	bf0c      	ite	eq
 80092fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009300:	2500      	movne	r5, #0
 8009302:	4293      	cmp	r3, r2
 8009304:	bfc4      	itt	gt
 8009306:	1a9b      	subgt	r3, r3, r2
 8009308:	18ed      	addgt	r5, r5, r3
 800930a:	2600      	movs	r6, #0
 800930c:	341a      	adds	r4, #26
 800930e:	42b5      	cmp	r5, r6
 8009310:	d11a      	bne.n	8009348 <_printf_common+0xc8>
 8009312:	2000      	movs	r0, #0
 8009314:	e008      	b.n	8009328 <_printf_common+0xa8>
 8009316:	2301      	movs	r3, #1
 8009318:	4652      	mov	r2, sl
 800931a:	4641      	mov	r1, r8
 800931c:	4638      	mov	r0, r7
 800931e:	47c8      	blx	r9
 8009320:	3001      	adds	r0, #1
 8009322:	d103      	bne.n	800932c <_printf_common+0xac>
 8009324:	f04f 30ff 	mov.w	r0, #4294967295
 8009328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800932c:	3501      	adds	r5, #1
 800932e:	e7c6      	b.n	80092be <_printf_common+0x3e>
 8009330:	18e1      	adds	r1, r4, r3
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	2030      	movs	r0, #48	@ 0x30
 8009336:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800933a:	4422      	add	r2, r4
 800933c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009340:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009344:	3302      	adds	r3, #2
 8009346:	e7c7      	b.n	80092d8 <_printf_common+0x58>
 8009348:	2301      	movs	r3, #1
 800934a:	4622      	mov	r2, r4
 800934c:	4641      	mov	r1, r8
 800934e:	4638      	mov	r0, r7
 8009350:	47c8      	blx	r9
 8009352:	3001      	adds	r0, #1
 8009354:	d0e6      	beq.n	8009324 <_printf_common+0xa4>
 8009356:	3601      	adds	r6, #1
 8009358:	e7d9      	b.n	800930e <_printf_common+0x8e>
	...

0800935c <_printf_i>:
 800935c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009360:	7e0f      	ldrb	r7, [r1, #24]
 8009362:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009364:	2f78      	cmp	r7, #120	@ 0x78
 8009366:	4691      	mov	r9, r2
 8009368:	4680      	mov	r8, r0
 800936a:	460c      	mov	r4, r1
 800936c:	469a      	mov	sl, r3
 800936e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009372:	d807      	bhi.n	8009384 <_printf_i+0x28>
 8009374:	2f62      	cmp	r7, #98	@ 0x62
 8009376:	d80a      	bhi.n	800938e <_printf_i+0x32>
 8009378:	2f00      	cmp	r7, #0
 800937a:	f000 80d2 	beq.w	8009522 <_printf_i+0x1c6>
 800937e:	2f58      	cmp	r7, #88	@ 0x58
 8009380:	f000 80b9 	beq.w	80094f6 <_printf_i+0x19a>
 8009384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009388:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800938c:	e03a      	b.n	8009404 <_printf_i+0xa8>
 800938e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009392:	2b15      	cmp	r3, #21
 8009394:	d8f6      	bhi.n	8009384 <_printf_i+0x28>
 8009396:	a101      	add	r1, pc, #4	@ (adr r1, 800939c <_printf_i+0x40>)
 8009398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800939c:	080093f5 	.word	0x080093f5
 80093a0:	08009409 	.word	0x08009409
 80093a4:	08009385 	.word	0x08009385
 80093a8:	08009385 	.word	0x08009385
 80093ac:	08009385 	.word	0x08009385
 80093b0:	08009385 	.word	0x08009385
 80093b4:	08009409 	.word	0x08009409
 80093b8:	08009385 	.word	0x08009385
 80093bc:	08009385 	.word	0x08009385
 80093c0:	08009385 	.word	0x08009385
 80093c4:	08009385 	.word	0x08009385
 80093c8:	08009509 	.word	0x08009509
 80093cc:	08009433 	.word	0x08009433
 80093d0:	080094c3 	.word	0x080094c3
 80093d4:	08009385 	.word	0x08009385
 80093d8:	08009385 	.word	0x08009385
 80093dc:	0800952b 	.word	0x0800952b
 80093e0:	08009385 	.word	0x08009385
 80093e4:	08009433 	.word	0x08009433
 80093e8:	08009385 	.word	0x08009385
 80093ec:	08009385 	.word	0x08009385
 80093f0:	080094cb 	.word	0x080094cb
 80093f4:	6833      	ldr	r3, [r6, #0]
 80093f6:	1d1a      	adds	r2, r3, #4
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6032      	str	r2, [r6, #0]
 80093fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009400:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009404:	2301      	movs	r3, #1
 8009406:	e09d      	b.n	8009544 <_printf_i+0x1e8>
 8009408:	6833      	ldr	r3, [r6, #0]
 800940a:	6820      	ldr	r0, [r4, #0]
 800940c:	1d19      	adds	r1, r3, #4
 800940e:	6031      	str	r1, [r6, #0]
 8009410:	0606      	lsls	r6, r0, #24
 8009412:	d501      	bpl.n	8009418 <_printf_i+0xbc>
 8009414:	681d      	ldr	r5, [r3, #0]
 8009416:	e003      	b.n	8009420 <_printf_i+0xc4>
 8009418:	0645      	lsls	r5, r0, #25
 800941a:	d5fb      	bpl.n	8009414 <_printf_i+0xb8>
 800941c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009420:	2d00      	cmp	r5, #0
 8009422:	da03      	bge.n	800942c <_printf_i+0xd0>
 8009424:	232d      	movs	r3, #45	@ 0x2d
 8009426:	426d      	negs	r5, r5
 8009428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800942c:	4859      	ldr	r0, [pc, #356]	@ (8009594 <_printf_i+0x238>)
 800942e:	230a      	movs	r3, #10
 8009430:	e011      	b.n	8009456 <_printf_i+0xfa>
 8009432:	6821      	ldr	r1, [r4, #0]
 8009434:	6833      	ldr	r3, [r6, #0]
 8009436:	0608      	lsls	r0, r1, #24
 8009438:	f853 5b04 	ldr.w	r5, [r3], #4
 800943c:	d402      	bmi.n	8009444 <_printf_i+0xe8>
 800943e:	0649      	lsls	r1, r1, #25
 8009440:	bf48      	it	mi
 8009442:	b2ad      	uxthmi	r5, r5
 8009444:	2f6f      	cmp	r7, #111	@ 0x6f
 8009446:	4853      	ldr	r0, [pc, #332]	@ (8009594 <_printf_i+0x238>)
 8009448:	6033      	str	r3, [r6, #0]
 800944a:	bf14      	ite	ne
 800944c:	230a      	movne	r3, #10
 800944e:	2308      	moveq	r3, #8
 8009450:	2100      	movs	r1, #0
 8009452:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009456:	6866      	ldr	r6, [r4, #4]
 8009458:	60a6      	str	r6, [r4, #8]
 800945a:	2e00      	cmp	r6, #0
 800945c:	bfa2      	ittt	ge
 800945e:	6821      	ldrge	r1, [r4, #0]
 8009460:	f021 0104 	bicge.w	r1, r1, #4
 8009464:	6021      	strge	r1, [r4, #0]
 8009466:	b90d      	cbnz	r5, 800946c <_printf_i+0x110>
 8009468:	2e00      	cmp	r6, #0
 800946a:	d04b      	beq.n	8009504 <_printf_i+0x1a8>
 800946c:	4616      	mov	r6, r2
 800946e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009472:	fb03 5711 	mls	r7, r3, r1, r5
 8009476:	5dc7      	ldrb	r7, [r0, r7]
 8009478:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800947c:	462f      	mov	r7, r5
 800947e:	42bb      	cmp	r3, r7
 8009480:	460d      	mov	r5, r1
 8009482:	d9f4      	bls.n	800946e <_printf_i+0x112>
 8009484:	2b08      	cmp	r3, #8
 8009486:	d10b      	bne.n	80094a0 <_printf_i+0x144>
 8009488:	6823      	ldr	r3, [r4, #0]
 800948a:	07df      	lsls	r7, r3, #31
 800948c:	d508      	bpl.n	80094a0 <_printf_i+0x144>
 800948e:	6923      	ldr	r3, [r4, #16]
 8009490:	6861      	ldr	r1, [r4, #4]
 8009492:	4299      	cmp	r1, r3
 8009494:	bfde      	ittt	le
 8009496:	2330      	movle	r3, #48	@ 0x30
 8009498:	f806 3c01 	strble.w	r3, [r6, #-1]
 800949c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094a0:	1b92      	subs	r2, r2, r6
 80094a2:	6122      	str	r2, [r4, #16]
 80094a4:	f8cd a000 	str.w	sl, [sp]
 80094a8:	464b      	mov	r3, r9
 80094aa:	aa03      	add	r2, sp, #12
 80094ac:	4621      	mov	r1, r4
 80094ae:	4640      	mov	r0, r8
 80094b0:	f7ff fee6 	bl	8009280 <_printf_common>
 80094b4:	3001      	adds	r0, #1
 80094b6:	d14a      	bne.n	800954e <_printf_i+0x1f2>
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295
 80094bc:	b004      	add	sp, #16
 80094be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	f043 0320 	orr.w	r3, r3, #32
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	4833      	ldr	r0, [pc, #204]	@ (8009598 <_printf_i+0x23c>)
 80094cc:	2778      	movs	r7, #120	@ 0x78
 80094ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	6831      	ldr	r1, [r6, #0]
 80094d6:	061f      	lsls	r7, r3, #24
 80094d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80094dc:	d402      	bmi.n	80094e4 <_printf_i+0x188>
 80094de:	065f      	lsls	r7, r3, #25
 80094e0:	bf48      	it	mi
 80094e2:	b2ad      	uxthmi	r5, r5
 80094e4:	6031      	str	r1, [r6, #0]
 80094e6:	07d9      	lsls	r1, r3, #31
 80094e8:	bf44      	itt	mi
 80094ea:	f043 0320 	orrmi.w	r3, r3, #32
 80094ee:	6023      	strmi	r3, [r4, #0]
 80094f0:	b11d      	cbz	r5, 80094fa <_printf_i+0x19e>
 80094f2:	2310      	movs	r3, #16
 80094f4:	e7ac      	b.n	8009450 <_printf_i+0xf4>
 80094f6:	4827      	ldr	r0, [pc, #156]	@ (8009594 <_printf_i+0x238>)
 80094f8:	e7e9      	b.n	80094ce <_printf_i+0x172>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	f023 0320 	bic.w	r3, r3, #32
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	e7f6      	b.n	80094f2 <_printf_i+0x196>
 8009504:	4616      	mov	r6, r2
 8009506:	e7bd      	b.n	8009484 <_printf_i+0x128>
 8009508:	6833      	ldr	r3, [r6, #0]
 800950a:	6825      	ldr	r5, [r4, #0]
 800950c:	6961      	ldr	r1, [r4, #20]
 800950e:	1d18      	adds	r0, r3, #4
 8009510:	6030      	str	r0, [r6, #0]
 8009512:	062e      	lsls	r6, r5, #24
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	d501      	bpl.n	800951c <_printf_i+0x1c0>
 8009518:	6019      	str	r1, [r3, #0]
 800951a:	e002      	b.n	8009522 <_printf_i+0x1c6>
 800951c:	0668      	lsls	r0, r5, #25
 800951e:	d5fb      	bpl.n	8009518 <_printf_i+0x1bc>
 8009520:	8019      	strh	r1, [r3, #0]
 8009522:	2300      	movs	r3, #0
 8009524:	6123      	str	r3, [r4, #16]
 8009526:	4616      	mov	r6, r2
 8009528:	e7bc      	b.n	80094a4 <_printf_i+0x148>
 800952a:	6833      	ldr	r3, [r6, #0]
 800952c:	1d1a      	adds	r2, r3, #4
 800952e:	6032      	str	r2, [r6, #0]
 8009530:	681e      	ldr	r6, [r3, #0]
 8009532:	6862      	ldr	r2, [r4, #4]
 8009534:	2100      	movs	r1, #0
 8009536:	4630      	mov	r0, r6
 8009538:	f7f6 fe4a 	bl	80001d0 <memchr>
 800953c:	b108      	cbz	r0, 8009542 <_printf_i+0x1e6>
 800953e:	1b80      	subs	r0, r0, r6
 8009540:	6060      	str	r0, [r4, #4]
 8009542:	6863      	ldr	r3, [r4, #4]
 8009544:	6123      	str	r3, [r4, #16]
 8009546:	2300      	movs	r3, #0
 8009548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800954c:	e7aa      	b.n	80094a4 <_printf_i+0x148>
 800954e:	6923      	ldr	r3, [r4, #16]
 8009550:	4632      	mov	r2, r6
 8009552:	4649      	mov	r1, r9
 8009554:	4640      	mov	r0, r8
 8009556:	47d0      	blx	sl
 8009558:	3001      	adds	r0, #1
 800955a:	d0ad      	beq.n	80094b8 <_printf_i+0x15c>
 800955c:	6823      	ldr	r3, [r4, #0]
 800955e:	079b      	lsls	r3, r3, #30
 8009560:	d413      	bmi.n	800958a <_printf_i+0x22e>
 8009562:	68e0      	ldr	r0, [r4, #12]
 8009564:	9b03      	ldr	r3, [sp, #12]
 8009566:	4298      	cmp	r0, r3
 8009568:	bfb8      	it	lt
 800956a:	4618      	movlt	r0, r3
 800956c:	e7a6      	b.n	80094bc <_printf_i+0x160>
 800956e:	2301      	movs	r3, #1
 8009570:	4632      	mov	r2, r6
 8009572:	4649      	mov	r1, r9
 8009574:	4640      	mov	r0, r8
 8009576:	47d0      	blx	sl
 8009578:	3001      	adds	r0, #1
 800957a:	d09d      	beq.n	80094b8 <_printf_i+0x15c>
 800957c:	3501      	adds	r5, #1
 800957e:	68e3      	ldr	r3, [r4, #12]
 8009580:	9903      	ldr	r1, [sp, #12]
 8009582:	1a5b      	subs	r3, r3, r1
 8009584:	42ab      	cmp	r3, r5
 8009586:	dcf2      	bgt.n	800956e <_printf_i+0x212>
 8009588:	e7eb      	b.n	8009562 <_printf_i+0x206>
 800958a:	2500      	movs	r5, #0
 800958c:	f104 0619 	add.w	r6, r4, #25
 8009590:	e7f5      	b.n	800957e <_printf_i+0x222>
 8009592:	bf00      	nop
 8009594:	0800c562 	.word	0x0800c562
 8009598:	0800c573 	.word	0x0800c573

0800959c <std>:
 800959c:	2300      	movs	r3, #0
 800959e:	b510      	push	{r4, lr}
 80095a0:	4604      	mov	r4, r0
 80095a2:	e9c0 3300 	strd	r3, r3, [r0]
 80095a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095aa:	6083      	str	r3, [r0, #8]
 80095ac:	8181      	strh	r1, [r0, #12]
 80095ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80095b0:	81c2      	strh	r2, [r0, #14]
 80095b2:	6183      	str	r3, [r0, #24]
 80095b4:	4619      	mov	r1, r3
 80095b6:	2208      	movs	r2, #8
 80095b8:	305c      	adds	r0, #92	@ 0x5c
 80095ba:	f000 f914 	bl	80097e6 <memset>
 80095be:	4b0d      	ldr	r3, [pc, #52]	@ (80095f4 <std+0x58>)
 80095c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80095c2:	4b0d      	ldr	r3, [pc, #52]	@ (80095f8 <std+0x5c>)
 80095c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80095c6:	4b0d      	ldr	r3, [pc, #52]	@ (80095fc <std+0x60>)
 80095c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80095ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009600 <std+0x64>)
 80095cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80095ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009604 <std+0x68>)
 80095d0:	6224      	str	r4, [r4, #32]
 80095d2:	429c      	cmp	r4, r3
 80095d4:	d006      	beq.n	80095e4 <std+0x48>
 80095d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80095da:	4294      	cmp	r4, r2
 80095dc:	d002      	beq.n	80095e4 <std+0x48>
 80095de:	33d0      	adds	r3, #208	@ 0xd0
 80095e0:	429c      	cmp	r4, r3
 80095e2:	d105      	bne.n	80095f0 <std+0x54>
 80095e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80095e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095ec:	f000 b978 	b.w	80098e0 <__retarget_lock_init_recursive>
 80095f0:	bd10      	pop	{r4, pc}
 80095f2:	bf00      	nop
 80095f4:	08009761 	.word	0x08009761
 80095f8:	08009783 	.word	0x08009783
 80095fc:	080097bb 	.word	0x080097bb
 8009600:	080097df 	.word	0x080097df
 8009604:	20005168 	.word	0x20005168

08009608 <stdio_exit_handler>:
 8009608:	4a02      	ldr	r2, [pc, #8]	@ (8009614 <stdio_exit_handler+0xc>)
 800960a:	4903      	ldr	r1, [pc, #12]	@ (8009618 <stdio_exit_handler+0x10>)
 800960c:	4803      	ldr	r0, [pc, #12]	@ (800961c <stdio_exit_handler+0x14>)
 800960e:	f000 b869 	b.w	80096e4 <_fwalk_sglue>
 8009612:	bf00      	nop
 8009614:	20000010 	.word	0x20000010
 8009618:	0800b25d 	.word	0x0800b25d
 800961c:	20000020 	.word	0x20000020

08009620 <cleanup_stdio>:
 8009620:	6841      	ldr	r1, [r0, #4]
 8009622:	4b0c      	ldr	r3, [pc, #48]	@ (8009654 <cleanup_stdio+0x34>)
 8009624:	4299      	cmp	r1, r3
 8009626:	b510      	push	{r4, lr}
 8009628:	4604      	mov	r4, r0
 800962a:	d001      	beq.n	8009630 <cleanup_stdio+0x10>
 800962c:	f001 fe16 	bl	800b25c <_fflush_r>
 8009630:	68a1      	ldr	r1, [r4, #8]
 8009632:	4b09      	ldr	r3, [pc, #36]	@ (8009658 <cleanup_stdio+0x38>)
 8009634:	4299      	cmp	r1, r3
 8009636:	d002      	beq.n	800963e <cleanup_stdio+0x1e>
 8009638:	4620      	mov	r0, r4
 800963a:	f001 fe0f 	bl	800b25c <_fflush_r>
 800963e:	68e1      	ldr	r1, [r4, #12]
 8009640:	4b06      	ldr	r3, [pc, #24]	@ (800965c <cleanup_stdio+0x3c>)
 8009642:	4299      	cmp	r1, r3
 8009644:	d004      	beq.n	8009650 <cleanup_stdio+0x30>
 8009646:	4620      	mov	r0, r4
 8009648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800964c:	f001 be06 	b.w	800b25c <_fflush_r>
 8009650:	bd10      	pop	{r4, pc}
 8009652:	bf00      	nop
 8009654:	20005168 	.word	0x20005168
 8009658:	200051d0 	.word	0x200051d0
 800965c:	20005238 	.word	0x20005238

08009660 <global_stdio_init.part.0>:
 8009660:	b510      	push	{r4, lr}
 8009662:	4b0b      	ldr	r3, [pc, #44]	@ (8009690 <global_stdio_init.part.0+0x30>)
 8009664:	4c0b      	ldr	r4, [pc, #44]	@ (8009694 <global_stdio_init.part.0+0x34>)
 8009666:	4a0c      	ldr	r2, [pc, #48]	@ (8009698 <global_stdio_init.part.0+0x38>)
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	4620      	mov	r0, r4
 800966c:	2200      	movs	r2, #0
 800966e:	2104      	movs	r1, #4
 8009670:	f7ff ff94 	bl	800959c <std>
 8009674:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009678:	2201      	movs	r2, #1
 800967a:	2109      	movs	r1, #9
 800967c:	f7ff ff8e 	bl	800959c <std>
 8009680:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009684:	2202      	movs	r2, #2
 8009686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800968a:	2112      	movs	r1, #18
 800968c:	f7ff bf86 	b.w	800959c <std>
 8009690:	200052a0 	.word	0x200052a0
 8009694:	20005168 	.word	0x20005168
 8009698:	08009609 	.word	0x08009609

0800969c <__sfp_lock_acquire>:
 800969c:	4801      	ldr	r0, [pc, #4]	@ (80096a4 <__sfp_lock_acquire+0x8>)
 800969e:	f000 b920 	b.w	80098e2 <__retarget_lock_acquire_recursive>
 80096a2:	bf00      	nop
 80096a4:	200052a9 	.word	0x200052a9

080096a8 <__sfp_lock_release>:
 80096a8:	4801      	ldr	r0, [pc, #4]	@ (80096b0 <__sfp_lock_release+0x8>)
 80096aa:	f000 b91b 	b.w	80098e4 <__retarget_lock_release_recursive>
 80096ae:	bf00      	nop
 80096b0:	200052a9 	.word	0x200052a9

080096b4 <__sinit>:
 80096b4:	b510      	push	{r4, lr}
 80096b6:	4604      	mov	r4, r0
 80096b8:	f7ff fff0 	bl	800969c <__sfp_lock_acquire>
 80096bc:	6a23      	ldr	r3, [r4, #32]
 80096be:	b11b      	cbz	r3, 80096c8 <__sinit+0x14>
 80096c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096c4:	f7ff bff0 	b.w	80096a8 <__sfp_lock_release>
 80096c8:	4b04      	ldr	r3, [pc, #16]	@ (80096dc <__sinit+0x28>)
 80096ca:	6223      	str	r3, [r4, #32]
 80096cc:	4b04      	ldr	r3, [pc, #16]	@ (80096e0 <__sinit+0x2c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1f5      	bne.n	80096c0 <__sinit+0xc>
 80096d4:	f7ff ffc4 	bl	8009660 <global_stdio_init.part.0>
 80096d8:	e7f2      	b.n	80096c0 <__sinit+0xc>
 80096da:	bf00      	nop
 80096dc:	08009621 	.word	0x08009621
 80096e0:	200052a0 	.word	0x200052a0

080096e4 <_fwalk_sglue>:
 80096e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e8:	4607      	mov	r7, r0
 80096ea:	4688      	mov	r8, r1
 80096ec:	4614      	mov	r4, r2
 80096ee:	2600      	movs	r6, #0
 80096f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096f4:	f1b9 0901 	subs.w	r9, r9, #1
 80096f8:	d505      	bpl.n	8009706 <_fwalk_sglue+0x22>
 80096fa:	6824      	ldr	r4, [r4, #0]
 80096fc:	2c00      	cmp	r4, #0
 80096fe:	d1f7      	bne.n	80096f0 <_fwalk_sglue+0xc>
 8009700:	4630      	mov	r0, r6
 8009702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009706:	89ab      	ldrh	r3, [r5, #12]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d907      	bls.n	800971c <_fwalk_sglue+0x38>
 800970c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009710:	3301      	adds	r3, #1
 8009712:	d003      	beq.n	800971c <_fwalk_sglue+0x38>
 8009714:	4629      	mov	r1, r5
 8009716:	4638      	mov	r0, r7
 8009718:	47c0      	blx	r8
 800971a:	4306      	orrs	r6, r0
 800971c:	3568      	adds	r5, #104	@ 0x68
 800971e:	e7e9      	b.n	80096f4 <_fwalk_sglue+0x10>

08009720 <siprintf>:
 8009720:	b40e      	push	{r1, r2, r3}
 8009722:	b500      	push	{lr}
 8009724:	b09c      	sub	sp, #112	@ 0x70
 8009726:	ab1d      	add	r3, sp, #116	@ 0x74
 8009728:	9002      	str	r0, [sp, #8]
 800972a:	9006      	str	r0, [sp, #24]
 800972c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009730:	4809      	ldr	r0, [pc, #36]	@ (8009758 <siprintf+0x38>)
 8009732:	9107      	str	r1, [sp, #28]
 8009734:	9104      	str	r1, [sp, #16]
 8009736:	4909      	ldr	r1, [pc, #36]	@ (800975c <siprintf+0x3c>)
 8009738:	f853 2b04 	ldr.w	r2, [r3], #4
 800973c:	9105      	str	r1, [sp, #20]
 800973e:	6800      	ldr	r0, [r0, #0]
 8009740:	9301      	str	r3, [sp, #4]
 8009742:	a902      	add	r1, sp, #8
 8009744:	f001 fc0a 	bl	800af5c <_svfiprintf_r>
 8009748:	9b02      	ldr	r3, [sp, #8]
 800974a:	2200      	movs	r2, #0
 800974c:	701a      	strb	r2, [r3, #0]
 800974e:	b01c      	add	sp, #112	@ 0x70
 8009750:	f85d eb04 	ldr.w	lr, [sp], #4
 8009754:	b003      	add	sp, #12
 8009756:	4770      	bx	lr
 8009758:	2000001c 	.word	0x2000001c
 800975c:	ffff0208 	.word	0xffff0208

08009760 <__sread>:
 8009760:	b510      	push	{r4, lr}
 8009762:	460c      	mov	r4, r1
 8009764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009768:	f000 f86c 	bl	8009844 <_read_r>
 800976c:	2800      	cmp	r0, #0
 800976e:	bfab      	itete	ge
 8009770:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009772:	89a3      	ldrhlt	r3, [r4, #12]
 8009774:	181b      	addge	r3, r3, r0
 8009776:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800977a:	bfac      	ite	ge
 800977c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800977e:	81a3      	strhlt	r3, [r4, #12]
 8009780:	bd10      	pop	{r4, pc}

08009782 <__swrite>:
 8009782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009786:	461f      	mov	r7, r3
 8009788:	898b      	ldrh	r3, [r1, #12]
 800978a:	05db      	lsls	r3, r3, #23
 800978c:	4605      	mov	r5, r0
 800978e:	460c      	mov	r4, r1
 8009790:	4616      	mov	r6, r2
 8009792:	d505      	bpl.n	80097a0 <__swrite+0x1e>
 8009794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009798:	2302      	movs	r3, #2
 800979a:	2200      	movs	r2, #0
 800979c:	f000 f840 	bl	8009820 <_lseek_r>
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097aa:	81a3      	strh	r3, [r4, #12]
 80097ac:	4632      	mov	r2, r6
 80097ae:	463b      	mov	r3, r7
 80097b0:	4628      	mov	r0, r5
 80097b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097b6:	f000 b857 	b.w	8009868 <_write_r>

080097ba <__sseek>:
 80097ba:	b510      	push	{r4, lr}
 80097bc:	460c      	mov	r4, r1
 80097be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097c2:	f000 f82d 	bl	8009820 <_lseek_r>
 80097c6:	1c43      	adds	r3, r0, #1
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	bf15      	itete	ne
 80097cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80097ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097d6:	81a3      	strheq	r3, [r4, #12]
 80097d8:	bf18      	it	ne
 80097da:	81a3      	strhne	r3, [r4, #12]
 80097dc:	bd10      	pop	{r4, pc}

080097de <__sclose>:
 80097de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e2:	f000 b80d 	b.w	8009800 <_close_r>

080097e6 <memset>:
 80097e6:	4402      	add	r2, r0
 80097e8:	4603      	mov	r3, r0
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d100      	bne.n	80097f0 <memset+0xa>
 80097ee:	4770      	bx	lr
 80097f0:	f803 1b01 	strb.w	r1, [r3], #1
 80097f4:	e7f9      	b.n	80097ea <memset+0x4>
	...

080097f8 <_localeconv_r>:
 80097f8:	4800      	ldr	r0, [pc, #0]	@ (80097fc <_localeconv_r+0x4>)
 80097fa:	4770      	bx	lr
 80097fc:	2000015c 	.word	0x2000015c

08009800 <_close_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	4d06      	ldr	r5, [pc, #24]	@ (800981c <_close_r+0x1c>)
 8009804:	2300      	movs	r3, #0
 8009806:	4604      	mov	r4, r0
 8009808:	4608      	mov	r0, r1
 800980a:	602b      	str	r3, [r5, #0]
 800980c:	f7f8 fc14 	bl	8002038 <_close>
 8009810:	1c43      	adds	r3, r0, #1
 8009812:	d102      	bne.n	800981a <_close_r+0x1a>
 8009814:	682b      	ldr	r3, [r5, #0]
 8009816:	b103      	cbz	r3, 800981a <_close_r+0x1a>
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	bd38      	pop	{r3, r4, r5, pc}
 800981c:	200052a4 	.word	0x200052a4

08009820 <_lseek_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	4d07      	ldr	r5, [pc, #28]	@ (8009840 <_lseek_r+0x20>)
 8009824:	4604      	mov	r4, r0
 8009826:	4608      	mov	r0, r1
 8009828:	4611      	mov	r1, r2
 800982a:	2200      	movs	r2, #0
 800982c:	602a      	str	r2, [r5, #0]
 800982e:	461a      	mov	r2, r3
 8009830:	f7f8 fc29 	bl	8002086 <_lseek>
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	d102      	bne.n	800983e <_lseek_r+0x1e>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	b103      	cbz	r3, 800983e <_lseek_r+0x1e>
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	200052a4 	.word	0x200052a4

08009844 <_read_r>:
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	4d07      	ldr	r5, [pc, #28]	@ (8009864 <_read_r+0x20>)
 8009848:	4604      	mov	r4, r0
 800984a:	4608      	mov	r0, r1
 800984c:	4611      	mov	r1, r2
 800984e:	2200      	movs	r2, #0
 8009850:	602a      	str	r2, [r5, #0]
 8009852:	461a      	mov	r2, r3
 8009854:	f7f8 fbb7 	bl	8001fc6 <_read>
 8009858:	1c43      	adds	r3, r0, #1
 800985a:	d102      	bne.n	8009862 <_read_r+0x1e>
 800985c:	682b      	ldr	r3, [r5, #0]
 800985e:	b103      	cbz	r3, 8009862 <_read_r+0x1e>
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	bd38      	pop	{r3, r4, r5, pc}
 8009864:	200052a4 	.word	0x200052a4

08009868 <_write_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4d07      	ldr	r5, [pc, #28]	@ (8009888 <_write_r+0x20>)
 800986c:	4604      	mov	r4, r0
 800986e:	4608      	mov	r0, r1
 8009870:	4611      	mov	r1, r2
 8009872:	2200      	movs	r2, #0
 8009874:	602a      	str	r2, [r5, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	f7f8 fbc2 	bl	8002000 <_write>
 800987c:	1c43      	adds	r3, r0, #1
 800987e:	d102      	bne.n	8009886 <_write_r+0x1e>
 8009880:	682b      	ldr	r3, [r5, #0]
 8009882:	b103      	cbz	r3, 8009886 <_write_r+0x1e>
 8009884:	6023      	str	r3, [r4, #0]
 8009886:	bd38      	pop	{r3, r4, r5, pc}
 8009888:	200052a4 	.word	0x200052a4

0800988c <__errno>:
 800988c:	4b01      	ldr	r3, [pc, #4]	@ (8009894 <__errno+0x8>)
 800988e:	6818      	ldr	r0, [r3, #0]
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	2000001c 	.word	0x2000001c

08009898 <__libc_init_array>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	4d0d      	ldr	r5, [pc, #52]	@ (80098d0 <__libc_init_array+0x38>)
 800989c:	4c0d      	ldr	r4, [pc, #52]	@ (80098d4 <__libc_init_array+0x3c>)
 800989e:	1b64      	subs	r4, r4, r5
 80098a0:	10a4      	asrs	r4, r4, #2
 80098a2:	2600      	movs	r6, #0
 80098a4:	42a6      	cmp	r6, r4
 80098a6:	d109      	bne.n	80098bc <__libc_init_array+0x24>
 80098a8:	4d0b      	ldr	r5, [pc, #44]	@ (80098d8 <__libc_init_array+0x40>)
 80098aa:	4c0c      	ldr	r4, [pc, #48]	@ (80098dc <__libc_init_array+0x44>)
 80098ac:	f002 f866 	bl	800b97c <_init>
 80098b0:	1b64      	subs	r4, r4, r5
 80098b2:	10a4      	asrs	r4, r4, #2
 80098b4:	2600      	movs	r6, #0
 80098b6:	42a6      	cmp	r6, r4
 80098b8:	d105      	bne.n	80098c6 <__libc_init_array+0x2e>
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
 80098bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80098c0:	4798      	blx	r3
 80098c2:	3601      	adds	r6, #1
 80098c4:	e7ee      	b.n	80098a4 <__libc_init_array+0xc>
 80098c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ca:	4798      	blx	r3
 80098cc:	3601      	adds	r6, #1
 80098ce:	e7f2      	b.n	80098b6 <__libc_init_array+0x1e>
 80098d0:	0800c8c8 	.word	0x0800c8c8
 80098d4:	0800c8c8 	.word	0x0800c8c8
 80098d8:	0800c8c8 	.word	0x0800c8c8
 80098dc:	0800c8cc 	.word	0x0800c8cc

080098e0 <__retarget_lock_init_recursive>:
 80098e0:	4770      	bx	lr

080098e2 <__retarget_lock_acquire_recursive>:
 80098e2:	4770      	bx	lr

080098e4 <__retarget_lock_release_recursive>:
 80098e4:	4770      	bx	lr

080098e6 <memcpy>:
 80098e6:	440a      	add	r2, r1
 80098e8:	4291      	cmp	r1, r2
 80098ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80098ee:	d100      	bne.n	80098f2 <memcpy+0xc>
 80098f0:	4770      	bx	lr
 80098f2:	b510      	push	{r4, lr}
 80098f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098fc:	4291      	cmp	r1, r2
 80098fe:	d1f9      	bne.n	80098f4 <memcpy+0xe>
 8009900:	bd10      	pop	{r4, pc}

08009902 <quorem>:
 8009902:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009906:	6903      	ldr	r3, [r0, #16]
 8009908:	690c      	ldr	r4, [r1, #16]
 800990a:	42a3      	cmp	r3, r4
 800990c:	4607      	mov	r7, r0
 800990e:	db7e      	blt.n	8009a0e <quorem+0x10c>
 8009910:	3c01      	subs	r4, #1
 8009912:	f101 0814 	add.w	r8, r1, #20
 8009916:	00a3      	lsls	r3, r4, #2
 8009918:	f100 0514 	add.w	r5, r0, #20
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009922:	9301      	str	r3, [sp, #4]
 8009924:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009928:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800992c:	3301      	adds	r3, #1
 800992e:	429a      	cmp	r2, r3
 8009930:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009934:	fbb2 f6f3 	udiv	r6, r2, r3
 8009938:	d32e      	bcc.n	8009998 <quorem+0x96>
 800993a:	f04f 0a00 	mov.w	sl, #0
 800993e:	46c4      	mov	ip, r8
 8009940:	46ae      	mov	lr, r5
 8009942:	46d3      	mov	fp, sl
 8009944:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009948:	b298      	uxth	r0, r3
 800994a:	fb06 a000 	mla	r0, r6, r0, sl
 800994e:	0c02      	lsrs	r2, r0, #16
 8009950:	0c1b      	lsrs	r3, r3, #16
 8009952:	fb06 2303 	mla	r3, r6, r3, r2
 8009956:	f8de 2000 	ldr.w	r2, [lr]
 800995a:	b280      	uxth	r0, r0
 800995c:	b292      	uxth	r2, r2
 800995e:	1a12      	subs	r2, r2, r0
 8009960:	445a      	add	r2, fp
 8009962:	f8de 0000 	ldr.w	r0, [lr]
 8009966:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800996a:	b29b      	uxth	r3, r3
 800996c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009970:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009974:	b292      	uxth	r2, r2
 8009976:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800997a:	45e1      	cmp	r9, ip
 800997c:	f84e 2b04 	str.w	r2, [lr], #4
 8009980:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009984:	d2de      	bcs.n	8009944 <quorem+0x42>
 8009986:	9b00      	ldr	r3, [sp, #0]
 8009988:	58eb      	ldr	r3, [r5, r3]
 800998a:	b92b      	cbnz	r3, 8009998 <quorem+0x96>
 800998c:	9b01      	ldr	r3, [sp, #4]
 800998e:	3b04      	subs	r3, #4
 8009990:	429d      	cmp	r5, r3
 8009992:	461a      	mov	r2, r3
 8009994:	d32f      	bcc.n	80099f6 <quorem+0xf4>
 8009996:	613c      	str	r4, [r7, #16]
 8009998:	4638      	mov	r0, r7
 800999a:	f001 f97b 	bl	800ac94 <__mcmp>
 800999e:	2800      	cmp	r0, #0
 80099a0:	db25      	blt.n	80099ee <quorem+0xec>
 80099a2:	4629      	mov	r1, r5
 80099a4:	2000      	movs	r0, #0
 80099a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80099aa:	f8d1 c000 	ldr.w	ip, [r1]
 80099ae:	fa1f fe82 	uxth.w	lr, r2
 80099b2:	fa1f f38c 	uxth.w	r3, ip
 80099b6:	eba3 030e 	sub.w	r3, r3, lr
 80099ba:	4403      	add	r3, r0
 80099bc:	0c12      	lsrs	r2, r2, #16
 80099be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80099c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099cc:	45c1      	cmp	r9, r8
 80099ce:	f841 3b04 	str.w	r3, [r1], #4
 80099d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80099d6:	d2e6      	bcs.n	80099a6 <quorem+0xa4>
 80099d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099e0:	b922      	cbnz	r2, 80099ec <quorem+0xea>
 80099e2:	3b04      	subs	r3, #4
 80099e4:	429d      	cmp	r5, r3
 80099e6:	461a      	mov	r2, r3
 80099e8:	d30b      	bcc.n	8009a02 <quorem+0x100>
 80099ea:	613c      	str	r4, [r7, #16]
 80099ec:	3601      	adds	r6, #1
 80099ee:	4630      	mov	r0, r6
 80099f0:	b003      	add	sp, #12
 80099f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f6:	6812      	ldr	r2, [r2, #0]
 80099f8:	3b04      	subs	r3, #4
 80099fa:	2a00      	cmp	r2, #0
 80099fc:	d1cb      	bne.n	8009996 <quorem+0x94>
 80099fe:	3c01      	subs	r4, #1
 8009a00:	e7c6      	b.n	8009990 <quorem+0x8e>
 8009a02:	6812      	ldr	r2, [r2, #0]
 8009a04:	3b04      	subs	r3, #4
 8009a06:	2a00      	cmp	r2, #0
 8009a08:	d1ef      	bne.n	80099ea <quorem+0xe8>
 8009a0a:	3c01      	subs	r4, #1
 8009a0c:	e7ea      	b.n	80099e4 <quorem+0xe2>
 8009a0e:	2000      	movs	r0, #0
 8009a10:	e7ee      	b.n	80099f0 <quorem+0xee>
 8009a12:	0000      	movs	r0, r0
 8009a14:	0000      	movs	r0, r0
	...

08009a18 <_dtoa_r>:
 8009a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	69c7      	ldr	r7, [r0, #28]
 8009a1e:	b099      	sub	sp, #100	@ 0x64
 8009a20:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a24:	ec55 4b10 	vmov	r4, r5, d0
 8009a28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009a2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a2c:	4683      	mov	fp, r0
 8009a2e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a32:	b97f      	cbnz	r7, 8009a54 <_dtoa_r+0x3c>
 8009a34:	2010      	movs	r0, #16
 8009a36:	f000 fdfd 	bl	800a634 <malloc>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009a40:	b920      	cbnz	r0, 8009a4c <_dtoa_r+0x34>
 8009a42:	4ba7      	ldr	r3, [pc, #668]	@ (8009ce0 <_dtoa_r+0x2c8>)
 8009a44:	21ef      	movs	r1, #239	@ 0xef
 8009a46:	48a7      	ldr	r0, [pc, #668]	@ (8009ce4 <_dtoa_r+0x2cc>)
 8009a48:	f001 fc5a 	bl	800b300 <__assert_func>
 8009a4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009a50:	6007      	str	r7, [r0, #0]
 8009a52:	60c7      	str	r7, [r0, #12]
 8009a54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a58:	6819      	ldr	r1, [r3, #0]
 8009a5a:	b159      	cbz	r1, 8009a74 <_dtoa_r+0x5c>
 8009a5c:	685a      	ldr	r2, [r3, #4]
 8009a5e:	604a      	str	r2, [r1, #4]
 8009a60:	2301      	movs	r3, #1
 8009a62:	4093      	lsls	r3, r2
 8009a64:	608b      	str	r3, [r1, #8]
 8009a66:	4658      	mov	r0, fp
 8009a68:	f000 feda 	bl	800a820 <_Bfree>
 8009a6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a70:	2200      	movs	r2, #0
 8009a72:	601a      	str	r2, [r3, #0]
 8009a74:	1e2b      	subs	r3, r5, #0
 8009a76:	bfb9      	ittee	lt
 8009a78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a7c:	9303      	strlt	r3, [sp, #12]
 8009a7e:	2300      	movge	r3, #0
 8009a80:	6033      	strge	r3, [r6, #0]
 8009a82:	9f03      	ldr	r7, [sp, #12]
 8009a84:	4b98      	ldr	r3, [pc, #608]	@ (8009ce8 <_dtoa_r+0x2d0>)
 8009a86:	bfbc      	itt	lt
 8009a88:	2201      	movlt	r2, #1
 8009a8a:	6032      	strlt	r2, [r6, #0]
 8009a8c:	43bb      	bics	r3, r7
 8009a8e:	d112      	bne.n	8009ab6 <_dtoa_r+0x9e>
 8009a90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a96:	6013      	str	r3, [r2, #0]
 8009a98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a9c:	4323      	orrs	r3, r4
 8009a9e:	f000 854d 	beq.w	800a53c <_dtoa_r+0xb24>
 8009aa2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009aa4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009cfc <_dtoa_r+0x2e4>
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f000 854f 	beq.w	800a54c <_dtoa_r+0xb34>
 8009aae:	f10a 0303 	add.w	r3, sl, #3
 8009ab2:	f000 bd49 	b.w	800a548 <_dtoa_r+0xb30>
 8009ab6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009aba:	2200      	movs	r2, #0
 8009abc:	ec51 0b17 	vmov	r0, r1, d7
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009ac6:	f7f6 ffff 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aca:	4680      	mov	r8, r0
 8009acc:	b158      	cbz	r0, 8009ae6 <_dtoa_r+0xce>
 8009ace:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	6013      	str	r3, [r2, #0]
 8009ad4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ad6:	b113      	cbz	r3, 8009ade <_dtoa_r+0xc6>
 8009ad8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009ada:	4b84      	ldr	r3, [pc, #528]	@ (8009cec <_dtoa_r+0x2d4>)
 8009adc:	6013      	str	r3, [r2, #0]
 8009ade:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009d00 <_dtoa_r+0x2e8>
 8009ae2:	f000 bd33 	b.w	800a54c <_dtoa_r+0xb34>
 8009ae6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009aea:	aa16      	add	r2, sp, #88	@ 0x58
 8009aec:	a917      	add	r1, sp, #92	@ 0x5c
 8009aee:	4658      	mov	r0, fp
 8009af0:	f001 f980 	bl	800adf4 <__d2b>
 8009af4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009af8:	4681      	mov	r9, r0
 8009afa:	2e00      	cmp	r6, #0
 8009afc:	d077      	beq.n	8009bee <_dtoa_r+0x1d6>
 8009afe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009b10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009b14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009b18:	4619      	mov	r1, r3
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	4b74      	ldr	r3, [pc, #464]	@ (8009cf0 <_dtoa_r+0x2d8>)
 8009b1e:	f7f6 fbb3 	bl	8000288 <__aeabi_dsub>
 8009b22:	a369      	add	r3, pc, #420	@ (adr r3, 8009cc8 <_dtoa_r+0x2b0>)
 8009b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b28:	f7f6 fd66 	bl	80005f8 <__aeabi_dmul>
 8009b2c:	a368      	add	r3, pc, #416	@ (adr r3, 8009cd0 <_dtoa_r+0x2b8>)
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	f7f6 fbab 	bl	800028c <__adddf3>
 8009b36:	4604      	mov	r4, r0
 8009b38:	4630      	mov	r0, r6
 8009b3a:	460d      	mov	r5, r1
 8009b3c:	f7f6 fcf2 	bl	8000524 <__aeabi_i2d>
 8009b40:	a365      	add	r3, pc, #404	@ (adr r3, 8009cd8 <_dtoa_r+0x2c0>)
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	f7f6 fd57 	bl	80005f8 <__aeabi_dmul>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4620      	mov	r0, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	f7f6 fb9b 	bl	800028c <__adddf3>
 8009b56:	4604      	mov	r4, r0
 8009b58:	460d      	mov	r5, r1
 8009b5a:	f7f6 fffd 	bl	8000b58 <__aeabi_d2iz>
 8009b5e:	2200      	movs	r2, #0
 8009b60:	4607      	mov	r7, r0
 8009b62:	2300      	movs	r3, #0
 8009b64:	4620      	mov	r0, r4
 8009b66:	4629      	mov	r1, r5
 8009b68:	f7f6 ffb8 	bl	8000adc <__aeabi_dcmplt>
 8009b6c:	b140      	cbz	r0, 8009b80 <_dtoa_r+0x168>
 8009b6e:	4638      	mov	r0, r7
 8009b70:	f7f6 fcd8 	bl	8000524 <__aeabi_i2d>
 8009b74:	4622      	mov	r2, r4
 8009b76:	462b      	mov	r3, r5
 8009b78:	f7f6 ffa6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b7c:	b900      	cbnz	r0, 8009b80 <_dtoa_r+0x168>
 8009b7e:	3f01      	subs	r7, #1
 8009b80:	2f16      	cmp	r7, #22
 8009b82:	d851      	bhi.n	8009c28 <_dtoa_r+0x210>
 8009b84:	4b5b      	ldr	r3, [pc, #364]	@ (8009cf4 <_dtoa_r+0x2dc>)
 8009b86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b92:	f7f6 ffa3 	bl	8000adc <__aeabi_dcmplt>
 8009b96:	2800      	cmp	r0, #0
 8009b98:	d048      	beq.n	8009c2c <_dtoa_r+0x214>
 8009b9a:	3f01      	subs	r7, #1
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009ba0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009ba2:	1b9b      	subs	r3, r3, r6
 8009ba4:	1e5a      	subs	r2, r3, #1
 8009ba6:	bf44      	itt	mi
 8009ba8:	f1c3 0801 	rsbmi	r8, r3, #1
 8009bac:	2300      	movmi	r3, #0
 8009bae:	9208      	str	r2, [sp, #32]
 8009bb0:	bf54      	ite	pl
 8009bb2:	f04f 0800 	movpl.w	r8, #0
 8009bb6:	9308      	strmi	r3, [sp, #32]
 8009bb8:	2f00      	cmp	r7, #0
 8009bba:	db39      	blt.n	8009c30 <_dtoa_r+0x218>
 8009bbc:	9b08      	ldr	r3, [sp, #32]
 8009bbe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009bc0:	443b      	add	r3, r7
 8009bc2:	9308      	str	r3, [sp, #32]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bca:	2b09      	cmp	r3, #9
 8009bcc:	d864      	bhi.n	8009c98 <_dtoa_r+0x280>
 8009bce:	2b05      	cmp	r3, #5
 8009bd0:	bfc4      	itt	gt
 8009bd2:	3b04      	subgt	r3, #4
 8009bd4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bd8:	f1a3 0302 	sub.w	r3, r3, #2
 8009bdc:	bfcc      	ite	gt
 8009bde:	2400      	movgt	r4, #0
 8009be0:	2401      	movle	r4, #1
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d863      	bhi.n	8009cae <_dtoa_r+0x296>
 8009be6:	e8df f003 	tbb	[pc, r3]
 8009bea:	372a      	.short	0x372a
 8009bec:	5535      	.short	0x5535
 8009bee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009bf2:	441e      	add	r6, r3
 8009bf4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009bf8:	2b20      	cmp	r3, #32
 8009bfa:	bfc1      	itttt	gt
 8009bfc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009c00:	409f      	lslgt	r7, r3
 8009c02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009c06:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009c0a:	bfd6      	itet	le
 8009c0c:	f1c3 0320 	rsble	r3, r3, #32
 8009c10:	ea47 0003 	orrgt.w	r0, r7, r3
 8009c14:	fa04 f003 	lslle.w	r0, r4, r3
 8009c18:	f7f6 fc74 	bl	8000504 <__aeabi_ui2d>
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009c22:	3e01      	subs	r6, #1
 8009c24:	9214      	str	r2, [sp, #80]	@ 0x50
 8009c26:	e777      	b.n	8009b18 <_dtoa_r+0x100>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e7b8      	b.n	8009b9e <_dtoa_r+0x186>
 8009c2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009c2e:	e7b7      	b.n	8009ba0 <_dtoa_r+0x188>
 8009c30:	427b      	negs	r3, r7
 8009c32:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c34:	2300      	movs	r3, #0
 8009c36:	eba8 0807 	sub.w	r8, r8, r7
 8009c3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c3c:	e7c4      	b.n	8009bc8 <_dtoa_r+0x1b0>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	dc35      	bgt.n	8009cb4 <_dtoa_r+0x29c>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	9307      	str	r3, [sp, #28]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c52:	e00b      	b.n	8009c6c <_dtoa_r+0x254>
 8009c54:	2301      	movs	r3, #1
 8009c56:	e7f3      	b.n	8009c40 <_dtoa_r+0x228>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c5e:	18fb      	adds	r3, r7, r3
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	3301      	adds	r3, #1
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	9307      	str	r3, [sp, #28]
 8009c68:	bfb8      	it	lt
 8009c6a:	2301      	movlt	r3, #1
 8009c6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009c70:	2100      	movs	r1, #0
 8009c72:	2204      	movs	r2, #4
 8009c74:	f102 0514 	add.w	r5, r2, #20
 8009c78:	429d      	cmp	r5, r3
 8009c7a:	d91f      	bls.n	8009cbc <_dtoa_r+0x2a4>
 8009c7c:	6041      	str	r1, [r0, #4]
 8009c7e:	4658      	mov	r0, fp
 8009c80:	f000 fd8e 	bl	800a7a0 <_Balloc>
 8009c84:	4682      	mov	sl, r0
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d13c      	bne.n	8009d04 <_dtoa_r+0x2ec>
 8009c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8009cf8 <_dtoa_r+0x2e0>)
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c92:	e6d8      	b.n	8009a46 <_dtoa_r+0x2e>
 8009c94:	2301      	movs	r3, #1
 8009c96:	e7e0      	b.n	8009c5a <_dtoa_r+0x242>
 8009c98:	2401      	movs	r4, #1
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	9307      	str	r3, [sp, #28]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2312      	movs	r3, #18
 8009cac:	e7d0      	b.n	8009c50 <_dtoa_r+0x238>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cb2:	e7f5      	b.n	8009ca0 <_dtoa_r+0x288>
 8009cb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	9307      	str	r3, [sp, #28]
 8009cba:	e7d7      	b.n	8009c6c <_dtoa_r+0x254>
 8009cbc:	3101      	adds	r1, #1
 8009cbe:	0052      	lsls	r2, r2, #1
 8009cc0:	e7d8      	b.n	8009c74 <_dtoa_r+0x25c>
 8009cc2:	bf00      	nop
 8009cc4:	f3af 8000 	nop.w
 8009cc8:	636f4361 	.word	0x636f4361
 8009ccc:	3fd287a7 	.word	0x3fd287a7
 8009cd0:	8b60c8b3 	.word	0x8b60c8b3
 8009cd4:	3fc68a28 	.word	0x3fc68a28
 8009cd8:	509f79fb 	.word	0x509f79fb
 8009cdc:	3fd34413 	.word	0x3fd34413
 8009ce0:	0800c591 	.word	0x0800c591
 8009ce4:	0800c5a8 	.word	0x0800c5a8
 8009ce8:	7ff00000 	.word	0x7ff00000
 8009cec:	0800c561 	.word	0x0800c561
 8009cf0:	3ff80000 	.word	0x3ff80000
 8009cf4:	0800c6a0 	.word	0x0800c6a0
 8009cf8:	0800c600 	.word	0x0800c600
 8009cfc:	0800c58d 	.word	0x0800c58d
 8009d00:	0800c560 	.word	0x0800c560
 8009d04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d08:	6018      	str	r0, [r3, #0]
 8009d0a:	9b07      	ldr	r3, [sp, #28]
 8009d0c:	2b0e      	cmp	r3, #14
 8009d0e:	f200 80a4 	bhi.w	8009e5a <_dtoa_r+0x442>
 8009d12:	2c00      	cmp	r4, #0
 8009d14:	f000 80a1 	beq.w	8009e5a <_dtoa_r+0x442>
 8009d18:	2f00      	cmp	r7, #0
 8009d1a:	dd33      	ble.n	8009d84 <_dtoa_r+0x36c>
 8009d1c:	4bad      	ldr	r3, [pc, #692]	@ (8009fd4 <_dtoa_r+0x5bc>)
 8009d1e:	f007 020f 	and.w	r2, r7, #15
 8009d22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d26:	ed93 7b00 	vldr	d7, [r3]
 8009d2a:	05f8      	lsls	r0, r7, #23
 8009d2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009d30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009d34:	d516      	bpl.n	8009d64 <_dtoa_r+0x34c>
 8009d36:	4ba8      	ldr	r3, [pc, #672]	@ (8009fd8 <_dtoa_r+0x5c0>)
 8009d38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d40:	f7f6 fd84 	bl	800084c <__aeabi_ddiv>
 8009d44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d48:	f004 040f 	and.w	r4, r4, #15
 8009d4c:	2603      	movs	r6, #3
 8009d4e:	4da2      	ldr	r5, [pc, #648]	@ (8009fd8 <_dtoa_r+0x5c0>)
 8009d50:	b954      	cbnz	r4, 8009d68 <_dtoa_r+0x350>
 8009d52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d5a:	f7f6 fd77 	bl	800084c <__aeabi_ddiv>
 8009d5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d62:	e028      	b.n	8009db6 <_dtoa_r+0x39e>
 8009d64:	2602      	movs	r6, #2
 8009d66:	e7f2      	b.n	8009d4e <_dtoa_r+0x336>
 8009d68:	07e1      	lsls	r1, r4, #31
 8009d6a:	d508      	bpl.n	8009d7e <_dtoa_r+0x366>
 8009d6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d74:	f7f6 fc40 	bl	80005f8 <__aeabi_dmul>
 8009d78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d7c:	3601      	adds	r6, #1
 8009d7e:	1064      	asrs	r4, r4, #1
 8009d80:	3508      	adds	r5, #8
 8009d82:	e7e5      	b.n	8009d50 <_dtoa_r+0x338>
 8009d84:	f000 80d2 	beq.w	8009f2c <_dtoa_r+0x514>
 8009d88:	427c      	negs	r4, r7
 8009d8a:	4b92      	ldr	r3, [pc, #584]	@ (8009fd4 <_dtoa_r+0x5bc>)
 8009d8c:	4d92      	ldr	r5, [pc, #584]	@ (8009fd8 <_dtoa_r+0x5c0>)
 8009d8e:	f004 020f 	and.w	r2, r4, #15
 8009d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d9e:	f7f6 fc2b 	bl	80005f8 <__aeabi_dmul>
 8009da2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009da6:	1124      	asrs	r4, r4, #4
 8009da8:	2300      	movs	r3, #0
 8009daa:	2602      	movs	r6, #2
 8009dac:	2c00      	cmp	r4, #0
 8009dae:	f040 80b2 	bne.w	8009f16 <_dtoa_r+0x4fe>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1d3      	bne.n	8009d5e <_dtoa_r+0x346>
 8009db6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009db8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 80b7 	beq.w	8009f30 <_dtoa_r+0x518>
 8009dc2:	4b86      	ldr	r3, [pc, #536]	@ (8009fdc <_dtoa_r+0x5c4>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	4629      	mov	r1, r5
 8009dca:	f7f6 fe87 	bl	8000adc <__aeabi_dcmplt>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	f000 80ae 	beq.w	8009f30 <_dtoa_r+0x518>
 8009dd4:	9b07      	ldr	r3, [sp, #28]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 80aa 	beq.w	8009f30 <_dtoa_r+0x518>
 8009ddc:	9b00      	ldr	r3, [sp, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	dd37      	ble.n	8009e52 <_dtoa_r+0x43a>
 8009de2:	1e7b      	subs	r3, r7, #1
 8009de4:	9304      	str	r3, [sp, #16]
 8009de6:	4620      	mov	r0, r4
 8009de8:	4b7d      	ldr	r3, [pc, #500]	@ (8009fe0 <_dtoa_r+0x5c8>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	4629      	mov	r1, r5
 8009dee:	f7f6 fc03 	bl	80005f8 <__aeabi_dmul>
 8009df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009df6:	9c00      	ldr	r4, [sp, #0]
 8009df8:	3601      	adds	r6, #1
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f7f6 fb92 	bl	8000524 <__aeabi_i2d>
 8009e00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e04:	f7f6 fbf8 	bl	80005f8 <__aeabi_dmul>
 8009e08:	4b76      	ldr	r3, [pc, #472]	@ (8009fe4 <_dtoa_r+0x5cc>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f7f6 fa3e 	bl	800028c <__adddf3>
 8009e10:	4605      	mov	r5, r0
 8009e12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009e16:	2c00      	cmp	r4, #0
 8009e18:	f040 808d 	bne.w	8009f36 <_dtoa_r+0x51e>
 8009e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e20:	4b71      	ldr	r3, [pc, #452]	@ (8009fe8 <_dtoa_r+0x5d0>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	f7f6 fa30 	bl	8000288 <__aeabi_dsub>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e30:	462a      	mov	r2, r5
 8009e32:	4633      	mov	r3, r6
 8009e34:	f7f6 fe70 	bl	8000b18 <__aeabi_dcmpgt>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	f040 828b 	bne.w	800a354 <_dtoa_r+0x93c>
 8009e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e42:	462a      	mov	r2, r5
 8009e44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009e48:	f7f6 fe48 	bl	8000adc <__aeabi_dcmplt>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	f040 8128 	bne.w	800a0a2 <_dtoa_r+0x68a>
 8009e52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009e56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009e5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f2c0 815a 	blt.w	800a116 <_dtoa_r+0x6fe>
 8009e62:	2f0e      	cmp	r7, #14
 8009e64:	f300 8157 	bgt.w	800a116 <_dtoa_r+0x6fe>
 8009e68:	4b5a      	ldr	r3, [pc, #360]	@ (8009fd4 <_dtoa_r+0x5bc>)
 8009e6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e6e:	ed93 7b00 	vldr	d7, [r3]
 8009e72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	ed8d 7b00 	vstr	d7, [sp]
 8009e7a:	da03      	bge.n	8009e84 <_dtoa_r+0x46c>
 8009e7c:	9b07      	ldr	r3, [sp, #28]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	f340 8101 	ble.w	800a086 <_dtoa_r+0x66e>
 8009e84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e88:	4656      	mov	r6, sl
 8009e8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e8e:	4620      	mov	r0, r4
 8009e90:	4629      	mov	r1, r5
 8009e92:	f7f6 fcdb 	bl	800084c <__aeabi_ddiv>
 8009e96:	f7f6 fe5f 	bl	8000b58 <__aeabi_d2iz>
 8009e9a:	4680      	mov	r8, r0
 8009e9c:	f7f6 fb42 	bl	8000524 <__aeabi_i2d>
 8009ea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ea4:	f7f6 fba8 	bl	80005f8 <__aeabi_dmul>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	460b      	mov	r3, r1
 8009eac:	4620      	mov	r0, r4
 8009eae:	4629      	mov	r1, r5
 8009eb0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009eb4:	f7f6 f9e8 	bl	8000288 <__aeabi_dsub>
 8009eb8:	f806 4b01 	strb.w	r4, [r6], #1
 8009ebc:	9d07      	ldr	r5, [sp, #28]
 8009ebe:	eba6 040a 	sub.w	r4, r6, sl
 8009ec2:	42a5      	cmp	r5, r4
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	f040 8117 	bne.w	800a0fa <_dtoa_r+0x6e2>
 8009ecc:	f7f6 f9de 	bl	800028c <__adddf3>
 8009ed0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	460d      	mov	r5, r1
 8009ed8:	f7f6 fe1e 	bl	8000b18 <__aeabi_dcmpgt>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	f040 80f9 	bne.w	800a0d4 <_dtoa_r+0x6bc>
 8009ee2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	4629      	mov	r1, r5
 8009eea:	f7f6 fded 	bl	8000ac8 <__aeabi_dcmpeq>
 8009eee:	b118      	cbz	r0, 8009ef8 <_dtoa_r+0x4e0>
 8009ef0:	f018 0f01 	tst.w	r8, #1
 8009ef4:	f040 80ee 	bne.w	800a0d4 <_dtoa_r+0x6bc>
 8009ef8:	4649      	mov	r1, r9
 8009efa:	4658      	mov	r0, fp
 8009efc:	f000 fc90 	bl	800a820 <_Bfree>
 8009f00:	2300      	movs	r3, #0
 8009f02:	7033      	strb	r3, [r6, #0]
 8009f04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f06:	3701      	adds	r7, #1
 8009f08:	601f      	str	r7, [r3, #0]
 8009f0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 831d 	beq.w	800a54c <_dtoa_r+0xb34>
 8009f12:	601e      	str	r6, [r3, #0]
 8009f14:	e31a      	b.n	800a54c <_dtoa_r+0xb34>
 8009f16:	07e2      	lsls	r2, r4, #31
 8009f18:	d505      	bpl.n	8009f26 <_dtoa_r+0x50e>
 8009f1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f1e:	f7f6 fb6b 	bl	80005f8 <__aeabi_dmul>
 8009f22:	3601      	adds	r6, #1
 8009f24:	2301      	movs	r3, #1
 8009f26:	1064      	asrs	r4, r4, #1
 8009f28:	3508      	adds	r5, #8
 8009f2a:	e73f      	b.n	8009dac <_dtoa_r+0x394>
 8009f2c:	2602      	movs	r6, #2
 8009f2e:	e742      	b.n	8009db6 <_dtoa_r+0x39e>
 8009f30:	9c07      	ldr	r4, [sp, #28]
 8009f32:	9704      	str	r7, [sp, #16]
 8009f34:	e761      	b.n	8009dfa <_dtoa_r+0x3e2>
 8009f36:	4b27      	ldr	r3, [pc, #156]	@ (8009fd4 <_dtoa_r+0x5bc>)
 8009f38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f42:	4454      	add	r4, sl
 8009f44:	2900      	cmp	r1, #0
 8009f46:	d053      	beq.n	8009ff0 <_dtoa_r+0x5d8>
 8009f48:	4928      	ldr	r1, [pc, #160]	@ (8009fec <_dtoa_r+0x5d4>)
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	f7f6 fc7e 	bl	800084c <__aeabi_ddiv>
 8009f50:	4633      	mov	r3, r6
 8009f52:	462a      	mov	r2, r5
 8009f54:	f7f6 f998 	bl	8000288 <__aeabi_dsub>
 8009f58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f5c:	4656      	mov	r6, sl
 8009f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f62:	f7f6 fdf9 	bl	8000b58 <__aeabi_d2iz>
 8009f66:	4605      	mov	r5, r0
 8009f68:	f7f6 fadc 	bl	8000524 <__aeabi_i2d>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f74:	f7f6 f988 	bl	8000288 <__aeabi_dsub>
 8009f78:	3530      	adds	r5, #48	@ 0x30
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f82:	f806 5b01 	strb.w	r5, [r6], #1
 8009f86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f8a:	f7f6 fda7 	bl	8000adc <__aeabi_dcmplt>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d171      	bne.n	800a076 <_dtoa_r+0x65e>
 8009f92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f96:	4911      	ldr	r1, [pc, #68]	@ (8009fdc <_dtoa_r+0x5c4>)
 8009f98:	2000      	movs	r0, #0
 8009f9a:	f7f6 f975 	bl	8000288 <__aeabi_dsub>
 8009f9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009fa2:	f7f6 fd9b 	bl	8000adc <__aeabi_dcmplt>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	f040 8095 	bne.w	800a0d6 <_dtoa_r+0x6be>
 8009fac:	42a6      	cmp	r6, r4
 8009fae:	f43f af50 	beq.w	8009e52 <_dtoa_r+0x43a>
 8009fb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8009fe0 <_dtoa_r+0x5c8>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f7f6 fb1d 	bl	80005f8 <__aeabi_dmul>
 8009fbe:	4b08      	ldr	r3, [pc, #32]	@ (8009fe0 <_dtoa_r+0x5c8>)
 8009fc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fca:	f7f6 fb15 	bl	80005f8 <__aeabi_dmul>
 8009fce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fd2:	e7c4      	b.n	8009f5e <_dtoa_r+0x546>
 8009fd4:	0800c6a0 	.word	0x0800c6a0
 8009fd8:	0800c678 	.word	0x0800c678
 8009fdc:	3ff00000 	.word	0x3ff00000
 8009fe0:	40240000 	.word	0x40240000
 8009fe4:	401c0000 	.word	0x401c0000
 8009fe8:	40140000 	.word	0x40140000
 8009fec:	3fe00000 	.word	0x3fe00000
 8009ff0:	4631      	mov	r1, r6
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f7f6 fb00 	bl	80005f8 <__aeabi_dmul>
 8009ff8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ffc:	9415      	str	r4, [sp, #84]	@ 0x54
 8009ffe:	4656      	mov	r6, sl
 800a000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a004:	f7f6 fda8 	bl	8000b58 <__aeabi_d2iz>
 800a008:	4605      	mov	r5, r0
 800a00a:	f7f6 fa8b 	bl	8000524 <__aeabi_i2d>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a016:	f7f6 f937 	bl	8000288 <__aeabi_dsub>
 800a01a:	3530      	adds	r5, #48	@ 0x30
 800a01c:	f806 5b01 	strb.w	r5, [r6], #1
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	42a6      	cmp	r6, r4
 800a026:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a02a:	f04f 0200 	mov.w	r2, #0
 800a02e:	d124      	bne.n	800a07a <_dtoa_r+0x662>
 800a030:	4bac      	ldr	r3, [pc, #688]	@ (800a2e4 <_dtoa_r+0x8cc>)
 800a032:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a036:	f7f6 f929 	bl	800028c <__adddf3>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a042:	f7f6 fd69 	bl	8000b18 <__aeabi_dcmpgt>
 800a046:	2800      	cmp	r0, #0
 800a048:	d145      	bne.n	800a0d6 <_dtoa_r+0x6be>
 800a04a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a04e:	49a5      	ldr	r1, [pc, #660]	@ (800a2e4 <_dtoa_r+0x8cc>)
 800a050:	2000      	movs	r0, #0
 800a052:	f7f6 f919 	bl	8000288 <__aeabi_dsub>
 800a056:	4602      	mov	r2, r0
 800a058:	460b      	mov	r3, r1
 800a05a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a05e:	f7f6 fd3d 	bl	8000adc <__aeabi_dcmplt>
 800a062:	2800      	cmp	r0, #0
 800a064:	f43f aef5 	beq.w	8009e52 <_dtoa_r+0x43a>
 800a068:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a06a:	1e73      	subs	r3, r6, #1
 800a06c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a06e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a072:	2b30      	cmp	r3, #48	@ 0x30
 800a074:	d0f8      	beq.n	800a068 <_dtoa_r+0x650>
 800a076:	9f04      	ldr	r7, [sp, #16]
 800a078:	e73e      	b.n	8009ef8 <_dtoa_r+0x4e0>
 800a07a:	4b9b      	ldr	r3, [pc, #620]	@ (800a2e8 <_dtoa_r+0x8d0>)
 800a07c:	f7f6 fabc 	bl	80005f8 <__aeabi_dmul>
 800a080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a084:	e7bc      	b.n	800a000 <_dtoa_r+0x5e8>
 800a086:	d10c      	bne.n	800a0a2 <_dtoa_r+0x68a>
 800a088:	4b98      	ldr	r3, [pc, #608]	@ (800a2ec <_dtoa_r+0x8d4>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a090:	f7f6 fab2 	bl	80005f8 <__aeabi_dmul>
 800a094:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a098:	f7f6 fd34 	bl	8000b04 <__aeabi_dcmpge>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	f000 8157 	beq.w	800a350 <_dtoa_r+0x938>
 800a0a2:	2400      	movs	r4, #0
 800a0a4:	4625      	mov	r5, r4
 800a0a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0a8:	43db      	mvns	r3, r3
 800a0aa:	9304      	str	r3, [sp, #16]
 800a0ac:	4656      	mov	r6, sl
 800a0ae:	2700      	movs	r7, #0
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	4658      	mov	r0, fp
 800a0b4:	f000 fbb4 	bl	800a820 <_Bfree>
 800a0b8:	2d00      	cmp	r5, #0
 800a0ba:	d0dc      	beq.n	800a076 <_dtoa_r+0x65e>
 800a0bc:	b12f      	cbz	r7, 800a0ca <_dtoa_r+0x6b2>
 800a0be:	42af      	cmp	r7, r5
 800a0c0:	d003      	beq.n	800a0ca <_dtoa_r+0x6b2>
 800a0c2:	4639      	mov	r1, r7
 800a0c4:	4658      	mov	r0, fp
 800a0c6:	f000 fbab 	bl	800a820 <_Bfree>
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	4658      	mov	r0, fp
 800a0ce:	f000 fba7 	bl	800a820 <_Bfree>
 800a0d2:	e7d0      	b.n	800a076 <_dtoa_r+0x65e>
 800a0d4:	9704      	str	r7, [sp, #16]
 800a0d6:	4633      	mov	r3, r6
 800a0d8:	461e      	mov	r6, r3
 800a0da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0de:	2a39      	cmp	r2, #57	@ 0x39
 800a0e0:	d107      	bne.n	800a0f2 <_dtoa_r+0x6da>
 800a0e2:	459a      	cmp	sl, r3
 800a0e4:	d1f8      	bne.n	800a0d8 <_dtoa_r+0x6c0>
 800a0e6:	9a04      	ldr	r2, [sp, #16]
 800a0e8:	3201      	adds	r2, #1
 800a0ea:	9204      	str	r2, [sp, #16]
 800a0ec:	2230      	movs	r2, #48	@ 0x30
 800a0ee:	f88a 2000 	strb.w	r2, [sl]
 800a0f2:	781a      	ldrb	r2, [r3, #0]
 800a0f4:	3201      	adds	r2, #1
 800a0f6:	701a      	strb	r2, [r3, #0]
 800a0f8:	e7bd      	b.n	800a076 <_dtoa_r+0x65e>
 800a0fa:	4b7b      	ldr	r3, [pc, #492]	@ (800a2e8 <_dtoa_r+0x8d0>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f7f6 fa7b 	bl	80005f8 <__aeabi_dmul>
 800a102:	2200      	movs	r2, #0
 800a104:	2300      	movs	r3, #0
 800a106:	4604      	mov	r4, r0
 800a108:	460d      	mov	r5, r1
 800a10a:	f7f6 fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800a10e:	2800      	cmp	r0, #0
 800a110:	f43f aebb 	beq.w	8009e8a <_dtoa_r+0x472>
 800a114:	e6f0      	b.n	8009ef8 <_dtoa_r+0x4e0>
 800a116:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a118:	2a00      	cmp	r2, #0
 800a11a:	f000 80db 	beq.w	800a2d4 <_dtoa_r+0x8bc>
 800a11e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a120:	2a01      	cmp	r2, #1
 800a122:	f300 80bf 	bgt.w	800a2a4 <_dtoa_r+0x88c>
 800a126:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a128:	2a00      	cmp	r2, #0
 800a12a:	f000 80b7 	beq.w	800a29c <_dtoa_r+0x884>
 800a12e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a132:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a134:	4646      	mov	r6, r8
 800a136:	9a08      	ldr	r2, [sp, #32]
 800a138:	2101      	movs	r1, #1
 800a13a:	441a      	add	r2, r3
 800a13c:	4658      	mov	r0, fp
 800a13e:	4498      	add	r8, r3
 800a140:	9208      	str	r2, [sp, #32]
 800a142:	f000 fc21 	bl	800a988 <__i2b>
 800a146:	4605      	mov	r5, r0
 800a148:	b15e      	cbz	r6, 800a162 <_dtoa_r+0x74a>
 800a14a:	9b08      	ldr	r3, [sp, #32]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	dd08      	ble.n	800a162 <_dtoa_r+0x74a>
 800a150:	42b3      	cmp	r3, r6
 800a152:	9a08      	ldr	r2, [sp, #32]
 800a154:	bfa8      	it	ge
 800a156:	4633      	movge	r3, r6
 800a158:	eba8 0803 	sub.w	r8, r8, r3
 800a15c:	1af6      	subs	r6, r6, r3
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	9308      	str	r3, [sp, #32]
 800a162:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a164:	b1f3      	cbz	r3, 800a1a4 <_dtoa_r+0x78c>
 800a166:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 80b7 	beq.w	800a2dc <_dtoa_r+0x8c4>
 800a16e:	b18c      	cbz	r4, 800a194 <_dtoa_r+0x77c>
 800a170:	4629      	mov	r1, r5
 800a172:	4622      	mov	r2, r4
 800a174:	4658      	mov	r0, fp
 800a176:	f000 fcc7 	bl	800ab08 <__pow5mult>
 800a17a:	464a      	mov	r2, r9
 800a17c:	4601      	mov	r1, r0
 800a17e:	4605      	mov	r5, r0
 800a180:	4658      	mov	r0, fp
 800a182:	f000 fc17 	bl	800a9b4 <__multiply>
 800a186:	4649      	mov	r1, r9
 800a188:	9004      	str	r0, [sp, #16]
 800a18a:	4658      	mov	r0, fp
 800a18c:	f000 fb48 	bl	800a820 <_Bfree>
 800a190:	9b04      	ldr	r3, [sp, #16]
 800a192:	4699      	mov	r9, r3
 800a194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a196:	1b1a      	subs	r2, r3, r4
 800a198:	d004      	beq.n	800a1a4 <_dtoa_r+0x78c>
 800a19a:	4649      	mov	r1, r9
 800a19c:	4658      	mov	r0, fp
 800a19e:	f000 fcb3 	bl	800ab08 <__pow5mult>
 800a1a2:	4681      	mov	r9, r0
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	4658      	mov	r0, fp
 800a1a8:	f000 fbee 	bl	800a988 <__i2b>
 800a1ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 81cf 	beq.w	800a554 <_dtoa_r+0xb3c>
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	4601      	mov	r1, r0
 800a1ba:	4658      	mov	r0, fp
 800a1bc:	f000 fca4 	bl	800ab08 <__pow5mult>
 800a1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	f300 8095 	bgt.w	800a2f4 <_dtoa_r+0x8dc>
 800a1ca:	9b02      	ldr	r3, [sp, #8]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f040 8087 	bne.w	800a2e0 <_dtoa_r+0x8c8>
 800a1d2:	9b03      	ldr	r3, [sp, #12]
 800a1d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f040 8089 	bne.w	800a2f0 <_dtoa_r+0x8d8>
 800a1de:	9b03      	ldr	r3, [sp, #12]
 800a1e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1e4:	0d1b      	lsrs	r3, r3, #20
 800a1e6:	051b      	lsls	r3, r3, #20
 800a1e8:	b12b      	cbz	r3, 800a1f6 <_dtoa_r+0x7de>
 800a1ea:	9b08      	ldr	r3, [sp, #32]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	9308      	str	r3, [sp, #32]
 800a1f0:	f108 0801 	add.w	r8, r8, #1
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 81b0 	beq.w	800a560 <_dtoa_r+0xb48>
 800a200:	6923      	ldr	r3, [r4, #16]
 800a202:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a206:	6918      	ldr	r0, [r3, #16]
 800a208:	f000 fb72 	bl	800a8f0 <__hi0bits>
 800a20c:	f1c0 0020 	rsb	r0, r0, #32
 800a210:	9b08      	ldr	r3, [sp, #32]
 800a212:	4418      	add	r0, r3
 800a214:	f010 001f 	ands.w	r0, r0, #31
 800a218:	d077      	beq.n	800a30a <_dtoa_r+0x8f2>
 800a21a:	f1c0 0320 	rsb	r3, r0, #32
 800a21e:	2b04      	cmp	r3, #4
 800a220:	dd6b      	ble.n	800a2fa <_dtoa_r+0x8e2>
 800a222:	9b08      	ldr	r3, [sp, #32]
 800a224:	f1c0 001c 	rsb	r0, r0, #28
 800a228:	4403      	add	r3, r0
 800a22a:	4480      	add	r8, r0
 800a22c:	4406      	add	r6, r0
 800a22e:	9308      	str	r3, [sp, #32]
 800a230:	f1b8 0f00 	cmp.w	r8, #0
 800a234:	dd05      	ble.n	800a242 <_dtoa_r+0x82a>
 800a236:	4649      	mov	r1, r9
 800a238:	4642      	mov	r2, r8
 800a23a:	4658      	mov	r0, fp
 800a23c:	f000 fcbe 	bl	800abbc <__lshift>
 800a240:	4681      	mov	r9, r0
 800a242:	9b08      	ldr	r3, [sp, #32]
 800a244:	2b00      	cmp	r3, #0
 800a246:	dd05      	ble.n	800a254 <_dtoa_r+0x83c>
 800a248:	4621      	mov	r1, r4
 800a24a:	461a      	mov	r2, r3
 800a24c:	4658      	mov	r0, fp
 800a24e:	f000 fcb5 	bl	800abbc <__lshift>
 800a252:	4604      	mov	r4, r0
 800a254:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a256:	2b00      	cmp	r3, #0
 800a258:	d059      	beq.n	800a30e <_dtoa_r+0x8f6>
 800a25a:	4621      	mov	r1, r4
 800a25c:	4648      	mov	r0, r9
 800a25e:	f000 fd19 	bl	800ac94 <__mcmp>
 800a262:	2800      	cmp	r0, #0
 800a264:	da53      	bge.n	800a30e <_dtoa_r+0x8f6>
 800a266:	1e7b      	subs	r3, r7, #1
 800a268:	9304      	str	r3, [sp, #16]
 800a26a:	4649      	mov	r1, r9
 800a26c:	2300      	movs	r3, #0
 800a26e:	220a      	movs	r2, #10
 800a270:	4658      	mov	r0, fp
 800a272:	f000 faf7 	bl	800a864 <__multadd>
 800a276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a278:	4681      	mov	r9, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 8172 	beq.w	800a564 <_dtoa_r+0xb4c>
 800a280:	2300      	movs	r3, #0
 800a282:	4629      	mov	r1, r5
 800a284:	220a      	movs	r2, #10
 800a286:	4658      	mov	r0, fp
 800a288:	f000 faec 	bl	800a864 <__multadd>
 800a28c:	9b00      	ldr	r3, [sp, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	4605      	mov	r5, r0
 800a292:	dc67      	bgt.n	800a364 <_dtoa_r+0x94c>
 800a294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a296:	2b02      	cmp	r3, #2
 800a298:	dc41      	bgt.n	800a31e <_dtoa_r+0x906>
 800a29a:	e063      	b.n	800a364 <_dtoa_r+0x94c>
 800a29c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a29e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a2a2:	e746      	b.n	800a132 <_dtoa_r+0x71a>
 800a2a4:	9b07      	ldr	r3, [sp, #28]
 800a2a6:	1e5c      	subs	r4, r3, #1
 800a2a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2aa:	42a3      	cmp	r3, r4
 800a2ac:	bfbf      	itttt	lt
 800a2ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a2b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a2b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a2b4:	1ae3      	sublt	r3, r4, r3
 800a2b6:	bfb4      	ite	lt
 800a2b8:	18d2      	addlt	r2, r2, r3
 800a2ba:	1b1c      	subge	r4, r3, r4
 800a2bc:	9b07      	ldr	r3, [sp, #28]
 800a2be:	bfbc      	itt	lt
 800a2c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a2c2:	2400      	movlt	r4, #0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	bfb5      	itete	lt
 800a2c8:	eba8 0603 	sublt.w	r6, r8, r3
 800a2cc:	9b07      	ldrge	r3, [sp, #28]
 800a2ce:	2300      	movlt	r3, #0
 800a2d0:	4646      	movge	r6, r8
 800a2d2:	e730      	b.n	800a136 <_dtoa_r+0x71e>
 800a2d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a2d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a2d8:	4646      	mov	r6, r8
 800a2da:	e735      	b.n	800a148 <_dtoa_r+0x730>
 800a2dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2de:	e75c      	b.n	800a19a <_dtoa_r+0x782>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	e788      	b.n	800a1f6 <_dtoa_r+0x7de>
 800a2e4:	3fe00000 	.word	0x3fe00000
 800a2e8:	40240000 	.word	0x40240000
 800a2ec:	40140000 	.word	0x40140000
 800a2f0:	9b02      	ldr	r3, [sp, #8]
 800a2f2:	e780      	b.n	800a1f6 <_dtoa_r+0x7de>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2f8:	e782      	b.n	800a200 <_dtoa_r+0x7e8>
 800a2fa:	d099      	beq.n	800a230 <_dtoa_r+0x818>
 800a2fc:	9a08      	ldr	r2, [sp, #32]
 800a2fe:	331c      	adds	r3, #28
 800a300:	441a      	add	r2, r3
 800a302:	4498      	add	r8, r3
 800a304:	441e      	add	r6, r3
 800a306:	9208      	str	r2, [sp, #32]
 800a308:	e792      	b.n	800a230 <_dtoa_r+0x818>
 800a30a:	4603      	mov	r3, r0
 800a30c:	e7f6      	b.n	800a2fc <_dtoa_r+0x8e4>
 800a30e:	9b07      	ldr	r3, [sp, #28]
 800a310:	9704      	str	r7, [sp, #16]
 800a312:	2b00      	cmp	r3, #0
 800a314:	dc20      	bgt.n	800a358 <_dtoa_r+0x940>
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	dd1e      	ble.n	800a35c <_dtoa_r+0x944>
 800a31e:	9b00      	ldr	r3, [sp, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	f47f aec0 	bne.w	800a0a6 <_dtoa_r+0x68e>
 800a326:	4621      	mov	r1, r4
 800a328:	2205      	movs	r2, #5
 800a32a:	4658      	mov	r0, fp
 800a32c:	f000 fa9a 	bl	800a864 <__multadd>
 800a330:	4601      	mov	r1, r0
 800a332:	4604      	mov	r4, r0
 800a334:	4648      	mov	r0, r9
 800a336:	f000 fcad 	bl	800ac94 <__mcmp>
 800a33a:	2800      	cmp	r0, #0
 800a33c:	f77f aeb3 	ble.w	800a0a6 <_dtoa_r+0x68e>
 800a340:	4656      	mov	r6, sl
 800a342:	2331      	movs	r3, #49	@ 0x31
 800a344:	f806 3b01 	strb.w	r3, [r6], #1
 800a348:	9b04      	ldr	r3, [sp, #16]
 800a34a:	3301      	adds	r3, #1
 800a34c:	9304      	str	r3, [sp, #16]
 800a34e:	e6ae      	b.n	800a0ae <_dtoa_r+0x696>
 800a350:	9c07      	ldr	r4, [sp, #28]
 800a352:	9704      	str	r7, [sp, #16]
 800a354:	4625      	mov	r5, r4
 800a356:	e7f3      	b.n	800a340 <_dtoa_r+0x928>
 800a358:	9b07      	ldr	r3, [sp, #28]
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f000 8104 	beq.w	800a56c <_dtoa_r+0xb54>
 800a364:	2e00      	cmp	r6, #0
 800a366:	dd05      	ble.n	800a374 <_dtoa_r+0x95c>
 800a368:	4629      	mov	r1, r5
 800a36a:	4632      	mov	r2, r6
 800a36c:	4658      	mov	r0, fp
 800a36e:	f000 fc25 	bl	800abbc <__lshift>
 800a372:	4605      	mov	r5, r0
 800a374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a376:	2b00      	cmp	r3, #0
 800a378:	d05a      	beq.n	800a430 <_dtoa_r+0xa18>
 800a37a:	6869      	ldr	r1, [r5, #4]
 800a37c:	4658      	mov	r0, fp
 800a37e:	f000 fa0f 	bl	800a7a0 <_Balloc>
 800a382:	4606      	mov	r6, r0
 800a384:	b928      	cbnz	r0, 800a392 <_dtoa_r+0x97a>
 800a386:	4b84      	ldr	r3, [pc, #528]	@ (800a598 <_dtoa_r+0xb80>)
 800a388:	4602      	mov	r2, r0
 800a38a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a38e:	f7ff bb5a 	b.w	8009a46 <_dtoa_r+0x2e>
 800a392:	692a      	ldr	r2, [r5, #16]
 800a394:	3202      	adds	r2, #2
 800a396:	0092      	lsls	r2, r2, #2
 800a398:	f105 010c 	add.w	r1, r5, #12
 800a39c:	300c      	adds	r0, #12
 800a39e:	f7ff faa2 	bl	80098e6 <memcpy>
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	4631      	mov	r1, r6
 800a3a6:	4658      	mov	r0, fp
 800a3a8:	f000 fc08 	bl	800abbc <__lshift>
 800a3ac:	f10a 0301 	add.w	r3, sl, #1
 800a3b0:	9307      	str	r3, [sp, #28]
 800a3b2:	9b00      	ldr	r3, [sp, #0]
 800a3b4:	4453      	add	r3, sl
 800a3b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3b8:	9b02      	ldr	r3, [sp, #8]
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	462f      	mov	r7, r5
 800a3c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3c2:	4605      	mov	r5, r0
 800a3c4:	9b07      	ldr	r3, [sp, #28]
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	4648      	mov	r0, r9
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	f7ff fa98 	bl	8009902 <quorem>
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	9002      	str	r0, [sp, #8]
 800a3d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a3da:	4648      	mov	r0, r9
 800a3dc:	f000 fc5a 	bl	800ac94 <__mcmp>
 800a3e0:	462a      	mov	r2, r5
 800a3e2:	9008      	str	r0, [sp, #32]
 800a3e4:	4621      	mov	r1, r4
 800a3e6:	4658      	mov	r0, fp
 800a3e8:	f000 fc70 	bl	800accc <__mdiff>
 800a3ec:	68c2      	ldr	r2, [r0, #12]
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	bb02      	cbnz	r2, 800a434 <_dtoa_r+0xa1c>
 800a3f2:	4601      	mov	r1, r0
 800a3f4:	4648      	mov	r0, r9
 800a3f6:	f000 fc4d 	bl	800ac94 <__mcmp>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	4631      	mov	r1, r6
 800a3fe:	4658      	mov	r0, fp
 800a400:	920e      	str	r2, [sp, #56]	@ 0x38
 800a402:	f000 fa0d 	bl	800a820 <_Bfree>
 800a406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a408:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a40a:	9e07      	ldr	r6, [sp, #28]
 800a40c:	ea43 0102 	orr.w	r1, r3, r2
 800a410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a412:	4319      	orrs	r1, r3
 800a414:	d110      	bne.n	800a438 <_dtoa_r+0xa20>
 800a416:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a41a:	d029      	beq.n	800a470 <_dtoa_r+0xa58>
 800a41c:	9b08      	ldr	r3, [sp, #32]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	dd02      	ble.n	800a428 <_dtoa_r+0xa10>
 800a422:	9b02      	ldr	r3, [sp, #8]
 800a424:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a428:	9b00      	ldr	r3, [sp, #0]
 800a42a:	f883 8000 	strb.w	r8, [r3]
 800a42e:	e63f      	b.n	800a0b0 <_dtoa_r+0x698>
 800a430:	4628      	mov	r0, r5
 800a432:	e7bb      	b.n	800a3ac <_dtoa_r+0x994>
 800a434:	2201      	movs	r2, #1
 800a436:	e7e1      	b.n	800a3fc <_dtoa_r+0x9e4>
 800a438:	9b08      	ldr	r3, [sp, #32]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	db04      	blt.n	800a448 <_dtoa_r+0xa30>
 800a43e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a440:	430b      	orrs	r3, r1
 800a442:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a444:	430b      	orrs	r3, r1
 800a446:	d120      	bne.n	800a48a <_dtoa_r+0xa72>
 800a448:	2a00      	cmp	r2, #0
 800a44a:	dded      	ble.n	800a428 <_dtoa_r+0xa10>
 800a44c:	4649      	mov	r1, r9
 800a44e:	2201      	movs	r2, #1
 800a450:	4658      	mov	r0, fp
 800a452:	f000 fbb3 	bl	800abbc <__lshift>
 800a456:	4621      	mov	r1, r4
 800a458:	4681      	mov	r9, r0
 800a45a:	f000 fc1b 	bl	800ac94 <__mcmp>
 800a45e:	2800      	cmp	r0, #0
 800a460:	dc03      	bgt.n	800a46a <_dtoa_r+0xa52>
 800a462:	d1e1      	bne.n	800a428 <_dtoa_r+0xa10>
 800a464:	f018 0f01 	tst.w	r8, #1
 800a468:	d0de      	beq.n	800a428 <_dtoa_r+0xa10>
 800a46a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a46e:	d1d8      	bne.n	800a422 <_dtoa_r+0xa0a>
 800a470:	9a00      	ldr	r2, [sp, #0]
 800a472:	2339      	movs	r3, #57	@ 0x39
 800a474:	7013      	strb	r3, [r2, #0]
 800a476:	4633      	mov	r3, r6
 800a478:	461e      	mov	r6, r3
 800a47a:	3b01      	subs	r3, #1
 800a47c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a480:	2a39      	cmp	r2, #57	@ 0x39
 800a482:	d052      	beq.n	800a52a <_dtoa_r+0xb12>
 800a484:	3201      	adds	r2, #1
 800a486:	701a      	strb	r2, [r3, #0]
 800a488:	e612      	b.n	800a0b0 <_dtoa_r+0x698>
 800a48a:	2a00      	cmp	r2, #0
 800a48c:	dd07      	ble.n	800a49e <_dtoa_r+0xa86>
 800a48e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a492:	d0ed      	beq.n	800a470 <_dtoa_r+0xa58>
 800a494:	9a00      	ldr	r2, [sp, #0]
 800a496:	f108 0301 	add.w	r3, r8, #1
 800a49a:	7013      	strb	r3, [r2, #0]
 800a49c:	e608      	b.n	800a0b0 <_dtoa_r+0x698>
 800a49e:	9b07      	ldr	r3, [sp, #28]
 800a4a0:	9a07      	ldr	r2, [sp, #28]
 800a4a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a4a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d028      	beq.n	800a4fe <_dtoa_r+0xae6>
 800a4ac:	4649      	mov	r1, r9
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	220a      	movs	r2, #10
 800a4b2:	4658      	mov	r0, fp
 800a4b4:	f000 f9d6 	bl	800a864 <__multadd>
 800a4b8:	42af      	cmp	r7, r5
 800a4ba:	4681      	mov	r9, r0
 800a4bc:	f04f 0300 	mov.w	r3, #0
 800a4c0:	f04f 020a 	mov.w	r2, #10
 800a4c4:	4639      	mov	r1, r7
 800a4c6:	4658      	mov	r0, fp
 800a4c8:	d107      	bne.n	800a4da <_dtoa_r+0xac2>
 800a4ca:	f000 f9cb 	bl	800a864 <__multadd>
 800a4ce:	4607      	mov	r7, r0
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	9b07      	ldr	r3, [sp, #28]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	9307      	str	r3, [sp, #28]
 800a4d8:	e774      	b.n	800a3c4 <_dtoa_r+0x9ac>
 800a4da:	f000 f9c3 	bl	800a864 <__multadd>
 800a4de:	4629      	mov	r1, r5
 800a4e0:	4607      	mov	r7, r0
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	220a      	movs	r2, #10
 800a4e6:	4658      	mov	r0, fp
 800a4e8:	f000 f9bc 	bl	800a864 <__multadd>
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	e7f0      	b.n	800a4d2 <_dtoa_r+0xaba>
 800a4f0:	9b00      	ldr	r3, [sp, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	bfcc      	ite	gt
 800a4f6:	461e      	movgt	r6, r3
 800a4f8:	2601      	movle	r6, #1
 800a4fa:	4456      	add	r6, sl
 800a4fc:	2700      	movs	r7, #0
 800a4fe:	4649      	mov	r1, r9
 800a500:	2201      	movs	r2, #1
 800a502:	4658      	mov	r0, fp
 800a504:	f000 fb5a 	bl	800abbc <__lshift>
 800a508:	4621      	mov	r1, r4
 800a50a:	4681      	mov	r9, r0
 800a50c:	f000 fbc2 	bl	800ac94 <__mcmp>
 800a510:	2800      	cmp	r0, #0
 800a512:	dcb0      	bgt.n	800a476 <_dtoa_r+0xa5e>
 800a514:	d102      	bne.n	800a51c <_dtoa_r+0xb04>
 800a516:	f018 0f01 	tst.w	r8, #1
 800a51a:	d1ac      	bne.n	800a476 <_dtoa_r+0xa5e>
 800a51c:	4633      	mov	r3, r6
 800a51e:	461e      	mov	r6, r3
 800a520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a524:	2a30      	cmp	r2, #48	@ 0x30
 800a526:	d0fa      	beq.n	800a51e <_dtoa_r+0xb06>
 800a528:	e5c2      	b.n	800a0b0 <_dtoa_r+0x698>
 800a52a:	459a      	cmp	sl, r3
 800a52c:	d1a4      	bne.n	800a478 <_dtoa_r+0xa60>
 800a52e:	9b04      	ldr	r3, [sp, #16]
 800a530:	3301      	adds	r3, #1
 800a532:	9304      	str	r3, [sp, #16]
 800a534:	2331      	movs	r3, #49	@ 0x31
 800a536:	f88a 3000 	strb.w	r3, [sl]
 800a53a:	e5b9      	b.n	800a0b0 <_dtoa_r+0x698>
 800a53c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a53e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a59c <_dtoa_r+0xb84>
 800a542:	b11b      	cbz	r3, 800a54c <_dtoa_r+0xb34>
 800a544:	f10a 0308 	add.w	r3, sl, #8
 800a548:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a54a:	6013      	str	r3, [r2, #0]
 800a54c:	4650      	mov	r0, sl
 800a54e:	b019      	add	sp, #100	@ 0x64
 800a550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a556:	2b01      	cmp	r3, #1
 800a558:	f77f ae37 	ble.w	800a1ca <_dtoa_r+0x7b2>
 800a55c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a55e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a560:	2001      	movs	r0, #1
 800a562:	e655      	b.n	800a210 <_dtoa_r+0x7f8>
 800a564:	9b00      	ldr	r3, [sp, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	f77f aed6 	ble.w	800a318 <_dtoa_r+0x900>
 800a56c:	4656      	mov	r6, sl
 800a56e:	4621      	mov	r1, r4
 800a570:	4648      	mov	r0, r9
 800a572:	f7ff f9c6 	bl	8009902 <quorem>
 800a576:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a57a:	f806 8b01 	strb.w	r8, [r6], #1
 800a57e:	9b00      	ldr	r3, [sp, #0]
 800a580:	eba6 020a 	sub.w	r2, r6, sl
 800a584:	4293      	cmp	r3, r2
 800a586:	ddb3      	ble.n	800a4f0 <_dtoa_r+0xad8>
 800a588:	4649      	mov	r1, r9
 800a58a:	2300      	movs	r3, #0
 800a58c:	220a      	movs	r2, #10
 800a58e:	4658      	mov	r0, fp
 800a590:	f000 f968 	bl	800a864 <__multadd>
 800a594:	4681      	mov	r9, r0
 800a596:	e7ea      	b.n	800a56e <_dtoa_r+0xb56>
 800a598:	0800c600 	.word	0x0800c600
 800a59c:	0800c584 	.word	0x0800c584

0800a5a0 <_free_r>:
 800a5a0:	b538      	push	{r3, r4, r5, lr}
 800a5a2:	4605      	mov	r5, r0
 800a5a4:	2900      	cmp	r1, #0
 800a5a6:	d041      	beq.n	800a62c <_free_r+0x8c>
 800a5a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ac:	1f0c      	subs	r4, r1, #4
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	bfb8      	it	lt
 800a5b2:	18e4      	addlt	r4, r4, r3
 800a5b4:	f000 f8e8 	bl	800a788 <__malloc_lock>
 800a5b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a630 <_free_r+0x90>)
 800a5ba:	6813      	ldr	r3, [r2, #0]
 800a5bc:	b933      	cbnz	r3, 800a5cc <_free_r+0x2c>
 800a5be:	6063      	str	r3, [r4, #4]
 800a5c0:	6014      	str	r4, [r2, #0]
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5c8:	f000 b8e4 	b.w	800a794 <__malloc_unlock>
 800a5cc:	42a3      	cmp	r3, r4
 800a5ce:	d908      	bls.n	800a5e2 <_free_r+0x42>
 800a5d0:	6820      	ldr	r0, [r4, #0]
 800a5d2:	1821      	adds	r1, r4, r0
 800a5d4:	428b      	cmp	r3, r1
 800a5d6:	bf01      	itttt	eq
 800a5d8:	6819      	ldreq	r1, [r3, #0]
 800a5da:	685b      	ldreq	r3, [r3, #4]
 800a5dc:	1809      	addeq	r1, r1, r0
 800a5de:	6021      	streq	r1, [r4, #0]
 800a5e0:	e7ed      	b.n	800a5be <_free_r+0x1e>
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	b10b      	cbz	r3, 800a5ec <_free_r+0x4c>
 800a5e8:	42a3      	cmp	r3, r4
 800a5ea:	d9fa      	bls.n	800a5e2 <_free_r+0x42>
 800a5ec:	6811      	ldr	r1, [r2, #0]
 800a5ee:	1850      	adds	r0, r2, r1
 800a5f0:	42a0      	cmp	r0, r4
 800a5f2:	d10b      	bne.n	800a60c <_free_r+0x6c>
 800a5f4:	6820      	ldr	r0, [r4, #0]
 800a5f6:	4401      	add	r1, r0
 800a5f8:	1850      	adds	r0, r2, r1
 800a5fa:	4283      	cmp	r3, r0
 800a5fc:	6011      	str	r1, [r2, #0]
 800a5fe:	d1e0      	bne.n	800a5c2 <_free_r+0x22>
 800a600:	6818      	ldr	r0, [r3, #0]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	6053      	str	r3, [r2, #4]
 800a606:	4408      	add	r0, r1
 800a608:	6010      	str	r0, [r2, #0]
 800a60a:	e7da      	b.n	800a5c2 <_free_r+0x22>
 800a60c:	d902      	bls.n	800a614 <_free_r+0x74>
 800a60e:	230c      	movs	r3, #12
 800a610:	602b      	str	r3, [r5, #0]
 800a612:	e7d6      	b.n	800a5c2 <_free_r+0x22>
 800a614:	6820      	ldr	r0, [r4, #0]
 800a616:	1821      	adds	r1, r4, r0
 800a618:	428b      	cmp	r3, r1
 800a61a:	bf04      	itt	eq
 800a61c:	6819      	ldreq	r1, [r3, #0]
 800a61e:	685b      	ldreq	r3, [r3, #4]
 800a620:	6063      	str	r3, [r4, #4]
 800a622:	bf04      	itt	eq
 800a624:	1809      	addeq	r1, r1, r0
 800a626:	6021      	streq	r1, [r4, #0]
 800a628:	6054      	str	r4, [r2, #4]
 800a62a:	e7ca      	b.n	800a5c2 <_free_r+0x22>
 800a62c:	bd38      	pop	{r3, r4, r5, pc}
 800a62e:	bf00      	nop
 800a630:	200052b0 	.word	0x200052b0

0800a634 <malloc>:
 800a634:	4b02      	ldr	r3, [pc, #8]	@ (800a640 <malloc+0xc>)
 800a636:	4601      	mov	r1, r0
 800a638:	6818      	ldr	r0, [r3, #0]
 800a63a:	f000 b825 	b.w	800a688 <_malloc_r>
 800a63e:	bf00      	nop
 800a640:	2000001c 	.word	0x2000001c

0800a644 <sbrk_aligned>:
 800a644:	b570      	push	{r4, r5, r6, lr}
 800a646:	4e0f      	ldr	r6, [pc, #60]	@ (800a684 <sbrk_aligned+0x40>)
 800a648:	460c      	mov	r4, r1
 800a64a:	6831      	ldr	r1, [r6, #0]
 800a64c:	4605      	mov	r5, r0
 800a64e:	b911      	cbnz	r1, 800a656 <sbrk_aligned+0x12>
 800a650:	f000 fe46 	bl	800b2e0 <_sbrk_r>
 800a654:	6030      	str	r0, [r6, #0]
 800a656:	4621      	mov	r1, r4
 800a658:	4628      	mov	r0, r5
 800a65a:	f000 fe41 	bl	800b2e0 <_sbrk_r>
 800a65e:	1c43      	adds	r3, r0, #1
 800a660:	d103      	bne.n	800a66a <sbrk_aligned+0x26>
 800a662:	f04f 34ff 	mov.w	r4, #4294967295
 800a666:	4620      	mov	r0, r4
 800a668:	bd70      	pop	{r4, r5, r6, pc}
 800a66a:	1cc4      	adds	r4, r0, #3
 800a66c:	f024 0403 	bic.w	r4, r4, #3
 800a670:	42a0      	cmp	r0, r4
 800a672:	d0f8      	beq.n	800a666 <sbrk_aligned+0x22>
 800a674:	1a21      	subs	r1, r4, r0
 800a676:	4628      	mov	r0, r5
 800a678:	f000 fe32 	bl	800b2e0 <_sbrk_r>
 800a67c:	3001      	adds	r0, #1
 800a67e:	d1f2      	bne.n	800a666 <sbrk_aligned+0x22>
 800a680:	e7ef      	b.n	800a662 <sbrk_aligned+0x1e>
 800a682:	bf00      	nop
 800a684:	200052ac 	.word	0x200052ac

0800a688 <_malloc_r>:
 800a688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a68c:	1ccd      	adds	r5, r1, #3
 800a68e:	f025 0503 	bic.w	r5, r5, #3
 800a692:	3508      	adds	r5, #8
 800a694:	2d0c      	cmp	r5, #12
 800a696:	bf38      	it	cc
 800a698:	250c      	movcc	r5, #12
 800a69a:	2d00      	cmp	r5, #0
 800a69c:	4606      	mov	r6, r0
 800a69e:	db01      	blt.n	800a6a4 <_malloc_r+0x1c>
 800a6a0:	42a9      	cmp	r1, r5
 800a6a2:	d904      	bls.n	800a6ae <_malloc_r+0x26>
 800a6a4:	230c      	movs	r3, #12
 800a6a6:	6033      	str	r3, [r6, #0]
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a784 <_malloc_r+0xfc>
 800a6b2:	f000 f869 	bl	800a788 <__malloc_lock>
 800a6b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a6ba:	461c      	mov	r4, r3
 800a6bc:	bb44      	cbnz	r4, 800a710 <_malloc_r+0x88>
 800a6be:	4629      	mov	r1, r5
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	f7ff ffbf 	bl	800a644 <sbrk_aligned>
 800a6c6:	1c43      	adds	r3, r0, #1
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	d158      	bne.n	800a77e <_malloc_r+0xf6>
 800a6cc:	f8d8 4000 	ldr.w	r4, [r8]
 800a6d0:	4627      	mov	r7, r4
 800a6d2:	2f00      	cmp	r7, #0
 800a6d4:	d143      	bne.n	800a75e <_malloc_r+0xd6>
 800a6d6:	2c00      	cmp	r4, #0
 800a6d8:	d04b      	beq.n	800a772 <_malloc_r+0xea>
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	4639      	mov	r1, r7
 800a6de:	4630      	mov	r0, r6
 800a6e0:	eb04 0903 	add.w	r9, r4, r3
 800a6e4:	f000 fdfc 	bl	800b2e0 <_sbrk_r>
 800a6e8:	4581      	cmp	r9, r0
 800a6ea:	d142      	bne.n	800a772 <_malloc_r+0xea>
 800a6ec:	6821      	ldr	r1, [r4, #0]
 800a6ee:	1a6d      	subs	r5, r5, r1
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	f7ff ffa6 	bl	800a644 <sbrk_aligned>
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	d03a      	beq.n	800a772 <_malloc_r+0xea>
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	442b      	add	r3, r5
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	f8d8 3000 	ldr.w	r3, [r8]
 800a706:	685a      	ldr	r2, [r3, #4]
 800a708:	bb62      	cbnz	r2, 800a764 <_malloc_r+0xdc>
 800a70a:	f8c8 7000 	str.w	r7, [r8]
 800a70e:	e00f      	b.n	800a730 <_malloc_r+0xa8>
 800a710:	6822      	ldr	r2, [r4, #0]
 800a712:	1b52      	subs	r2, r2, r5
 800a714:	d420      	bmi.n	800a758 <_malloc_r+0xd0>
 800a716:	2a0b      	cmp	r2, #11
 800a718:	d917      	bls.n	800a74a <_malloc_r+0xc2>
 800a71a:	1961      	adds	r1, r4, r5
 800a71c:	42a3      	cmp	r3, r4
 800a71e:	6025      	str	r5, [r4, #0]
 800a720:	bf18      	it	ne
 800a722:	6059      	strne	r1, [r3, #4]
 800a724:	6863      	ldr	r3, [r4, #4]
 800a726:	bf08      	it	eq
 800a728:	f8c8 1000 	streq.w	r1, [r8]
 800a72c:	5162      	str	r2, [r4, r5]
 800a72e:	604b      	str	r3, [r1, #4]
 800a730:	4630      	mov	r0, r6
 800a732:	f000 f82f 	bl	800a794 <__malloc_unlock>
 800a736:	f104 000b 	add.w	r0, r4, #11
 800a73a:	1d23      	adds	r3, r4, #4
 800a73c:	f020 0007 	bic.w	r0, r0, #7
 800a740:	1ac2      	subs	r2, r0, r3
 800a742:	bf1c      	itt	ne
 800a744:	1a1b      	subne	r3, r3, r0
 800a746:	50a3      	strne	r3, [r4, r2]
 800a748:	e7af      	b.n	800a6aa <_malloc_r+0x22>
 800a74a:	6862      	ldr	r2, [r4, #4]
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	bf0c      	ite	eq
 800a750:	f8c8 2000 	streq.w	r2, [r8]
 800a754:	605a      	strne	r2, [r3, #4]
 800a756:	e7eb      	b.n	800a730 <_malloc_r+0xa8>
 800a758:	4623      	mov	r3, r4
 800a75a:	6864      	ldr	r4, [r4, #4]
 800a75c:	e7ae      	b.n	800a6bc <_malloc_r+0x34>
 800a75e:	463c      	mov	r4, r7
 800a760:	687f      	ldr	r7, [r7, #4]
 800a762:	e7b6      	b.n	800a6d2 <_malloc_r+0x4a>
 800a764:	461a      	mov	r2, r3
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	42a3      	cmp	r3, r4
 800a76a:	d1fb      	bne.n	800a764 <_malloc_r+0xdc>
 800a76c:	2300      	movs	r3, #0
 800a76e:	6053      	str	r3, [r2, #4]
 800a770:	e7de      	b.n	800a730 <_malloc_r+0xa8>
 800a772:	230c      	movs	r3, #12
 800a774:	6033      	str	r3, [r6, #0]
 800a776:	4630      	mov	r0, r6
 800a778:	f000 f80c 	bl	800a794 <__malloc_unlock>
 800a77c:	e794      	b.n	800a6a8 <_malloc_r+0x20>
 800a77e:	6005      	str	r5, [r0, #0]
 800a780:	e7d6      	b.n	800a730 <_malloc_r+0xa8>
 800a782:	bf00      	nop
 800a784:	200052b0 	.word	0x200052b0

0800a788 <__malloc_lock>:
 800a788:	4801      	ldr	r0, [pc, #4]	@ (800a790 <__malloc_lock+0x8>)
 800a78a:	f7ff b8aa 	b.w	80098e2 <__retarget_lock_acquire_recursive>
 800a78e:	bf00      	nop
 800a790:	200052a8 	.word	0x200052a8

0800a794 <__malloc_unlock>:
 800a794:	4801      	ldr	r0, [pc, #4]	@ (800a79c <__malloc_unlock+0x8>)
 800a796:	f7ff b8a5 	b.w	80098e4 <__retarget_lock_release_recursive>
 800a79a:	bf00      	nop
 800a79c:	200052a8 	.word	0x200052a8

0800a7a0 <_Balloc>:
 800a7a0:	b570      	push	{r4, r5, r6, lr}
 800a7a2:	69c6      	ldr	r6, [r0, #28]
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	460d      	mov	r5, r1
 800a7a8:	b976      	cbnz	r6, 800a7c8 <_Balloc+0x28>
 800a7aa:	2010      	movs	r0, #16
 800a7ac:	f7ff ff42 	bl	800a634 <malloc>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	61e0      	str	r0, [r4, #28]
 800a7b4:	b920      	cbnz	r0, 800a7c0 <_Balloc+0x20>
 800a7b6:	4b18      	ldr	r3, [pc, #96]	@ (800a818 <_Balloc+0x78>)
 800a7b8:	4818      	ldr	r0, [pc, #96]	@ (800a81c <_Balloc+0x7c>)
 800a7ba:	216b      	movs	r1, #107	@ 0x6b
 800a7bc:	f000 fda0 	bl	800b300 <__assert_func>
 800a7c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7c4:	6006      	str	r6, [r0, #0]
 800a7c6:	60c6      	str	r6, [r0, #12]
 800a7c8:	69e6      	ldr	r6, [r4, #28]
 800a7ca:	68f3      	ldr	r3, [r6, #12]
 800a7cc:	b183      	cbz	r3, 800a7f0 <_Balloc+0x50>
 800a7ce:	69e3      	ldr	r3, [r4, #28]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7d6:	b9b8      	cbnz	r0, 800a808 <_Balloc+0x68>
 800a7d8:	2101      	movs	r1, #1
 800a7da:	fa01 f605 	lsl.w	r6, r1, r5
 800a7de:	1d72      	adds	r2, r6, #5
 800a7e0:	0092      	lsls	r2, r2, #2
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 fdaa 	bl	800b33c <_calloc_r>
 800a7e8:	b160      	cbz	r0, 800a804 <_Balloc+0x64>
 800a7ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7ee:	e00e      	b.n	800a80e <_Balloc+0x6e>
 800a7f0:	2221      	movs	r2, #33	@ 0x21
 800a7f2:	2104      	movs	r1, #4
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f000 fda1 	bl	800b33c <_calloc_r>
 800a7fa:	69e3      	ldr	r3, [r4, #28]
 800a7fc:	60f0      	str	r0, [r6, #12]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1e4      	bne.n	800a7ce <_Balloc+0x2e>
 800a804:	2000      	movs	r0, #0
 800a806:	bd70      	pop	{r4, r5, r6, pc}
 800a808:	6802      	ldr	r2, [r0, #0]
 800a80a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a80e:	2300      	movs	r3, #0
 800a810:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a814:	e7f7      	b.n	800a806 <_Balloc+0x66>
 800a816:	bf00      	nop
 800a818:	0800c591 	.word	0x0800c591
 800a81c:	0800c611 	.word	0x0800c611

0800a820 <_Bfree>:
 800a820:	b570      	push	{r4, r5, r6, lr}
 800a822:	69c6      	ldr	r6, [r0, #28]
 800a824:	4605      	mov	r5, r0
 800a826:	460c      	mov	r4, r1
 800a828:	b976      	cbnz	r6, 800a848 <_Bfree+0x28>
 800a82a:	2010      	movs	r0, #16
 800a82c:	f7ff ff02 	bl	800a634 <malloc>
 800a830:	4602      	mov	r2, r0
 800a832:	61e8      	str	r0, [r5, #28]
 800a834:	b920      	cbnz	r0, 800a840 <_Bfree+0x20>
 800a836:	4b09      	ldr	r3, [pc, #36]	@ (800a85c <_Bfree+0x3c>)
 800a838:	4809      	ldr	r0, [pc, #36]	@ (800a860 <_Bfree+0x40>)
 800a83a:	218f      	movs	r1, #143	@ 0x8f
 800a83c:	f000 fd60 	bl	800b300 <__assert_func>
 800a840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a844:	6006      	str	r6, [r0, #0]
 800a846:	60c6      	str	r6, [r0, #12]
 800a848:	b13c      	cbz	r4, 800a85a <_Bfree+0x3a>
 800a84a:	69eb      	ldr	r3, [r5, #28]
 800a84c:	6862      	ldr	r2, [r4, #4]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a854:	6021      	str	r1, [r4, #0]
 800a856:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a85a:	bd70      	pop	{r4, r5, r6, pc}
 800a85c:	0800c591 	.word	0x0800c591
 800a860:	0800c611 	.word	0x0800c611

0800a864 <__multadd>:
 800a864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a868:	690d      	ldr	r5, [r1, #16]
 800a86a:	4607      	mov	r7, r0
 800a86c:	460c      	mov	r4, r1
 800a86e:	461e      	mov	r6, r3
 800a870:	f101 0c14 	add.w	ip, r1, #20
 800a874:	2000      	movs	r0, #0
 800a876:	f8dc 3000 	ldr.w	r3, [ip]
 800a87a:	b299      	uxth	r1, r3
 800a87c:	fb02 6101 	mla	r1, r2, r1, r6
 800a880:	0c1e      	lsrs	r6, r3, #16
 800a882:	0c0b      	lsrs	r3, r1, #16
 800a884:	fb02 3306 	mla	r3, r2, r6, r3
 800a888:	b289      	uxth	r1, r1
 800a88a:	3001      	adds	r0, #1
 800a88c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a890:	4285      	cmp	r5, r0
 800a892:	f84c 1b04 	str.w	r1, [ip], #4
 800a896:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a89a:	dcec      	bgt.n	800a876 <__multadd+0x12>
 800a89c:	b30e      	cbz	r6, 800a8e2 <__multadd+0x7e>
 800a89e:	68a3      	ldr	r3, [r4, #8]
 800a8a0:	42ab      	cmp	r3, r5
 800a8a2:	dc19      	bgt.n	800a8d8 <__multadd+0x74>
 800a8a4:	6861      	ldr	r1, [r4, #4]
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	3101      	adds	r1, #1
 800a8aa:	f7ff ff79 	bl	800a7a0 <_Balloc>
 800a8ae:	4680      	mov	r8, r0
 800a8b0:	b928      	cbnz	r0, 800a8be <__multadd+0x5a>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e8 <__multadd+0x84>)
 800a8b6:	480d      	ldr	r0, [pc, #52]	@ (800a8ec <__multadd+0x88>)
 800a8b8:	21ba      	movs	r1, #186	@ 0xba
 800a8ba:	f000 fd21 	bl	800b300 <__assert_func>
 800a8be:	6922      	ldr	r2, [r4, #16]
 800a8c0:	3202      	adds	r2, #2
 800a8c2:	f104 010c 	add.w	r1, r4, #12
 800a8c6:	0092      	lsls	r2, r2, #2
 800a8c8:	300c      	adds	r0, #12
 800a8ca:	f7ff f80c 	bl	80098e6 <memcpy>
 800a8ce:	4621      	mov	r1, r4
 800a8d0:	4638      	mov	r0, r7
 800a8d2:	f7ff ffa5 	bl	800a820 <_Bfree>
 800a8d6:	4644      	mov	r4, r8
 800a8d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8dc:	3501      	adds	r5, #1
 800a8de:	615e      	str	r6, [r3, #20]
 800a8e0:	6125      	str	r5, [r4, #16]
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e8:	0800c600 	.word	0x0800c600
 800a8ec:	0800c611 	.word	0x0800c611

0800a8f0 <__hi0bits>:
 800a8f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	bf36      	itet	cc
 800a8f8:	0403      	lslcc	r3, r0, #16
 800a8fa:	2000      	movcs	r0, #0
 800a8fc:	2010      	movcc	r0, #16
 800a8fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a902:	bf3c      	itt	cc
 800a904:	021b      	lslcc	r3, r3, #8
 800a906:	3008      	addcc	r0, #8
 800a908:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a90c:	bf3c      	itt	cc
 800a90e:	011b      	lslcc	r3, r3, #4
 800a910:	3004      	addcc	r0, #4
 800a912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a916:	bf3c      	itt	cc
 800a918:	009b      	lslcc	r3, r3, #2
 800a91a:	3002      	addcc	r0, #2
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	db05      	blt.n	800a92c <__hi0bits+0x3c>
 800a920:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a924:	f100 0001 	add.w	r0, r0, #1
 800a928:	bf08      	it	eq
 800a92a:	2020      	moveq	r0, #32
 800a92c:	4770      	bx	lr

0800a92e <__lo0bits>:
 800a92e:	6803      	ldr	r3, [r0, #0]
 800a930:	4602      	mov	r2, r0
 800a932:	f013 0007 	ands.w	r0, r3, #7
 800a936:	d00b      	beq.n	800a950 <__lo0bits+0x22>
 800a938:	07d9      	lsls	r1, r3, #31
 800a93a:	d421      	bmi.n	800a980 <__lo0bits+0x52>
 800a93c:	0798      	lsls	r0, r3, #30
 800a93e:	bf49      	itett	mi
 800a940:	085b      	lsrmi	r3, r3, #1
 800a942:	089b      	lsrpl	r3, r3, #2
 800a944:	2001      	movmi	r0, #1
 800a946:	6013      	strmi	r3, [r2, #0]
 800a948:	bf5c      	itt	pl
 800a94a:	6013      	strpl	r3, [r2, #0]
 800a94c:	2002      	movpl	r0, #2
 800a94e:	4770      	bx	lr
 800a950:	b299      	uxth	r1, r3
 800a952:	b909      	cbnz	r1, 800a958 <__lo0bits+0x2a>
 800a954:	0c1b      	lsrs	r3, r3, #16
 800a956:	2010      	movs	r0, #16
 800a958:	b2d9      	uxtb	r1, r3
 800a95a:	b909      	cbnz	r1, 800a960 <__lo0bits+0x32>
 800a95c:	3008      	adds	r0, #8
 800a95e:	0a1b      	lsrs	r3, r3, #8
 800a960:	0719      	lsls	r1, r3, #28
 800a962:	bf04      	itt	eq
 800a964:	091b      	lsreq	r3, r3, #4
 800a966:	3004      	addeq	r0, #4
 800a968:	0799      	lsls	r1, r3, #30
 800a96a:	bf04      	itt	eq
 800a96c:	089b      	lsreq	r3, r3, #2
 800a96e:	3002      	addeq	r0, #2
 800a970:	07d9      	lsls	r1, r3, #31
 800a972:	d403      	bmi.n	800a97c <__lo0bits+0x4e>
 800a974:	085b      	lsrs	r3, r3, #1
 800a976:	f100 0001 	add.w	r0, r0, #1
 800a97a:	d003      	beq.n	800a984 <__lo0bits+0x56>
 800a97c:	6013      	str	r3, [r2, #0]
 800a97e:	4770      	bx	lr
 800a980:	2000      	movs	r0, #0
 800a982:	4770      	bx	lr
 800a984:	2020      	movs	r0, #32
 800a986:	4770      	bx	lr

0800a988 <__i2b>:
 800a988:	b510      	push	{r4, lr}
 800a98a:	460c      	mov	r4, r1
 800a98c:	2101      	movs	r1, #1
 800a98e:	f7ff ff07 	bl	800a7a0 <_Balloc>
 800a992:	4602      	mov	r2, r0
 800a994:	b928      	cbnz	r0, 800a9a2 <__i2b+0x1a>
 800a996:	4b05      	ldr	r3, [pc, #20]	@ (800a9ac <__i2b+0x24>)
 800a998:	4805      	ldr	r0, [pc, #20]	@ (800a9b0 <__i2b+0x28>)
 800a99a:	f240 1145 	movw	r1, #325	@ 0x145
 800a99e:	f000 fcaf 	bl	800b300 <__assert_func>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	6144      	str	r4, [r0, #20]
 800a9a6:	6103      	str	r3, [r0, #16]
 800a9a8:	bd10      	pop	{r4, pc}
 800a9aa:	bf00      	nop
 800a9ac:	0800c600 	.word	0x0800c600
 800a9b0:	0800c611 	.word	0x0800c611

0800a9b4 <__multiply>:
 800a9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b8:	4614      	mov	r4, r2
 800a9ba:	690a      	ldr	r2, [r1, #16]
 800a9bc:	6923      	ldr	r3, [r4, #16]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	bfa8      	it	ge
 800a9c2:	4623      	movge	r3, r4
 800a9c4:	460f      	mov	r7, r1
 800a9c6:	bfa4      	itt	ge
 800a9c8:	460c      	movge	r4, r1
 800a9ca:	461f      	movge	r7, r3
 800a9cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a9d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a9d4:	68a3      	ldr	r3, [r4, #8]
 800a9d6:	6861      	ldr	r1, [r4, #4]
 800a9d8:	eb0a 0609 	add.w	r6, sl, r9
 800a9dc:	42b3      	cmp	r3, r6
 800a9de:	b085      	sub	sp, #20
 800a9e0:	bfb8      	it	lt
 800a9e2:	3101      	addlt	r1, #1
 800a9e4:	f7ff fedc 	bl	800a7a0 <_Balloc>
 800a9e8:	b930      	cbnz	r0, 800a9f8 <__multiply+0x44>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	4b44      	ldr	r3, [pc, #272]	@ (800ab00 <__multiply+0x14c>)
 800a9ee:	4845      	ldr	r0, [pc, #276]	@ (800ab04 <__multiply+0x150>)
 800a9f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a9f4:	f000 fc84 	bl	800b300 <__assert_func>
 800a9f8:	f100 0514 	add.w	r5, r0, #20
 800a9fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa00:	462b      	mov	r3, r5
 800aa02:	2200      	movs	r2, #0
 800aa04:	4543      	cmp	r3, r8
 800aa06:	d321      	bcc.n	800aa4c <__multiply+0x98>
 800aa08:	f107 0114 	add.w	r1, r7, #20
 800aa0c:	f104 0214 	add.w	r2, r4, #20
 800aa10:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800aa14:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800aa18:	9302      	str	r3, [sp, #8]
 800aa1a:	1b13      	subs	r3, r2, r4
 800aa1c:	3b15      	subs	r3, #21
 800aa1e:	f023 0303 	bic.w	r3, r3, #3
 800aa22:	3304      	adds	r3, #4
 800aa24:	f104 0715 	add.w	r7, r4, #21
 800aa28:	42ba      	cmp	r2, r7
 800aa2a:	bf38      	it	cc
 800aa2c:	2304      	movcc	r3, #4
 800aa2e:	9301      	str	r3, [sp, #4]
 800aa30:	9b02      	ldr	r3, [sp, #8]
 800aa32:	9103      	str	r1, [sp, #12]
 800aa34:	428b      	cmp	r3, r1
 800aa36:	d80c      	bhi.n	800aa52 <__multiply+0x9e>
 800aa38:	2e00      	cmp	r6, #0
 800aa3a:	dd03      	ble.n	800aa44 <__multiply+0x90>
 800aa3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d05b      	beq.n	800aafc <__multiply+0x148>
 800aa44:	6106      	str	r6, [r0, #16]
 800aa46:	b005      	add	sp, #20
 800aa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa4c:	f843 2b04 	str.w	r2, [r3], #4
 800aa50:	e7d8      	b.n	800aa04 <__multiply+0x50>
 800aa52:	f8b1 a000 	ldrh.w	sl, [r1]
 800aa56:	f1ba 0f00 	cmp.w	sl, #0
 800aa5a:	d024      	beq.n	800aaa6 <__multiply+0xf2>
 800aa5c:	f104 0e14 	add.w	lr, r4, #20
 800aa60:	46a9      	mov	r9, r5
 800aa62:	f04f 0c00 	mov.w	ip, #0
 800aa66:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa6a:	f8d9 3000 	ldr.w	r3, [r9]
 800aa6e:	fa1f fb87 	uxth.w	fp, r7
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa78:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aa7c:	f8d9 7000 	ldr.w	r7, [r9]
 800aa80:	4463      	add	r3, ip
 800aa82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa86:	fb0a c70b 	mla	r7, sl, fp, ip
 800aa8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa94:	4572      	cmp	r2, lr
 800aa96:	f849 3b04 	str.w	r3, [r9], #4
 800aa9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa9e:	d8e2      	bhi.n	800aa66 <__multiply+0xb2>
 800aaa0:	9b01      	ldr	r3, [sp, #4]
 800aaa2:	f845 c003 	str.w	ip, [r5, r3]
 800aaa6:	9b03      	ldr	r3, [sp, #12]
 800aaa8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aaac:	3104      	adds	r1, #4
 800aaae:	f1b9 0f00 	cmp.w	r9, #0
 800aab2:	d021      	beq.n	800aaf8 <__multiply+0x144>
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	f104 0c14 	add.w	ip, r4, #20
 800aaba:	46ae      	mov	lr, r5
 800aabc:	f04f 0a00 	mov.w	sl, #0
 800aac0:	f8bc b000 	ldrh.w	fp, [ip]
 800aac4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aac8:	fb09 770b 	mla	r7, r9, fp, r7
 800aacc:	4457      	add	r7, sl
 800aace:	b29b      	uxth	r3, r3
 800aad0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aad4:	f84e 3b04 	str.w	r3, [lr], #4
 800aad8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aadc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aae0:	f8be 3000 	ldrh.w	r3, [lr]
 800aae4:	fb09 330a 	mla	r3, r9, sl, r3
 800aae8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aaec:	4562      	cmp	r2, ip
 800aaee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aaf2:	d8e5      	bhi.n	800aac0 <__multiply+0x10c>
 800aaf4:	9f01      	ldr	r7, [sp, #4]
 800aaf6:	51eb      	str	r3, [r5, r7]
 800aaf8:	3504      	adds	r5, #4
 800aafa:	e799      	b.n	800aa30 <__multiply+0x7c>
 800aafc:	3e01      	subs	r6, #1
 800aafe:	e79b      	b.n	800aa38 <__multiply+0x84>
 800ab00:	0800c600 	.word	0x0800c600
 800ab04:	0800c611 	.word	0x0800c611

0800ab08 <__pow5mult>:
 800ab08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab0c:	4615      	mov	r5, r2
 800ab0e:	f012 0203 	ands.w	r2, r2, #3
 800ab12:	4607      	mov	r7, r0
 800ab14:	460e      	mov	r6, r1
 800ab16:	d007      	beq.n	800ab28 <__pow5mult+0x20>
 800ab18:	4c25      	ldr	r4, [pc, #148]	@ (800abb0 <__pow5mult+0xa8>)
 800ab1a:	3a01      	subs	r2, #1
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab22:	f7ff fe9f 	bl	800a864 <__multadd>
 800ab26:	4606      	mov	r6, r0
 800ab28:	10ad      	asrs	r5, r5, #2
 800ab2a:	d03d      	beq.n	800aba8 <__pow5mult+0xa0>
 800ab2c:	69fc      	ldr	r4, [r7, #28]
 800ab2e:	b97c      	cbnz	r4, 800ab50 <__pow5mult+0x48>
 800ab30:	2010      	movs	r0, #16
 800ab32:	f7ff fd7f 	bl	800a634 <malloc>
 800ab36:	4602      	mov	r2, r0
 800ab38:	61f8      	str	r0, [r7, #28]
 800ab3a:	b928      	cbnz	r0, 800ab48 <__pow5mult+0x40>
 800ab3c:	4b1d      	ldr	r3, [pc, #116]	@ (800abb4 <__pow5mult+0xac>)
 800ab3e:	481e      	ldr	r0, [pc, #120]	@ (800abb8 <__pow5mult+0xb0>)
 800ab40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ab44:	f000 fbdc 	bl	800b300 <__assert_func>
 800ab48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab4c:	6004      	str	r4, [r0, #0]
 800ab4e:	60c4      	str	r4, [r0, #12]
 800ab50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ab54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab58:	b94c      	cbnz	r4, 800ab6e <__pow5mult+0x66>
 800ab5a:	f240 2171 	movw	r1, #625	@ 0x271
 800ab5e:	4638      	mov	r0, r7
 800ab60:	f7ff ff12 	bl	800a988 <__i2b>
 800ab64:	2300      	movs	r3, #0
 800ab66:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	6003      	str	r3, [r0, #0]
 800ab6e:	f04f 0900 	mov.w	r9, #0
 800ab72:	07eb      	lsls	r3, r5, #31
 800ab74:	d50a      	bpl.n	800ab8c <__pow5mult+0x84>
 800ab76:	4631      	mov	r1, r6
 800ab78:	4622      	mov	r2, r4
 800ab7a:	4638      	mov	r0, r7
 800ab7c:	f7ff ff1a 	bl	800a9b4 <__multiply>
 800ab80:	4631      	mov	r1, r6
 800ab82:	4680      	mov	r8, r0
 800ab84:	4638      	mov	r0, r7
 800ab86:	f7ff fe4b 	bl	800a820 <_Bfree>
 800ab8a:	4646      	mov	r6, r8
 800ab8c:	106d      	asrs	r5, r5, #1
 800ab8e:	d00b      	beq.n	800aba8 <__pow5mult+0xa0>
 800ab90:	6820      	ldr	r0, [r4, #0]
 800ab92:	b938      	cbnz	r0, 800aba4 <__pow5mult+0x9c>
 800ab94:	4622      	mov	r2, r4
 800ab96:	4621      	mov	r1, r4
 800ab98:	4638      	mov	r0, r7
 800ab9a:	f7ff ff0b 	bl	800a9b4 <__multiply>
 800ab9e:	6020      	str	r0, [r4, #0]
 800aba0:	f8c0 9000 	str.w	r9, [r0]
 800aba4:	4604      	mov	r4, r0
 800aba6:	e7e4      	b.n	800ab72 <__pow5mult+0x6a>
 800aba8:	4630      	mov	r0, r6
 800abaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abae:	bf00      	nop
 800abb0:	0800c66c 	.word	0x0800c66c
 800abb4:	0800c591 	.word	0x0800c591
 800abb8:	0800c611 	.word	0x0800c611

0800abbc <__lshift>:
 800abbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc0:	460c      	mov	r4, r1
 800abc2:	6849      	ldr	r1, [r1, #4]
 800abc4:	6923      	ldr	r3, [r4, #16]
 800abc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abca:	68a3      	ldr	r3, [r4, #8]
 800abcc:	4607      	mov	r7, r0
 800abce:	4691      	mov	r9, r2
 800abd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abd4:	f108 0601 	add.w	r6, r8, #1
 800abd8:	42b3      	cmp	r3, r6
 800abda:	db0b      	blt.n	800abf4 <__lshift+0x38>
 800abdc:	4638      	mov	r0, r7
 800abde:	f7ff fddf 	bl	800a7a0 <_Balloc>
 800abe2:	4605      	mov	r5, r0
 800abe4:	b948      	cbnz	r0, 800abfa <__lshift+0x3e>
 800abe6:	4602      	mov	r2, r0
 800abe8:	4b28      	ldr	r3, [pc, #160]	@ (800ac8c <__lshift+0xd0>)
 800abea:	4829      	ldr	r0, [pc, #164]	@ (800ac90 <__lshift+0xd4>)
 800abec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800abf0:	f000 fb86 	bl	800b300 <__assert_func>
 800abf4:	3101      	adds	r1, #1
 800abf6:	005b      	lsls	r3, r3, #1
 800abf8:	e7ee      	b.n	800abd8 <__lshift+0x1c>
 800abfa:	2300      	movs	r3, #0
 800abfc:	f100 0114 	add.w	r1, r0, #20
 800ac00:	f100 0210 	add.w	r2, r0, #16
 800ac04:	4618      	mov	r0, r3
 800ac06:	4553      	cmp	r3, sl
 800ac08:	db33      	blt.n	800ac72 <__lshift+0xb6>
 800ac0a:	6920      	ldr	r0, [r4, #16]
 800ac0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac10:	f104 0314 	add.w	r3, r4, #20
 800ac14:	f019 091f 	ands.w	r9, r9, #31
 800ac18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac20:	d02b      	beq.n	800ac7a <__lshift+0xbe>
 800ac22:	f1c9 0e20 	rsb	lr, r9, #32
 800ac26:	468a      	mov	sl, r1
 800ac28:	2200      	movs	r2, #0
 800ac2a:	6818      	ldr	r0, [r3, #0]
 800ac2c:	fa00 f009 	lsl.w	r0, r0, r9
 800ac30:	4310      	orrs	r0, r2
 800ac32:	f84a 0b04 	str.w	r0, [sl], #4
 800ac36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac3a:	459c      	cmp	ip, r3
 800ac3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac40:	d8f3      	bhi.n	800ac2a <__lshift+0x6e>
 800ac42:	ebac 0304 	sub.w	r3, ip, r4
 800ac46:	3b15      	subs	r3, #21
 800ac48:	f023 0303 	bic.w	r3, r3, #3
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	f104 0015 	add.w	r0, r4, #21
 800ac52:	4584      	cmp	ip, r0
 800ac54:	bf38      	it	cc
 800ac56:	2304      	movcc	r3, #4
 800ac58:	50ca      	str	r2, [r1, r3]
 800ac5a:	b10a      	cbz	r2, 800ac60 <__lshift+0xa4>
 800ac5c:	f108 0602 	add.w	r6, r8, #2
 800ac60:	3e01      	subs	r6, #1
 800ac62:	4638      	mov	r0, r7
 800ac64:	612e      	str	r6, [r5, #16]
 800ac66:	4621      	mov	r1, r4
 800ac68:	f7ff fdda 	bl	800a820 <_Bfree>
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac72:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac76:	3301      	adds	r3, #1
 800ac78:	e7c5      	b.n	800ac06 <__lshift+0x4a>
 800ac7a:	3904      	subs	r1, #4
 800ac7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac80:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac84:	459c      	cmp	ip, r3
 800ac86:	d8f9      	bhi.n	800ac7c <__lshift+0xc0>
 800ac88:	e7ea      	b.n	800ac60 <__lshift+0xa4>
 800ac8a:	bf00      	nop
 800ac8c:	0800c600 	.word	0x0800c600
 800ac90:	0800c611 	.word	0x0800c611

0800ac94 <__mcmp>:
 800ac94:	690a      	ldr	r2, [r1, #16]
 800ac96:	4603      	mov	r3, r0
 800ac98:	6900      	ldr	r0, [r0, #16]
 800ac9a:	1a80      	subs	r0, r0, r2
 800ac9c:	b530      	push	{r4, r5, lr}
 800ac9e:	d10e      	bne.n	800acbe <__mcmp+0x2a>
 800aca0:	3314      	adds	r3, #20
 800aca2:	3114      	adds	r1, #20
 800aca4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aca8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800acac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800acb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800acb4:	4295      	cmp	r5, r2
 800acb6:	d003      	beq.n	800acc0 <__mcmp+0x2c>
 800acb8:	d205      	bcs.n	800acc6 <__mcmp+0x32>
 800acba:	f04f 30ff 	mov.w	r0, #4294967295
 800acbe:	bd30      	pop	{r4, r5, pc}
 800acc0:	42a3      	cmp	r3, r4
 800acc2:	d3f3      	bcc.n	800acac <__mcmp+0x18>
 800acc4:	e7fb      	b.n	800acbe <__mcmp+0x2a>
 800acc6:	2001      	movs	r0, #1
 800acc8:	e7f9      	b.n	800acbe <__mcmp+0x2a>
	...

0800accc <__mdiff>:
 800accc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd0:	4689      	mov	r9, r1
 800acd2:	4606      	mov	r6, r0
 800acd4:	4611      	mov	r1, r2
 800acd6:	4648      	mov	r0, r9
 800acd8:	4614      	mov	r4, r2
 800acda:	f7ff ffdb 	bl	800ac94 <__mcmp>
 800acde:	1e05      	subs	r5, r0, #0
 800ace0:	d112      	bne.n	800ad08 <__mdiff+0x3c>
 800ace2:	4629      	mov	r1, r5
 800ace4:	4630      	mov	r0, r6
 800ace6:	f7ff fd5b 	bl	800a7a0 <_Balloc>
 800acea:	4602      	mov	r2, r0
 800acec:	b928      	cbnz	r0, 800acfa <__mdiff+0x2e>
 800acee:	4b3f      	ldr	r3, [pc, #252]	@ (800adec <__mdiff+0x120>)
 800acf0:	f240 2137 	movw	r1, #567	@ 0x237
 800acf4:	483e      	ldr	r0, [pc, #248]	@ (800adf0 <__mdiff+0x124>)
 800acf6:	f000 fb03 	bl	800b300 <__assert_func>
 800acfa:	2301      	movs	r3, #1
 800acfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad00:	4610      	mov	r0, r2
 800ad02:	b003      	add	sp, #12
 800ad04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad08:	bfbc      	itt	lt
 800ad0a:	464b      	movlt	r3, r9
 800ad0c:	46a1      	movlt	r9, r4
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ad14:	bfba      	itte	lt
 800ad16:	461c      	movlt	r4, r3
 800ad18:	2501      	movlt	r5, #1
 800ad1a:	2500      	movge	r5, #0
 800ad1c:	f7ff fd40 	bl	800a7a0 <_Balloc>
 800ad20:	4602      	mov	r2, r0
 800ad22:	b918      	cbnz	r0, 800ad2c <__mdiff+0x60>
 800ad24:	4b31      	ldr	r3, [pc, #196]	@ (800adec <__mdiff+0x120>)
 800ad26:	f240 2145 	movw	r1, #581	@ 0x245
 800ad2a:	e7e3      	b.n	800acf4 <__mdiff+0x28>
 800ad2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ad30:	6926      	ldr	r6, [r4, #16]
 800ad32:	60c5      	str	r5, [r0, #12]
 800ad34:	f109 0310 	add.w	r3, r9, #16
 800ad38:	f109 0514 	add.w	r5, r9, #20
 800ad3c:	f104 0e14 	add.w	lr, r4, #20
 800ad40:	f100 0b14 	add.w	fp, r0, #20
 800ad44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ad48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	46d9      	mov	r9, fp
 800ad50:	f04f 0c00 	mov.w	ip, #0
 800ad54:	9b01      	ldr	r3, [sp, #4]
 800ad56:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ad5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ad5e:	9301      	str	r3, [sp, #4]
 800ad60:	fa1f f38a 	uxth.w	r3, sl
 800ad64:	4619      	mov	r1, r3
 800ad66:	b283      	uxth	r3, r0
 800ad68:	1acb      	subs	r3, r1, r3
 800ad6a:	0c00      	lsrs	r0, r0, #16
 800ad6c:	4463      	add	r3, ip
 800ad6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad7c:	4576      	cmp	r6, lr
 800ad7e:	f849 3b04 	str.w	r3, [r9], #4
 800ad82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad86:	d8e5      	bhi.n	800ad54 <__mdiff+0x88>
 800ad88:	1b33      	subs	r3, r6, r4
 800ad8a:	3b15      	subs	r3, #21
 800ad8c:	f023 0303 	bic.w	r3, r3, #3
 800ad90:	3415      	adds	r4, #21
 800ad92:	3304      	adds	r3, #4
 800ad94:	42a6      	cmp	r6, r4
 800ad96:	bf38      	it	cc
 800ad98:	2304      	movcc	r3, #4
 800ad9a:	441d      	add	r5, r3
 800ad9c:	445b      	add	r3, fp
 800ad9e:	461e      	mov	r6, r3
 800ada0:	462c      	mov	r4, r5
 800ada2:	4544      	cmp	r4, r8
 800ada4:	d30e      	bcc.n	800adc4 <__mdiff+0xf8>
 800ada6:	f108 0103 	add.w	r1, r8, #3
 800adaa:	1b49      	subs	r1, r1, r5
 800adac:	f021 0103 	bic.w	r1, r1, #3
 800adb0:	3d03      	subs	r5, #3
 800adb2:	45a8      	cmp	r8, r5
 800adb4:	bf38      	it	cc
 800adb6:	2100      	movcc	r1, #0
 800adb8:	440b      	add	r3, r1
 800adba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800adbe:	b191      	cbz	r1, 800ade6 <__mdiff+0x11a>
 800adc0:	6117      	str	r7, [r2, #16]
 800adc2:	e79d      	b.n	800ad00 <__mdiff+0x34>
 800adc4:	f854 1b04 	ldr.w	r1, [r4], #4
 800adc8:	46e6      	mov	lr, ip
 800adca:	0c08      	lsrs	r0, r1, #16
 800adcc:	fa1c fc81 	uxtah	ip, ip, r1
 800add0:	4471      	add	r1, lr
 800add2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800add6:	b289      	uxth	r1, r1
 800add8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800addc:	f846 1b04 	str.w	r1, [r6], #4
 800ade0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ade4:	e7dd      	b.n	800ada2 <__mdiff+0xd6>
 800ade6:	3f01      	subs	r7, #1
 800ade8:	e7e7      	b.n	800adba <__mdiff+0xee>
 800adea:	bf00      	nop
 800adec:	0800c600 	.word	0x0800c600
 800adf0:	0800c611 	.word	0x0800c611

0800adf4 <__d2b>:
 800adf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adf8:	460f      	mov	r7, r1
 800adfa:	2101      	movs	r1, #1
 800adfc:	ec59 8b10 	vmov	r8, r9, d0
 800ae00:	4616      	mov	r6, r2
 800ae02:	f7ff fccd 	bl	800a7a0 <_Balloc>
 800ae06:	4604      	mov	r4, r0
 800ae08:	b930      	cbnz	r0, 800ae18 <__d2b+0x24>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	4b23      	ldr	r3, [pc, #140]	@ (800ae9c <__d2b+0xa8>)
 800ae0e:	4824      	ldr	r0, [pc, #144]	@ (800aea0 <__d2b+0xac>)
 800ae10:	f240 310f 	movw	r1, #783	@ 0x30f
 800ae14:	f000 fa74 	bl	800b300 <__assert_func>
 800ae18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae20:	b10d      	cbz	r5, 800ae26 <__d2b+0x32>
 800ae22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae26:	9301      	str	r3, [sp, #4]
 800ae28:	f1b8 0300 	subs.w	r3, r8, #0
 800ae2c:	d023      	beq.n	800ae76 <__d2b+0x82>
 800ae2e:	4668      	mov	r0, sp
 800ae30:	9300      	str	r3, [sp, #0]
 800ae32:	f7ff fd7c 	bl	800a92e <__lo0bits>
 800ae36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae3a:	b1d0      	cbz	r0, 800ae72 <__d2b+0x7e>
 800ae3c:	f1c0 0320 	rsb	r3, r0, #32
 800ae40:	fa02 f303 	lsl.w	r3, r2, r3
 800ae44:	430b      	orrs	r3, r1
 800ae46:	40c2      	lsrs	r2, r0
 800ae48:	6163      	str	r3, [r4, #20]
 800ae4a:	9201      	str	r2, [sp, #4]
 800ae4c:	9b01      	ldr	r3, [sp, #4]
 800ae4e:	61a3      	str	r3, [r4, #24]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	bf0c      	ite	eq
 800ae54:	2201      	moveq	r2, #1
 800ae56:	2202      	movne	r2, #2
 800ae58:	6122      	str	r2, [r4, #16]
 800ae5a:	b1a5      	cbz	r5, 800ae86 <__d2b+0x92>
 800ae5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ae60:	4405      	add	r5, r0
 800ae62:	603d      	str	r5, [r7, #0]
 800ae64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ae68:	6030      	str	r0, [r6, #0]
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	b003      	add	sp, #12
 800ae6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae72:	6161      	str	r1, [r4, #20]
 800ae74:	e7ea      	b.n	800ae4c <__d2b+0x58>
 800ae76:	a801      	add	r0, sp, #4
 800ae78:	f7ff fd59 	bl	800a92e <__lo0bits>
 800ae7c:	9b01      	ldr	r3, [sp, #4]
 800ae7e:	6163      	str	r3, [r4, #20]
 800ae80:	3020      	adds	r0, #32
 800ae82:	2201      	movs	r2, #1
 800ae84:	e7e8      	b.n	800ae58 <__d2b+0x64>
 800ae86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ae8e:	6038      	str	r0, [r7, #0]
 800ae90:	6918      	ldr	r0, [r3, #16]
 800ae92:	f7ff fd2d 	bl	800a8f0 <__hi0bits>
 800ae96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae9a:	e7e5      	b.n	800ae68 <__d2b+0x74>
 800ae9c:	0800c600 	.word	0x0800c600
 800aea0:	0800c611 	.word	0x0800c611

0800aea4 <__ssputs_r>:
 800aea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aea8:	688e      	ldr	r6, [r1, #8]
 800aeaa:	461f      	mov	r7, r3
 800aeac:	42be      	cmp	r6, r7
 800aeae:	680b      	ldr	r3, [r1, #0]
 800aeb0:	4682      	mov	sl, r0
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	4690      	mov	r8, r2
 800aeb6:	d82d      	bhi.n	800af14 <__ssputs_r+0x70>
 800aeb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aebc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aec0:	d026      	beq.n	800af10 <__ssputs_r+0x6c>
 800aec2:	6965      	ldr	r5, [r4, #20]
 800aec4:	6909      	ldr	r1, [r1, #16]
 800aec6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeca:	eba3 0901 	sub.w	r9, r3, r1
 800aece:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aed2:	1c7b      	adds	r3, r7, #1
 800aed4:	444b      	add	r3, r9
 800aed6:	106d      	asrs	r5, r5, #1
 800aed8:	429d      	cmp	r5, r3
 800aeda:	bf38      	it	cc
 800aedc:	461d      	movcc	r5, r3
 800aede:	0553      	lsls	r3, r2, #21
 800aee0:	d527      	bpl.n	800af32 <__ssputs_r+0x8e>
 800aee2:	4629      	mov	r1, r5
 800aee4:	f7ff fbd0 	bl	800a688 <_malloc_r>
 800aee8:	4606      	mov	r6, r0
 800aeea:	b360      	cbz	r0, 800af46 <__ssputs_r+0xa2>
 800aeec:	6921      	ldr	r1, [r4, #16]
 800aeee:	464a      	mov	r2, r9
 800aef0:	f7fe fcf9 	bl	80098e6 <memcpy>
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aefa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aefe:	81a3      	strh	r3, [r4, #12]
 800af00:	6126      	str	r6, [r4, #16]
 800af02:	6165      	str	r5, [r4, #20]
 800af04:	444e      	add	r6, r9
 800af06:	eba5 0509 	sub.w	r5, r5, r9
 800af0a:	6026      	str	r6, [r4, #0]
 800af0c:	60a5      	str	r5, [r4, #8]
 800af0e:	463e      	mov	r6, r7
 800af10:	42be      	cmp	r6, r7
 800af12:	d900      	bls.n	800af16 <__ssputs_r+0x72>
 800af14:	463e      	mov	r6, r7
 800af16:	6820      	ldr	r0, [r4, #0]
 800af18:	4632      	mov	r2, r6
 800af1a:	4641      	mov	r1, r8
 800af1c:	f000 f9c6 	bl	800b2ac <memmove>
 800af20:	68a3      	ldr	r3, [r4, #8]
 800af22:	1b9b      	subs	r3, r3, r6
 800af24:	60a3      	str	r3, [r4, #8]
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	4433      	add	r3, r6
 800af2a:	6023      	str	r3, [r4, #0]
 800af2c:	2000      	movs	r0, #0
 800af2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af32:	462a      	mov	r2, r5
 800af34:	f000 fa28 	bl	800b388 <_realloc_r>
 800af38:	4606      	mov	r6, r0
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d1e0      	bne.n	800af00 <__ssputs_r+0x5c>
 800af3e:	6921      	ldr	r1, [r4, #16]
 800af40:	4650      	mov	r0, sl
 800af42:	f7ff fb2d 	bl	800a5a0 <_free_r>
 800af46:	230c      	movs	r3, #12
 800af48:	f8ca 3000 	str.w	r3, [sl]
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af52:	81a3      	strh	r3, [r4, #12]
 800af54:	f04f 30ff 	mov.w	r0, #4294967295
 800af58:	e7e9      	b.n	800af2e <__ssputs_r+0x8a>
	...

0800af5c <_svfiprintf_r>:
 800af5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af60:	4698      	mov	r8, r3
 800af62:	898b      	ldrh	r3, [r1, #12]
 800af64:	061b      	lsls	r3, r3, #24
 800af66:	b09d      	sub	sp, #116	@ 0x74
 800af68:	4607      	mov	r7, r0
 800af6a:	460d      	mov	r5, r1
 800af6c:	4614      	mov	r4, r2
 800af6e:	d510      	bpl.n	800af92 <_svfiprintf_r+0x36>
 800af70:	690b      	ldr	r3, [r1, #16]
 800af72:	b973      	cbnz	r3, 800af92 <_svfiprintf_r+0x36>
 800af74:	2140      	movs	r1, #64	@ 0x40
 800af76:	f7ff fb87 	bl	800a688 <_malloc_r>
 800af7a:	6028      	str	r0, [r5, #0]
 800af7c:	6128      	str	r0, [r5, #16]
 800af7e:	b930      	cbnz	r0, 800af8e <_svfiprintf_r+0x32>
 800af80:	230c      	movs	r3, #12
 800af82:	603b      	str	r3, [r7, #0]
 800af84:	f04f 30ff 	mov.w	r0, #4294967295
 800af88:	b01d      	add	sp, #116	@ 0x74
 800af8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af8e:	2340      	movs	r3, #64	@ 0x40
 800af90:	616b      	str	r3, [r5, #20]
 800af92:	2300      	movs	r3, #0
 800af94:	9309      	str	r3, [sp, #36]	@ 0x24
 800af96:	2320      	movs	r3, #32
 800af98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800afa0:	2330      	movs	r3, #48	@ 0x30
 800afa2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b140 <_svfiprintf_r+0x1e4>
 800afa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afaa:	f04f 0901 	mov.w	r9, #1
 800afae:	4623      	mov	r3, r4
 800afb0:	469a      	mov	sl, r3
 800afb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afb6:	b10a      	cbz	r2, 800afbc <_svfiprintf_r+0x60>
 800afb8:	2a25      	cmp	r2, #37	@ 0x25
 800afba:	d1f9      	bne.n	800afb0 <_svfiprintf_r+0x54>
 800afbc:	ebba 0b04 	subs.w	fp, sl, r4
 800afc0:	d00b      	beq.n	800afda <_svfiprintf_r+0x7e>
 800afc2:	465b      	mov	r3, fp
 800afc4:	4622      	mov	r2, r4
 800afc6:	4629      	mov	r1, r5
 800afc8:	4638      	mov	r0, r7
 800afca:	f7ff ff6b 	bl	800aea4 <__ssputs_r>
 800afce:	3001      	adds	r0, #1
 800afd0:	f000 80a7 	beq.w	800b122 <_svfiprintf_r+0x1c6>
 800afd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afd6:	445a      	add	r2, fp
 800afd8:	9209      	str	r2, [sp, #36]	@ 0x24
 800afda:	f89a 3000 	ldrb.w	r3, [sl]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f000 809f 	beq.w	800b122 <_svfiprintf_r+0x1c6>
 800afe4:	2300      	movs	r3, #0
 800afe6:	f04f 32ff 	mov.w	r2, #4294967295
 800afea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afee:	f10a 0a01 	add.w	sl, sl, #1
 800aff2:	9304      	str	r3, [sp, #16]
 800aff4:	9307      	str	r3, [sp, #28]
 800aff6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800affa:	931a      	str	r3, [sp, #104]	@ 0x68
 800affc:	4654      	mov	r4, sl
 800affe:	2205      	movs	r2, #5
 800b000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b004:	484e      	ldr	r0, [pc, #312]	@ (800b140 <_svfiprintf_r+0x1e4>)
 800b006:	f7f5 f8e3 	bl	80001d0 <memchr>
 800b00a:	9a04      	ldr	r2, [sp, #16]
 800b00c:	b9d8      	cbnz	r0, 800b046 <_svfiprintf_r+0xea>
 800b00e:	06d0      	lsls	r0, r2, #27
 800b010:	bf44      	itt	mi
 800b012:	2320      	movmi	r3, #32
 800b014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b018:	0711      	lsls	r1, r2, #28
 800b01a:	bf44      	itt	mi
 800b01c:	232b      	movmi	r3, #43	@ 0x2b
 800b01e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b022:	f89a 3000 	ldrb.w	r3, [sl]
 800b026:	2b2a      	cmp	r3, #42	@ 0x2a
 800b028:	d015      	beq.n	800b056 <_svfiprintf_r+0xfa>
 800b02a:	9a07      	ldr	r2, [sp, #28]
 800b02c:	4654      	mov	r4, sl
 800b02e:	2000      	movs	r0, #0
 800b030:	f04f 0c0a 	mov.w	ip, #10
 800b034:	4621      	mov	r1, r4
 800b036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b03a:	3b30      	subs	r3, #48	@ 0x30
 800b03c:	2b09      	cmp	r3, #9
 800b03e:	d94b      	bls.n	800b0d8 <_svfiprintf_r+0x17c>
 800b040:	b1b0      	cbz	r0, 800b070 <_svfiprintf_r+0x114>
 800b042:	9207      	str	r2, [sp, #28]
 800b044:	e014      	b.n	800b070 <_svfiprintf_r+0x114>
 800b046:	eba0 0308 	sub.w	r3, r0, r8
 800b04a:	fa09 f303 	lsl.w	r3, r9, r3
 800b04e:	4313      	orrs	r3, r2
 800b050:	9304      	str	r3, [sp, #16]
 800b052:	46a2      	mov	sl, r4
 800b054:	e7d2      	b.n	800affc <_svfiprintf_r+0xa0>
 800b056:	9b03      	ldr	r3, [sp, #12]
 800b058:	1d19      	adds	r1, r3, #4
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	9103      	str	r1, [sp, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	bfbb      	ittet	lt
 800b062:	425b      	neglt	r3, r3
 800b064:	f042 0202 	orrlt.w	r2, r2, #2
 800b068:	9307      	strge	r3, [sp, #28]
 800b06a:	9307      	strlt	r3, [sp, #28]
 800b06c:	bfb8      	it	lt
 800b06e:	9204      	strlt	r2, [sp, #16]
 800b070:	7823      	ldrb	r3, [r4, #0]
 800b072:	2b2e      	cmp	r3, #46	@ 0x2e
 800b074:	d10a      	bne.n	800b08c <_svfiprintf_r+0x130>
 800b076:	7863      	ldrb	r3, [r4, #1]
 800b078:	2b2a      	cmp	r3, #42	@ 0x2a
 800b07a:	d132      	bne.n	800b0e2 <_svfiprintf_r+0x186>
 800b07c:	9b03      	ldr	r3, [sp, #12]
 800b07e:	1d1a      	adds	r2, r3, #4
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	9203      	str	r2, [sp, #12]
 800b084:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b088:	3402      	adds	r4, #2
 800b08a:	9305      	str	r3, [sp, #20]
 800b08c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b150 <_svfiprintf_r+0x1f4>
 800b090:	7821      	ldrb	r1, [r4, #0]
 800b092:	2203      	movs	r2, #3
 800b094:	4650      	mov	r0, sl
 800b096:	f7f5 f89b 	bl	80001d0 <memchr>
 800b09a:	b138      	cbz	r0, 800b0ac <_svfiprintf_r+0x150>
 800b09c:	9b04      	ldr	r3, [sp, #16]
 800b09e:	eba0 000a 	sub.w	r0, r0, sl
 800b0a2:	2240      	movs	r2, #64	@ 0x40
 800b0a4:	4082      	lsls	r2, r0
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	3401      	adds	r4, #1
 800b0aa:	9304      	str	r3, [sp, #16]
 800b0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b0:	4824      	ldr	r0, [pc, #144]	@ (800b144 <_svfiprintf_r+0x1e8>)
 800b0b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0b6:	2206      	movs	r2, #6
 800b0b8:	f7f5 f88a 	bl	80001d0 <memchr>
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d036      	beq.n	800b12e <_svfiprintf_r+0x1d2>
 800b0c0:	4b21      	ldr	r3, [pc, #132]	@ (800b148 <_svfiprintf_r+0x1ec>)
 800b0c2:	bb1b      	cbnz	r3, 800b10c <_svfiprintf_r+0x1b0>
 800b0c4:	9b03      	ldr	r3, [sp, #12]
 800b0c6:	3307      	adds	r3, #7
 800b0c8:	f023 0307 	bic.w	r3, r3, #7
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	9303      	str	r3, [sp, #12]
 800b0d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0d2:	4433      	add	r3, r6
 800b0d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0d6:	e76a      	b.n	800afae <_svfiprintf_r+0x52>
 800b0d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0dc:	460c      	mov	r4, r1
 800b0de:	2001      	movs	r0, #1
 800b0e0:	e7a8      	b.n	800b034 <_svfiprintf_r+0xd8>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	3401      	adds	r4, #1
 800b0e6:	9305      	str	r3, [sp, #20]
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	f04f 0c0a 	mov.w	ip, #10
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0f4:	3a30      	subs	r2, #48	@ 0x30
 800b0f6:	2a09      	cmp	r2, #9
 800b0f8:	d903      	bls.n	800b102 <_svfiprintf_r+0x1a6>
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d0c6      	beq.n	800b08c <_svfiprintf_r+0x130>
 800b0fe:	9105      	str	r1, [sp, #20]
 800b100:	e7c4      	b.n	800b08c <_svfiprintf_r+0x130>
 800b102:	fb0c 2101 	mla	r1, ip, r1, r2
 800b106:	4604      	mov	r4, r0
 800b108:	2301      	movs	r3, #1
 800b10a:	e7f0      	b.n	800b0ee <_svfiprintf_r+0x192>
 800b10c:	ab03      	add	r3, sp, #12
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	462a      	mov	r2, r5
 800b112:	4b0e      	ldr	r3, [pc, #56]	@ (800b14c <_svfiprintf_r+0x1f0>)
 800b114:	a904      	add	r1, sp, #16
 800b116:	4638      	mov	r0, r7
 800b118:	f7fd fe88 	bl	8008e2c <_printf_float>
 800b11c:	1c42      	adds	r2, r0, #1
 800b11e:	4606      	mov	r6, r0
 800b120:	d1d6      	bne.n	800b0d0 <_svfiprintf_r+0x174>
 800b122:	89ab      	ldrh	r3, [r5, #12]
 800b124:	065b      	lsls	r3, r3, #25
 800b126:	f53f af2d 	bmi.w	800af84 <_svfiprintf_r+0x28>
 800b12a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b12c:	e72c      	b.n	800af88 <_svfiprintf_r+0x2c>
 800b12e:	ab03      	add	r3, sp, #12
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	462a      	mov	r2, r5
 800b134:	4b05      	ldr	r3, [pc, #20]	@ (800b14c <_svfiprintf_r+0x1f0>)
 800b136:	a904      	add	r1, sp, #16
 800b138:	4638      	mov	r0, r7
 800b13a:	f7fe f90f 	bl	800935c <_printf_i>
 800b13e:	e7ed      	b.n	800b11c <_svfiprintf_r+0x1c0>
 800b140:	0800c768 	.word	0x0800c768
 800b144:	0800c772 	.word	0x0800c772
 800b148:	08008e2d 	.word	0x08008e2d
 800b14c:	0800aea5 	.word	0x0800aea5
 800b150:	0800c76e 	.word	0x0800c76e

0800b154 <__sflush_r>:
 800b154:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b15c:	0716      	lsls	r6, r2, #28
 800b15e:	4605      	mov	r5, r0
 800b160:	460c      	mov	r4, r1
 800b162:	d454      	bmi.n	800b20e <__sflush_r+0xba>
 800b164:	684b      	ldr	r3, [r1, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	dc02      	bgt.n	800b170 <__sflush_r+0x1c>
 800b16a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	dd48      	ble.n	800b202 <__sflush_r+0xae>
 800b170:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b172:	2e00      	cmp	r6, #0
 800b174:	d045      	beq.n	800b202 <__sflush_r+0xae>
 800b176:	2300      	movs	r3, #0
 800b178:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b17c:	682f      	ldr	r7, [r5, #0]
 800b17e:	6a21      	ldr	r1, [r4, #32]
 800b180:	602b      	str	r3, [r5, #0]
 800b182:	d030      	beq.n	800b1e6 <__sflush_r+0x92>
 800b184:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	0759      	lsls	r1, r3, #29
 800b18a:	d505      	bpl.n	800b198 <__sflush_r+0x44>
 800b18c:	6863      	ldr	r3, [r4, #4]
 800b18e:	1ad2      	subs	r2, r2, r3
 800b190:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b192:	b10b      	cbz	r3, 800b198 <__sflush_r+0x44>
 800b194:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b196:	1ad2      	subs	r2, r2, r3
 800b198:	2300      	movs	r3, #0
 800b19a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b19c:	6a21      	ldr	r1, [r4, #32]
 800b19e:	4628      	mov	r0, r5
 800b1a0:	47b0      	blx	r6
 800b1a2:	1c43      	adds	r3, r0, #1
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	d106      	bne.n	800b1b6 <__sflush_r+0x62>
 800b1a8:	6829      	ldr	r1, [r5, #0]
 800b1aa:	291d      	cmp	r1, #29
 800b1ac:	d82b      	bhi.n	800b206 <__sflush_r+0xb2>
 800b1ae:	4a2a      	ldr	r2, [pc, #168]	@ (800b258 <__sflush_r+0x104>)
 800b1b0:	410a      	asrs	r2, r1
 800b1b2:	07d6      	lsls	r6, r2, #31
 800b1b4:	d427      	bmi.n	800b206 <__sflush_r+0xb2>
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	6062      	str	r2, [r4, #4]
 800b1ba:	04d9      	lsls	r1, r3, #19
 800b1bc:	6922      	ldr	r2, [r4, #16]
 800b1be:	6022      	str	r2, [r4, #0]
 800b1c0:	d504      	bpl.n	800b1cc <__sflush_r+0x78>
 800b1c2:	1c42      	adds	r2, r0, #1
 800b1c4:	d101      	bne.n	800b1ca <__sflush_r+0x76>
 800b1c6:	682b      	ldr	r3, [r5, #0]
 800b1c8:	b903      	cbnz	r3, 800b1cc <__sflush_r+0x78>
 800b1ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800b1cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1ce:	602f      	str	r7, [r5, #0]
 800b1d0:	b1b9      	cbz	r1, 800b202 <__sflush_r+0xae>
 800b1d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1d6:	4299      	cmp	r1, r3
 800b1d8:	d002      	beq.n	800b1e0 <__sflush_r+0x8c>
 800b1da:	4628      	mov	r0, r5
 800b1dc:	f7ff f9e0 	bl	800a5a0 <_free_r>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1e4:	e00d      	b.n	800b202 <__sflush_r+0xae>
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47b0      	blx	r6
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	1c50      	adds	r0, r2, #1
 800b1f0:	d1c9      	bne.n	800b186 <__sflush_r+0x32>
 800b1f2:	682b      	ldr	r3, [r5, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d0c6      	beq.n	800b186 <__sflush_r+0x32>
 800b1f8:	2b1d      	cmp	r3, #29
 800b1fa:	d001      	beq.n	800b200 <__sflush_r+0xac>
 800b1fc:	2b16      	cmp	r3, #22
 800b1fe:	d11e      	bne.n	800b23e <__sflush_r+0xea>
 800b200:	602f      	str	r7, [r5, #0]
 800b202:	2000      	movs	r0, #0
 800b204:	e022      	b.n	800b24c <__sflush_r+0xf8>
 800b206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b20a:	b21b      	sxth	r3, r3
 800b20c:	e01b      	b.n	800b246 <__sflush_r+0xf2>
 800b20e:	690f      	ldr	r7, [r1, #16]
 800b210:	2f00      	cmp	r7, #0
 800b212:	d0f6      	beq.n	800b202 <__sflush_r+0xae>
 800b214:	0793      	lsls	r3, r2, #30
 800b216:	680e      	ldr	r6, [r1, #0]
 800b218:	bf08      	it	eq
 800b21a:	694b      	ldreq	r3, [r1, #20]
 800b21c:	600f      	str	r7, [r1, #0]
 800b21e:	bf18      	it	ne
 800b220:	2300      	movne	r3, #0
 800b222:	eba6 0807 	sub.w	r8, r6, r7
 800b226:	608b      	str	r3, [r1, #8]
 800b228:	f1b8 0f00 	cmp.w	r8, #0
 800b22c:	dde9      	ble.n	800b202 <__sflush_r+0xae>
 800b22e:	6a21      	ldr	r1, [r4, #32]
 800b230:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b232:	4643      	mov	r3, r8
 800b234:	463a      	mov	r2, r7
 800b236:	4628      	mov	r0, r5
 800b238:	47b0      	blx	r6
 800b23a:	2800      	cmp	r0, #0
 800b23c:	dc08      	bgt.n	800b250 <__sflush_r+0xfc>
 800b23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b246:	81a3      	strh	r3, [r4, #12]
 800b248:	f04f 30ff 	mov.w	r0, #4294967295
 800b24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b250:	4407      	add	r7, r0
 800b252:	eba8 0800 	sub.w	r8, r8, r0
 800b256:	e7e7      	b.n	800b228 <__sflush_r+0xd4>
 800b258:	dfbffffe 	.word	0xdfbffffe

0800b25c <_fflush_r>:
 800b25c:	b538      	push	{r3, r4, r5, lr}
 800b25e:	690b      	ldr	r3, [r1, #16]
 800b260:	4605      	mov	r5, r0
 800b262:	460c      	mov	r4, r1
 800b264:	b913      	cbnz	r3, 800b26c <_fflush_r+0x10>
 800b266:	2500      	movs	r5, #0
 800b268:	4628      	mov	r0, r5
 800b26a:	bd38      	pop	{r3, r4, r5, pc}
 800b26c:	b118      	cbz	r0, 800b276 <_fflush_r+0x1a>
 800b26e:	6a03      	ldr	r3, [r0, #32]
 800b270:	b90b      	cbnz	r3, 800b276 <_fflush_r+0x1a>
 800b272:	f7fe fa1f 	bl	80096b4 <__sinit>
 800b276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d0f3      	beq.n	800b266 <_fflush_r+0xa>
 800b27e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b280:	07d0      	lsls	r0, r2, #31
 800b282:	d404      	bmi.n	800b28e <_fflush_r+0x32>
 800b284:	0599      	lsls	r1, r3, #22
 800b286:	d402      	bmi.n	800b28e <_fflush_r+0x32>
 800b288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b28a:	f7fe fb2a 	bl	80098e2 <__retarget_lock_acquire_recursive>
 800b28e:	4628      	mov	r0, r5
 800b290:	4621      	mov	r1, r4
 800b292:	f7ff ff5f 	bl	800b154 <__sflush_r>
 800b296:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b298:	07da      	lsls	r2, r3, #31
 800b29a:	4605      	mov	r5, r0
 800b29c:	d4e4      	bmi.n	800b268 <_fflush_r+0xc>
 800b29e:	89a3      	ldrh	r3, [r4, #12]
 800b2a0:	059b      	lsls	r3, r3, #22
 800b2a2:	d4e1      	bmi.n	800b268 <_fflush_r+0xc>
 800b2a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2a6:	f7fe fb1d 	bl	80098e4 <__retarget_lock_release_recursive>
 800b2aa:	e7dd      	b.n	800b268 <_fflush_r+0xc>

0800b2ac <memmove>:
 800b2ac:	4288      	cmp	r0, r1
 800b2ae:	b510      	push	{r4, lr}
 800b2b0:	eb01 0402 	add.w	r4, r1, r2
 800b2b4:	d902      	bls.n	800b2bc <memmove+0x10>
 800b2b6:	4284      	cmp	r4, r0
 800b2b8:	4623      	mov	r3, r4
 800b2ba:	d807      	bhi.n	800b2cc <memmove+0x20>
 800b2bc:	1e43      	subs	r3, r0, #1
 800b2be:	42a1      	cmp	r1, r4
 800b2c0:	d008      	beq.n	800b2d4 <memmove+0x28>
 800b2c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2ca:	e7f8      	b.n	800b2be <memmove+0x12>
 800b2cc:	4402      	add	r2, r0
 800b2ce:	4601      	mov	r1, r0
 800b2d0:	428a      	cmp	r2, r1
 800b2d2:	d100      	bne.n	800b2d6 <memmove+0x2a>
 800b2d4:	bd10      	pop	{r4, pc}
 800b2d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2de:	e7f7      	b.n	800b2d0 <memmove+0x24>

0800b2e0 <_sbrk_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	4d06      	ldr	r5, [pc, #24]	@ (800b2fc <_sbrk_r+0x1c>)
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	4608      	mov	r0, r1
 800b2ea:	602b      	str	r3, [r5, #0]
 800b2ec:	f7f6 fed8 	bl	80020a0 <_sbrk>
 800b2f0:	1c43      	adds	r3, r0, #1
 800b2f2:	d102      	bne.n	800b2fa <_sbrk_r+0x1a>
 800b2f4:	682b      	ldr	r3, [r5, #0]
 800b2f6:	b103      	cbz	r3, 800b2fa <_sbrk_r+0x1a>
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	bd38      	pop	{r3, r4, r5, pc}
 800b2fc:	200052a4 	.word	0x200052a4

0800b300 <__assert_func>:
 800b300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b302:	4614      	mov	r4, r2
 800b304:	461a      	mov	r2, r3
 800b306:	4b09      	ldr	r3, [pc, #36]	@ (800b32c <__assert_func+0x2c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4605      	mov	r5, r0
 800b30c:	68d8      	ldr	r0, [r3, #12]
 800b30e:	b954      	cbnz	r4, 800b326 <__assert_func+0x26>
 800b310:	4b07      	ldr	r3, [pc, #28]	@ (800b330 <__assert_func+0x30>)
 800b312:	461c      	mov	r4, r3
 800b314:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b318:	9100      	str	r1, [sp, #0]
 800b31a:	462b      	mov	r3, r5
 800b31c:	4905      	ldr	r1, [pc, #20]	@ (800b334 <__assert_func+0x34>)
 800b31e:	f000 f86f 	bl	800b400 <fiprintf>
 800b322:	f000 f87f 	bl	800b424 <abort>
 800b326:	4b04      	ldr	r3, [pc, #16]	@ (800b338 <__assert_func+0x38>)
 800b328:	e7f4      	b.n	800b314 <__assert_func+0x14>
 800b32a:	bf00      	nop
 800b32c:	2000001c 	.word	0x2000001c
 800b330:	0800c7be 	.word	0x0800c7be
 800b334:	0800c790 	.word	0x0800c790
 800b338:	0800c783 	.word	0x0800c783

0800b33c <_calloc_r>:
 800b33c:	b570      	push	{r4, r5, r6, lr}
 800b33e:	fba1 5402 	umull	r5, r4, r1, r2
 800b342:	b93c      	cbnz	r4, 800b354 <_calloc_r+0x18>
 800b344:	4629      	mov	r1, r5
 800b346:	f7ff f99f 	bl	800a688 <_malloc_r>
 800b34a:	4606      	mov	r6, r0
 800b34c:	b928      	cbnz	r0, 800b35a <_calloc_r+0x1e>
 800b34e:	2600      	movs	r6, #0
 800b350:	4630      	mov	r0, r6
 800b352:	bd70      	pop	{r4, r5, r6, pc}
 800b354:	220c      	movs	r2, #12
 800b356:	6002      	str	r2, [r0, #0]
 800b358:	e7f9      	b.n	800b34e <_calloc_r+0x12>
 800b35a:	462a      	mov	r2, r5
 800b35c:	4621      	mov	r1, r4
 800b35e:	f7fe fa42 	bl	80097e6 <memset>
 800b362:	e7f5      	b.n	800b350 <_calloc_r+0x14>

0800b364 <__ascii_mbtowc>:
 800b364:	b082      	sub	sp, #8
 800b366:	b901      	cbnz	r1, 800b36a <__ascii_mbtowc+0x6>
 800b368:	a901      	add	r1, sp, #4
 800b36a:	b142      	cbz	r2, 800b37e <__ascii_mbtowc+0x1a>
 800b36c:	b14b      	cbz	r3, 800b382 <__ascii_mbtowc+0x1e>
 800b36e:	7813      	ldrb	r3, [r2, #0]
 800b370:	600b      	str	r3, [r1, #0]
 800b372:	7812      	ldrb	r2, [r2, #0]
 800b374:	1e10      	subs	r0, r2, #0
 800b376:	bf18      	it	ne
 800b378:	2001      	movne	r0, #1
 800b37a:	b002      	add	sp, #8
 800b37c:	4770      	bx	lr
 800b37e:	4610      	mov	r0, r2
 800b380:	e7fb      	b.n	800b37a <__ascii_mbtowc+0x16>
 800b382:	f06f 0001 	mvn.w	r0, #1
 800b386:	e7f8      	b.n	800b37a <__ascii_mbtowc+0x16>

0800b388 <_realloc_r>:
 800b388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38c:	4680      	mov	r8, r0
 800b38e:	4615      	mov	r5, r2
 800b390:	460c      	mov	r4, r1
 800b392:	b921      	cbnz	r1, 800b39e <_realloc_r+0x16>
 800b394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b398:	4611      	mov	r1, r2
 800b39a:	f7ff b975 	b.w	800a688 <_malloc_r>
 800b39e:	b92a      	cbnz	r2, 800b3ac <_realloc_r+0x24>
 800b3a0:	f7ff f8fe 	bl	800a5a0 <_free_r>
 800b3a4:	2400      	movs	r4, #0
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ac:	f000 f841 	bl	800b432 <_malloc_usable_size_r>
 800b3b0:	4285      	cmp	r5, r0
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	d802      	bhi.n	800b3bc <_realloc_r+0x34>
 800b3b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b3ba:	d8f4      	bhi.n	800b3a6 <_realloc_r+0x1e>
 800b3bc:	4629      	mov	r1, r5
 800b3be:	4640      	mov	r0, r8
 800b3c0:	f7ff f962 	bl	800a688 <_malloc_r>
 800b3c4:	4607      	mov	r7, r0
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d0ec      	beq.n	800b3a4 <_realloc_r+0x1c>
 800b3ca:	42b5      	cmp	r5, r6
 800b3cc:	462a      	mov	r2, r5
 800b3ce:	4621      	mov	r1, r4
 800b3d0:	bf28      	it	cs
 800b3d2:	4632      	movcs	r2, r6
 800b3d4:	f7fe fa87 	bl	80098e6 <memcpy>
 800b3d8:	4621      	mov	r1, r4
 800b3da:	4640      	mov	r0, r8
 800b3dc:	f7ff f8e0 	bl	800a5a0 <_free_r>
 800b3e0:	463c      	mov	r4, r7
 800b3e2:	e7e0      	b.n	800b3a6 <_realloc_r+0x1e>

0800b3e4 <__ascii_wctomb>:
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	4608      	mov	r0, r1
 800b3e8:	b141      	cbz	r1, 800b3fc <__ascii_wctomb+0x18>
 800b3ea:	2aff      	cmp	r2, #255	@ 0xff
 800b3ec:	d904      	bls.n	800b3f8 <__ascii_wctomb+0x14>
 800b3ee:	228a      	movs	r2, #138	@ 0x8a
 800b3f0:	601a      	str	r2, [r3, #0]
 800b3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f6:	4770      	bx	lr
 800b3f8:	700a      	strb	r2, [r1, #0]
 800b3fa:	2001      	movs	r0, #1
 800b3fc:	4770      	bx	lr
	...

0800b400 <fiprintf>:
 800b400:	b40e      	push	{r1, r2, r3}
 800b402:	b503      	push	{r0, r1, lr}
 800b404:	4601      	mov	r1, r0
 800b406:	ab03      	add	r3, sp, #12
 800b408:	4805      	ldr	r0, [pc, #20]	@ (800b420 <fiprintf+0x20>)
 800b40a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b40e:	6800      	ldr	r0, [r0, #0]
 800b410:	9301      	str	r3, [sp, #4]
 800b412:	f000 f83f 	bl	800b494 <_vfiprintf_r>
 800b416:	b002      	add	sp, #8
 800b418:	f85d eb04 	ldr.w	lr, [sp], #4
 800b41c:	b003      	add	sp, #12
 800b41e:	4770      	bx	lr
 800b420:	2000001c 	.word	0x2000001c

0800b424 <abort>:
 800b424:	b508      	push	{r3, lr}
 800b426:	2006      	movs	r0, #6
 800b428:	f000 fa08 	bl	800b83c <raise>
 800b42c:	2001      	movs	r0, #1
 800b42e:	f7f6 fdbf 	bl	8001fb0 <_exit>

0800b432 <_malloc_usable_size_r>:
 800b432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b436:	1f18      	subs	r0, r3, #4
 800b438:	2b00      	cmp	r3, #0
 800b43a:	bfbc      	itt	lt
 800b43c:	580b      	ldrlt	r3, [r1, r0]
 800b43e:	18c0      	addlt	r0, r0, r3
 800b440:	4770      	bx	lr

0800b442 <__sfputc_r>:
 800b442:	6893      	ldr	r3, [r2, #8]
 800b444:	3b01      	subs	r3, #1
 800b446:	2b00      	cmp	r3, #0
 800b448:	b410      	push	{r4}
 800b44a:	6093      	str	r3, [r2, #8]
 800b44c:	da08      	bge.n	800b460 <__sfputc_r+0x1e>
 800b44e:	6994      	ldr	r4, [r2, #24]
 800b450:	42a3      	cmp	r3, r4
 800b452:	db01      	blt.n	800b458 <__sfputc_r+0x16>
 800b454:	290a      	cmp	r1, #10
 800b456:	d103      	bne.n	800b460 <__sfputc_r+0x1e>
 800b458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b45c:	f000 b932 	b.w	800b6c4 <__swbuf_r>
 800b460:	6813      	ldr	r3, [r2, #0]
 800b462:	1c58      	adds	r0, r3, #1
 800b464:	6010      	str	r0, [r2, #0]
 800b466:	7019      	strb	r1, [r3, #0]
 800b468:	4608      	mov	r0, r1
 800b46a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <__sfputs_r>:
 800b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b472:	4606      	mov	r6, r0
 800b474:	460f      	mov	r7, r1
 800b476:	4614      	mov	r4, r2
 800b478:	18d5      	adds	r5, r2, r3
 800b47a:	42ac      	cmp	r4, r5
 800b47c:	d101      	bne.n	800b482 <__sfputs_r+0x12>
 800b47e:	2000      	movs	r0, #0
 800b480:	e007      	b.n	800b492 <__sfputs_r+0x22>
 800b482:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b486:	463a      	mov	r2, r7
 800b488:	4630      	mov	r0, r6
 800b48a:	f7ff ffda 	bl	800b442 <__sfputc_r>
 800b48e:	1c43      	adds	r3, r0, #1
 800b490:	d1f3      	bne.n	800b47a <__sfputs_r+0xa>
 800b492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b494 <_vfiprintf_r>:
 800b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b498:	460d      	mov	r5, r1
 800b49a:	b09d      	sub	sp, #116	@ 0x74
 800b49c:	4614      	mov	r4, r2
 800b49e:	4698      	mov	r8, r3
 800b4a0:	4606      	mov	r6, r0
 800b4a2:	b118      	cbz	r0, 800b4ac <_vfiprintf_r+0x18>
 800b4a4:	6a03      	ldr	r3, [r0, #32]
 800b4a6:	b90b      	cbnz	r3, 800b4ac <_vfiprintf_r+0x18>
 800b4a8:	f7fe f904 	bl	80096b4 <__sinit>
 800b4ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4ae:	07d9      	lsls	r1, r3, #31
 800b4b0:	d405      	bmi.n	800b4be <_vfiprintf_r+0x2a>
 800b4b2:	89ab      	ldrh	r3, [r5, #12]
 800b4b4:	059a      	lsls	r2, r3, #22
 800b4b6:	d402      	bmi.n	800b4be <_vfiprintf_r+0x2a>
 800b4b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4ba:	f7fe fa12 	bl	80098e2 <__retarget_lock_acquire_recursive>
 800b4be:	89ab      	ldrh	r3, [r5, #12]
 800b4c0:	071b      	lsls	r3, r3, #28
 800b4c2:	d501      	bpl.n	800b4c8 <_vfiprintf_r+0x34>
 800b4c4:	692b      	ldr	r3, [r5, #16]
 800b4c6:	b99b      	cbnz	r3, 800b4f0 <_vfiprintf_r+0x5c>
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	f000 f938 	bl	800b740 <__swsetup_r>
 800b4d0:	b170      	cbz	r0, 800b4f0 <_vfiprintf_r+0x5c>
 800b4d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4d4:	07dc      	lsls	r4, r3, #31
 800b4d6:	d504      	bpl.n	800b4e2 <_vfiprintf_r+0x4e>
 800b4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4dc:	b01d      	add	sp, #116	@ 0x74
 800b4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e2:	89ab      	ldrh	r3, [r5, #12]
 800b4e4:	0598      	lsls	r0, r3, #22
 800b4e6:	d4f7      	bmi.n	800b4d8 <_vfiprintf_r+0x44>
 800b4e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4ea:	f7fe f9fb 	bl	80098e4 <__retarget_lock_release_recursive>
 800b4ee:	e7f3      	b.n	800b4d8 <_vfiprintf_r+0x44>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4f4:	2320      	movs	r3, #32
 800b4f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4fe:	2330      	movs	r3, #48	@ 0x30
 800b500:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b6b0 <_vfiprintf_r+0x21c>
 800b504:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b508:	f04f 0901 	mov.w	r9, #1
 800b50c:	4623      	mov	r3, r4
 800b50e:	469a      	mov	sl, r3
 800b510:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b514:	b10a      	cbz	r2, 800b51a <_vfiprintf_r+0x86>
 800b516:	2a25      	cmp	r2, #37	@ 0x25
 800b518:	d1f9      	bne.n	800b50e <_vfiprintf_r+0x7a>
 800b51a:	ebba 0b04 	subs.w	fp, sl, r4
 800b51e:	d00b      	beq.n	800b538 <_vfiprintf_r+0xa4>
 800b520:	465b      	mov	r3, fp
 800b522:	4622      	mov	r2, r4
 800b524:	4629      	mov	r1, r5
 800b526:	4630      	mov	r0, r6
 800b528:	f7ff ffa2 	bl	800b470 <__sfputs_r>
 800b52c:	3001      	adds	r0, #1
 800b52e:	f000 80a7 	beq.w	800b680 <_vfiprintf_r+0x1ec>
 800b532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b534:	445a      	add	r2, fp
 800b536:	9209      	str	r2, [sp, #36]	@ 0x24
 800b538:	f89a 3000 	ldrb.w	r3, [sl]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f000 809f 	beq.w	800b680 <_vfiprintf_r+0x1ec>
 800b542:	2300      	movs	r3, #0
 800b544:	f04f 32ff 	mov.w	r2, #4294967295
 800b548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b54c:	f10a 0a01 	add.w	sl, sl, #1
 800b550:	9304      	str	r3, [sp, #16]
 800b552:	9307      	str	r3, [sp, #28]
 800b554:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b558:	931a      	str	r3, [sp, #104]	@ 0x68
 800b55a:	4654      	mov	r4, sl
 800b55c:	2205      	movs	r2, #5
 800b55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b562:	4853      	ldr	r0, [pc, #332]	@ (800b6b0 <_vfiprintf_r+0x21c>)
 800b564:	f7f4 fe34 	bl	80001d0 <memchr>
 800b568:	9a04      	ldr	r2, [sp, #16]
 800b56a:	b9d8      	cbnz	r0, 800b5a4 <_vfiprintf_r+0x110>
 800b56c:	06d1      	lsls	r1, r2, #27
 800b56e:	bf44      	itt	mi
 800b570:	2320      	movmi	r3, #32
 800b572:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b576:	0713      	lsls	r3, r2, #28
 800b578:	bf44      	itt	mi
 800b57a:	232b      	movmi	r3, #43	@ 0x2b
 800b57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b580:	f89a 3000 	ldrb.w	r3, [sl]
 800b584:	2b2a      	cmp	r3, #42	@ 0x2a
 800b586:	d015      	beq.n	800b5b4 <_vfiprintf_r+0x120>
 800b588:	9a07      	ldr	r2, [sp, #28]
 800b58a:	4654      	mov	r4, sl
 800b58c:	2000      	movs	r0, #0
 800b58e:	f04f 0c0a 	mov.w	ip, #10
 800b592:	4621      	mov	r1, r4
 800b594:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b598:	3b30      	subs	r3, #48	@ 0x30
 800b59a:	2b09      	cmp	r3, #9
 800b59c:	d94b      	bls.n	800b636 <_vfiprintf_r+0x1a2>
 800b59e:	b1b0      	cbz	r0, 800b5ce <_vfiprintf_r+0x13a>
 800b5a0:	9207      	str	r2, [sp, #28]
 800b5a2:	e014      	b.n	800b5ce <_vfiprintf_r+0x13a>
 800b5a4:	eba0 0308 	sub.w	r3, r0, r8
 800b5a8:	fa09 f303 	lsl.w	r3, r9, r3
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	9304      	str	r3, [sp, #16]
 800b5b0:	46a2      	mov	sl, r4
 800b5b2:	e7d2      	b.n	800b55a <_vfiprintf_r+0xc6>
 800b5b4:	9b03      	ldr	r3, [sp, #12]
 800b5b6:	1d19      	adds	r1, r3, #4
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	9103      	str	r1, [sp, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	bfbb      	ittet	lt
 800b5c0:	425b      	neglt	r3, r3
 800b5c2:	f042 0202 	orrlt.w	r2, r2, #2
 800b5c6:	9307      	strge	r3, [sp, #28]
 800b5c8:	9307      	strlt	r3, [sp, #28]
 800b5ca:	bfb8      	it	lt
 800b5cc:	9204      	strlt	r2, [sp, #16]
 800b5ce:	7823      	ldrb	r3, [r4, #0]
 800b5d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5d2:	d10a      	bne.n	800b5ea <_vfiprintf_r+0x156>
 800b5d4:	7863      	ldrb	r3, [r4, #1]
 800b5d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5d8:	d132      	bne.n	800b640 <_vfiprintf_r+0x1ac>
 800b5da:	9b03      	ldr	r3, [sp, #12]
 800b5dc:	1d1a      	adds	r2, r3, #4
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	9203      	str	r2, [sp, #12]
 800b5e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5e6:	3402      	adds	r4, #2
 800b5e8:	9305      	str	r3, [sp, #20]
 800b5ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b6c0 <_vfiprintf_r+0x22c>
 800b5ee:	7821      	ldrb	r1, [r4, #0]
 800b5f0:	2203      	movs	r2, #3
 800b5f2:	4650      	mov	r0, sl
 800b5f4:	f7f4 fdec 	bl	80001d0 <memchr>
 800b5f8:	b138      	cbz	r0, 800b60a <_vfiprintf_r+0x176>
 800b5fa:	9b04      	ldr	r3, [sp, #16]
 800b5fc:	eba0 000a 	sub.w	r0, r0, sl
 800b600:	2240      	movs	r2, #64	@ 0x40
 800b602:	4082      	lsls	r2, r0
 800b604:	4313      	orrs	r3, r2
 800b606:	3401      	adds	r4, #1
 800b608:	9304      	str	r3, [sp, #16]
 800b60a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b60e:	4829      	ldr	r0, [pc, #164]	@ (800b6b4 <_vfiprintf_r+0x220>)
 800b610:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b614:	2206      	movs	r2, #6
 800b616:	f7f4 fddb 	bl	80001d0 <memchr>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d03f      	beq.n	800b69e <_vfiprintf_r+0x20a>
 800b61e:	4b26      	ldr	r3, [pc, #152]	@ (800b6b8 <_vfiprintf_r+0x224>)
 800b620:	bb1b      	cbnz	r3, 800b66a <_vfiprintf_r+0x1d6>
 800b622:	9b03      	ldr	r3, [sp, #12]
 800b624:	3307      	adds	r3, #7
 800b626:	f023 0307 	bic.w	r3, r3, #7
 800b62a:	3308      	adds	r3, #8
 800b62c:	9303      	str	r3, [sp, #12]
 800b62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b630:	443b      	add	r3, r7
 800b632:	9309      	str	r3, [sp, #36]	@ 0x24
 800b634:	e76a      	b.n	800b50c <_vfiprintf_r+0x78>
 800b636:	fb0c 3202 	mla	r2, ip, r2, r3
 800b63a:	460c      	mov	r4, r1
 800b63c:	2001      	movs	r0, #1
 800b63e:	e7a8      	b.n	800b592 <_vfiprintf_r+0xfe>
 800b640:	2300      	movs	r3, #0
 800b642:	3401      	adds	r4, #1
 800b644:	9305      	str	r3, [sp, #20]
 800b646:	4619      	mov	r1, r3
 800b648:	f04f 0c0a 	mov.w	ip, #10
 800b64c:	4620      	mov	r0, r4
 800b64e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b652:	3a30      	subs	r2, #48	@ 0x30
 800b654:	2a09      	cmp	r2, #9
 800b656:	d903      	bls.n	800b660 <_vfiprintf_r+0x1cc>
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d0c6      	beq.n	800b5ea <_vfiprintf_r+0x156>
 800b65c:	9105      	str	r1, [sp, #20]
 800b65e:	e7c4      	b.n	800b5ea <_vfiprintf_r+0x156>
 800b660:	fb0c 2101 	mla	r1, ip, r1, r2
 800b664:	4604      	mov	r4, r0
 800b666:	2301      	movs	r3, #1
 800b668:	e7f0      	b.n	800b64c <_vfiprintf_r+0x1b8>
 800b66a:	ab03      	add	r3, sp, #12
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	462a      	mov	r2, r5
 800b670:	4b12      	ldr	r3, [pc, #72]	@ (800b6bc <_vfiprintf_r+0x228>)
 800b672:	a904      	add	r1, sp, #16
 800b674:	4630      	mov	r0, r6
 800b676:	f7fd fbd9 	bl	8008e2c <_printf_float>
 800b67a:	4607      	mov	r7, r0
 800b67c:	1c78      	adds	r0, r7, #1
 800b67e:	d1d6      	bne.n	800b62e <_vfiprintf_r+0x19a>
 800b680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b682:	07d9      	lsls	r1, r3, #31
 800b684:	d405      	bmi.n	800b692 <_vfiprintf_r+0x1fe>
 800b686:	89ab      	ldrh	r3, [r5, #12]
 800b688:	059a      	lsls	r2, r3, #22
 800b68a:	d402      	bmi.n	800b692 <_vfiprintf_r+0x1fe>
 800b68c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b68e:	f7fe f929 	bl	80098e4 <__retarget_lock_release_recursive>
 800b692:	89ab      	ldrh	r3, [r5, #12]
 800b694:	065b      	lsls	r3, r3, #25
 800b696:	f53f af1f 	bmi.w	800b4d8 <_vfiprintf_r+0x44>
 800b69a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b69c:	e71e      	b.n	800b4dc <_vfiprintf_r+0x48>
 800b69e:	ab03      	add	r3, sp, #12
 800b6a0:	9300      	str	r3, [sp, #0]
 800b6a2:	462a      	mov	r2, r5
 800b6a4:	4b05      	ldr	r3, [pc, #20]	@ (800b6bc <_vfiprintf_r+0x228>)
 800b6a6:	a904      	add	r1, sp, #16
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f7fd fe57 	bl	800935c <_printf_i>
 800b6ae:	e7e4      	b.n	800b67a <_vfiprintf_r+0x1e6>
 800b6b0:	0800c768 	.word	0x0800c768
 800b6b4:	0800c772 	.word	0x0800c772
 800b6b8:	08008e2d 	.word	0x08008e2d
 800b6bc:	0800b471 	.word	0x0800b471
 800b6c0:	0800c76e 	.word	0x0800c76e

0800b6c4 <__swbuf_r>:
 800b6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c6:	460e      	mov	r6, r1
 800b6c8:	4614      	mov	r4, r2
 800b6ca:	4605      	mov	r5, r0
 800b6cc:	b118      	cbz	r0, 800b6d6 <__swbuf_r+0x12>
 800b6ce:	6a03      	ldr	r3, [r0, #32]
 800b6d0:	b90b      	cbnz	r3, 800b6d6 <__swbuf_r+0x12>
 800b6d2:	f7fd ffef 	bl	80096b4 <__sinit>
 800b6d6:	69a3      	ldr	r3, [r4, #24]
 800b6d8:	60a3      	str	r3, [r4, #8]
 800b6da:	89a3      	ldrh	r3, [r4, #12]
 800b6dc:	071a      	lsls	r2, r3, #28
 800b6de:	d501      	bpl.n	800b6e4 <__swbuf_r+0x20>
 800b6e0:	6923      	ldr	r3, [r4, #16]
 800b6e2:	b943      	cbnz	r3, 800b6f6 <__swbuf_r+0x32>
 800b6e4:	4621      	mov	r1, r4
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	f000 f82a 	bl	800b740 <__swsetup_r>
 800b6ec:	b118      	cbz	r0, 800b6f6 <__swbuf_r+0x32>
 800b6ee:	f04f 37ff 	mov.w	r7, #4294967295
 800b6f2:	4638      	mov	r0, r7
 800b6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	6922      	ldr	r2, [r4, #16]
 800b6fa:	1a98      	subs	r0, r3, r2
 800b6fc:	6963      	ldr	r3, [r4, #20]
 800b6fe:	b2f6      	uxtb	r6, r6
 800b700:	4283      	cmp	r3, r0
 800b702:	4637      	mov	r7, r6
 800b704:	dc05      	bgt.n	800b712 <__swbuf_r+0x4e>
 800b706:	4621      	mov	r1, r4
 800b708:	4628      	mov	r0, r5
 800b70a:	f7ff fda7 	bl	800b25c <_fflush_r>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d1ed      	bne.n	800b6ee <__swbuf_r+0x2a>
 800b712:	68a3      	ldr	r3, [r4, #8]
 800b714:	3b01      	subs	r3, #1
 800b716:	60a3      	str	r3, [r4, #8]
 800b718:	6823      	ldr	r3, [r4, #0]
 800b71a:	1c5a      	adds	r2, r3, #1
 800b71c:	6022      	str	r2, [r4, #0]
 800b71e:	701e      	strb	r6, [r3, #0]
 800b720:	6962      	ldr	r2, [r4, #20]
 800b722:	1c43      	adds	r3, r0, #1
 800b724:	429a      	cmp	r2, r3
 800b726:	d004      	beq.n	800b732 <__swbuf_r+0x6e>
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	07db      	lsls	r3, r3, #31
 800b72c:	d5e1      	bpl.n	800b6f2 <__swbuf_r+0x2e>
 800b72e:	2e0a      	cmp	r6, #10
 800b730:	d1df      	bne.n	800b6f2 <__swbuf_r+0x2e>
 800b732:	4621      	mov	r1, r4
 800b734:	4628      	mov	r0, r5
 800b736:	f7ff fd91 	bl	800b25c <_fflush_r>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d0d9      	beq.n	800b6f2 <__swbuf_r+0x2e>
 800b73e:	e7d6      	b.n	800b6ee <__swbuf_r+0x2a>

0800b740 <__swsetup_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4b29      	ldr	r3, [pc, #164]	@ (800b7e8 <__swsetup_r+0xa8>)
 800b744:	4605      	mov	r5, r0
 800b746:	6818      	ldr	r0, [r3, #0]
 800b748:	460c      	mov	r4, r1
 800b74a:	b118      	cbz	r0, 800b754 <__swsetup_r+0x14>
 800b74c:	6a03      	ldr	r3, [r0, #32]
 800b74e:	b90b      	cbnz	r3, 800b754 <__swsetup_r+0x14>
 800b750:	f7fd ffb0 	bl	80096b4 <__sinit>
 800b754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b758:	0719      	lsls	r1, r3, #28
 800b75a:	d422      	bmi.n	800b7a2 <__swsetup_r+0x62>
 800b75c:	06da      	lsls	r2, r3, #27
 800b75e:	d407      	bmi.n	800b770 <__swsetup_r+0x30>
 800b760:	2209      	movs	r2, #9
 800b762:	602a      	str	r2, [r5, #0]
 800b764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b768:	81a3      	strh	r3, [r4, #12]
 800b76a:	f04f 30ff 	mov.w	r0, #4294967295
 800b76e:	e033      	b.n	800b7d8 <__swsetup_r+0x98>
 800b770:	0758      	lsls	r0, r3, #29
 800b772:	d512      	bpl.n	800b79a <__swsetup_r+0x5a>
 800b774:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b776:	b141      	cbz	r1, 800b78a <__swsetup_r+0x4a>
 800b778:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b77c:	4299      	cmp	r1, r3
 800b77e:	d002      	beq.n	800b786 <__swsetup_r+0x46>
 800b780:	4628      	mov	r0, r5
 800b782:	f7fe ff0d 	bl	800a5a0 <_free_r>
 800b786:	2300      	movs	r3, #0
 800b788:	6363      	str	r3, [r4, #52]	@ 0x34
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b790:	81a3      	strh	r3, [r4, #12]
 800b792:	2300      	movs	r3, #0
 800b794:	6063      	str	r3, [r4, #4]
 800b796:	6923      	ldr	r3, [r4, #16]
 800b798:	6023      	str	r3, [r4, #0]
 800b79a:	89a3      	ldrh	r3, [r4, #12]
 800b79c:	f043 0308 	orr.w	r3, r3, #8
 800b7a0:	81a3      	strh	r3, [r4, #12]
 800b7a2:	6923      	ldr	r3, [r4, #16]
 800b7a4:	b94b      	cbnz	r3, 800b7ba <__swsetup_r+0x7a>
 800b7a6:	89a3      	ldrh	r3, [r4, #12]
 800b7a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b7ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7b0:	d003      	beq.n	800b7ba <__swsetup_r+0x7a>
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	f000 f883 	bl	800b8c0 <__smakebuf_r>
 800b7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7be:	f013 0201 	ands.w	r2, r3, #1
 800b7c2:	d00a      	beq.n	800b7da <__swsetup_r+0x9a>
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	60a2      	str	r2, [r4, #8]
 800b7c8:	6962      	ldr	r2, [r4, #20]
 800b7ca:	4252      	negs	r2, r2
 800b7cc:	61a2      	str	r2, [r4, #24]
 800b7ce:	6922      	ldr	r2, [r4, #16]
 800b7d0:	b942      	cbnz	r2, 800b7e4 <__swsetup_r+0xa4>
 800b7d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7d6:	d1c5      	bne.n	800b764 <__swsetup_r+0x24>
 800b7d8:	bd38      	pop	{r3, r4, r5, pc}
 800b7da:	0799      	lsls	r1, r3, #30
 800b7dc:	bf58      	it	pl
 800b7de:	6962      	ldrpl	r2, [r4, #20]
 800b7e0:	60a2      	str	r2, [r4, #8]
 800b7e2:	e7f4      	b.n	800b7ce <__swsetup_r+0x8e>
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	e7f7      	b.n	800b7d8 <__swsetup_r+0x98>
 800b7e8:	2000001c 	.word	0x2000001c

0800b7ec <_raise_r>:
 800b7ec:	291f      	cmp	r1, #31
 800b7ee:	b538      	push	{r3, r4, r5, lr}
 800b7f0:	4605      	mov	r5, r0
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	d904      	bls.n	800b800 <_raise_r+0x14>
 800b7f6:	2316      	movs	r3, #22
 800b7f8:	6003      	str	r3, [r0, #0]
 800b7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b802:	b112      	cbz	r2, 800b80a <_raise_r+0x1e>
 800b804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b808:	b94b      	cbnz	r3, 800b81e <_raise_r+0x32>
 800b80a:	4628      	mov	r0, r5
 800b80c:	f000 f830 	bl	800b870 <_getpid_r>
 800b810:	4622      	mov	r2, r4
 800b812:	4601      	mov	r1, r0
 800b814:	4628      	mov	r0, r5
 800b816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b81a:	f000 b817 	b.w	800b84c <_kill_r>
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d00a      	beq.n	800b838 <_raise_r+0x4c>
 800b822:	1c59      	adds	r1, r3, #1
 800b824:	d103      	bne.n	800b82e <_raise_r+0x42>
 800b826:	2316      	movs	r3, #22
 800b828:	6003      	str	r3, [r0, #0]
 800b82a:	2001      	movs	r0, #1
 800b82c:	e7e7      	b.n	800b7fe <_raise_r+0x12>
 800b82e:	2100      	movs	r1, #0
 800b830:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b834:	4620      	mov	r0, r4
 800b836:	4798      	blx	r3
 800b838:	2000      	movs	r0, #0
 800b83a:	e7e0      	b.n	800b7fe <_raise_r+0x12>

0800b83c <raise>:
 800b83c:	4b02      	ldr	r3, [pc, #8]	@ (800b848 <raise+0xc>)
 800b83e:	4601      	mov	r1, r0
 800b840:	6818      	ldr	r0, [r3, #0]
 800b842:	f7ff bfd3 	b.w	800b7ec <_raise_r>
 800b846:	bf00      	nop
 800b848:	2000001c 	.word	0x2000001c

0800b84c <_kill_r>:
 800b84c:	b538      	push	{r3, r4, r5, lr}
 800b84e:	4d07      	ldr	r5, [pc, #28]	@ (800b86c <_kill_r+0x20>)
 800b850:	2300      	movs	r3, #0
 800b852:	4604      	mov	r4, r0
 800b854:	4608      	mov	r0, r1
 800b856:	4611      	mov	r1, r2
 800b858:	602b      	str	r3, [r5, #0]
 800b85a:	f7f6 fb99 	bl	8001f90 <_kill>
 800b85e:	1c43      	adds	r3, r0, #1
 800b860:	d102      	bne.n	800b868 <_kill_r+0x1c>
 800b862:	682b      	ldr	r3, [r5, #0]
 800b864:	b103      	cbz	r3, 800b868 <_kill_r+0x1c>
 800b866:	6023      	str	r3, [r4, #0]
 800b868:	bd38      	pop	{r3, r4, r5, pc}
 800b86a:	bf00      	nop
 800b86c:	200052a4 	.word	0x200052a4

0800b870 <_getpid_r>:
 800b870:	f7f6 bb86 	b.w	8001f80 <_getpid>

0800b874 <__swhatbuf_r>:
 800b874:	b570      	push	{r4, r5, r6, lr}
 800b876:	460c      	mov	r4, r1
 800b878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b87c:	2900      	cmp	r1, #0
 800b87e:	b096      	sub	sp, #88	@ 0x58
 800b880:	4615      	mov	r5, r2
 800b882:	461e      	mov	r6, r3
 800b884:	da0d      	bge.n	800b8a2 <__swhatbuf_r+0x2e>
 800b886:	89a3      	ldrh	r3, [r4, #12]
 800b888:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b88c:	f04f 0100 	mov.w	r1, #0
 800b890:	bf14      	ite	ne
 800b892:	2340      	movne	r3, #64	@ 0x40
 800b894:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b898:	2000      	movs	r0, #0
 800b89a:	6031      	str	r1, [r6, #0]
 800b89c:	602b      	str	r3, [r5, #0]
 800b89e:	b016      	add	sp, #88	@ 0x58
 800b8a0:	bd70      	pop	{r4, r5, r6, pc}
 800b8a2:	466a      	mov	r2, sp
 800b8a4:	f000 f848 	bl	800b938 <_fstat_r>
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	dbec      	blt.n	800b886 <__swhatbuf_r+0x12>
 800b8ac:	9901      	ldr	r1, [sp, #4]
 800b8ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b8b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b8b6:	4259      	negs	r1, r3
 800b8b8:	4159      	adcs	r1, r3
 800b8ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8be:	e7eb      	b.n	800b898 <__swhatbuf_r+0x24>

0800b8c0 <__smakebuf_r>:
 800b8c0:	898b      	ldrh	r3, [r1, #12]
 800b8c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8c4:	079d      	lsls	r5, r3, #30
 800b8c6:	4606      	mov	r6, r0
 800b8c8:	460c      	mov	r4, r1
 800b8ca:	d507      	bpl.n	800b8dc <__smakebuf_r+0x1c>
 800b8cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b8d0:	6023      	str	r3, [r4, #0]
 800b8d2:	6123      	str	r3, [r4, #16]
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	6163      	str	r3, [r4, #20]
 800b8d8:	b003      	add	sp, #12
 800b8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8dc:	ab01      	add	r3, sp, #4
 800b8de:	466a      	mov	r2, sp
 800b8e0:	f7ff ffc8 	bl	800b874 <__swhatbuf_r>
 800b8e4:	9f00      	ldr	r7, [sp, #0]
 800b8e6:	4605      	mov	r5, r0
 800b8e8:	4639      	mov	r1, r7
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f7fe fecc 	bl	800a688 <_malloc_r>
 800b8f0:	b948      	cbnz	r0, 800b906 <__smakebuf_r+0x46>
 800b8f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8f6:	059a      	lsls	r2, r3, #22
 800b8f8:	d4ee      	bmi.n	800b8d8 <__smakebuf_r+0x18>
 800b8fa:	f023 0303 	bic.w	r3, r3, #3
 800b8fe:	f043 0302 	orr.w	r3, r3, #2
 800b902:	81a3      	strh	r3, [r4, #12]
 800b904:	e7e2      	b.n	800b8cc <__smakebuf_r+0xc>
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	6020      	str	r0, [r4, #0]
 800b90a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b90e:	81a3      	strh	r3, [r4, #12]
 800b910:	9b01      	ldr	r3, [sp, #4]
 800b912:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b916:	b15b      	cbz	r3, 800b930 <__smakebuf_r+0x70>
 800b918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b91c:	4630      	mov	r0, r6
 800b91e:	f000 f81d 	bl	800b95c <_isatty_r>
 800b922:	b128      	cbz	r0, 800b930 <__smakebuf_r+0x70>
 800b924:	89a3      	ldrh	r3, [r4, #12]
 800b926:	f023 0303 	bic.w	r3, r3, #3
 800b92a:	f043 0301 	orr.w	r3, r3, #1
 800b92e:	81a3      	strh	r3, [r4, #12]
 800b930:	89a3      	ldrh	r3, [r4, #12]
 800b932:	431d      	orrs	r5, r3
 800b934:	81a5      	strh	r5, [r4, #12]
 800b936:	e7cf      	b.n	800b8d8 <__smakebuf_r+0x18>

0800b938 <_fstat_r>:
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	4d07      	ldr	r5, [pc, #28]	@ (800b958 <_fstat_r+0x20>)
 800b93c:	2300      	movs	r3, #0
 800b93e:	4604      	mov	r4, r0
 800b940:	4608      	mov	r0, r1
 800b942:	4611      	mov	r1, r2
 800b944:	602b      	str	r3, [r5, #0]
 800b946:	f7f6 fb83 	bl	8002050 <_fstat>
 800b94a:	1c43      	adds	r3, r0, #1
 800b94c:	d102      	bne.n	800b954 <_fstat_r+0x1c>
 800b94e:	682b      	ldr	r3, [r5, #0]
 800b950:	b103      	cbz	r3, 800b954 <_fstat_r+0x1c>
 800b952:	6023      	str	r3, [r4, #0]
 800b954:	bd38      	pop	{r3, r4, r5, pc}
 800b956:	bf00      	nop
 800b958:	200052a4 	.word	0x200052a4

0800b95c <_isatty_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4d06      	ldr	r5, [pc, #24]	@ (800b978 <_isatty_r+0x1c>)
 800b960:	2300      	movs	r3, #0
 800b962:	4604      	mov	r4, r0
 800b964:	4608      	mov	r0, r1
 800b966:	602b      	str	r3, [r5, #0]
 800b968:	f7f6 fb82 	bl	8002070 <_isatty>
 800b96c:	1c43      	adds	r3, r0, #1
 800b96e:	d102      	bne.n	800b976 <_isatty_r+0x1a>
 800b970:	682b      	ldr	r3, [r5, #0]
 800b972:	b103      	cbz	r3, 800b976 <_isatty_r+0x1a>
 800b974:	6023      	str	r3, [r4, #0]
 800b976:	bd38      	pop	{r3, r4, r5, pc}
 800b978:	200052a4 	.word	0x200052a4

0800b97c <_init>:
 800b97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97e:	bf00      	nop
 800b980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b982:	bc08      	pop	{r3}
 800b984:	469e      	mov	lr, r3
 800b986:	4770      	bx	lr

0800b988 <_fini>:
 800b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98a:	bf00      	nop
 800b98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b98e:	bc08      	pop	{r3}
 800b990:	469e      	mov	lr, r3
 800b992:	4770      	bx	lr
