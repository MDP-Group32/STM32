
Moving1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006a34  08006a34  00007a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006af0  08006af0  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006af0  08006af0  00007af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006af8  08006af8  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006af8  08006af8  00007af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006afc  08006afc  00007afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006b00  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008010  2**0
                  CONTENTS
 10 .bss          00004a9c  20000010  20000010  00008010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004aac  20004aac  00008010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001691f  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000310d  00000000  00000000  0001e95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  00021a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd6  00000000  00000000  00022eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002e33  00000000  00000000  00023e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015aae  00000000  00000000  00026cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d51d2  00000000  00000000  0003c76f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00111941  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000562c  00000000  00000000  00111984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00116fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a1c 	.word	0x08006a1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006a1c 	.word	0x08006a1c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fd5e 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f83a 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 fa5c 	bl	8000988 <MX_GPIO_Init>
  MX_TIM8_Init();
 80004d0:	f000 f986 	bl	80007e0 <MX_TIM8_Init>
  MX_TIM2_Init();
 80004d4:	f000 f930 	bl	8000738 <MX_TIM2_Init>
  MX_TIM1_Init();
 80004d8:	f000 f890 	bl	80005fc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80004dc:	f000 fa2a 	bl	8000934 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e0:	f003 fcde 	bl	8003ea0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e4:	4a0d      	ldr	r2, [pc, #52]	@ (800051c <main+0x5c>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	480d      	ldr	r0, [pc, #52]	@ (8000520 <main+0x60>)
 80004ea:	f003 fd23 	bl	8003f34 <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000524 <main+0x64>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of DCMotor1 */
  DCMotor1Handle = osThreadNew(motors, NULL, &DCMotor1_attributes);
 80004f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000528 <main+0x68>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480c      	ldr	r0, [pc, #48]	@ (800052c <main+0x6c>)
 80004fa:	f003 fd1b 	bl	8003f34 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <main+0x70>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(encoder, NULL, &Encoder_attributes);
 8000504:	4a0b      	ldr	r2, [pc, #44]	@ (8000534 <main+0x74>)
 8000506:	2100      	movs	r1, #0
 8000508:	480b      	ldr	r0, [pc, #44]	@ (8000538 <main+0x78>)
 800050a:	f003 fd13 	bl	8003f34 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <main+0x7c>)
 8000512:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000514:	f003 fce8 	bl	8003ee8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <main+0x58>
 800051c:	08006a6c 	.word	0x08006a6c
 8000520:	08000a85 	.word	0x08000a85
 8000524:	2000014c 	.word	0x2000014c
 8000528:	08006a90 	.word	0x08006a90
 800052c:	08000a95 	.word	0x08000a95
 8000530:	20000150 	.word	0x20000150
 8000534:	08006ab4 	.word	0x08006ab4
 8000538:	08000b0d 	.word	0x08000b0d
 800053c:	20000154 	.word	0x20000154

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	@ 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f006 fa2a 	bl	80069a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b22      	ldr	r3, [pc, #136]	@ (80005f4 <SystemClock_Config+0xb4>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	4a21      	ldr	r2, [pc, #132]	@ (80005f4 <SystemClock_Config+0xb4>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	@ 0x40
 8000574:	4b1f      	ldr	r3, [pc, #124]	@ (80005f4 <SystemClock_Config+0xb4>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b1c      	ldr	r3, [pc, #112]	@ (80005f8 <SystemClock_Config+0xb8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a1b      	ldr	r2, [pc, #108]	@ (80005f8 <SystemClock_Config+0xb8>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <SystemClock_Config+0xb8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 f8b3 	bl	800171c <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005bc:	f000 faf4 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fb16 	bl	8001c0c <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005e6:	f000 fadf 	bl	8000ba8 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	@ 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	@ 0x58
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000602:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000610:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800061a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]
 800062a:	615a      	str	r2, [r3, #20]
 800062c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2220      	movs	r2, #32
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f006 f9b7 	bl	80069a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800063a:	4b3d      	ldr	r3, [pc, #244]	@ (8000730 <MX_TIM1_Init+0x134>)
 800063c:	4a3d      	ldr	r2, [pc, #244]	@ (8000734 <MX_TIM1_Init+0x138>)
 800063e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8000640:	4b3b      	ldr	r3, [pc, #236]	@ (8000730 <MX_TIM1_Init+0x134>)
 8000642:	22a0      	movs	r2, #160	@ 0xa0
 8000644:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000646:	4b3a      	ldr	r3, [pc, #232]	@ (8000730 <MX_TIM1_Init+0x134>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800064c:	4b38      	ldr	r3, [pc, #224]	@ (8000730 <MX_TIM1_Init+0x134>)
 800064e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000652:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000654:	4b36      	ldr	r3, [pc, #216]	@ (8000730 <MX_TIM1_Init+0x134>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800065a:	4b35      	ldr	r3, [pc, #212]	@ (8000730 <MX_TIM1_Init+0x134>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000660:	4b33      	ldr	r3, [pc, #204]	@ (8000730 <MX_TIM1_Init+0x134>)
 8000662:	2200      	movs	r2, #0
 8000664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000666:	4832      	ldr	r0, [pc, #200]	@ (8000730 <MX_TIM1_Init+0x134>)
 8000668:	f001 fcb0 	bl	8001fcc <HAL_TIM_Base_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000672:	f000 fa99 	bl	8000ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800067c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000680:	4619      	mov	r1, r3
 8000682:	482b      	ldr	r0, [pc, #172]	@ (8000730 <MX_TIM1_Init+0x134>)
 8000684:	f002 f808 	bl	8002698 <HAL_TIM_ConfigClockSource>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800068e:	f000 fa8b 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000692:	4827      	ldr	r0, [pc, #156]	@ (8000730 <MX_TIM1_Init+0x134>)
 8000694:	f001 fce9 	bl	800206a <HAL_TIM_PWM_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800069e:	f000 fa83 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a2:	2300      	movs	r3, #0
 80006a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006ae:	4619      	mov	r1, r3
 80006b0:	481f      	ldr	r0, [pc, #124]	@ (8000730 <MX_TIM1_Init+0x134>)
 80006b2:	f002 fbd5 	bl	8002e60 <HAL_TIMEx_MasterConfigSynchronization>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006bc:	f000 fa74 	bl	8000ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c0:	2360      	movs	r3, #96	@ 0x60
 80006c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006dc:	220c      	movs	r2, #12
 80006de:	4619      	mov	r1, r3
 80006e0:	4813      	ldr	r0, [pc, #76]	@ (8000730 <MX_TIM1_Init+0x134>)
 80006e2:	f001 ff17 	bl	8002514 <HAL_TIM_PWM_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80006ec:	f000 fa5c 	bl	8000ba8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000704:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000708:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4807      	ldr	r0, [pc, #28]	@ (8000730 <MX_TIM1_Init+0x134>)
 8000714:	f002 fc20 	bl	8002f58 <HAL_TIMEx_ConfigBreakDeadTime>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800071e:	f000 fa43 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000722:	4803      	ldr	r0, [pc, #12]	@ (8000730 <MX_TIM1_Init+0x134>)
 8000724:	f000 fb36 	bl	8000d94 <HAL_TIM_MspPostInit>

}
 8000728:	bf00      	nop
 800072a:	3758      	adds	r7, #88	@ 0x58
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000002c 	.word	0x2000002c
 8000734:	40010000 	.word	0x40010000

08000738 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	@ 0x30
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2224      	movs	r2, #36	@ 0x24
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f006 f92e 	bl	80069a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000754:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <MX_TIM2_Init+0xa4>)
 8000756:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800075a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_TIM2_Init+0xa4>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000762:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <MX_TIM2_Init+0xa4>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <MX_TIM2_Init+0xa4>)
 800076a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800076e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <MX_TIM2_Init+0xa4>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <MX_TIM2_Init+0xa4>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800077c:	2303      	movs	r3, #3
 800077e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000784:	2301      	movs	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000794:	2301      	movs	r3, #1
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	480d      	ldr	r0, [pc, #52]	@ (80007dc <MX_TIM2_Init+0xa4>)
 80007a8:	f001 fd80 	bl	80022ac <HAL_TIM_Encoder_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007b2:	f000 f9f9 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	@ (80007dc <MX_TIM2_Init+0xa4>)
 80007c4:	f002 fb4c 	bl	8002e60 <HAL_TIMEx_MasterConfigSynchronization>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80007ce:	f000 f9eb 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3730      	adds	r7, #48	@ 0x30
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000074 	.word	0x20000074

080007e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b096      	sub	sp, #88	@ 0x58
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2220      	movs	r2, #32
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f006 f8c5 	bl	80069a8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800081e:	4b43      	ldr	r3, [pc, #268]	@ (800092c <MX_TIM8_Init+0x14c>)
 8000820:	4a43      	ldr	r2, [pc, #268]	@ (8000930 <MX_TIM8_Init+0x150>)
 8000822:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000824:	4b41      	ldr	r3, [pc, #260]	@ (800092c <MX_TIM8_Init+0x14c>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b40      	ldr	r3, [pc, #256]	@ (800092c <MX_TIM8_Init+0x14c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8000830:	4b3e      	ldr	r3, [pc, #248]	@ (800092c <MX_TIM8_Init+0x14c>)
 8000832:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000836:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b3c      	ldr	r3, [pc, #240]	@ (800092c <MX_TIM8_Init+0x14c>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800083e:	4b3b      	ldr	r3, [pc, #236]	@ (800092c <MX_TIM8_Init+0x14c>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	4b39      	ldr	r3, [pc, #228]	@ (800092c <MX_TIM8_Init+0x14c>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800084a:	4838      	ldr	r0, [pc, #224]	@ (800092c <MX_TIM8_Init+0x14c>)
 800084c:	f001 fbbe 	bl	8001fcc <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000856:	f000 f9a7 	bl	8000ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800085e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000860:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000864:	4619      	mov	r1, r3
 8000866:	4831      	ldr	r0, [pc, #196]	@ (800092c <MX_TIM8_Init+0x14c>)
 8000868:	f001 ff16 	bl	8002698 <HAL_TIM_ConfigClockSource>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000872:	f000 f999 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000876:	482d      	ldr	r0, [pc, #180]	@ (800092c <MX_TIM8_Init+0x14c>)
 8000878:	f001 fbf7 	bl	800206a <HAL_TIM_PWM_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000882:	f000 f991 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800088e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000892:	4619      	mov	r1, r3
 8000894:	4825      	ldr	r0, [pc, #148]	@ (800092c <MX_TIM8_Init+0x14c>)
 8000896:	f002 fae3 	bl	8002e60 <HAL_TIMEx_MasterConfigSynchronization>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80008a0:	f000 f982 	bl	8000ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a4:	2360      	movs	r3, #96	@ 0x60
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008b0:	2300      	movs	r3, #0
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c4:	2200      	movs	r2, #0
 80008c6:	4619      	mov	r1, r3
 80008c8:	4818      	ldr	r0, [pc, #96]	@ (800092c <MX_TIM8_Init+0x14c>)
 80008ca:	f001 fe23 	bl	8002514 <HAL_TIM_PWM_ConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80008d4:	f000 f968 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008dc:	2204      	movs	r2, #4
 80008de:	4619      	mov	r1, r3
 80008e0:	4812      	ldr	r0, [pc, #72]	@ (800092c <MX_TIM8_Init+0x14c>)
 80008e2:	f001 fe17 	bl	8002514 <HAL_TIM_PWM_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80008ec:	f000 f95c 	bl	8000ba8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000904:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000908:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	@ (800092c <MX_TIM8_Init+0x14c>)
 8000914:	f002 fb20 	bl	8002f58 <HAL_TIMEx_ConfigBreakDeadTime>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800091e:	f000 f943 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3758      	adds	r7, #88	@ 0x58
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000bc 	.word	0x200000bc
 8000930:	40010400 	.word	0x40010400

08000934 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_USART3_UART_Init+0x4c>)
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <MX_USART3_UART_Init+0x50>)
 800093c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <MX_USART3_UART_Init+0x4c>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_USART3_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <MX_USART3_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <MX_USART3_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_USART3_UART_Init+0x4c>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <MX_USART3_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <MX_USART3_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_USART3_UART_Init+0x4c>)
 800096c:	f002 fb46 	bl	8002ffc <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000976:	f000 f917 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000104 	.word	0x20000104
 8000984:	40004800 	.word	0x40004800

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b36      	ldr	r3, [pc, #216]	@ (8000a7c <MX_GPIO_Init+0xf4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a35      	ldr	r2, [pc, #212]	@ (8000a7c <MX_GPIO_Init+0xf4>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b33      	ldr	r3, [pc, #204]	@ (8000a7c <MX_GPIO_Init+0xf4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b2f      	ldr	r3, [pc, #188]	@ (8000a7c <MX_GPIO_Init+0xf4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a2e      	ldr	r2, [pc, #184]	@ (8000a7c <MX_GPIO_Init+0xf4>)
 80009c4:	f043 0310 	orr.w	r3, r3, #16
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b2c      	ldr	r3, [pc, #176]	@ (8000a7c <MX_GPIO_Init+0xf4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0310 	and.w	r3, r3, #16
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b28      	ldr	r3, [pc, #160]	@ (8000a7c <MX_GPIO_Init+0xf4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a27      	ldr	r2, [pc, #156]	@ (8000a7c <MX_GPIO_Init+0xf4>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b25      	ldr	r3, [pc, #148]	@ (8000a7c <MX_GPIO_Init+0xf4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <MX_GPIO_Init+0xf4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a20      	ldr	r2, [pc, #128]	@ (8000a7c <MX_GPIO_Init+0xf4>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <MX_GPIO_Init+0xf4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	213c      	movs	r1, #60	@ 0x3c
 8000a12:	481b      	ldr	r0, [pc, #108]	@ (8000a80 <MX_GPIO_Init+0xf8>)
 8000a14:	f000 fe68 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 8000a18:	230c      	movs	r3, #12
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a24:	2302      	movs	r3, #2
 8000a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4814      	ldr	r0, [pc, #80]	@ (8000a80 <MX_GPIO_Init+0xf8>)
 8000a30:	f000 fcbe 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 8000a34:	2330      	movs	r3, #48	@ 0x30
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <MX_GPIO_Init+0xf8>)
 8000a4c:	f000 fcb0 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a50:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a62:	2307      	movs	r3, #7
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <MX_GPIO_Init+0xf8>)
 8000a6e:	f000 fc9f 	bl	80013b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	@ 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020000 	.word	0x40020000

08000a84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
		//ch++;
	//}
	//else{
		//ch = 'A';
	//}
    osDelay(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f003 fae3 	bl	8004058 <osDelay>
 8000a92:	e7fb      	b.n	8000a8c <StartDefaultTask+0x8>

08000a94 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void *argument)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motors */
  /* Infinite loop */
	uint16_t pwmwal = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	81fb      	strh	r3, [r7, #14]
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4818      	ldr	r0, [pc, #96]	@ (8000b04 <motors+0x70>)
 8000aa4:	f001 fb3a 	bl	800211c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	4816      	ldr	r0, [pc, #88]	@ (8000b04 <motors+0x70>)
 8000aac:	f001 fb36 	bl	800211c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000ab0:	210c      	movs	r1, #12
 8000ab2:	4815      	ldr	r0, [pc, #84]	@ (8000b08 <motors+0x74>)
 8000ab4:	f001 fb32 	bl	800211c <HAL_TIM_PWM_Start>
		  	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmwal);
		  	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmwal);
		  	  osDelay(2);
		  	  }
		  */
		  htim1.Instance->CCR4 = 170;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <motors+0x74>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	22aa      	movs	r2, #170	@ 0xaa
 8000abe:	641a      	str	r2, [r3, #64]	@ 0x40
		  osDelay(5000);
 8000ac0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ac4:	f003 fac8 	bl	8004058 <osDelay>
		  htim1.Instance->CCR4 = 0;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <motors+0x74>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	641a      	str	r2, [r3, #64]	@ 0x40
		  osDelay(5000);
 8000ad0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ad4:	f003 fac0 	bl	8004058 <osDelay>
		  htim1.Instance->CCR4 = 60;
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <motors+0x74>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	223c      	movs	r2, #60	@ 0x3c
 8000ade:	641a      	str	r2, [r3, #64]	@ 0x40
		  osDelay(5000);
 8000ae0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ae4:	f003 fab8 	bl	8004058 <osDelay>
		  htim1.Instance->CCR4 = 140;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <motors+0x74>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	228c      	movs	r2, #140	@ 0x8c
 8000aee:	641a      	str	r2, [r3, #64]	@ 0x40
		  osDelay(5000);
 8000af0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000af4:	f003 fab0 	bl	8004058 <osDelay>
	    osDelay(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f003 faad 	bl	8004058 <osDelay>
		  htim1.Instance->CCR4 = 170;
 8000afe:	bf00      	nop
 8000b00:	e7da      	b.n	8000ab8 <motors+0x24>
 8000b02:	bf00      	nop
 8000b04:	200000bc 	.word	0x200000bc
 8000b08:	2000002c 	.word	0x2000002c

08000b0c <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	@ 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  /* Infinite loop */
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8000b14:	213c      	movs	r1, #60	@ 0x3c
 8000b16:	4822      	ldr	r0, [pc, #136]	@ (8000ba0 <encoder+0x94>)
 8000b18:	f001 fc6e 	bl	80023f8 <HAL_TIM_Encoder_Start>
  int cnt1,cnt2,diff,dir;
  char buffer[20];
  uint32_t tick;
  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000b1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <encoder+0x94>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tick = HAL_GetTick();
 8000b24:	f000 fa94 	bl	8001050 <HAL_GetTick>
 8000b28:	62b8      	str	r0, [r7, #40]	@ 0x28
  for(;;)
  {
	if (HAL_GetTick - tick > 1000L){
 8000b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b2c:	425b      	negs	r3, r3
 8000b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba4 <encoder+0x98>)
 8000b30:	4413      	add	r3, r2
 8000b32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b36:	d9f8      	bls.n	8000b2a <encoder+0x1e>
		cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000b38:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <encoder+0x94>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8000b40:	4b17      	ldr	r3, [pc, #92]	@ (8000ba0 <encoder+0x94>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0310 	and.w	r3, r3, #16
 8000b4a:	2b10      	cmp	r3, #16
 8000b4c:	d110      	bne.n	8000b70 <encoder+0x64>
			if (cnt2 < cnt1){
 8000b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b52:	429a      	cmp	r2, r3
 8000b54:	da04      	bge.n	8000b60 <encoder+0x54>
				diff = cnt1 - cnt2;
 8000b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	623b      	str	r3, [r7, #32]
 8000b5e:	e017      	b.n	8000b90 <encoder+0x84>
			}
			else{
				diff = (65535-cnt2) + cnt1;
 8000b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b62:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8000b66:	33ff      	adds	r3, #255	@ 0xff
 8000b68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b6a:	4413      	add	r3, r2
 8000b6c:	623b      	str	r3, [r7, #32]
 8000b6e:	e00f      	b.n	8000b90 <encoder+0x84>
			}
		}
		else {
			if (cnt2 > cnt1){
 8000b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dd04      	ble.n	8000b82 <encoder+0x76>
							diff = cnt2 - cnt1;
 8000b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	623b      	str	r3, [r7, #32]
 8000b80:	e006      	b.n	8000b90 <encoder+0x84>
						}
						else{
							diff = (65535-cnt1) + cnt2;
 8000b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b84:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8000b88:	33ff      	adds	r3, #255	@ 0xff
 8000b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b8c:	4413      	add	r3, r2
 8000b8e:	623b      	str	r3, [r7, #32]
		//sprintf(buffer,"Speed:%5d\0",diff);
		//OLED_Show_String(10,20,buffer);
		//dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
		//sprintf(buffer,"Dir:%5d\0",dir);
		//OLED_Show_String(10,30,buffer);
		cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000b90:	4b03      	ldr	r3, [pc, #12]	@ (8000ba0 <encoder+0x94>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
		tick = HAL_GetTick();
 8000b98:	f000 fa5a 	bl	8001050 <HAL_GetTick>
 8000b9c:	62b8      	str	r0, [r7, #40]	@ 0x28
	if (HAL_GetTick - tick > 1000L){
 8000b9e:	e7c4      	b.n	8000b2a <encoder+0x1e>
 8000ba0:	20000074 	.word	0x20000074
 8000ba4:	08001051 	.word	0x08001051

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <Error_Handler+0x8>

08000bb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_MspInit+0x54>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	4a11      	ldr	r2, [pc, #68]	@ (8000c08 <HAL_MspInit+0x54>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bca:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <HAL_MspInit+0x54>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <HAL_MspInit+0x54>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <HAL_MspInit+0x54>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <HAL_MspInit+0x54>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	210f      	movs	r1, #15
 8000bf6:	f06f 0001 	mvn.w	r0, #1
 8000bfa:	f000 fb10 	bl	800121e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800

08000c0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	@ 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a23      	ldr	r2, [pc, #140]	@ (8000cb8 <HAL_TIM_Base_MspInit+0xac>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d10e      	bne.n	8000c4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b22      	ldr	r3, [pc, #136]	@ (8000cbc <HAL_TIM_Base_MspInit+0xb0>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c36:	4a21      	ldr	r2, [pc, #132]	@ (8000cbc <HAL_TIM_Base_MspInit+0xb0>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <HAL_TIM_Base_MspInit+0xb0>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000c4a:	e030      	b.n	8000cae <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc0 <HAL_TIM_Base_MspInit+0xb4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12b      	bne.n	8000cae <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <HAL_TIM_Base_MspInit+0xb0>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5e:	4a17      	ldr	r2, [pc, #92]	@ (8000cbc <HAL_TIM_Base_MspInit+0xb0>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <HAL_TIM_Base_MspInit+0xb0>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <HAL_TIM_Base_MspInit+0xb0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a10      	ldr	r2, [pc, #64]	@ (8000cbc <HAL_TIM_Base_MspInit+0xb0>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <HAL_TIM_Base_MspInit+0xb0>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0304 	and.w	r3, r3, #4
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c8e:	23c0      	movs	r3, #192	@ 0xc0
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <HAL_TIM_Base_MspInit+0xb8>)
 8000caa:	f000 fb81 	bl	80013b0 <HAL_GPIO_Init>
}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	@ 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40010000 	.word	0x40010000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40010400 	.word	0x40010400
 8000cc4:	40020800 	.word	0x40020800

08000cc8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ce8:	d14a      	bne.n	8000d80 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b26      	ldr	r3, [pc, #152]	@ (8000d88 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	4a25      	ldr	r2, [pc, #148]	@ (8000d88 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfa:	4b23      	ldr	r3, [pc, #140]	@ (8000d88 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000d88 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a17      	ldr	r2, [pc, #92]	@ (8000d88 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d50:	2301      	movs	r3, #1
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <HAL_TIM_Encoder_MspInit+0xc4>)
 8000d5c:	f000 fb28 	bl	80013b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d60:	2308      	movs	r3, #8
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d70:	2301      	movs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000d7c:	f000 fb18 	bl	80013b0 <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	@ 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40020400 	.word	0x40020400

08000d94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a12      	ldr	r2, [pc, #72]	@ (8000dfc <HAL_TIM_MspPostInit+0x68>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d11e      	bne.n	8000df4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <HAL_TIM_MspPostInit+0x6c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a10      	ldr	r2, [pc, #64]	@ (8000e00 <HAL_TIM_MspPostInit+0x6c>)
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <HAL_TIM_MspPostInit+0x6c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000dd2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <HAL_TIM_MspPostInit+0x70>)
 8000df0:	f000 fade 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000df4:	bf00      	nop
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40010000 	.word	0x40010000
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40021000 	.word	0x40021000

08000e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a1d      	ldr	r2, [pc, #116]	@ (8000e9c <HAL_UART_MspInit+0x94>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d134      	bne.n	8000e94 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea0 <HAL_UART_MspInit+0x98>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea0 <HAL_UART_MspInit+0x98>)
 8000e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <HAL_UART_MspInit+0x98>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <HAL_UART_MspInit+0x98>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a14      	ldr	r2, [pc, #80]	@ (8000ea0 <HAL_UART_MspInit+0x98>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <HAL_UART_MspInit+0x98>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e62:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e74:	2307      	movs	r3, #7
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4809      	ldr	r0, [pc, #36]	@ (8000ea4 <HAL_UART_MspInit+0x9c>)
 8000e80:	f000 fa96 	bl	80013b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2105      	movs	r1, #5
 8000e88:	2027      	movs	r0, #39	@ 0x27
 8000e8a:	f000 f9c8 	bl	800121e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e8e:	2027      	movs	r0, #39	@ 0x27
 8000e90:	f000 f9e1 	bl	8001256 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	@ 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40004800 	.word	0x40004800
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <NMI_Handler+0x4>

08000eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <MemManage_Handler+0x4>

08000ec0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee2:	f000 f8a1 	bl	8001028 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ee6:	f004 fcdf 	bl	80058a8 <xTaskGetSchedulerState>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d001      	beq.n	8000ef4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ef0:	f005 fada 	bl	80064a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <USART3_IRQHandler+0x10>)
 8000efe:	f002 f8cd 	bl	800309c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000104 	.word	0x20000104

08000f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f34:	f7ff ffea 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	@ (8000f70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	@ (8000f7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f005 fd2b 	bl	80069b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f62:	f7ff faad 	bl	80004c0 <main>
  bx  lr    
 8000f66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f74:	08006b00 	.word	0x08006b00
  ldr r2, =_sbss
 8000f78:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f7c:	20004aac 	.word	0x20004aac

08000f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f88:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc4 <HAL_Init+0x40>)
 8000f8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f94:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <HAL_Init+0x40>)
 8000f9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	@ (8000fc4 <HAL_Init+0x40>)
 8000fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f000 f92b 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb2:	200f      	movs	r0, #15
 8000fb4:	f000 f808 	bl	8000fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb8:	f7ff fdfc 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023c00 	.word	0x40023c00

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_InitTick+0x54>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_InitTick+0x58>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f943 	bl	8001272 <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00e      	b.n	8001014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d80a      	bhi.n	8001012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001004:	f000 f90b 	bl	800121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001008:	4a06      	ldr	r2, [pc, #24]	@ (8001024 <HAL_InitTick+0x5c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000000 	.word	0x20000000
 8001020:	20000008 	.word	0x20000008
 8001024:	20000004 	.word	0x20000004

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008
 800104c:	20000158 	.word	0x20000158

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000158 	.word	0x20000158

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	@ (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4907      	ldr	r1, [pc, #28]	@ (8001104 <__NVIC_EnableIRQ+0x38>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	@ (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	@ 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	@ 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff29 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff3e 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff31 	bl	80010cc <__NVIC_EnableIRQ>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffa2 	bl	80011c4 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001296:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff feda 	bl	8001050 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d008      	beq.n	80012bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2280      	movs	r2, #128	@ 0x80
 80012ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e052      	b.n	8001362 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0216 	bic.w	r2, r2, #22
 80012ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d103      	bne.n	80012ec <HAL_DMA_Abort+0x62>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0208 	bic.w	r2, r2, #8
 80012fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0201 	bic.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800130c:	e013      	b.n	8001336 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800130e:	f7ff fe9f 	bl	8001050 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b05      	cmp	r3, #5
 800131a:	d90c      	bls.n	8001336 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2220      	movs	r2, #32
 8001320:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2203      	movs	r2, #3
 8001326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e015      	b.n	8001362 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1e4      	bne.n	800130e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001348:	223f      	movs	r2, #63	@ 0x3f
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d004      	beq.n	8001388 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2280      	movs	r2, #128	@ 0x80
 8001382:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e00c      	b.n	80013a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2205      	movs	r2, #5
 800138c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
 80013ca:	e16b      	b.n	80016a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013cc:	2201      	movs	r2, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	f040 815a 	bne.w	800169e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d005      	beq.n	8001402 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d130      	bne.n	8001464 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	2203      	movs	r2, #3
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001438:	2201      	movs	r2, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	091b      	lsrs	r3, r3, #4
 800144e:	f003 0201 	and.w	r2, r3, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b03      	cmp	r3, #3
 800146e:	d017      	beq.n	80014a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2203      	movs	r2, #3
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d123      	bne.n	80014f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	08da      	lsrs	r2, r3, #3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3208      	adds	r2, #8
 80014b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	220f      	movs	r2, #15
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	08da      	lsrs	r2, r3, #3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3208      	adds	r2, #8
 80014ee:	69b9      	ldr	r1, [r7, #24]
 80014f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0203 	and.w	r2, r3, #3
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 80b4 	beq.w	800169e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b60      	ldr	r3, [pc, #384]	@ (80016bc <HAL_GPIO_Init+0x30c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	4a5f      	ldr	r2, [pc, #380]	@ (80016bc <HAL_GPIO_Init+0x30c>)
 8001540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001544:	6453      	str	r3, [r2, #68]	@ 0x44
 8001546:	4b5d      	ldr	r3, [pc, #372]	@ (80016bc <HAL_GPIO_Init+0x30c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001552:	4a5b      	ldr	r2, [pc, #364]	@ (80016c0 <HAL_GPIO_Init+0x310>)
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	3302      	adds	r3, #2
 800155a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	220f      	movs	r2, #15
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a52      	ldr	r2, [pc, #328]	@ (80016c4 <HAL_GPIO_Init+0x314>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d02b      	beq.n	80015d6 <HAL_GPIO_Init+0x226>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a51      	ldr	r2, [pc, #324]	@ (80016c8 <HAL_GPIO_Init+0x318>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d025      	beq.n	80015d2 <HAL_GPIO_Init+0x222>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a50      	ldr	r2, [pc, #320]	@ (80016cc <HAL_GPIO_Init+0x31c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d01f      	beq.n	80015ce <HAL_GPIO_Init+0x21e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4f      	ldr	r2, [pc, #316]	@ (80016d0 <HAL_GPIO_Init+0x320>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d019      	beq.n	80015ca <HAL_GPIO_Init+0x21a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4e      	ldr	r2, [pc, #312]	@ (80016d4 <HAL_GPIO_Init+0x324>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0x216>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4d      	ldr	r2, [pc, #308]	@ (80016d8 <HAL_GPIO_Init+0x328>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00d      	beq.n	80015c2 <HAL_GPIO_Init+0x212>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4c      	ldr	r2, [pc, #304]	@ (80016dc <HAL_GPIO_Init+0x32c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d007      	beq.n	80015be <HAL_GPIO_Init+0x20e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4b      	ldr	r2, [pc, #300]	@ (80016e0 <HAL_GPIO_Init+0x330>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d101      	bne.n	80015ba <HAL_GPIO_Init+0x20a>
 80015b6:	2307      	movs	r3, #7
 80015b8:	e00e      	b.n	80015d8 <HAL_GPIO_Init+0x228>
 80015ba:	2308      	movs	r3, #8
 80015bc:	e00c      	b.n	80015d8 <HAL_GPIO_Init+0x228>
 80015be:	2306      	movs	r3, #6
 80015c0:	e00a      	b.n	80015d8 <HAL_GPIO_Init+0x228>
 80015c2:	2305      	movs	r3, #5
 80015c4:	e008      	b.n	80015d8 <HAL_GPIO_Init+0x228>
 80015c6:	2304      	movs	r3, #4
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x228>
 80015ca:	2303      	movs	r3, #3
 80015cc:	e004      	b.n	80015d8 <HAL_GPIO_Init+0x228>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e002      	b.n	80015d8 <HAL_GPIO_Init+0x228>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_GPIO_Init+0x228>
 80015d6:	2300      	movs	r3, #0
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	f002 0203 	and.w	r2, r2, #3
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	4093      	lsls	r3, r2
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e8:	4935      	ldr	r1, [pc, #212]	@ (80016c0 <HAL_GPIO_Init+0x310>)
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f6:	4b3b      	ldr	r3, [pc, #236]	@ (80016e4 <HAL_GPIO_Init+0x334>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800161a:	4a32      	ldr	r2, [pc, #200]	@ (80016e4 <HAL_GPIO_Init+0x334>)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001620:	4b30      	ldr	r3, [pc, #192]	@ (80016e4 <HAL_GPIO_Init+0x334>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001644:	4a27      	ldr	r2, [pc, #156]	@ (80016e4 <HAL_GPIO_Init+0x334>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800164a:	4b26      	ldr	r3, [pc, #152]	@ (80016e4 <HAL_GPIO_Init+0x334>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800166e:	4a1d      	ldr	r2, [pc, #116]	@ (80016e4 <HAL_GPIO_Init+0x334>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001674:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <HAL_GPIO_Init+0x334>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001698:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <HAL_GPIO_Init+0x334>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3301      	adds	r3, #1
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	2b0f      	cmp	r3, #15
 80016a8:	f67f ae90 	bls.w	80013cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3724      	adds	r7, #36	@ 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40013800 	.word	0x40013800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40020400 	.word	0x40020400
 80016cc:	40020800 	.word	0x40020800
 80016d0:	40020c00 	.word	0x40020c00
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40021400 	.word	0x40021400
 80016dc:	40021800 	.word	0x40021800
 80016e0:	40021c00 	.word	0x40021c00
 80016e4:	40013c00 	.word	0x40013c00

080016e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
 80016f4:	4613      	mov	r3, r2
 80016f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f8:	787b      	ldrb	r3, [r7, #1]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001704:	e003      	b.n	800170e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	041a      	lsls	r2, r3, #16
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	619a      	str	r2, [r3, #24]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e267      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d075      	beq.n	8001826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800173a:	4b88      	ldr	r3, [pc, #544]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b04      	cmp	r3, #4
 8001744:	d00c      	beq.n	8001760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001746:	4b85      	ldr	r3, [pc, #532]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800174e:	2b08      	cmp	r3, #8
 8001750:	d112      	bne.n	8001778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001752:	4b82      	ldr	r3, [pc, #520]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800175a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800175e:	d10b      	bne.n	8001778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	4b7e      	ldr	r3, [pc, #504]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d05b      	beq.n	8001824 <HAL_RCC_OscConfig+0x108>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d157      	bne.n	8001824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e242      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001780:	d106      	bne.n	8001790 <HAL_RCC_OscConfig+0x74>
 8001782:	4b76      	ldr	r3, [pc, #472]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a75      	ldr	r2, [pc, #468]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e01d      	b.n	80017cc <HAL_RCC_OscConfig+0xb0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x98>
 800179a:	4b70      	ldr	r3, [pc, #448]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6f      	ldr	r2, [pc, #444]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b6d      	ldr	r3, [pc, #436]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6c      	ldr	r2, [pc, #432]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0xb0>
 80017b4:	4b69      	ldr	r3, [pc, #420]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a68      	ldr	r2, [pc, #416]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b66      	ldr	r3, [pc, #408]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a65      	ldr	r2, [pc, #404]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d013      	beq.n	80017fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fc3c 	bl	8001050 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fc38 	bl	8001050 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	@ 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e207      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b5b      	ldr	r3, [pc, #364]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0xc0>
 80017fa:	e014      	b.n	8001826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fc28 	bl	8001050 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fc24 	bl	8001050 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	@ 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e1f3      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001816:	4b51      	ldr	r3, [pc, #324]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0xe8>
 8001822:	e000      	b.n	8001826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d063      	beq.n	80018fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001832:	4b4a      	ldr	r3, [pc, #296]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00b      	beq.n	8001856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183e:	4b47      	ldr	r3, [pc, #284]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001846:	2b08      	cmp	r3, #8
 8001848:	d11c      	bne.n	8001884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184a:	4b44      	ldr	r3, [pc, #272]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d116      	bne.n	8001884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001856:	4b41      	ldr	r3, [pc, #260]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_RCC_OscConfig+0x152>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d001      	beq.n	800186e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e1c7      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186e:	4b3b      	ldr	r3, [pc, #236]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4937      	ldr	r1, [pc, #220]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	e03a      	b.n	80018fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d020      	beq.n	80018ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188c:	4b34      	ldr	r3, [pc, #208]	@ (8001960 <HAL_RCC_OscConfig+0x244>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff fbdd 	bl	8001050 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189a:	f7ff fbd9 	bl	8001050 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e1a8      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ac:	4b2b      	ldr	r3, [pc, #172]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b8:	4b28      	ldr	r3, [pc, #160]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4925      	ldr	r1, [pc, #148]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
 80018cc:	e015      	b.n	80018fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ce:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <HAL_RCC_OscConfig+0x244>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff fbbc 	bl	8001050 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018dc:	f7ff fbb8 	bl	8001050 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e187      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ee:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d036      	beq.n	8001974 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d016      	beq.n	800193c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <HAL_RCC_OscConfig+0x248>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001914:	f7ff fb9c 	bl	8001050 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800191c:	f7ff fb98 	bl	8001050 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e167      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x200>
 800193a:	e01b      	b.n	8001974 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_RCC_OscConfig+0x248>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001942:	f7ff fb85 	bl	8001050 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	e00e      	b.n	8001968 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800194a:	f7ff fb81 	bl	8001050 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d907      	bls.n	8001968 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e150      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
 800195c:	40023800 	.word	0x40023800
 8001960:	42470000 	.word	0x42470000
 8001964:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001968:	4b88      	ldr	r3, [pc, #544]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 800196a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1ea      	bne.n	800194a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 8097 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001986:	4b81      	ldr	r3, [pc, #516]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10f      	bne.n	80019b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b7d      	ldr	r3, [pc, #500]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	4a7c      	ldr	r2, [pc, #496]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a2:	4b7a      	ldr	r3, [pc, #488]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ae:	2301      	movs	r3, #1
 80019b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b2:	4b77      	ldr	r3, [pc, #476]	@ (8001b90 <HAL_RCC_OscConfig+0x474>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d118      	bne.n	80019f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019be:	4b74      	ldr	r3, [pc, #464]	@ (8001b90 <HAL_RCC_OscConfig+0x474>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a73      	ldr	r2, [pc, #460]	@ (8001b90 <HAL_RCC_OscConfig+0x474>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ca:	f7ff fb41 	bl	8001050 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d2:	f7ff fb3d 	bl	8001050 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e10c      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b90 <HAL_RCC_OscConfig+0x474>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x2ea>
 80019f8:	4b64      	ldr	r3, [pc, #400]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fc:	4a63      	ldr	r2, [pc, #396]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a04:	e01c      	b.n	8001a40 <HAL_RCC_OscConfig+0x324>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b05      	cmp	r3, #5
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x30c>
 8001a0e:	4b5f      	ldr	r3, [pc, #380]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a12:	4a5e      	ldr	r2, [pc, #376]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a1a:	4b5c      	ldr	r3, [pc, #368]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1e:	4a5b      	ldr	r2, [pc, #364]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a26:	e00b      	b.n	8001a40 <HAL_RCC_OscConfig+0x324>
 8001a28:	4b58      	ldr	r3, [pc, #352]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2c:	4a57      	ldr	r2, [pc, #348]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
 8001a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a34:	4b55      	ldr	r3, [pc, #340]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a38:	4a54      	ldr	r2, [pc, #336]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a3a:	f023 0304 	bic.w	r3, r3, #4
 8001a3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d015      	beq.n	8001a74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff fb02 	bl	8001050 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4e:	e00a      	b.n	8001a66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a50:	f7ff fafe 	bl	8001050 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e0cb      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a66:	4b49      	ldr	r3, [pc, #292]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0ee      	beq.n	8001a50 <HAL_RCC_OscConfig+0x334>
 8001a72:	e014      	b.n	8001a9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a74:	f7ff faec 	bl	8001050 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fae8 	bl	8001050 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e0b5      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a92:	4b3e      	ldr	r3, [pc, #248]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1ee      	bne.n	8001a7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa4:	4b39      	ldr	r3, [pc, #228]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa8:	4a38      	ldr	r2, [pc, #224]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80a1 	beq.w	8001bfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aba:	4b34      	ldr	r3, [pc, #208]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d05c      	beq.n	8001b80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d141      	bne.n	8001b52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b31      	ldr	r3, [pc, #196]	@ (8001b94 <HAL_RCC_OscConfig+0x478>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fabc 	bl	8001050 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff fab8 	bl	8001050 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e087      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aee:	4b27      	ldr	r3, [pc, #156]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69da      	ldr	r2, [r3, #28]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b08:	019b      	lsls	r3, r3, #6
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	3b01      	subs	r3, #1
 8001b14:	041b      	lsls	r3, r3, #16
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	491b      	ldr	r1, [pc, #108]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b24:	4b1b      	ldr	r3, [pc, #108]	@ (8001b94 <HAL_RCC_OscConfig+0x478>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7ff fa91 	bl	8001050 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b32:	f7ff fa8d 	bl	8001050 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e05c      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x416>
 8001b50:	e054      	b.n	8001bfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <HAL_RCC_OscConfig+0x478>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff fa7a 	bl	8001050 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff fa76 	bl	8001050 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e045      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b72:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x444>
 8001b7e:	e03d      	b.n	8001bfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e038      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40007000 	.word	0x40007000
 8001b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	@ (8001c08 <HAL_RCC_OscConfig+0x4ec>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d028      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d121      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d11a      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bc8:	4013      	ands	r3, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d111      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bde:	085b      	lsrs	r3, r3, #1
 8001be0:	3b01      	subs	r3, #1
 8001be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d107      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800

08001c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0cc      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b68      	ldr	r3, [pc, #416]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d90c      	bls.n	8001c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b65      	ldr	r3, [pc, #404]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b63      	ldr	r3, [pc, #396]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0b8      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c60:	4b59      	ldr	r3, [pc, #356]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a58      	ldr	r2, [pc, #352]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c78:	4b53      	ldr	r3, [pc, #332]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a52      	ldr	r2, [pc, #328]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b50      	ldr	r3, [pc, #320]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	494d      	ldr	r1, [pc, #308]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d044      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b47      	ldr	r3, [pc, #284]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d119      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e07f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cca:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e067      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cea:	4b37      	ldr	r3, [pc, #220]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f023 0203 	bic.w	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4934      	ldr	r1, [pc, #208]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cfc:	f7ff f9a8 	bl	8001050 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7ff f9a4 	bl	8001050 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e04f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 020c 	and.w	r2, r3, #12
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1eb      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b25      	ldr	r3, [pc, #148]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d20c      	bcs.n	8001d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b22      	ldr	r3, [pc, #136]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b20      	ldr	r3, [pc, #128]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e032      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d60:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4916      	ldr	r1, [pc, #88]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7e:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	490e      	ldr	r1, [pc, #56]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d92:	f000 f821 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	490a      	ldr	r1, [pc, #40]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	5ccb      	ldrb	r3, [r1, r3]
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	4a09      	ldr	r2, [pc, #36]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dae:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff f908 	bl	8000fc8 <HAL_InitTick>

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023c00 	.word	0x40023c00
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	08006ad8 	.word	0x08006ad8
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ddc:	b090      	sub	sp, #64	@ 0x40
 8001dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001de4:	2300      	movs	r3, #0
 8001de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001de8:	2300      	movs	r3, #0
 8001dea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df0:	4b59      	ldr	r3, [pc, #356]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d00d      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x40>
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	f200 80a1 	bhi.w	8001f44 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x34>
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d003      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e0a:	e09b      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b53      	ldr	r3, [pc, #332]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001e10:	e09b      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e12:	4b53      	ldr	r3, [pc, #332]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e16:	e098      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e18:	4b4f      	ldr	r3, [pc, #316]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e20:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e22:	4b4d      	ldr	r3, [pc, #308]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d028      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	099b      	lsrs	r3, r3, #6
 8001e34:	2200      	movs	r2, #0
 8001e36:	623b      	str	r3, [r7, #32]
 8001e38:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e40:	2100      	movs	r1, #0
 8001e42:	4b47      	ldr	r3, [pc, #284]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e44:	fb03 f201 	mul.w	r2, r3, r1
 8001e48:	2300      	movs	r3, #0
 8001e4a:	fb00 f303 	mul.w	r3, r0, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a43      	ldr	r2, [pc, #268]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e52:	fba0 1202 	umull	r1, r2, r0, r2
 8001e56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e58:	460a      	mov	r2, r1
 8001e5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e5e:	4413      	add	r3, r2
 8001e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e64:	2200      	movs	r2, #0
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	61fa      	str	r2, [r7, #28]
 8001e6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e72:	f7fe f9ad 	bl	80001d0 <__aeabi_uldivmod>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e7e:	e053      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e80:	4b35      	ldr	r3, [pc, #212]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	099b      	lsrs	r3, r3, #6
 8001e86:	2200      	movs	r2, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	617a      	str	r2, [r7, #20]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e92:	f04f 0b00 	mov.w	fp, #0
 8001e96:	4652      	mov	r2, sl
 8001e98:	465b      	mov	r3, fp
 8001e9a:	f04f 0000 	mov.w	r0, #0
 8001e9e:	f04f 0100 	mov.w	r1, #0
 8001ea2:	0159      	lsls	r1, r3, #5
 8001ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ea8:	0150      	lsls	r0, r2, #5
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	ebb2 080a 	subs.w	r8, r2, sl
 8001eb2:	eb63 090b 	sbc.w	r9, r3, fp
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ec2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ec6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001eca:	ebb2 0408 	subs.w	r4, r2, r8
 8001ece:	eb63 0509 	sbc.w	r5, r3, r9
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	00eb      	lsls	r3, r5, #3
 8001edc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ee0:	00e2      	lsls	r2, r4, #3
 8001ee2:	4614      	mov	r4, r2
 8001ee4:	461d      	mov	r5, r3
 8001ee6:	eb14 030a 	adds.w	r3, r4, sl
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	eb45 030b 	adc.w	r3, r5, fp
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001efe:	4629      	mov	r1, r5
 8001f00:	028b      	lsls	r3, r1, #10
 8001f02:	4621      	mov	r1, r4
 8001f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f08:	4621      	mov	r1, r4
 8001f0a:	028a      	lsls	r2, r1, #10
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f12:	2200      	movs	r2, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	60fa      	str	r2, [r7, #12]
 8001f18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f1c:	f7fe f958 	bl	80001d0 <__aeabi_uldivmod>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4613      	mov	r3, r2
 8001f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	0c1b      	lsrs	r3, r3, #16
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	3301      	adds	r3, #1
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001f38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f42:	e002      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f44:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3740      	adds	r7, #64	@ 0x40
 8001f50:	46bd      	mov	sp, r7
 8001f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	00f42400 	.word	0x00f42400
 8001f60:	017d7840 	.word	0x017d7840

08001f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f68:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000000 	.word	0x20000000

08001f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f80:	f7ff fff0 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	0a9b      	lsrs	r3, r3, #10
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	4903      	ldr	r1, [pc, #12]	@ (8001fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	08006ae8 	.word	0x08006ae8

08001fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fa8:	f7ff ffdc 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0b5b      	lsrs	r3, r3, #13
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4903      	ldr	r1, [pc, #12]	@ (8001fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	08006ae8 	.word	0x08006ae8

08001fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e041      	b.n	8002062 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7fe fe0a 	bl	8000c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3304      	adds	r3, #4
 8002008:	4619      	mov	r1, r3
 800200a:	4610      	mov	r0, r2
 800200c:	f000 fc0c 	bl	8002828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e041      	b.n	8002100 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d106      	bne.n	8002096 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f839 	bl	8002108 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2202      	movs	r2, #2
 800209a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3304      	adds	r3, #4
 80020a6:	4619      	mov	r1, r3
 80020a8:	4610      	mov	r0, r2
 80020aa:	f000 fbbd 	bl	8002828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <HAL_TIM_PWM_Start+0x24>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	bf14      	ite	ne
 8002138:	2301      	movne	r3, #1
 800213a:	2300      	moveq	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	e022      	b.n	8002186 <HAL_TIM_PWM_Start+0x6a>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b04      	cmp	r3, #4
 8002144:	d109      	bne.n	800215a <HAL_TIM_PWM_Start+0x3e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b01      	cmp	r3, #1
 8002150:	bf14      	ite	ne
 8002152:	2301      	movne	r3, #1
 8002154:	2300      	moveq	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	e015      	b.n	8002186 <HAL_TIM_PWM_Start+0x6a>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d109      	bne.n	8002174 <HAL_TIM_PWM_Start+0x58>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	bf14      	ite	ne
 800216c:	2301      	movne	r3, #1
 800216e:	2300      	moveq	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	e008      	b.n	8002186 <HAL_TIM_PWM_Start+0x6a>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	bf14      	ite	ne
 8002180:	2301      	movne	r3, #1
 8002182:	2300      	moveq	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e07c      	b.n	8002288 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d104      	bne.n	800219e <HAL_TIM_PWM_Start+0x82>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800219c:	e013      	b.n	80021c6 <HAL_TIM_PWM_Start+0xaa>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d104      	bne.n	80021ae <HAL_TIM_PWM_Start+0x92>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021ac:	e00b      	b.n	80021c6 <HAL_TIM_PWM_Start+0xaa>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d104      	bne.n	80021be <HAL_TIM_PWM_Start+0xa2>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021bc:	e003      	b.n	80021c6 <HAL_TIM_PWM_Start+0xaa>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2202      	movs	r2, #2
 80021c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2201      	movs	r2, #1
 80021cc:	6839      	ldr	r1, [r7, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fe20 	bl	8002e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002290 <HAL_TIM_PWM_Start+0x174>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d004      	beq.n	80021e8 <HAL_TIM_PWM_Start+0xcc>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002294 <HAL_TIM_PWM_Start+0x178>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d101      	bne.n	80021ec <HAL_TIM_PWM_Start+0xd0>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_TIM_PWM_Start+0xd2>
 80021ec:	2300      	movs	r3, #0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002200:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a22      	ldr	r2, [pc, #136]	@ (8002290 <HAL_TIM_PWM_Start+0x174>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d022      	beq.n	8002252 <HAL_TIM_PWM_Start+0x136>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002214:	d01d      	beq.n	8002252 <HAL_TIM_PWM_Start+0x136>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a1f      	ldr	r2, [pc, #124]	@ (8002298 <HAL_TIM_PWM_Start+0x17c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d018      	beq.n	8002252 <HAL_TIM_PWM_Start+0x136>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a1d      	ldr	r2, [pc, #116]	@ (800229c <HAL_TIM_PWM_Start+0x180>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_TIM_PWM_Start+0x136>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1c      	ldr	r2, [pc, #112]	@ (80022a0 <HAL_TIM_PWM_Start+0x184>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00e      	beq.n	8002252 <HAL_TIM_PWM_Start+0x136>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a16      	ldr	r2, [pc, #88]	@ (8002294 <HAL_TIM_PWM_Start+0x178>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d009      	beq.n	8002252 <HAL_TIM_PWM_Start+0x136>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a18      	ldr	r2, [pc, #96]	@ (80022a4 <HAL_TIM_PWM_Start+0x188>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d004      	beq.n	8002252 <HAL_TIM_PWM_Start+0x136>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a16      	ldr	r2, [pc, #88]	@ (80022a8 <HAL_TIM_PWM_Start+0x18c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d111      	bne.n	8002276 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b06      	cmp	r3, #6
 8002262:	d010      	beq.n	8002286 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002274:	e007      	b.n	8002286 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0201 	orr.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40010000 	.word	0x40010000
 8002294:	40010400 	.word	0x40010400
 8002298:	40000400 	.word	0x40000400
 800229c:	40000800 	.word	0x40000800
 80022a0:	40000c00 	.word	0x40000c00
 80022a4:	40014000 	.word	0x40014000
 80022a8:	40001800 	.word	0x40001800

080022ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e097      	b.n	80023f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d106      	bne.n	80022da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7fe fcf7 	bl	8000cc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2202      	movs	r2, #2
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022f0:	f023 0307 	bic.w	r3, r3, #7
 80022f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3304      	adds	r3, #4
 80022fe:	4619      	mov	r1, r3
 8002300:	4610      	mov	r0, r2
 8002302:	f000 fa91 	bl	8002828 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4313      	orrs	r3, r2
 8002326:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	4313      	orrs	r3, r2
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800234c:	f023 030c 	bic.w	r3, r3, #12
 8002350:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002358:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800235c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	4313      	orrs	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	011a      	lsls	r2, r3, #4
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	031b      	lsls	r3, r3, #12
 800237c:	4313      	orrs	r3, r2
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800238a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002392:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4313      	orrs	r3, r2
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002408:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002410:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002418:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002420:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d110      	bne.n	800244a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d102      	bne.n	8002434 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800242e:	7b7b      	ldrb	r3, [r7, #13]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d001      	beq.n	8002438 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e069      	b.n	800250c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002448:	e031      	b.n	80024ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b04      	cmp	r3, #4
 800244e:	d110      	bne.n	8002472 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002450:	7bbb      	ldrb	r3, [r7, #14]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d102      	bne.n	800245c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002456:	7b3b      	ldrb	r3, [r7, #12]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d001      	beq.n	8002460 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e055      	b.n	800250c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002470:	e01d      	b.n	80024ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d108      	bne.n	800248a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002478:	7bbb      	ldrb	r3, [r7, #14]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d105      	bne.n	800248a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800247e:	7b7b      	ldrb	r3, [r7, #13]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d102      	bne.n	800248a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002484:	7b3b      	ldrb	r3, [r7, #12]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d001      	beq.n	800248e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e03e      	b.n	800250c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2202      	movs	r2, #2
 8002492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2202      	movs	r2, #2
 800249a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2202      	movs	r2, #2
 80024a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_TIM_Encoder_Start+0xc4>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d008      	beq.n	80024cc <HAL_TIM_Encoder_Start+0xd4>
 80024ba:	e00f      	b.n	80024dc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2201      	movs	r2, #1
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fca5 	bl	8002e14 <TIM_CCxChannelCmd>
      break;
 80024ca:	e016      	b.n	80024fa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2201      	movs	r2, #1
 80024d2:	2104      	movs	r1, #4
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fc9d 	bl	8002e14 <TIM_CCxChannelCmd>
      break;
 80024da:	e00e      	b.n	80024fa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2201      	movs	r2, #1
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fc95 	bl	8002e14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2201      	movs	r2, #1
 80024f0:	2104      	movs	r1, #4
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fc8e 	bl	8002e14 <TIM_CCxChannelCmd>
      break;
 80024f8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0201 	orr.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800252e:	2302      	movs	r3, #2
 8002530:	e0ae      	b.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b0c      	cmp	r3, #12
 800253e:	f200 809f 	bhi.w	8002680 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002542:	a201      	add	r2, pc, #4	@ (adr r2, 8002548 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002548:	0800257d 	.word	0x0800257d
 800254c:	08002681 	.word	0x08002681
 8002550:	08002681 	.word	0x08002681
 8002554:	08002681 	.word	0x08002681
 8002558:	080025bd 	.word	0x080025bd
 800255c:	08002681 	.word	0x08002681
 8002560:	08002681 	.word	0x08002681
 8002564:	08002681 	.word	0x08002681
 8002568:	080025ff 	.word	0x080025ff
 800256c:	08002681 	.word	0x08002681
 8002570:	08002681 	.word	0x08002681
 8002574:	08002681 	.word	0x08002681
 8002578:	0800263f 	.word	0x0800263f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f9fc 	bl	8002980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0208 	orr.w	r2, r2, #8
 8002596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699a      	ldr	r2, [r3, #24]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0204 	bic.w	r2, r2, #4
 80025a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6999      	ldr	r1, [r3, #24]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	619a      	str	r2, [r3, #24]
      break;
 80025ba:	e064      	b.n	8002686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fa4c 	bl	8002a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6999      	ldr	r1, [r3, #24]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	021a      	lsls	r2, r3, #8
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	619a      	str	r2, [r3, #24]
      break;
 80025fc:	e043      	b.n	8002686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 faa1 	bl	8002b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0208 	orr.w	r2, r2, #8
 8002618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0204 	bic.w	r2, r2, #4
 8002628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69d9      	ldr	r1, [r3, #28]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	61da      	str	r2, [r3, #28]
      break;
 800263c:	e023      	b.n	8002686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	4618      	mov	r0, r3
 8002646:	f000 faf5 	bl	8002c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	69da      	ldr	r2, [r3, #28]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69d9      	ldr	r1, [r3, #28]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	021a      	lsls	r2, r3, #8
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	61da      	str	r2, [r3, #28]
      break;
 800267e:	e002      	b.n	8002686 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	75fb      	strb	r3, [r7, #23]
      break;
 8002684:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800268e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_TIM_ConfigClockSource+0x1c>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e0b4      	b.n	800281e <HAL_TIM_ConfigClockSource+0x186>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026ec:	d03e      	beq.n	800276c <HAL_TIM_ConfigClockSource+0xd4>
 80026ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026f2:	f200 8087 	bhi.w	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026fa:	f000 8086 	beq.w	800280a <HAL_TIM_ConfigClockSource+0x172>
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002702:	d87f      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002704:	2b70      	cmp	r3, #112	@ 0x70
 8002706:	d01a      	beq.n	800273e <HAL_TIM_ConfigClockSource+0xa6>
 8002708:	2b70      	cmp	r3, #112	@ 0x70
 800270a:	d87b      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 800270c:	2b60      	cmp	r3, #96	@ 0x60
 800270e:	d050      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002710:	2b60      	cmp	r3, #96	@ 0x60
 8002712:	d877      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002714:	2b50      	cmp	r3, #80	@ 0x50
 8002716:	d03c      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0xfa>
 8002718:	2b50      	cmp	r3, #80	@ 0x50
 800271a:	d873      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 800271c:	2b40      	cmp	r3, #64	@ 0x40
 800271e:	d058      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002720:	2b40      	cmp	r3, #64	@ 0x40
 8002722:	d86f      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002724:	2b30      	cmp	r3, #48	@ 0x30
 8002726:	d064      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002728:	2b30      	cmp	r3, #48	@ 0x30
 800272a:	d86b      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 800272c:	2b20      	cmp	r3, #32
 800272e:	d060      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002730:	2b20      	cmp	r3, #32
 8002732:	d867      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
 8002734:	2b00      	cmp	r3, #0
 8002736:	d05c      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002738:	2b10      	cmp	r3, #16
 800273a:	d05a      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x15a>
 800273c:	e062      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800274e:	f000 fb41 	bl	8002dd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002760:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	609a      	str	r2, [r3, #8]
      break;
 800276a:	e04f      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800277c:	f000 fb2a 	bl	8002dd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800278e:	609a      	str	r2, [r3, #8]
      break;
 8002790:	e03c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800279e:	461a      	mov	r2, r3
 80027a0:	f000 fa9e 	bl	8002ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2150      	movs	r1, #80	@ 0x50
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 faf7 	bl	8002d9e <TIM_ITRx_SetConfig>
      break;
 80027b0:	e02c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027be:	461a      	mov	r2, r3
 80027c0:	f000 fabd 	bl	8002d3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2160      	movs	r1, #96	@ 0x60
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fae7 	bl	8002d9e <TIM_ITRx_SetConfig>
      break;
 80027d0:	e01c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027de:	461a      	mov	r2, r3
 80027e0:	f000 fa7e 	bl	8002ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2140      	movs	r1, #64	@ 0x40
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fad7 	bl	8002d9e <TIM_ITRx_SetConfig>
      break;
 80027f0:	e00c      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f000 face 	bl	8002d9e <TIM_ITRx_SetConfig>
      break;
 8002802:	e003      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      break;
 8002808:	e000      	b.n	800280c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800280a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a46      	ldr	r2, [pc, #280]	@ (8002954 <TIM_Base_SetConfig+0x12c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d013      	beq.n	8002868 <TIM_Base_SetConfig+0x40>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002846:	d00f      	beq.n	8002868 <TIM_Base_SetConfig+0x40>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a43      	ldr	r2, [pc, #268]	@ (8002958 <TIM_Base_SetConfig+0x130>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00b      	beq.n	8002868 <TIM_Base_SetConfig+0x40>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a42      	ldr	r2, [pc, #264]	@ (800295c <TIM_Base_SetConfig+0x134>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d007      	beq.n	8002868 <TIM_Base_SetConfig+0x40>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a41      	ldr	r2, [pc, #260]	@ (8002960 <TIM_Base_SetConfig+0x138>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d003      	beq.n	8002868 <TIM_Base_SetConfig+0x40>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a40      	ldr	r2, [pc, #256]	@ (8002964 <TIM_Base_SetConfig+0x13c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d108      	bne.n	800287a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800286e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a35      	ldr	r2, [pc, #212]	@ (8002954 <TIM_Base_SetConfig+0x12c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d02b      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002888:	d027      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a32      	ldr	r2, [pc, #200]	@ (8002958 <TIM_Base_SetConfig+0x130>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d023      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a31      	ldr	r2, [pc, #196]	@ (800295c <TIM_Base_SetConfig+0x134>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01f      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a30      	ldr	r2, [pc, #192]	@ (8002960 <TIM_Base_SetConfig+0x138>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01b      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002964 <TIM_Base_SetConfig+0x13c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d017      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002968 <TIM_Base_SetConfig+0x140>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a2d      	ldr	r2, [pc, #180]	@ (800296c <TIM_Base_SetConfig+0x144>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00f      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002970 <TIM_Base_SetConfig+0x148>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00b      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002974 <TIM_Base_SetConfig+0x14c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d007      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002978 <TIM_Base_SetConfig+0x150>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d003      	beq.n	80028da <TIM_Base_SetConfig+0xb2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a29      	ldr	r2, [pc, #164]	@ (800297c <TIM_Base_SetConfig+0x154>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d108      	bne.n	80028ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a10      	ldr	r2, [pc, #64]	@ (8002954 <TIM_Base_SetConfig+0x12c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d003      	beq.n	8002920 <TIM_Base_SetConfig+0xf8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a12      	ldr	r2, [pc, #72]	@ (8002964 <TIM_Base_SetConfig+0x13c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d105      	bne.n	8002946 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f023 0201 	bic.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	611a      	str	r2, [r3, #16]
  }
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40010000 	.word	0x40010000
 8002958:	40000400 	.word	0x40000400
 800295c:	40000800 	.word	0x40000800
 8002960:	40000c00 	.word	0x40000c00
 8002964:	40010400 	.word	0x40010400
 8002968:	40014000 	.word	0x40014000
 800296c:	40014400 	.word	0x40014400
 8002970:	40014800 	.word	0x40014800
 8002974:	40001800 	.word	0x40001800
 8002978:	40001c00 	.word	0x40001c00
 800297c:	40002000 	.word	0x40002000

08002980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f023 0201 	bic.w	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0303 	bic.w	r3, r3, #3
 80029b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f023 0302 	bic.w	r3, r3, #2
 80029c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a20      	ldr	r2, [pc, #128]	@ (8002a58 <TIM_OC1_SetConfig+0xd8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d003      	beq.n	80029e4 <TIM_OC1_SetConfig+0x64>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a1f      	ldr	r2, [pc, #124]	@ (8002a5c <TIM_OC1_SetConfig+0xdc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d10c      	bne.n	80029fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f023 0308 	bic.w	r3, r3, #8
 80029ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f023 0304 	bic.w	r3, r3, #4
 80029fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a15      	ldr	r2, [pc, #84]	@ (8002a58 <TIM_OC1_SetConfig+0xd8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d003      	beq.n	8002a0e <TIM_OC1_SetConfig+0x8e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a14      	ldr	r2, [pc, #80]	@ (8002a5c <TIM_OC1_SetConfig+0xdc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d111      	bne.n	8002a32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	621a      	str	r2, [r3, #32]
}
 8002a4c:	bf00      	nop
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40010000 	.word	0x40010000
 8002a5c:	40010400 	.word	0x40010400

08002a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f023 0210 	bic.w	r2, r3, #16
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 0320 	bic.w	r3, r3, #32
 8002aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a22      	ldr	r2, [pc, #136]	@ (8002b44 <TIM_OC2_SetConfig+0xe4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d003      	beq.n	8002ac8 <TIM_OC2_SetConfig+0x68>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a21      	ldr	r2, [pc, #132]	@ (8002b48 <TIM_OC2_SetConfig+0xe8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d10d      	bne.n	8002ae4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ae2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a17      	ldr	r2, [pc, #92]	@ (8002b44 <TIM_OC2_SetConfig+0xe4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d003      	beq.n	8002af4 <TIM_OC2_SetConfig+0x94>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a16      	ldr	r2, [pc, #88]	@ (8002b48 <TIM_OC2_SetConfig+0xe8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d113      	bne.n	8002b1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	621a      	str	r2, [r3, #32]
}
 8002b36:	bf00      	nop
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40010000 	.word	0x40010000
 8002b48:	40010400 	.word	0x40010400

08002b4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f023 0303 	bic.w	r3, r3, #3
 8002b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a21      	ldr	r2, [pc, #132]	@ (8002c2c <TIM_OC3_SetConfig+0xe0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d003      	beq.n	8002bb2 <TIM_OC3_SetConfig+0x66>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a20      	ldr	r2, [pc, #128]	@ (8002c30 <TIM_OC3_SetConfig+0xe4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d10d      	bne.n	8002bce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a16      	ldr	r2, [pc, #88]	@ (8002c2c <TIM_OC3_SetConfig+0xe0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d003      	beq.n	8002bde <TIM_OC3_SetConfig+0x92>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a15      	ldr	r2, [pc, #84]	@ (8002c30 <TIM_OC3_SetConfig+0xe4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d113      	bne.n	8002c06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	621a      	str	r2, [r3, #32]
}
 8002c20:	bf00      	nop
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	40010000 	.word	0x40010000
 8002c30:	40010400 	.word	0x40010400

08002c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	031b      	lsls	r3, r3, #12
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a12      	ldr	r2, [pc, #72]	@ (8002cd8 <TIM_OC4_SetConfig+0xa4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d003      	beq.n	8002c9c <TIM_OC4_SetConfig+0x68>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a11      	ldr	r2, [pc, #68]	@ (8002cdc <TIM_OC4_SetConfig+0xa8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d109      	bne.n	8002cb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	019b      	lsls	r3, r3, #6
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	621a      	str	r2, [r3, #32]
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40010000 	.word	0x40010000
 8002cdc:	40010400 	.word	0x40010400

08002ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f023 0201 	bic.w	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f023 030a 	bic.w	r3, r3, #10
 8002d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	621a      	str	r2, [r3, #32]
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b087      	sub	sp, #28
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f023 0210 	bic.w	r2, r3, #16
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	031b      	lsls	r3, r3, #12
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	621a      	str	r2, [r3, #32]
}
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f043 0307 	orr.w	r3, r3, #7
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	609a      	str	r2, [r3, #8]
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	021a      	lsls	r2, r3, #8
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	609a      	str	r2, [r3, #8]
}
 8002e08:	bf00      	nop
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	2201      	movs	r2, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a1a      	ldr	r2, [r3, #32]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	401a      	ands	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a1a      	ldr	r2, [r3, #32]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	621a      	str	r2, [r3, #32]
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e05a      	b.n	8002f2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a21      	ldr	r2, [pc, #132]	@ (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d022      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec4:	d01d      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1d      	ldr	r2, [pc, #116]	@ (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d018      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d013      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1a      	ldr	r2, [pc, #104]	@ (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00e      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a18      	ldr	r2, [pc, #96]	@ (8002f4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d009      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a17      	ldr	r2, [pc, #92]	@ (8002f50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d004      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a15      	ldr	r2, [pc, #84]	@ (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d10c      	bne.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40010000 	.word	0x40010000
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40000800 	.word	0x40000800
 8002f48:	40000c00 	.word	0x40000c00
 8002f4c:	40010400 	.word	0x40010400
 8002f50:	40014000 	.word	0x40014000
 8002f54:	40001800 	.word	0x40001800

08002f58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e03d      	b.n	8002ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e042      	b.n	8003094 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd fef0 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	@ 0x24
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800303e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fc85 	bl	8003950 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b0ba      	sub	sp, #232	@ 0xe8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80030da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10f      	bne.n	8003102 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_UART_IRQHandler+0x66>
 80030ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fb69 	bl	80037d2 <UART_Receive_IT>
      return;
 8003100:	e25b      	b.n	80035ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003102:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80de 	beq.w	80032c8 <HAL_UART_IRQHandler+0x22c>
 800310c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800311c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80d1 	beq.w	80032c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <HAL_UART_IRQHandler+0xae>
 8003132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003142:	f043 0201 	orr.w	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <HAL_UART_IRQHandler+0xd2>
 8003156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	f043 0202 	orr.w	r2, r3, #2
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_UART_IRQHandler+0xf6>
 800317a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	f043 0204 	orr.w	r2, r3, #4
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d011      	beq.n	80031c2 <HAL_UART_IRQHandler+0x126>
 800319e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	f043 0208 	orr.w	r2, r3, #8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 81f2 	beq.w	80035b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_UART_IRQHandler+0x14e>
 80031d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 faf4 	bl	80037d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f4:	2b40      	cmp	r3, #64	@ 0x40
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <HAL_UART_IRQHandler+0x17a>
 800320e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d04f      	beq.n	80032b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f9fc 	bl	8003614 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003226:	2b40      	cmp	r3, #64	@ 0x40
 8003228:	d141      	bne.n	80032ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3314      	adds	r3, #20
 8003230:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003240:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003248:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3314      	adds	r3, #20
 8003252:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003256:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800325a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003262:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003266:	e841 2300 	strex	r3, r2, [r1]
 800326a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800326e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1d9      	bne.n	800322a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d013      	beq.n	80032a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003282:	4a7e      	ldr	r2, [pc, #504]	@ (800347c <HAL_UART_IRQHandler+0x3e0>)
 8003284:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe f86d 	bl	800136a <HAL_DMA_Abort_IT>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032a0:	4610      	mov	r0, r2
 80032a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	e00e      	b.n	80032c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f99e 	bl	80035e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ac:	e00a      	b.n	80032c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f99a 	bl	80035e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b4:	e006      	b.n	80032c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f996 	bl	80035e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80032c2:	e175      	b.n	80035b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c4:	bf00      	nop
    return;
 80032c6:	e173      	b.n	80035b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	f040 814f 	bne.w	8003570 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8148 	beq.w	8003570 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8141 	beq.w	8003570 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330e:	2b40      	cmp	r3, #64	@ 0x40
 8003310:	f040 80b6 	bne.w	8003480 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003320:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8145 	beq.w	80035b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800332e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003332:	429a      	cmp	r2, r3
 8003334:	f080 813e 	bcs.w	80035b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800333e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800334a:	f000 8088 	beq.w	800345e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003364:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800336c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800337a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800337e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003386:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800338a:	e841 2300 	strex	r3, r2, [r1]
 800338e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003392:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1d9      	bne.n	800334e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3314      	adds	r3, #20
 80033a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e1      	bne.n	800339a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3314      	adds	r3, #20
 80033dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3314      	adds	r3, #20
 80033f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003400:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003408:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1e3      	bne.n	80033d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	330c      	adds	r3, #12
 8003422:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800342c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800342e:	f023 0310 	bic.w	r3, r3, #16
 8003432:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003440:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003442:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003444:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003446:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003448:	e841 2300 	strex	r3, r2, [r1]
 800344c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800344e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e3      	bne.n	800341c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003458:	4618      	mov	r0, r3
 800345a:	f7fd ff16 	bl	800128a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800346c:	b29b      	uxth	r3, r3
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	b29b      	uxth	r3, r3
 8003472:	4619      	mov	r1, r3
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f8c1 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800347a:	e09b      	b.n	80035b4 <HAL_UART_IRQHandler+0x518>
 800347c:	080036db 	.word	0x080036db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003488:	b29b      	uxth	r3, r3
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 808e 	beq.w	80035b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800349c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8089 	beq.w	80035b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	330c      	adds	r3, #12
 80034ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b0:	e853 3f00 	ldrex	r3, [r3]
 80034b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80034cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034d2:	e841 2300 	strex	r3, r2, [r1]
 80034d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1e3      	bne.n	80034a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3314      	adds	r3, #20
 80034e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	623b      	str	r3, [r7, #32]
   return(result);
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3314      	adds	r3, #20
 80034fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003502:	633a      	str	r2, [r7, #48]	@ 0x30
 8003504:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e3      	bne.n	80034de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	e853 3f00 	ldrex	r3, [r3]
 8003532:	60fb      	str	r3, [r7, #12]
   return(result);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0310 	bic.w	r3, r3, #16
 800353a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	330c      	adds	r3, #12
 8003544:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003548:	61fa      	str	r2, [r7, #28]
 800354a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354c:	69b9      	ldr	r1, [r7, #24]
 800354e:	69fa      	ldr	r2, [r7, #28]
 8003550:	e841 2300 	strex	r3, r2, [r1]
 8003554:	617b      	str	r3, [r7, #20]
   return(result);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e3      	bne.n	8003524 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003562:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003566:	4619      	mov	r1, r3
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f847 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800356e:	e023      	b.n	80035b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d009      	beq.n	8003590 <HAL_UART_IRQHandler+0x4f4>
 800357c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f8ba 	bl	8003702 <UART_Transmit_IT>
    return;
 800358e:	e014      	b.n	80035ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00e      	beq.n	80035ba <HAL_UART_IRQHandler+0x51e>
 800359c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f8fa 	bl	80037a2 <UART_EndTransmit_IT>
    return;
 80035ae:	e004      	b.n	80035ba <HAL_UART_IRQHandler+0x51e>
    return;
 80035b0:	bf00      	nop
 80035b2:	e002      	b.n	80035ba <HAL_UART_IRQHandler+0x51e>
      return;
 80035b4:	bf00      	nop
 80035b6:	e000      	b.n	80035ba <HAL_UART_IRQHandler+0x51e>
      return;
 80035b8:	bf00      	nop
  }
}
 80035ba:	37e8      	adds	r7, #232	@ 0xe8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003614:	b480      	push	{r7}
 8003616:	b095      	sub	sp, #84	@ 0x54
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800363c:	643a      	str	r2, [r7, #64]	@ 0x40
 800363e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003642:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800364a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e5      	bne.n	800361c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3314      	adds	r3, #20
 8003656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3314      	adds	r3, #20
 800366e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003670:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003672:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e5      	bne.n	8003650 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003688:	2b01      	cmp	r3, #1
 800368a:	d119      	bne.n	80036c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	330c      	adds	r3, #12
 8003692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	e853 3f00 	ldrex	r3, [r3]
 800369a:	60bb      	str	r3, [r7, #8]
   return(result);
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f023 0310 	bic.w	r3, r3, #16
 80036a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	330c      	adds	r3, #12
 80036aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036ac:	61ba      	str	r2, [r7, #24]
 80036ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b0:	6979      	ldr	r1, [r7, #20]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	e841 2300 	strex	r3, r2, [r1]
 80036b8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e5      	bne.n	800368c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80036ce:	bf00      	nop
 80036d0:	3754      	adds	r7, #84	@ 0x54
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f7ff ff77 	bl	80035e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b21      	cmp	r3, #33	@ 0x21
 8003714:	d13e      	bne.n	8003794 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800371e:	d114      	bne.n	800374a <UART_Transmit_IT+0x48>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d110      	bne.n	800374a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800373c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	1c9a      	adds	r2, r3, #2
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	621a      	str	r2, [r3, #32]
 8003748:	e008      	b.n	800375c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	1c59      	adds	r1, r3, #1
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6211      	str	r1, [r2, #32]
 8003754:	781a      	ldrb	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29b      	uxth	r3, r3
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	4619      	mov	r1, r3
 800376a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10f      	bne.n	8003790 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800377e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800378e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	e000      	b.n	8003796 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003794:	2302      	movs	r3, #2
  }
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff fefc 	bl	80035c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b08c      	sub	sp, #48	@ 0x30
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b22      	cmp	r3, #34	@ 0x22
 80037e4:	f040 80ae 	bne.w	8003944 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f0:	d117      	bne.n	8003822 <UART_Receive_IT+0x50>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d113      	bne.n	8003822 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003802:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	b29b      	uxth	r3, r3
 800380c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003810:	b29a      	uxth	r2, r3
 8003812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003814:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381a:	1c9a      	adds	r2, r3, #2
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003820:	e026      	b.n	8003870 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003826:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003828:	2300      	movs	r3, #0
 800382a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003834:	d007      	beq.n	8003846 <UART_Receive_IT+0x74>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10a      	bne.n	8003854 <UART_Receive_IT+0x82>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	e008      	b.n	8003866 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003860:	b2da      	uxtb	r2, r3
 8003862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003864:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29b      	uxth	r3, r3
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4619      	mov	r1, r3
 800387e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003880:	2b00      	cmp	r3, #0
 8003882:	d15d      	bne.n	8003940 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0220 	bic.w	r2, r2, #32
 8003892:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0201 	bic.w	r2, r2, #1
 80038b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d135      	bne.n	8003936 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	330c      	adds	r3, #12
 80038d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	613b      	str	r3, [r7, #16]
   return(result);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f023 0310 	bic.w	r3, r3, #16
 80038e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	330c      	adds	r3, #12
 80038ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f0:	623a      	str	r2, [r7, #32]
 80038f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	69f9      	ldr	r1, [r7, #28]
 80038f6:	6a3a      	ldr	r2, [r7, #32]
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e5      	bne.n	80038d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b10      	cmp	r3, #16
 8003910:	d10a      	bne.n	8003928 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800392c:	4619      	mov	r1, r3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fe64 	bl	80035fc <HAL_UARTEx_RxEventCallback>
 8003934:	e002      	b.n	800393c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fe4c 	bl	80035d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e002      	b.n	8003946 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3730      	adds	r7, #48	@ 0x30
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003954:	b0c0      	sub	sp, #256	@ 0x100
 8003956:	af00      	add	r7, sp, #0
 8003958:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396c:	68d9      	ldr	r1, [r3, #12]
 800396e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	ea40 0301 	orr.w	r3, r0, r1
 8003978:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800397a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	431a      	orrs	r2, r3
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	431a      	orrs	r2, r3
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039a8:	f021 010c 	bic.w	r1, r1, #12
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039b6:	430b      	orrs	r3, r1
 80039b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ca:	6999      	ldr	r1, [r3, #24]
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	ea40 0301 	orr.w	r3, r0, r1
 80039d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4b8f      	ldr	r3, [pc, #572]	@ (8003c1c <UART_SetConfig+0x2cc>)
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d005      	beq.n	80039f0 <UART_SetConfig+0xa0>
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003c20 <UART_SetConfig+0x2d0>)
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d104      	bne.n	80039fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039f0:	f7fe fad8 	bl	8001fa4 <HAL_RCC_GetPCLK2Freq>
 80039f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039f8:	e003      	b.n	8003a02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039fa:	f7fe fabf 	bl	8001f7c <HAL_RCC_GetPCLK1Freq>
 80039fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a0c:	f040 810c 	bne.w	8003c28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a14:	2200      	movs	r2, #0
 8003a16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a1a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a22:	4622      	mov	r2, r4
 8003a24:	462b      	mov	r3, r5
 8003a26:	1891      	adds	r1, r2, r2
 8003a28:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a2a:	415b      	adcs	r3, r3
 8003a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a32:	4621      	mov	r1, r4
 8003a34:	eb12 0801 	adds.w	r8, r2, r1
 8003a38:	4629      	mov	r1, r5
 8003a3a:	eb43 0901 	adc.w	r9, r3, r1
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a52:	4690      	mov	r8, r2
 8003a54:	4699      	mov	r9, r3
 8003a56:	4623      	mov	r3, r4
 8003a58:	eb18 0303 	adds.w	r3, r8, r3
 8003a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a60:	462b      	mov	r3, r5
 8003a62:	eb49 0303 	adc.w	r3, r9, r3
 8003a66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a76:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a7e:	460b      	mov	r3, r1
 8003a80:	18db      	adds	r3, r3, r3
 8003a82:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a84:	4613      	mov	r3, r2
 8003a86:	eb42 0303 	adc.w	r3, r2, r3
 8003a8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a94:	f7fc fb9c 	bl	80001d0 <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4b61      	ldr	r3, [pc, #388]	@ (8003c24 <UART_SetConfig+0x2d4>)
 8003a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	011c      	lsls	r4, r3, #4
 8003aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ab0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ab4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ab8:	4642      	mov	r2, r8
 8003aba:	464b      	mov	r3, r9
 8003abc:	1891      	adds	r1, r2, r2
 8003abe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ac0:	415b      	adcs	r3, r3
 8003ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ac8:	4641      	mov	r1, r8
 8003aca:	eb12 0a01 	adds.w	sl, r2, r1
 8003ace:	4649      	mov	r1, r9
 8003ad0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ae0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ae4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ae8:	4692      	mov	sl, r2
 8003aea:	469b      	mov	fp, r3
 8003aec:	4643      	mov	r3, r8
 8003aee:	eb1a 0303 	adds.w	r3, sl, r3
 8003af2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003af6:	464b      	mov	r3, r9
 8003af8:	eb4b 0303 	adc.w	r3, fp, r3
 8003afc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b14:	460b      	mov	r3, r1
 8003b16:	18db      	adds	r3, r3, r3
 8003b18:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	eb42 0303 	adc.w	r3, r2, r3
 8003b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b2a:	f7fc fb51 	bl	80001d0 <__aeabi_uldivmod>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4611      	mov	r1, r2
 8003b34:	4b3b      	ldr	r3, [pc, #236]	@ (8003c24 <UART_SetConfig+0x2d4>)
 8003b36:	fba3 2301 	umull	r2, r3, r3, r1
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	2264      	movs	r2, #100	@ 0x64
 8003b3e:	fb02 f303 	mul.w	r3, r2, r3
 8003b42:	1acb      	subs	r3, r1, r3
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b4a:	4b36      	ldr	r3, [pc, #216]	@ (8003c24 <UART_SetConfig+0x2d4>)
 8003b4c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b58:	441c      	add	r4, r3
 8003b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	464b      	mov	r3, r9
 8003b70:	1891      	adds	r1, r2, r2
 8003b72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b74:	415b      	adcs	r3, r3
 8003b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	1851      	adds	r1, r2, r1
 8003b80:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b82:	4649      	mov	r1, r9
 8003b84:	414b      	adcs	r3, r1
 8003b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b94:	4659      	mov	r1, fp
 8003b96:	00cb      	lsls	r3, r1, #3
 8003b98:	4651      	mov	r1, sl
 8003b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b9e:	4651      	mov	r1, sl
 8003ba0:	00ca      	lsls	r2, r1, #3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4642      	mov	r2, r8
 8003baa:	189b      	adds	r3, r3, r2
 8003bac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bb0:	464b      	mov	r3, r9
 8003bb2:	460a      	mov	r2, r1
 8003bb4:	eb42 0303 	adc.w	r3, r2, r3
 8003bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bc8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	18db      	adds	r3, r3, r3
 8003bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	eb42 0303 	adc.w	r3, r2, r3
 8003bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003be2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003be6:	f7fc faf3 	bl	80001d0 <__aeabi_uldivmod>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	4b0d      	ldr	r3, [pc, #52]	@ (8003c24 <UART_SetConfig+0x2d4>)
 8003bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	2164      	movs	r1, #100	@ 0x64
 8003bf8:	fb01 f303 	mul.w	r3, r1, r3
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	3332      	adds	r3, #50	@ 0x32
 8003c02:	4a08      	ldr	r2, [pc, #32]	@ (8003c24 <UART_SetConfig+0x2d4>)
 8003c04:	fba2 2303 	umull	r2, r3, r2, r3
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	f003 0207 	and.w	r2, r3, #7
 8003c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4422      	add	r2, r4
 8003c16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c18:	e106      	b.n	8003e28 <UART_SetConfig+0x4d8>
 8003c1a:	bf00      	nop
 8003c1c:	40011000 	.word	0x40011000
 8003c20:	40011400 	.word	0x40011400
 8003c24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c3a:	4642      	mov	r2, r8
 8003c3c:	464b      	mov	r3, r9
 8003c3e:	1891      	adds	r1, r2, r2
 8003c40:	6239      	str	r1, [r7, #32]
 8003c42:	415b      	adcs	r3, r3
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c4a:	4641      	mov	r1, r8
 8003c4c:	1854      	adds	r4, r2, r1
 8003c4e:	4649      	mov	r1, r9
 8003c50:	eb43 0501 	adc.w	r5, r3, r1
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	00eb      	lsls	r3, r5, #3
 8003c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c62:	00e2      	lsls	r2, r4, #3
 8003c64:	4614      	mov	r4, r2
 8003c66:	461d      	mov	r5, r3
 8003c68:	4643      	mov	r3, r8
 8003c6a:	18e3      	adds	r3, r4, r3
 8003c6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c70:	464b      	mov	r3, r9
 8003c72:	eb45 0303 	adc.w	r3, r5, r3
 8003c76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c96:	4629      	mov	r1, r5
 8003c98:	008b      	lsls	r3, r1, #2
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	008a      	lsls	r2, r1, #2
 8003ca4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ca8:	f7fc fa92 	bl	80001d0 <__aeabi_uldivmod>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4b60      	ldr	r3, [pc, #384]	@ (8003e34 <UART_SetConfig+0x4e4>)
 8003cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	011c      	lsls	r4, r3, #4
 8003cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ccc:	4642      	mov	r2, r8
 8003cce:	464b      	mov	r3, r9
 8003cd0:	1891      	adds	r1, r2, r2
 8003cd2:	61b9      	str	r1, [r7, #24]
 8003cd4:	415b      	adcs	r3, r3
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cdc:	4641      	mov	r1, r8
 8003cde:	1851      	adds	r1, r2, r1
 8003ce0:	6139      	str	r1, [r7, #16]
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	414b      	adcs	r3, r1
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cf4:	4659      	mov	r1, fp
 8003cf6:	00cb      	lsls	r3, r1, #3
 8003cf8:	4651      	mov	r1, sl
 8003cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cfe:	4651      	mov	r1, sl
 8003d00:	00ca      	lsls	r2, r1, #3
 8003d02:	4610      	mov	r0, r2
 8003d04:	4619      	mov	r1, r3
 8003d06:	4603      	mov	r3, r0
 8003d08:	4642      	mov	r2, r8
 8003d0a:	189b      	adds	r3, r3, r2
 8003d0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d10:	464b      	mov	r3, r9
 8003d12:	460a      	mov	r2, r1
 8003d14:	eb42 0303 	adc.w	r3, r2, r3
 8003d18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d34:	4649      	mov	r1, r9
 8003d36:	008b      	lsls	r3, r1, #2
 8003d38:	4641      	mov	r1, r8
 8003d3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d3e:	4641      	mov	r1, r8
 8003d40:	008a      	lsls	r2, r1, #2
 8003d42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d46:	f7fc fa43 	bl	80001d0 <__aeabi_uldivmod>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4b38      	ldr	r3, [pc, #224]	@ (8003e34 <UART_SetConfig+0x4e4>)
 8003d52:	fba3 2301 	umull	r2, r3, r3, r1
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	2264      	movs	r2, #100	@ 0x64
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	1acb      	subs	r3, r1, r3
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	3332      	adds	r3, #50	@ 0x32
 8003d64:	4a33      	ldr	r2, [pc, #204]	@ (8003e34 <UART_SetConfig+0x4e4>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d70:	441c      	add	r4, r3
 8003d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d76:	2200      	movs	r2, #0
 8003d78:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d80:	4642      	mov	r2, r8
 8003d82:	464b      	mov	r3, r9
 8003d84:	1891      	adds	r1, r2, r2
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	415b      	adcs	r3, r3
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d90:	4641      	mov	r1, r8
 8003d92:	1851      	adds	r1, r2, r1
 8003d94:	6039      	str	r1, [r7, #0]
 8003d96:	4649      	mov	r1, r9
 8003d98:	414b      	adcs	r3, r1
 8003d9a:	607b      	str	r3, [r7, #4]
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003da8:	4659      	mov	r1, fp
 8003daa:	00cb      	lsls	r3, r1, #3
 8003dac:	4651      	mov	r1, sl
 8003dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003db2:	4651      	mov	r1, sl
 8003db4:	00ca      	lsls	r2, r1, #3
 8003db6:	4610      	mov	r0, r2
 8003db8:	4619      	mov	r1, r3
 8003dba:	4603      	mov	r3, r0
 8003dbc:	4642      	mov	r2, r8
 8003dbe:	189b      	adds	r3, r3, r2
 8003dc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	460a      	mov	r2, r1
 8003dc6:	eb42 0303 	adc.w	r3, r2, r3
 8003dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dd6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003de4:	4649      	mov	r1, r9
 8003de6:	008b      	lsls	r3, r1, #2
 8003de8:	4641      	mov	r1, r8
 8003dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dee:	4641      	mov	r1, r8
 8003df0:	008a      	lsls	r2, r1, #2
 8003df2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003df6:	f7fc f9eb 	bl	80001d0 <__aeabi_uldivmod>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003e34 <UART_SetConfig+0x4e4>)
 8003e00:	fba3 1302 	umull	r1, r3, r3, r2
 8003e04:	095b      	lsrs	r3, r3, #5
 8003e06:	2164      	movs	r1, #100	@ 0x64
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	3332      	adds	r3, #50	@ 0x32
 8003e12:	4a08      	ldr	r2, [pc, #32]	@ (8003e34 <UART_SetConfig+0x4e4>)
 8003e14:	fba2 2303 	umull	r2, r3, r2, r3
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	f003 020f 	and.w	r2, r3, #15
 8003e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4422      	add	r2, r4
 8003e26:	609a      	str	r2, [r3, #8]
}
 8003e28:	bf00      	nop
 8003e2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e34:	51eb851f 	.word	0x51eb851f

08003e38 <__NVIC_SetPriority>:
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	6039      	str	r1, [r7, #0]
 8003e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	db0a      	blt.n	8003e62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	490c      	ldr	r1, [pc, #48]	@ (8003e84 <__NVIC_SetPriority+0x4c>)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	0112      	lsls	r2, r2, #4
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003e60:	e00a      	b.n	8003e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	4908      	ldr	r1, [pc, #32]	@ (8003e88 <__NVIC_SetPriority+0x50>)
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	3b04      	subs	r3, #4
 8003e70:	0112      	lsls	r2, r2, #4
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	440b      	add	r3, r1
 8003e76:	761a      	strb	r2, [r3, #24]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	e000e100 	.word	0xe000e100
 8003e88:	e000ed00 	.word	0xe000ed00

08003e8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003e90:	2100      	movs	r1, #0
 8003e92:	f06f 0004 	mvn.w	r0, #4
 8003e96:	f7ff ffcf 	bl	8003e38 <__NVIC_SetPriority>
#endif
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ea6:	f3ef 8305 	mrs	r3, IPSR
 8003eaa:	603b      	str	r3, [r7, #0]
  return(result);
 8003eac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003eb2:	f06f 0305 	mvn.w	r3, #5
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	e00c      	b.n	8003ed4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003eba:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee4 <osKernelInitialize+0x44>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d105      	bne.n	8003ece <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003ec2:	4b08      	ldr	r3, [pc, #32]	@ (8003ee4 <osKernelInitialize+0x44>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	e002      	b.n	8003ed4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ed2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ed4:	687b      	ldr	r3, [r7, #4]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	2000015c 	.word	0x2000015c

08003ee8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eee:	f3ef 8305 	mrs	r3, IPSR
 8003ef2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ef4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003efa:	f06f 0305 	mvn.w	r3, #5
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	e010      	b.n	8003f24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f02:	4b0b      	ldr	r3, [pc, #44]	@ (8003f30 <osKernelStart+0x48>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d109      	bne.n	8003f1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f0a:	f7ff ffbf 	bl	8003e8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f0e:	4b08      	ldr	r3, [pc, #32]	@ (8003f30 <osKernelStart+0x48>)
 8003f10:	2202      	movs	r2, #2
 8003f12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f14:	f001 f87a 	bl	800500c <vTaskStartScheduler>
      stat = osOK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	607b      	str	r3, [r7, #4]
 8003f1c:	e002      	b.n	8003f24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003f1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f24:	687b      	ldr	r3, [r7, #4]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	2000015c 	.word	0x2000015c

08003f34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08e      	sub	sp, #56	@ 0x38
 8003f38:	af04      	add	r7, sp, #16
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f44:	f3ef 8305 	mrs	r3, IPSR
 8003f48:	617b      	str	r3, [r7, #20]
  return(result);
 8003f4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d17e      	bne.n	800404e <osThreadNew+0x11a>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d07b      	beq.n	800404e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003f56:	2380      	movs	r3, #128	@ 0x80
 8003f58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003f5a:	2318      	movs	r3, #24
 8003f5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d045      	beq.n	8003ffa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <osThreadNew+0x48>
        name = attr->name;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <osThreadNew+0x6e>
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b38      	cmp	r3, #56	@ 0x38
 8003f94:	d805      	bhi.n	8003fa2 <osThreadNew+0x6e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <osThreadNew+0x72>
        return (NULL);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e054      	b.n	8004050 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00e      	beq.n	8003fdc <osThreadNew+0xa8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2b5b      	cmp	r3, #91	@ 0x5b
 8003fc4:	d90a      	bls.n	8003fdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d006      	beq.n	8003fdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <osThreadNew+0xa8>
        mem = 1;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	e010      	b.n	8003ffe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10c      	bne.n	8003ffe <osThreadNew+0xca>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d108      	bne.n	8003ffe <osThreadNew+0xca>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <osThreadNew+0xca>
          mem = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	e001      	b.n	8003ffe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d110      	bne.n	8004026 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800400c:	9202      	str	r2, [sp, #8]
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	6a3a      	ldr	r2, [r7, #32]
 8004018:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 fe1a 	bl	8004c54 <xTaskCreateStatic>
 8004020:	4603      	mov	r3, r0
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	e013      	b.n	800404e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d110      	bne.n	800404e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	b29a      	uxth	r2, r3
 8004030:	f107 0310 	add.w	r3, r7, #16
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fe68 	bl	8004d14 <xTaskCreate>
 8004044:	4603      	mov	r3, r0
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <osThreadNew+0x11a>
            hTask = NULL;
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800404e:	693b      	ldr	r3, [r7, #16]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3728      	adds	r7, #40	@ 0x28
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004060:	f3ef 8305 	mrs	r3, IPSR
 8004064:	60bb      	str	r3, [r7, #8]
  return(result);
 8004066:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <osDelay+0x1c>
    stat = osErrorISR;
 800406c:	f06f 0305 	mvn.w	r3, #5
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	e007      	b.n	8004084 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <osDelay+0x2c>
      vTaskDelay(ticks);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 ff8e 	bl	8004fa0 <vTaskDelay>
    }
  }

  return (stat);
 8004084:	68fb      	ldr	r3, [r7, #12]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a07      	ldr	r2, [pc, #28]	@ (80040bc <vApplicationGetIdleTaskMemory+0x2c>)
 80040a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4a06      	ldr	r2, [pc, #24]	@ (80040c0 <vApplicationGetIdleTaskMemory+0x30>)
 80040a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2280      	movs	r2, #128	@ 0x80
 80040ac:	601a      	str	r2, [r3, #0]
}
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	20000160 	.word	0x20000160
 80040c0:	200001bc 	.word	0x200001bc

080040c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4a07      	ldr	r2, [pc, #28]	@ (80040f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80040d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	4a06      	ldr	r2, [pc, #24]	@ (80040f4 <vApplicationGetTimerTaskMemory+0x30>)
 80040da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040e2:	601a      	str	r2, [r3, #0]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	200003bc 	.word	0x200003bc
 80040f4:	20000418 	.word	0x20000418

080040f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f103 0208 	add.w	r2, r3, #8
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004110:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f103 0208 	add.w	r2, r3, #8
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f103 0208 	add.w	r2, r3, #8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	601a      	str	r2, [r3, #0]
}
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041b0:	d103      	bne.n	80041ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	e00c      	b.n	80041d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3308      	adds	r3, #8
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e002      	b.n	80041c8 <vListInsert+0x2e>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d2f6      	bcs.n	80041c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	601a      	str	r2, [r3, #0]
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6892      	ldr	r2, [r2, #8]
 8004222:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6852      	ldr	r2, [r2, #4]
 800422c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	429a      	cmp	r2, r3
 8004236:	d103      	bne.n	8004240 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	1e5a      	subs	r2, r3, #1
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10b      	bne.n	800428c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004286:	bf00      	nop
 8004288:	bf00      	nop
 800428a:	e7fd      	b.n	8004288 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800428c:	f002 f87c 	bl	8006388 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004298:	68f9      	ldr	r1, [r7, #12]
 800429a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	441a      	add	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042bc:	3b01      	subs	r3, #1
 80042be:	68f9      	ldr	r1, [r7, #12]
 80042c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80042c2:	fb01 f303 	mul.w	r3, r1, r3
 80042c6:	441a      	add	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	22ff      	movs	r2, #255	@ 0xff
 80042d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	22ff      	movs	r2, #255	@ 0xff
 80042d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d114      	bne.n	800430c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01a      	beq.n	8004320 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3310      	adds	r3, #16
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 f91a 	bl	8005528 <xTaskRemoveFromEventList>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d012      	beq.n	8004320 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004330 <xQueueGenericReset+0xd0>)
 80042fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	e009      	b.n	8004320 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3310      	adds	r3, #16
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fef1 	bl	80040f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3324      	adds	r3, #36	@ 0x24
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff feec 	bl	80040f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004320:	f002 f864 	bl	80063ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004324:	2301      	movs	r3, #1
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	e000ed04 	.word	0xe000ed04

08004334 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08e      	sub	sp, #56	@ 0x38
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800435a:	bf00      	nop
 800435c:	bf00      	nop
 800435e:	e7fd      	b.n	800435c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10b      	bne.n	800437e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	e7fd      	b.n	800437a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <xQueueGenericCreateStatic+0x56>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <xQueueGenericCreateStatic+0x5a>
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <xQueueGenericCreateStatic+0x5c>
 800438e:	2300      	movs	r3, #0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10b      	bne.n	80043ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	623b      	str	r3, [r7, #32]
}
 80043a6:	bf00      	nop
 80043a8:	bf00      	nop
 80043aa:	e7fd      	b.n	80043a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d102      	bne.n	80043b8 <xQueueGenericCreateStatic+0x84>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <xQueueGenericCreateStatic+0x88>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <xQueueGenericCreateStatic+0x8a>
 80043bc:	2300      	movs	r3, #0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10b      	bne.n	80043da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	61fb      	str	r3, [r7, #28]
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop
 80043d8:	e7fd      	b.n	80043d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043da:	2350      	movs	r3, #80	@ 0x50
 80043dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b50      	cmp	r3, #80	@ 0x50
 80043e2:	d00b      	beq.n	80043fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	61bb      	str	r3, [r7, #24]
}
 80043f6:	bf00      	nop
 80043f8:	bf00      	nop
 80043fa:	e7fd      	b.n	80043f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00d      	beq.n	8004424 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004410:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f805 	bl	800442e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004426:	4618      	mov	r0, r3
 8004428:	3730      	adds	r7, #48	@ 0x30
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	e002      	b.n	8004450 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800445c:	2101      	movs	r1, #1
 800445e:	69b8      	ldr	r0, [r7, #24]
 8004460:	f7ff fefe 	bl	8004260 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800446c:	bf00      	nop
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08e      	sub	sp, #56	@ 0x38
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004482:	2300      	movs	r3, #0
 8004484:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10b      	bne.n	80044a8 <xQueueGenericSend+0x34>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80044a2:	bf00      	nop
 80044a4:	bf00      	nop
 80044a6:	e7fd      	b.n	80044a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d103      	bne.n	80044b6 <xQueueGenericSend+0x42>
 80044ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <xQueueGenericSend+0x46>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <xQueueGenericSend+0x48>
 80044ba:	2300      	movs	r3, #0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <xQueueGenericSend+0x64>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80044d2:	bf00      	nop
 80044d4:	bf00      	nop
 80044d6:	e7fd      	b.n	80044d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d103      	bne.n	80044e6 <xQueueGenericSend+0x72>
 80044de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <xQueueGenericSend+0x76>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <xQueueGenericSend+0x78>
 80044ea:	2300      	movs	r3, #0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10b      	bne.n	8004508 <xQueueGenericSend+0x94>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	623b      	str	r3, [r7, #32]
}
 8004502:	bf00      	nop
 8004504:	bf00      	nop
 8004506:	e7fd      	b.n	8004504 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004508:	f001 f9ce 	bl	80058a8 <xTaskGetSchedulerState>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <xQueueGenericSend+0xa4>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <xQueueGenericSend+0xa8>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <xQueueGenericSend+0xaa>
 800451c:	2300      	movs	r3, #0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10b      	bne.n	800453a <xQueueGenericSend+0xc6>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	61fb      	str	r3, [r7, #28]
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop
 8004538:	e7fd      	b.n	8004536 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800453a:	f001 ff25 	bl	8006388 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800453e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <xQueueGenericSend+0xdc>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b02      	cmp	r3, #2
 800454e:	d129      	bne.n	80045a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004556:	f000 fa0f 	bl	8004978 <prvCopyDataToQueue>
 800455a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	2b00      	cmp	r3, #0
 8004562:	d010      	beq.n	8004586 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004566:	3324      	adds	r3, #36	@ 0x24
 8004568:	4618      	mov	r0, r3
 800456a:	f000 ffdd 	bl	8005528 <xTaskRemoveFromEventList>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d013      	beq.n	800459c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004574:	4b3f      	ldr	r3, [pc, #252]	@ (8004674 <xQueueGenericSend+0x200>)
 8004576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	e00a      	b.n	800459c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800458c:	4b39      	ldr	r3, [pc, #228]	@ (8004674 <xQueueGenericSend+0x200>)
 800458e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800459c:	f001 ff26 	bl	80063ec <vPortExitCritical>
				return pdPASS;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e063      	b.n	800466c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d103      	bne.n	80045b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045aa:	f001 ff1f 	bl	80063ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e05c      	b.n	800466c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045b8:	f107 0314 	add.w	r3, r7, #20
 80045bc:	4618      	mov	r0, r3
 80045be:	f001 f817 	bl	80055f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045c2:	2301      	movs	r3, #1
 80045c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045c6:	f001 ff11 	bl	80063ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045ca:	f000 fd87 	bl	80050dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045ce:	f001 fedb 	bl	8006388 <vPortEnterCritical>
 80045d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045d8:	b25b      	sxtb	r3, r3
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045de:	d103      	bne.n	80045e8 <xQueueGenericSend+0x174>
 80045e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045ee:	b25b      	sxtb	r3, r3
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045f4:	d103      	bne.n	80045fe <xQueueGenericSend+0x18a>
 80045f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045fe:	f001 fef5 	bl	80063ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004602:	1d3a      	adds	r2, r7, #4
 8004604:	f107 0314 	add.w	r3, r7, #20
 8004608:	4611      	mov	r1, r2
 800460a:	4618      	mov	r0, r3
 800460c:	f001 f806 	bl	800561c <xTaskCheckForTimeOut>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d124      	bne.n	8004660 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004616:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004618:	f000 faa6 	bl	8004b68 <prvIsQueueFull>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d018      	beq.n	8004654 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004624:	3310      	adds	r3, #16
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f000 ff2a 	bl	8005484 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004630:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004632:	f000 fa31 	bl	8004a98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004636:	f000 fd5f 	bl	80050f8 <xTaskResumeAll>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	f47f af7c 	bne.w	800453a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004642:	4b0c      	ldr	r3, [pc, #48]	@ (8004674 <xQueueGenericSend+0x200>)
 8004644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	e772      	b.n	800453a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004654:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004656:	f000 fa1f 	bl	8004a98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800465a:	f000 fd4d 	bl	80050f8 <xTaskResumeAll>
 800465e:	e76c      	b.n	800453a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004660:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004662:	f000 fa19 	bl	8004a98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004666:	f000 fd47 	bl	80050f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800466a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800466c:	4618      	mov	r0, r3
 800466e:	3738      	adds	r7, #56	@ 0x38
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b090      	sub	sp, #64	@ 0x40
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800468a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10b      	bne.n	80046a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80046a2:	bf00      	nop
 80046a4:	bf00      	nop
 80046a6:	e7fd      	b.n	80046a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d103      	bne.n	80046b6 <xQueueGenericSendFromISR+0x3e>
 80046ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <xQueueGenericSendFromISR+0x42>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <xQueueGenericSendFromISR+0x44>
 80046ba:	2300      	movs	r3, #0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10b      	bne.n	80046d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046d2:	bf00      	nop
 80046d4:	bf00      	nop
 80046d6:	e7fd      	b.n	80046d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d103      	bne.n	80046e6 <xQueueGenericSendFromISR+0x6e>
 80046de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <xQueueGenericSendFromISR+0x72>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <xQueueGenericSendFromISR+0x74>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	623b      	str	r3, [r7, #32]
}
 8004702:	bf00      	nop
 8004704:	bf00      	nop
 8004706:	e7fd      	b.n	8004704 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004708:	f001 ff1e 	bl	8006548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800470c:	f3ef 8211 	mrs	r2, BASEPRI
 8004710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	61fa      	str	r2, [r7, #28]
 8004722:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004724:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004726:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800472c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004730:	429a      	cmp	r2, r3
 8004732:	d302      	bcc.n	800473a <xQueueGenericSendFromISR+0xc2>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d12f      	bne.n	800479a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800473a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004740:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004748:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004750:	f000 f912 	bl	8004978 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004754:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800475c:	d112      	bne.n	8004784 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800475e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	2b00      	cmp	r3, #0
 8004764:	d016      	beq.n	8004794 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004768:	3324      	adds	r3, #36	@ 0x24
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fedc 	bl	8005528 <xTaskRemoveFromEventList>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00e      	beq.n	8004794 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00b      	beq.n	8004794 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	e007      	b.n	8004794 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004784:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004788:	3301      	adds	r3, #1
 800478a:	b2db      	uxtb	r3, r3
 800478c:	b25a      	sxtb	r2, r3
 800478e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004794:	2301      	movs	r3, #1
 8004796:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004798:	e001      	b.n	800479e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800479a:	2300      	movs	r3, #0
 800479c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800479e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3740      	adds	r7, #64	@ 0x40
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08c      	sub	sp, #48	@ 0x30
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80047c0:	2300      	movs	r3, #0
 80047c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10b      	bne.n	80047e6 <xQueueReceive+0x32>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	623b      	str	r3, [r7, #32]
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	e7fd      	b.n	80047e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d103      	bne.n	80047f4 <xQueueReceive+0x40>
 80047ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <xQueueReceive+0x44>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <xQueueReceive+0x46>
 80047f8:	2300      	movs	r3, #0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10b      	bne.n	8004816 <xQueueReceive+0x62>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	61fb      	str	r3, [r7, #28]
}
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	e7fd      	b.n	8004812 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004816:	f001 f847 	bl	80058a8 <xTaskGetSchedulerState>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d102      	bne.n	8004826 <xQueueReceive+0x72>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <xQueueReceive+0x76>
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <xQueueReceive+0x78>
 800482a:	2300      	movs	r3, #0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10b      	bne.n	8004848 <xQueueReceive+0x94>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	61bb      	str	r3, [r7, #24]
}
 8004842:	bf00      	nop
 8004844:	bf00      	nop
 8004846:	e7fd      	b.n	8004844 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004848:	f001 fd9e 	bl	8006388 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800484c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004850:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01f      	beq.n	8004898 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800485c:	f000 f8f6 	bl	8004a4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	1e5a      	subs	r2, r3, #1
 8004864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004866:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00f      	beq.n	8004890 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004872:	3310      	adds	r3, #16
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fe57 	bl	8005528 <xTaskRemoveFromEventList>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004880:	4b3c      	ldr	r3, [pc, #240]	@ (8004974 <xQueueReceive+0x1c0>)
 8004882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004890:	f001 fdac 	bl	80063ec <vPortExitCritical>
				return pdPASS;
 8004894:	2301      	movs	r3, #1
 8004896:	e069      	b.n	800496c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d103      	bne.n	80048a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800489e:	f001 fda5 	bl	80063ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048a2:	2300      	movs	r3, #0
 80048a4:	e062      	b.n	800496c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048ac:	f107 0310 	add.w	r3, r7, #16
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fe9d 	bl	80055f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048b6:	2301      	movs	r3, #1
 80048b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048ba:	f001 fd97 	bl	80063ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048be:	f000 fc0d 	bl	80050dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048c2:	f001 fd61 	bl	8006388 <vPortEnterCritical>
 80048c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048cc:	b25b      	sxtb	r3, r3
 80048ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048d2:	d103      	bne.n	80048dc <xQueueReceive+0x128>
 80048d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048e2:	b25b      	sxtb	r3, r3
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048e8:	d103      	bne.n	80048f2 <xQueueReceive+0x13e>
 80048ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048f2:	f001 fd7b 	bl	80063ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048f6:	1d3a      	adds	r2, r7, #4
 80048f8:	f107 0310 	add.w	r3, r7, #16
 80048fc:	4611      	mov	r1, r2
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fe8c 	bl	800561c <xTaskCheckForTimeOut>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d123      	bne.n	8004952 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800490a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800490c:	f000 f916 	bl	8004b3c <prvIsQueueEmpty>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d017      	beq.n	8004946 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004918:	3324      	adds	r3, #36	@ 0x24
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	4611      	mov	r1, r2
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fdb0 	bl	8005484 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004924:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004926:	f000 f8b7 	bl	8004a98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800492a:	f000 fbe5 	bl	80050f8 <xTaskResumeAll>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d189      	bne.n	8004848 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004934:	4b0f      	ldr	r3, [pc, #60]	@ (8004974 <xQueueReceive+0x1c0>)
 8004936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	e780      	b.n	8004848 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004946:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004948:	f000 f8a6 	bl	8004a98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800494c:	f000 fbd4 	bl	80050f8 <xTaskResumeAll>
 8004950:	e77a      	b.n	8004848 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004952:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004954:	f000 f8a0 	bl	8004a98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004958:	f000 fbce 	bl	80050f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800495c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800495e:	f000 f8ed 	bl	8004b3c <prvIsQueueEmpty>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	f43f af6f 	beq.w	8004848 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800496a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800496c:	4618      	mov	r0, r3
 800496e:	3730      	adds	r7, #48	@ 0x30
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	e000ed04 	.word	0xe000ed04

08004978 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10d      	bne.n	80049b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d14d      	bne.n	8004a3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 ff9e 	bl	80058e4 <xTaskPriorityDisinherit>
 80049a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	609a      	str	r2, [r3, #8]
 80049b0:	e043      	b.n	8004a3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d119      	bne.n	80049ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6858      	ldr	r0, [r3, #4]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c0:	461a      	mov	r2, r3
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	f002 f81c 	bl	8006a00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d0:	441a      	add	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d32b      	bcc.n	8004a3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	e026      	b.n	8004a3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	68d8      	ldr	r0, [r3, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f4:	461a      	mov	r2, r3
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	f002 f802 	bl	8006a00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a04:	425b      	negs	r3, r3
 8004a06:	441a      	add	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d207      	bcs.n	8004a28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a20:	425b      	negs	r3, r3
 8004a22:	441a      	add	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d105      	bne.n	8004a3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004a42:	697b      	ldr	r3, [r7, #20]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d018      	beq.n	8004a90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a66:	441a      	add	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d303      	bcc.n	8004a80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68d9      	ldr	r1, [r3, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a88:	461a      	mov	r2, r3
 8004a8a:	6838      	ldr	r0, [r7, #0]
 8004a8c:	f001 ffb8 	bl	8006a00 <memcpy>
	}
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004aa0:	f001 fc72 	bl	8006388 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004aaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004aac:	e011      	b.n	8004ad2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d012      	beq.n	8004adc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3324      	adds	r3, #36	@ 0x24
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fd34 	bl	8005528 <xTaskRemoveFromEventList>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ac6:	f000 fe0d 	bl	80056e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	dce9      	bgt.n	8004aae <prvUnlockQueue+0x16>
 8004ada:	e000      	b.n	8004ade <prvUnlockQueue+0x46>
					break;
 8004adc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	22ff      	movs	r2, #255	@ 0xff
 8004ae2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004ae6:	f001 fc81 	bl	80063ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004aea:	f001 fc4d 	bl	8006388 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004af4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004af6:	e011      	b.n	8004b1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d012      	beq.n	8004b26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3310      	adds	r3, #16
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fd0f 	bl	8005528 <xTaskRemoveFromEventList>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b10:	f000 fde8 	bl	80056e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b14:	7bbb      	ldrb	r3, [r7, #14]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	dce9      	bgt.n	8004af8 <prvUnlockQueue+0x60>
 8004b24:	e000      	b.n	8004b28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	22ff      	movs	r2, #255	@ 0xff
 8004b2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004b30:	f001 fc5c 	bl	80063ec <vPortExitCritical>
}
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b44:	f001 fc20 	bl	8006388 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b50:	2301      	movs	r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e001      	b.n	8004b5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b5a:	f001 fc47 	bl	80063ec <vPortExitCritical>

	return xReturn;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b70:	f001 fc0a 	bl	8006388 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d102      	bne.n	8004b86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b80:	2301      	movs	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	e001      	b.n	8004b8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b8a:	f001 fc2f 	bl	80063ec <vPortExitCritical>

	return xReturn;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	e014      	b.n	8004bd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ba8:	4a0f      	ldr	r2, [pc, #60]	@ (8004be8 <vQueueAddToRegistry+0x50>)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10b      	bne.n	8004bcc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004bb4:	490c      	ldr	r1, [pc, #48]	@ (8004be8 <vQueueAddToRegistry+0x50>)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004be8 <vQueueAddToRegistry+0x50>)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004bca:	e006      	b.n	8004bda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b07      	cmp	r3, #7
 8004bd6:	d9e7      	bls.n	8004ba8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20000818 	.word	0x20000818

08004bec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004bfc:	f001 fbc4 	bl	8006388 <vPortEnterCritical>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c06:	b25b      	sxtb	r3, r3
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c0c:	d103      	bne.n	8004c16 <vQueueWaitForMessageRestricted+0x2a>
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c1c:	b25b      	sxtb	r3, r3
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c22:	d103      	bne.n	8004c2c <vQueueWaitForMessageRestricted+0x40>
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c2c:	f001 fbde 	bl	80063ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d106      	bne.n	8004c46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	3324      	adds	r3, #36	@ 0x24
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fc45 	bl	80054d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c46:	6978      	ldr	r0, [r7, #20]
 8004c48:	f7ff ff26 	bl	8004a98 <prvUnlockQueue>
	}
 8004c4c:	bf00      	nop
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08e      	sub	sp, #56	@ 0x38
 8004c58:	af04      	add	r7, sp, #16
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	623b      	str	r3, [r7, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	bf00      	nop
 8004c7e:	e7fd      	b.n	8004c7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10b      	bne.n	8004c9e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	61fb      	str	r3, [r7, #28]
}
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop
 8004c9c:	e7fd      	b.n	8004c9a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c9e:	235c      	movs	r3, #92	@ 0x5c
 8004ca0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b5c      	cmp	r3, #92	@ 0x5c
 8004ca6:	d00b      	beq.n	8004cc0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	61bb      	str	r3, [r7, #24]
}
 8004cba:	bf00      	nop
 8004cbc:	bf00      	nop
 8004cbe:	e7fd      	b.n	8004cbc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004cc0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01e      	beq.n	8004d06 <xTaskCreateStatic+0xb2>
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01b      	beq.n	8004d06 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cd6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9303      	str	r3, [sp, #12]
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	9302      	str	r3, [sp, #8]
 8004ce8:	f107 0314 	add.w	r3, r7, #20
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f850 	bl	8004d9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d00:	f000 f8de 	bl	8004ec0 <prvAddNewTaskToReadyList>
 8004d04:	e001      	b.n	8004d0a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d0a:	697b      	ldr	r3, [r7, #20]
	}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3728      	adds	r7, #40	@ 0x28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08c      	sub	sp, #48	@ 0x30
 8004d18:	af04      	add	r7, sp, #16
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f001 fc4f 	bl	80065cc <pvPortMalloc>
 8004d2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00e      	beq.n	8004d54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d36:	205c      	movs	r0, #92	@ 0x5c
 8004d38:	f001 fc48 	bl	80065cc <pvPortMalloc>
 8004d3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d4a:	e005      	b.n	8004d58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d4c:	6978      	ldr	r0, [r7, #20]
 8004d4e:	f001 fd0b 	bl	8006768 <vPortFree>
 8004d52:	e001      	b.n	8004d58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d54:	2300      	movs	r3, #0
 8004d56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d017      	beq.n	8004d8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d66:	88fa      	ldrh	r2, [r7, #6]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	9303      	str	r3, [sp, #12]
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	9302      	str	r3, [sp, #8]
 8004d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f80e 	bl	8004d9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d82:	69f8      	ldr	r0, [r7, #28]
 8004d84:	f000 f89c 	bl	8004ec0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	61bb      	str	r3, [r7, #24]
 8004d8c:	e002      	b.n	8004d94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d94:	69bb      	ldr	r3, [r7, #24]
	}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b088      	sub	sp, #32
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
 8004daa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	461a      	mov	r2, r3
 8004db6:	21a5      	movs	r1, #165	@ 0xa5
 8004db8:	f001 fdf6 	bl	80069a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	f023 0307 	bic.w	r3, r3, #7
 8004dd4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	617b      	str	r3, [r7, #20]
}
 8004df2:	bf00      	nop
 8004df4:	bf00      	nop
 8004df6:	e7fd      	b.n	8004df4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01f      	beq.n	8004e3e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	e012      	b.n	8004e2a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	7819      	ldrb	r1, [r3, #0]
 8004e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	4413      	add	r3, r2
 8004e12:	3334      	adds	r3, #52	@ 0x34
 8004e14:	460a      	mov	r2, r1
 8004e16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d006      	beq.n	8004e32 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	3301      	adds	r3, #1
 8004e28:	61fb      	str	r3, [r7, #28]
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	2b0f      	cmp	r3, #15
 8004e2e:	d9e9      	bls.n	8004e04 <prvInitialiseNewTask+0x66>
 8004e30:	e000      	b.n	8004e34 <prvInitialiseNewTask+0x96>
			{
				break;
 8004e32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e3c:	e003      	b.n	8004e46 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e48:	2b37      	cmp	r3, #55	@ 0x37
 8004e4a:	d901      	bls.n	8004e50 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e4c:	2337      	movs	r3, #55	@ 0x37
 8004e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e54:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e5a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5e:	2200      	movs	r2, #0
 8004e60:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e64:	3304      	adds	r3, #4
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff f966 	bl	8004138 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6e:	3318      	adds	r3, #24
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff f961 	bl	8004138 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e8a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8e:	2200      	movs	r2, #0
 8004e90:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	68f9      	ldr	r1, [r7, #12]
 8004e9e:	69b8      	ldr	r0, [r7, #24]
 8004ea0:	f001 f93e 	bl	8006120 <pxPortInitialiseStack>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eb6:	bf00      	nop
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ec8:	f001 fa5e 	bl	8006388 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8004f84 <prvAddNewTaskToReadyList+0xc4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8004f84 <prvAddNewTaskToReadyList+0xc4>)
 8004ed4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8004f88 <prvAddNewTaskToReadyList+0xc8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d109      	bne.n	8004ef2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ede:	4a2a      	ldr	r2, [pc, #168]	@ (8004f88 <prvAddNewTaskToReadyList+0xc8>)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ee4:	4b27      	ldr	r3, [pc, #156]	@ (8004f84 <prvAddNewTaskToReadyList+0xc4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d110      	bne.n	8004f0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004eec:	f000 fc1e 	bl	800572c <prvInitialiseTaskLists>
 8004ef0:	e00d      	b.n	8004f0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ef2:	4b26      	ldr	r3, [pc, #152]	@ (8004f8c <prvAddNewTaskToReadyList+0xcc>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d109      	bne.n	8004f0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004efa:	4b23      	ldr	r3, [pc, #140]	@ (8004f88 <prvAddNewTaskToReadyList+0xc8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d802      	bhi.n	8004f0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f08:	4a1f      	ldr	r2, [pc, #124]	@ (8004f88 <prvAddNewTaskToReadyList+0xc8>)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f0e:	4b20      	ldr	r3, [pc, #128]	@ (8004f90 <prvAddNewTaskToReadyList+0xd0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3301      	adds	r3, #1
 8004f14:	4a1e      	ldr	r2, [pc, #120]	@ (8004f90 <prvAddNewTaskToReadyList+0xd0>)
 8004f16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f18:	4b1d      	ldr	r3, [pc, #116]	@ (8004f90 <prvAddNewTaskToReadyList+0xd0>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f24:	4b1b      	ldr	r3, [pc, #108]	@ (8004f94 <prvAddNewTaskToReadyList+0xd4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d903      	bls.n	8004f34 <prvAddNewTaskToReadyList+0x74>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f30:	4a18      	ldr	r2, [pc, #96]	@ (8004f94 <prvAddNewTaskToReadyList+0xd4>)
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4a15      	ldr	r2, [pc, #84]	@ (8004f98 <prvAddNewTaskToReadyList+0xd8>)
 8004f42:	441a      	add	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f7ff f901 	bl	8004152 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f50:	f001 fa4c 	bl	80063ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f54:	4b0d      	ldr	r3, [pc, #52]	@ (8004f8c <prvAddNewTaskToReadyList+0xcc>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00e      	beq.n	8004f7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f88 <prvAddNewTaskToReadyList+0xc8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d207      	bcs.n	8004f7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f9c <prvAddNewTaskToReadyList+0xdc>)
 8004f6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20000d2c 	.word	0x20000d2c
 8004f88:	20000858 	.word	0x20000858
 8004f8c:	20000d38 	.word	0x20000d38
 8004f90:	20000d48 	.word	0x20000d48
 8004f94:	20000d34 	.word	0x20000d34
 8004f98:	2000085c 	.word	0x2000085c
 8004f9c:	e000ed04 	.word	0xe000ed04

08004fa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d018      	beq.n	8004fe4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004fb2:	4b14      	ldr	r3, [pc, #80]	@ (8005004 <vTaskDelay+0x64>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <vTaskDelay+0x32>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	60bb      	str	r3, [r7, #8]
}
 8004fcc:	bf00      	nop
 8004fce:	bf00      	nop
 8004fd0:	e7fd      	b.n	8004fce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004fd2:	f000 f883 	bl	80050dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fcf3 	bl	80059c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004fde:	f000 f88b 	bl	80050f8 <xTaskResumeAll>
 8004fe2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d107      	bne.n	8004ffa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004fea:	4b07      	ldr	r3, [pc, #28]	@ (8005008 <vTaskDelay+0x68>)
 8004fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000d54 	.word	0x20000d54
 8005008:	e000ed04 	.word	0xe000ed04

0800500c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	@ 0x28
 8005010:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800501a:	463a      	mov	r2, r7
 800501c:	1d39      	adds	r1, r7, #4
 800501e:	f107 0308 	add.w	r3, r7, #8
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff f834 	bl	8004090 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005028:	6839      	ldr	r1, [r7, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	9202      	str	r2, [sp, #8]
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	2300      	movs	r3, #0
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	2300      	movs	r3, #0
 8005038:	460a      	mov	r2, r1
 800503a:	4922      	ldr	r1, [pc, #136]	@ (80050c4 <vTaskStartScheduler+0xb8>)
 800503c:	4822      	ldr	r0, [pc, #136]	@ (80050c8 <vTaskStartScheduler+0xbc>)
 800503e:	f7ff fe09 	bl	8004c54 <xTaskCreateStatic>
 8005042:	4603      	mov	r3, r0
 8005044:	4a21      	ldr	r2, [pc, #132]	@ (80050cc <vTaskStartScheduler+0xc0>)
 8005046:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005048:	4b20      	ldr	r3, [pc, #128]	@ (80050cc <vTaskStartScheduler+0xc0>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005050:	2301      	movs	r3, #1
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	e001      	b.n	800505a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d102      	bne.n	8005066 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005060:	f000 fd04 	bl	8005a6c <xTimerCreateTimerTask>
 8005064:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d116      	bne.n	800509a <vTaskStartScheduler+0x8e>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	613b      	str	r3, [r7, #16]
}
 800507e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005080:	4b13      	ldr	r3, [pc, #76]	@ (80050d0 <vTaskStartScheduler+0xc4>)
 8005082:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005086:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005088:	4b12      	ldr	r3, [pc, #72]	@ (80050d4 <vTaskStartScheduler+0xc8>)
 800508a:	2201      	movs	r2, #1
 800508c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800508e:	4b12      	ldr	r3, [pc, #72]	@ (80050d8 <vTaskStartScheduler+0xcc>)
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005094:	f001 f8d4 	bl	8006240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005098:	e00f      	b.n	80050ba <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050a0:	d10b      	bne.n	80050ba <vTaskStartScheduler+0xae>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	60fb      	str	r3, [r7, #12]
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop
 80050b8:	e7fd      	b.n	80050b6 <vTaskStartScheduler+0xaa>
}
 80050ba:	bf00      	nop
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	08006a54 	.word	0x08006a54
 80050c8:	080056fd 	.word	0x080056fd
 80050cc:	20000d50 	.word	0x20000d50
 80050d0:	20000d4c 	.word	0x20000d4c
 80050d4:	20000d38 	.word	0x20000d38
 80050d8:	20000d30 	.word	0x20000d30

080050dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80050e0:	4b04      	ldr	r3, [pc, #16]	@ (80050f4 <vTaskSuspendAll+0x18>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	4a03      	ldr	r2, [pc, #12]	@ (80050f4 <vTaskSuspendAll+0x18>)
 80050e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80050ea:	bf00      	nop
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	20000d54 	.word	0x20000d54

080050f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005106:	4b42      	ldr	r3, [pc, #264]	@ (8005210 <xTaskResumeAll+0x118>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10b      	bne.n	8005126 <xTaskResumeAll+0x2e>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	603b      	str	r3, [r7, #0]
}
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	e7fd      	b.n	8005122 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005126:	f001 f92f 	bl	8006388 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800512a:	4b39      	ldr	r3, [pc, #228]	@ (8005210 <xTaskResumeAll+0x118>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3b01      	subs	r3, #1
 8005130:	4a37      	ldr	r2, [pc, #220]	@ (8005210 <xTaskResumeAll+0x118>)
 8005132:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005134:	4b36      	ldr	r3, [pc, #216]	@ (8005210 <xTaskResumeAll+0x118>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d162      	bne.n	8005202 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800513c:	4b35      	ldr	r3, [pc, #212]	@ (8005214 <xTaskResumeAll+0x11c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d05e      	beq.n	8005202 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005144:	e02f      	b.n	80051a6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005146:	4b34      	ldr	r3, [pc, #208]	@ (8005218 <xTaskResumeAll+0x120>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3318      	adds	r3, #24
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff f85a 	bl	800420c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	3304      	adds	r3, #4
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff f855 	bl	800420c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005166:	4b2d      	ldr	r3, [pc, #180]	@ (800521c <xTaskResumeAll+0x124>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d903      	bls.n	8005176 <xTaskResumeAll+0x7e>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005172:	4a2a      	ldr	r2, [pc, #168]	@ (800521c <xTaskResumeAll+0x124>)
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4a27      	ldr	r2, [pc, #156]	@ (8005220 <xTaskResumeAll+0x128>)
 8005184:	441a      	add	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3304      	adds	r3, #4
 800518a:	4619      	mov	r1, r3
 800518c:	4610      	mov	r0, r2
 800518e:	f7fe ffe0 	bl	8004152 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005196:	4b23      	ldr	r3, [pc, #140]	@ (8005224 <xTaskResumeAll+0x12c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519c:	429a      	cmp	r2, r3
 800519e:	d302      	bcc.n	80051a6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80051a0:	4b21      	ldr	r3, [pc, #132]	@ (8005228 <xTaskResumeAll+0x130>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005218 <xTaskResumeAll+0x120>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1cb      	bne.n	8005146 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051b4:	f000 fb58 	bl	8005868 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051b8:	4b1c      	ldr	r3, [pc, #112]	@ (800522c <xTaskResumeAll+0x134>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d010      	beq.n	80051e6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051c4:	f000 f846 	bl	8005254 <xTaskIncrementTick>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80051ce:	4b16      	ldr	r3, [pc, #88]	@ (8005228 <xTaskResumeAll+0x130>)
 80051d0:	2201      	movs	r2, #1
 80051d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1f1      	bne.n	80051c4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80051e0:	4b12      	ldr	r3, [pc, #72]	@ (800522c <xTaskResumeAll+0x134>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051e6:	4b10      	ldr	r3, [pc, #64]	@ (8005228 <xTaskResumeAll+0x130>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d009      	beq.n	8005202 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051ee:	2301      	movs	r3, #1
 80051f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005230 <xTaskResumeAll+0x138>)
 80051f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005202:	f001 f8f3 	bl	80063ec <vPortExitCritical>

	return xAlreadyYielded;
 8005206:	68bb      	ldr	r3, [r7, #8]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20000d54 	.word	0x20000d54
 8005214:	20000d2c 	.word	0x20000d2c
 8005218:	20000cec 	.word	0x20000cec
 800521c:	20000d34 	.word	0x20000d34
 8005220:	2000085c 	.word	0x2000085c
 8005224:	20000858 	.word	0x20000858
 8005228:	20000d40 	.word	0x20000d40
 800522c:	20000d3c 	.word	0x20000d3c
 8005230:	e000ed04 	.word	0xe000ed04

08005234 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800523a:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <xTaskGetTickCount+0x1c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005240:	687b      	ldr	r3, [r7, #4]
}
 8005242:	4618      	mov	r0, r3
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	20000d30 	.word	0x20000d30

08005254 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800525e:	4b4f      	ldr	r3, [pc, #316]	@ (800539c <xTaskIncrementTick+0x148>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f040 8090 	bne.w	8005388 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005268:	4b4d      	ldr	r3, [pc, #308]	@ (80053a0 <xTaskIncrementTick+0x14c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3301      	adds	r3, #1
 800526e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005270:	4a4b      	ldr	r2, [pc, #300]	@ (80053a0 <xTaskIncrementTick+0x14c>)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d121      	bne.n	80052c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800527c:	4b49      	ldr	r3, [pc, #292]	@ (80053a4 <xTaskIncrementTick+0x150>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00b      	beq.n	800529e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	603b      	str	r3, [r7, #0]
}
 8005298:	bf00      	nop
 800529a:	bf00      	nop
 800529c:	e7fd      	b.n	800529a <xTaskIncrementTick+0x46>
 800529e:	4b41      	ldr	r3, [pc, #260]	@ (80053a4 <xTaskIncrementTick+0x150>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	4b40      	ldr	r3, [pc, #256]	@ (80053a8 <xTaskIncrementTick+0x154>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a3e      	ldr	r2, [pc, #248]	@ (80053a4 <xTaskIncrementTick+0x150>)
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	4a3e      	ldr	r2, [pc, #248]	@ (80053a8 <xTaskIncrementTick+0x154>)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	4b3e      	ldr	r3, [pc, #248]	@ (80053ac <xTaskIncrementTick+0x158>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3301      	adds	r3, #1
 80052b8:	4a3c      	ldr	r2, [pc, #240]	@ (80053ac <xTaskIncrementTick+0x158>)
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	f000 fad4 	bl	8005868 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052c0:	4b3b      	ldr	r3, [pc, #236]	@ (80053b0 <xTaskIncrementTick+0x15c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d349      	bcc.n	800535e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ca:	4b36      	ldr	r3, [pc, #216]	@ (80053a4 <xTaskIncrementTick+0x150>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d104      	bne.n	80052de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d4:	4b36      	ldr	r3, [pc, #216]	@ (80053b0 <xTaskIncrementTick+0x15c>)
 80052d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052da:	601a      	str	r2, [r3, #0]
					break;
 80052dc:	e03f      	b.n	800535e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052de:	4b31      	ldr	r3, [pc, #196]	@ (80053a4 <xTaskIncrementTick+0x150>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d203      	bcs.n	80052fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052f6:	4a2e      	ldr	r2, [pc, #184]	@ (80053b0 <xTaskIncrementTick+0x15c>)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052fc:	e02f      	b.n	800535e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	3304      	adds	r3, #4
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe ff82 	bl	800420c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530c:	2b00      	cmp	r3, #0
 800530e:	d004      	beq.n	800531a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	3318      	adds	r3, #24
 8005314:	4618      	mov	r0, r3
 8005316:	f7fe ff79 	bl	800420c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800531e:	4b25      	ldr	r3, [pc, #148]	@ (80053b4 <xTaskIncrementTick+0x160>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d903      	bls.n	800532e <xTaskIncrementTick+0xda>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532a:	4a22      	ldr	r2, [pc, #136]	@ (80053b4 <xTaskIncrementTick+0x160>)
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4a1f      	ldr	r2, [pc, #124]	@ (80053b8 <xTaskIncrementTick+0x164>)
 800533c:	441a      	add	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	3304      	adds	r3, #4
 8005342:	4619      	mov	r1, r3
 8005344:	4610      	mov	r0, r2
 8005346:	f7fe ff04 	bl	8004152 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800534e:	4b1b      	ldr	r3, [pc, #108]	@ (80053bc <xTaskIncrementTick+0x168>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005354:	429a      	cmp	r2, r3
 8005356:	d3b8      	bcc.n	80052ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005358:	2301      	movs	r3, #1
 800535a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800535c:	e7b5      	b.n	80052ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800535e:	4b17      	ldr	r3, [pc, #92]	@ (80053bc <xTaskIncrementTick+0x168>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005364:	4914      	ldr	r1, [pc, #80]	@ (80053b8 <xTaskIncrementTick+0x164>)
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d901      	bls.n	800537a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005376:	2301      	movs	r3, #1
 8005378:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800537a:	4b11      	ldr	r3, [pc, #68]	@ (80053c0 <xTaskIncrementTick+0x16c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005382:	2301      	movs	r3, #1
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	e004      	b.n	8005392 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005388:	4b0e      	ldr	r3, [pc, #56]	@ (80053c4 <xTaskIncrementTick+0x170>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3301      	adds	r3, #1
 800538e:	4a0d      	ldr	r2, [pc, #52]	@ (80053c4 <xTaskIncrementTick+0x170>)
 8005390:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005392:	697b      	ldr	r3, [r7, #20]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000d54 	.word	0x20000d54
 80053a0:	20000d30 	.word	0x20000d30
 80053a4:	20000ce4 	.word	0x20000ce4
 80053a8:	20000ce8 	.word	0x20000ce8
 80053ac:	20000d44 	.word	0x20000d44
 80053b0:	20000d4c 	.word	0x20000d4c
 80053b4:	20000d34 	.word	0x20000d34
 80053b8:	2000085c 	.word	0x2000085c
 80053bc:	20000858 	.word	0x20000858
 80053c0:	20000d40 	.word	0x20000d40
 80053c4:	20000d3c 	.word	0x20000d3c

080053c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053ce:	4b28      	ldr	r3, [pc, #160]	@ (8005470 <vTaskSwitchContext+0xa8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053d6:	4b27      	ldr	r3, [pc, #156]	@ (8005474 <vTaskSwitchContext+0xac>)
 80053d8:	2201      	movs	r2, #1
 80053da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053dc:	e042      	b.n	8005464 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80053de:	4b25      	ldr	r3, [pc, #148]	@ (8005474 <vTaskSwitchContext+0xac>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e4:	4b24      	ldr	r3, [pc, #144]	@ (8005478 <vTaskSwitchContext+0xb0>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	e011      	b.n	8005410 <vTaskSwitchContext+0x48>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10b      	bne.n	800540a <vTaskSwitchContext+0x42>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	607b      	str	r3, [r7, #4]
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	e7fd      	b.n	8005406 <vTaskSwitchContext+0x3e>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	3b01      	subs	r3, #1
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	491a      	ldr	r1, [pc, #104]	@ (800547c <vTaskSwitchContext+0xb4>)
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0e3      	beq.n	80053ec <vTaskSwitchContext+0x24>
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4a13      	ldr	r2, [pc, #76]	@ (800547c <vTaskSwitchContext+0xb4>)
 8005430:	4413      	add	r3, r2
 8005432:	60bb      	str	r3, [r7, #8]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	605a      	str	r2, [r3, #4]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	3308      	adds	r3, #8
 8005446:	429a      	cmp	r2, r3
 8005448:	d104      	bne.n	8005454 <vTaskSwitchContext+0x8c>
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	605a      	str	r2, [r3, #4]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	4a09      	ldr	r2, [pc, #36]	@ (8005480 <vTaskSwitchContext+0xb8>)
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	4a06      	ldr	r2, [pc, #24]	@ (8005478 <vTaskSwitchContext+0xb0>)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6013      	str	r3, [r2, #0]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	20000d54 	.word	0x20000d54
 8005474:	20000d40 	.word	0x20000d40
 8005478:	20000d34 	.word	0x20000d34
 800547c:	2000085c 	.word	0x2000085c
 8005480:	20000858 	.word	0x20000858

08005484 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10b      	bne.n	80054ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	60fb      	str	r3, [r7, #12]
}
 80054a6:	bf00      	nop
 80054a8:	bf00      	nop
 80054aa:	e7fd      	b.n	80054a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054ac:	4b07      	ldr	r3, [pc, #28]	@ (80054cc <vTaskPlaceOnEventList+0x48>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3318      	adds	r3, #24
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fe fe70 	bl	800419a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054ba:	2101      	movs	r1, #1
 80054bc:	6838      	ldr	r0, [r7, #0]
 80054be:	f000 fa81 	bl	80059c4 <prvAddCurrentTaskToDelayedList>
}
 80054c2:	bf00      	nop
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20000858 	.word	0x20000858

080054d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	617b      	str	r3, [r7, #20]
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop
 80054f8:	e7fd      	b.n	80054f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005524 <vTaskPlaceOnEventListRestricted+0x54>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3318      	adds	r3, #24
 8005500:	4619      	mov	r1, r3
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f7fe fe25 	bl	8004152 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800550e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005512:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	68b8      	ldr	r0, [r7, #8]
 8005518:	f000 fa54 	bl	80059c4 <prvAddCurrentTaskToDelayedList>
	}
 800551c:	bf00      	nop
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20000858 	.word	0x20000858

08005528 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10b      	bne.n	8005556 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	60fb      	str	r3, [r7, #12]
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	e7fd      	b.n	8005552 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	3318      	adds	r3, #24
 800555a:	4618      	mov	r0, r3
 800555c:	f7fe fe56 	bl	800420c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005560:	4b1d      	ldr	r3, [pc, #116]	@ (80055d8 <xTaskRemoveFromEventList+0xb0>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d11d      	bne.n	80055a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	3304      	adds	r3, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe fe4d 	bl	800420c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005576:	4b19      	ldr	r3, [pc, #100]	@ (80055dc <xTaskRemoveFromEventList+0xb4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d903      	bls.n	8005586 <xTaskRemoveFromEventList+0x5e>
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005582:	4a16      	ldr	r2, [pc, #88]	@ (80055dc <xTaskRemoveFromEventList+0xb4>)
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558a:	4613      	mov	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4a13      	ldr	r2, [pc, #76]	@ (80055e0 <xTaskRemoveFromEventList+0xb8>)
 8005594:	441a      	add	r2, r3
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	3304      	adds	r3, #4
 800559a:	4619      	mov	r1, r3
 800559c:	4610      	mov	r0, r2
 800559e:	f7fe fdd8 	bl	8004152 <vListInsertEnd>
 80055a2:	e005      	b.n	80055b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	3318      	adds	r3, #24
 80055a8:	4619      	mov	r1, r3
 80055aa:	480e      	ldr	r0, [pc, #56]	@ (80055e4 <xTaskRemoveFromEventList+0xbc>)
 80055ac:	f7fe fdd1 	bl	8004152 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b4:	4b0c      	ldr	r3, [pc, #48]	@ (80055e8 <xTaskRemoveFromEventList+0xc0>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d905      	bls.n	80055ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055be:	2301      	movs	r3, #1
 80055c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055c2:	4b0a      	ldr	r3, [pc, #40]	@ (80055ec <xTaskRemoveFromEventList+0xc4>)
 80055c4:	2201      	movs	r2, #1
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	e001      	b.n	80055ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80055ce:	697b      	ldr	r3, [r7, #20]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20000d54 	.word	0x20000d54
 80055dc:	20000d34 	.word	0x20000d34
 80055e0:	2000085c 	.word	0x2000085c
 80055e4:	20000cec 	.word	0x20000cec
 80055e8:	20000858 	.word	0x20000858
 80055ec:	20000d40 	.word	0x20000d40

080055f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055f8:	4b06      	ldr	r3, [pc, #24]	@ (8005614 <vTaskInternalSetTimeOutState+0x24>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005600:	4b05      	ldr	r3, [pc, #20]	@ (8005618 <vTaskInternalSetTimeOutState+0x28>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	605a      	str	r2, [r3, #4]
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	20000d44 	.word	0x20000d44
 8005618:	20000d30 	.word	0x20000d30

0800561c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10b      	bne.n	8005644 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	613b      	str	r3, [r7, #16]
}
 800563e:	bf00      	nop
 8005640:	bf00      	nop
 8005642:	e7fd      	b.n	8005640 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10b      	bne.n	8005662 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800564a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	60fb      	str	r3, [r7, #12]
}
 800565c:	bf00      	nop
 800565e:	bf00      	nop
 8005660:	e7fd      	b.n	800565e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005662:	f000 fe91 	bl	8006388 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005666:	4b1d      	ldr	r3, [pc, #116]	@ (80056dc <xTaskCheckForTimeOut+0xc0>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800567e:	d102      	bne.n	8005686 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005680:	2300      	movs	r3, #0
 8005682:	61fb      	str	r3, [r7, #28]
 8005684:	e023      	b.n	80056ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b15      	ldr	r3, [pc, #84]	@ (80056e0 <xTaskCheckForTimeOut+0xc4>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d007      	beq.n	80056a2 <xTaskCheckForTimeOut+0x86>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	429a      	cmp	r2, r3
 800569a:	d302      	bcc.n	80056a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800569c:	2301      	movs	r3, #1
 800569e:	61fb      	str	r3, [r7, #28]
 80056a0:	e015      	b.n	80056ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d20b      	bcs.n	80056c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	1ad2      	subs	r2, r2, r3
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff ff99 	bl	80055f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056be:	2300      	movs	r3, #0
 80056c0:	61fb      	str	r3, [r7, #28]
 80056c2:	e004      	b.n	80056ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056ca:	2301      	movs	r3, #1
 80056cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056ce:	f000 fe8d 	bl	80063ec <vPortExitCritical>

	return xReturn;
 80056d2:	69fb      	ldr	r3, [r7, #28]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3720      	adds	r7, #32
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20000d30 	.word	0x20000d30
 80056e0:	20000d44 	.word	0x20000d44

080056e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056e8:	4b03      	ldr	r3, [pc, #12]	@ (80056f8 <vTaskMissedYield+0x14>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	601a      	str	r2, [r3, #0]
}
 80056ee:	bf00      	nop
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	20000d40 	.word	0x20000d40

080056fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005704:	f000 f852 	bl	80057ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005708:	4b06      	ldr	r3, [pc, #24]	@ (8005724 <prvIdleTask+0x28>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d9f9      	bls.n	8005704 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005710:	4b05      	ldr	r3, [pc, #20]	@ (8005728 <prvIdleTask+0x2c>)
 8005712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005720:	e7f0      	b.n	8005704 <prvIdleTask+0x8>
 8005722:	bf00      	nop
 8005724:	2000085c 	.word	0x2000085c
 8005728:	e000ed04 	.word	0xe000ed04

0800572c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005732:	2300      	movs	r3, #0
 8005734:	607b      	str	r3, [r7, #4]
 8005736:	e00c      	b.n	8005752 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4a12      	ldr	r2, [pc, #72]	@ (800578c <prvInitialiseTaskLists+0x60>)
 8005744:	4413      	add	r3, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f7fe fcd6 	bl	80040f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3301      	adds	r3, #1
 8005750:	607b      	str	r3, [r7, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b37      	cmp	r3, #55	@ 0x37
 8005756:	d9ef      	bls.n	8005738 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005758:	480d      	ldr	r0, [pc, #52]	@ (8005790 <prvInitialiseTaskLists+0x64>)
 800575a:	f7fe fccd 	bl	80040f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800575e:	480d      	ldr	r0, [pc, #52]	@ (8005794 <prvInitialiseTaskLists+0x68>)
 8005760:	f7fe fcca 	bl	80040f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005764:	480c      	ldr	r0, [pc, #48]	@ (8005798 <prvInitialiseTaskLists+0x6c>)
 8005766:	f7fe fcc7 	bl	80040f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800576a:	480c      	ldr	r0, [pc, #48]	@ (800579c <prvInitialiseTaskLists+0x70>)
 800576c:	f7fe fcc4 	bl	80040f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005770:	480b      	ldr	r0, [pc, #44]	@ (80057a0 <prvInitialiseTaskLists+0x74>)
 8005772:	f7fe fcc1 	bl	80040f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005776:	4b0b      	ldr	r3, [pc, #44]	@ (80057a4 <prvInitialiseTaskLists+0x78>)
 8005778:	4a05      	ldr	r2, [pc, #20]	@ (8005790 <prvInitialiseTaskLists+0x64>)
 800577a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800577c:	4b0a      	ldr	r3, [pc, #40]	@ (80057a8 <prvInitialiseTaskLists+0x7c>)
 800577e:	4a05      	ldr	r2, [pc, #20]	@ (8005794 <prvInitialiseTaskLists+0x68>)
 8005780:	601a      	str	r2, [r3, #0]
}
 8005782:	bf00      	nop
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	2000085c 	.word	0x2000085c
 8005790:	20000cbc 	.word	0x20000cbc
 8005794:	20000cd0 	.word	0x20000cd0
 8005798:	20000cec 	.word	0x20000cec
 800579c:	20000d00 	.word	0x20000d00
 80057a0:	20000d18 	.word	0x20000d18
 80057a4:	20000ce4 	.word	0x20000ce4
 80057a8:	20000ce8 	.word	0x20000ce8

080057ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057b2:	e019      	b.n	80057e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057b4:	f000 fde8 	bl	8006388 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b8:	4b10      	ldr	r3, [pc, #64]	@ (80057fc <prvCheckTasksWaitingTermination+0x50>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fe fd21 	bl	800420c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005800 <prvCheckTasksWaitingTermination+0x54>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3b01      	subs	r3, #1
 80057d0:	4a0b      	ldr	r2, [pc, #44]	@ (8005800 <prvCheckTasksWaitingTermination+0x54>)
 80057d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005804 <prvCheckTasksWaitingTermination+0x58>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3b01      	subs	r3, #1
 80057da:	4a0a      	ldr	r2, [pc, #40]	@ (8005804 <prvCheckTasksWaitingTermination+0x58>)
 80057dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057de:	f000 fe05 	bl	80063ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f810 	bl	8005808 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057e8:	4b06      	ldr	r3, [pc, #24]	@ (8005804 <prvCheckTasksWaitingTermination+0x58>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e1      	bne.n	80057b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000d00 	.word	0x20000d00
 8005800:	20000d2c 	.word	0x20000d2c
 8005804:	20000d14 	.word	0x20000d14

08005808 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005816:	2b00      	cmp	r3, #0
 8005818:	d108      	bne.n	800582c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581e:	4618      	mov	r0, r3
 8005820:	f000 ffa2 	bl	8006768 <vPortFree>
				vPortFree( pxTCB );
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 ff9f 	bl	8006768 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800582a:	e019      	b.n	8005860 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005832:	2b01      	cmp	r3, #1
 8005834:	d103      	bne.n	800583e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 ff96 	bl	8006768 <vPortFree>
	}
 800583c:	e010      	b.n	8005860 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005844:	2b02      	cmp	r3, #2
 8005846:	d00b      	beq.n	8005860 <prvDeleteTCB+0x58>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	60fb      	str	r3, [r7, #12]
}
 800585a:	bf00      	nop
 800585c:	bf00      	nop
 800585e:	e7fd      	b.n	800585c <prvDeleteTCB+0x54>
	}
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800586e:	4b0c      	ldr	r3, [pc, #48]	@ (80058a0 <prvResetNextTaskUnblockTime+0x38>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d104      	bne.n	8005882 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005878:	4b0a      	ldr	r3, [pc, #40]	@ (80058a4 <prvResetNextTaskUnblockTime+0x3c>)
 800587a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800587e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005880:	e008      	b.n	8005894 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005882:	4b07      	ldr	r3, [pc, #28]	@ (80058a0 <prvResetNextTaskUnblockTime+0x38>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4a04      	ldr	r2, [pc, #16]	@ (80058a4 <prvResetNextTaskUnblockTime+0x3c>)
 8005892:	6013      	str	r3, [r2, #0]
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	20000ce4 	.word	0x20000ce4
 80058a4:	20000d4c 	.word	0x20000d4c

080058a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058ae:	4b0b      	ldr	r3, [pc, #44]	@ (80058dc <xTaskGetSchedulerState+0x34>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d102      	bne.n	80058bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058b6:	2301      	movs	r3, #1
 80058b8:	607b      	str	r3, [r7, #4]
 80058ba:	e008      	b.n	80058ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058bc:	4b08      	ldr	r3, [pc, #32]	@ (80058e0 <xTaskGetSchedulerState+0x38>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d102      	bne.n	80058ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058c4:	2302      	movs	r3, #2
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	e001      	b.n	80058ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058ca:	2300      	movs	r3, #0
 80058cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058ce:	687b      	ldr	r3, [r7, #4]
	}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	20000d38 	.word	0x20000d38
 80058e0:	20000d54 	.word	0x20000d54

080058e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d058      	beq.n	80059ac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058fa:	4b2f      	ldr	r3, [pc, #188]	@ (80059b8 <xTaskPriorityDisinherit+0xd4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	429a      	cmp	r2, r3
 8005902:	d00b      	beq.n	800591c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	60fb      	str	r3, [r7, #12]
}
 8005916:	bf00      	nop
 8005918:	bf00      	nop
 800591a:	e7fd      	b.n	8005918 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10b      	bne.n	800593c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	60bb      	str	r3, [r7, #8]
}
 8005936:	bf00      	nop
 8005938:	bf00      	nop
 800593a:	e7fd      	b.n	8005938 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005940:	1e5a      	subs	r2, r3, #1
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800594e:	429a      	cmp	r2, r3
 8005950:	d02c      	beq.n	80059ac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005956:	2b00      	cmp	r3, #0
 8005958:	d128      	bne.n	80059ac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	3304      	adds	r3, #4
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fc54 	bl	800420c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800597c:	4b0f      	ldr	r3, [pc, #60]	@ (80059bc <xTaskPriorityDisinherit+0xd8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d903      	bls.n	800598c <xTaskPriorityDisinherit+0xa8>
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005988:	4a0c      	ldr	r2, [pc, #48]	@ (80059bc <xTaskPriorityDisinherit+0xd8>)
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4a09      	ldr	r2, [pc, #36]	@ (80059c0 <xTaskPriorityDisinherit+0xdc>)
 800599a:	441a      	add	r2, r3
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	3304      	adds	r3, #4
 80059a0:	4619      	mov	r1, r3
 80059a2:	4610      	mov	r0, r2
 80059a4:	f7fe fbd5 	bl	8004152 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059a8:	2301      	movs	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059ac:	697b      	ldr	r3, [r7, #20]
	}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000858 	.word	0x20000858
 80059bc:	20000d34 	.word	0x20000d34
 80059c0:	2000085c 	.word	0x2000085c

080059c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059ce:	4b21      	ldr	r3, [pc, #132]	@ (8005a54 <prvAddCurrentTaskToDelayedList+0x90>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059d4:	4b20      	ldr	r3, [pc, #128]	@ (8005a58 <prvAddCurrentTaskToDelayedList+0x94>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3304      	adds	r3, #4
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe fc16 	bl	800420c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059e6:	d10a      	bne.n	80059fe <prvAddCurrentTaskToDelayedList+0x3a>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d007      	beq.n	80059fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005a58 <prvAddCurrentTaskToDelayedList+0x94>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4619      	mov	r1, r3
 80059f6:	4819      	ldr	r0, [pc, #100]	@ (8005a5c <prvAddCurrentTaskToDelayedList+0x98>)
 80059f8:	f7fe fbab 	bl	8004152 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059fc:	e026      	b.n	8005a4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4413      	add	r3, r2
 8005a04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a06:	4b14      	ldr	r3, [pc, #80]	@ (8005a58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d209      	bcs.n	8005a2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a16:	4b12      	ldr	r3, [pc, #72]	@ (8005a60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4619      	mov	r1, r3
 8005a22:	4610      	mov	r0, r2
 8005a24:	f7fe fbb9 	bl	800419a <vListInsert>
}
 8005a28:	e010      	b.n	8005a4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8005a64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3304      	adds	r3, #4
 8005a34:	4619      	mov	r1, r3
 8005a36:	4610      	mov	r0, r2
 8005a38:	f7fe fbaf 	bl	800419a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d202      	bcs.n	8005a4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a46:	4a08      	ldr	r2, [pc, #32]	@ (8005a68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6013      	str	r3, [r2, #0]
}
 8005a4c:	bf00      	nop
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20000d30 	.word	0x20000d30
 8005a58:	20000858 	.word	0x20000858
 8005a5c:	20000d18 	.word	0x20000d18
 8005a60:	20000ce8 	.word	0x20000ce8
 8005a64:	20000ce4 	.word	0x20000ce4
 8005a68:	20000d4c 	.word	0x20000d4c

08005a6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08a      	sub	sp, #40	@ 0x28
 8005a70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a76:	f000 fb13 	bl	80060a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8005af0 <xTimerCreateTimerTask+0x84>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d021      	beq.n	8005ac6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a8a:	1d3a      	adds	r2, r7, #4
 8005a8c:	f107 0108 	add.w	r1, r7, #8
 8005a90:	f107 030c 	add.w	r3, r7, #12
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fe fb15 	bl	80040c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	9202      	str	r2, [sp, #8]
 8005aa2:	9301      	str	r3, [sp, #4]
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	460a      	mov	r2, r1
 8005aac:	4911      	ldr	r1, [pc, #68]	@ (8005af4 <xTimerCreateTimerTask+0x88>)
 8005aae:	4812      	ldr	r0, [pc, #72]	@ (8005af8 <xTimerCreateTimerTask+0x8c>)
 8005ab0:	f7ff f8d0 	bl	8004c54 <xTaskCreateStatic>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	4a11      	ldr	r2, [pc, #68]	@ (8005afc <xTimerCreateTimerTask+0x90>)
 8005ab8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005aba:	4b10      	ldr	r3, [pc, #64]	@ (8005afc <xTimerCreateTimerTask+0x90>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10b      	bne.n	8005ae4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	613b      	str	r3, [r7, #16]
}
 8005ade:	bf00      	nop
 8005ae0:	bf00      	nop
 8005ae2:	e7fd      	b.n	8005ae0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ae4:	697b      	ldr	r3, [r7, #20]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000d88 	.word	0x20000d88
 8005af4:	08006a5c 	.word	0x08006a5c
 8005af8:	08005c39 	.word	0x08005c39
 8005afc:	20000d8c 	.word	0x20000d8c

08005b00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08a      	sub	sp, #40	@ 0x28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10b      	bne.n	8005b30 <xTimerGenericCommand+0x30>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	623b      	str	r3, [r7, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	bf00      	nop
 8005b2e:	e7fd      	b.n	8005b2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b30:	4b19      	ldr	r3, [pc, #100]	@ (8005b98 <xTimerGenericCommand+0x98>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d02a      	beq.n	8005b8e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b05      	cmp	r3, #5
 8005b48:	dc18      	bgt.n	8005b7c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b4a:	f7ff fead 	bl	80058a8 <xTaskGetSchedulerState>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d109      	bne.n	8005b68 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b54:	4b10      	ldr	r3, [pc, #64]	@ (8005b98 <xTimerGenericCommand+0x98>)
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	f107 0110 	add.w	r1, r7, #16
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b60:	f7fe fc88 	bl	8004474 <xQueueGenericSend>
 8005b64:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b66:	e012      	b.n	8005b8e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b68:	4b0b      	ldr	r3, [pc, #44]	@ (8005b98 <xTimerGenericCommand+0x98>)
 8005b6a:	6818      	ldr	r0, [r3, #0]
 8005b6c:	f107 0110 	add.w	r1, r7, #16
 8005b70:	2300      	movs	r3, #0
 8005b72:	2200      	movs	r2, #0
 8005b74:	f7fe fc7e 	bl	8004474 <xQueueGenericSend>
 8005b78:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b7a:	e008      	b.n	8005b8e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b7c:	4b06      	ldr	r3, [pc, #24]	@ (8005b98 <xTimerGenericCommand+0x98>)
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	f107 0110 	add.w	r1, r7, #16
 8005b84:	2300      	movs	r3, #0
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	f7fe fd76 	bl	8004678 <xQueueGenericSendFromISR>
 8005b8c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3728      	adds	r7, #40	@ 0x28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000d88 	.word	0x20000d88

08005b9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba6:	4b23      	ldr	r3, [pc, #140]	@ (8005c34 <prvProcessExpiredTimer+0x98>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fe fb29 	bl	800420c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d023      	beq.n	8005c10 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	699a      	ldr	r2, [r3, #24]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	18d1      	adds	r1, r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	6978      	ldr	r0, [r7, #20]
 8005bd6:	f000 f8d5 	bl	8005d84 <prvInsertTimerInActiveList>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d020      	beq.n	8005c22 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005be0:	2300      	movs	r3, #0
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	2300      	movs	r3, #0
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	2100      	movs	r1, #0
 8005bea:	6978      	ldr	r0, [r7, #20]
 8005bec:	f7ff ff88 	bl	8005b00 <xTimerGenericCommand>
 8005bf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d114      	bne.n	8005c22 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	60fb      	str	r3, [r7, #12]
}
 8005c0a:	bf00      	nop
 8005c0c:	bf00      	nop
 8005c0e:	e7fd      	b.n	8005c0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c16:	f023 0301 	bic.w	r3, r3, #1
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	6978      	ldr	r0, [r7, #20]
 8005c28:	4798      	blx	r3
}
 8005c2a:	bf00      	nop
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000d80 	.word	0x20000d80

08005c38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c40:	f107 0308 	add.w	r3, r7, #8
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 f859 	bl	8005cfc <prvGetNextExpireTime>
 8005c4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 f805 	bl	8005c60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c56:	f000 f8d7 	bl	8005e08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c5a:	bf00      	nop
 8005c5c:	e7f0      	b.n	8005c40 <prvTimerTask+0x8>
	...

08005c60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c6a:	f7ff fa37 	bl	80050dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c6e:	f107 0308 	add.w	r3, r7, #8
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 f866 	bl	8005d44 <prvSampleTimeNow>
 8005c78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d130      	bne.n	8005ce2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10a      	bne.n	8005c9c <prvProcessTimerOrBlockTask+0x3c>
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d806      	bhi.n	8005c9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c8e:	f7ff fa33 	bl	80050f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c92:	68f9      	ldr	r1, [r7, #12]
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff ff81 	bl	8005b9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c9a:	e024      	b.n	8005ce6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d008      	beq.n	8005cb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ca2:	4b13      	ldr	r3, [pc, #76]	@ (8005cf0 <prvProcessTimerOrBlockTask+0x90>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <prvProcessTimerOrBlockTask+0x50>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <prvProcessTimerOrBlockTask+0x52>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf4 <prvProcessTimerOrBlockTask+0x94>)
 8005cb6:	6818      	ldr	r0, [r3, #0]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	f7fe ff93 	bl	8004bec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cc6:	f7ff fa17 	bl	80050f8 <xTaskResumeAll>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10a      	bne.n	8005ce6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005cd0:	4b09      	ldr	r3, [pc, #36]	@ (8005cf8 <prvProcessTimerOrBlockTask+0x98>)
 8005cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	f3bf 8f6f 	isb	sy
}
 8005ce0:	e001      	b.n	8005ce6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ce2:	f7ff fa09 	bl	80050f8 <xTaskResumeAll>
}
 8005ce6:	bf00      	nop
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000d84 	.word	0x20000d84
 8005cf4:	20000d88 	.word	0x20000d88
 8005cf8:	e000ed04 	.word	0xe000ed04

08005cfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d04:	4b0e      	ldr	r3, [pc, #56]	@ (8005d40 <prvGetNextExpireTime+0x44>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <prvGetNextExpireTime+0x16>
 8005d0e:	2201      	movs	r2, #1
 8005d10:	e000      	b.n	8005d14 <prvGetNextExpireTime+0x18>
 8005d12:	2200      	movs	r2, #0
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d105      	bne.n	8005d2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d20:	4b07      	ldr	r3, [pc, #28]	@ (8005d40 <prvGetNextExpireTime+0x44>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	e001      	b.n	8005d30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d30:	68fb      	ldr	r3, [r7, #12]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	20000d80 	.word	0x20000d80

08005d44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d4c:	f7ff fa72 	bl	8005234 <xTaskGetTickCount>
 8005d50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d52:	4b0b      	ldr	r3, [pc, #44]	@ (8005d80 <prvSampleTimeNow+0x3c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d205      	bcs.n	8005d68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d5c:	f000 f93a 	bl	8005fd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	e002      	b.n	8005d6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d6e:	4a04      	ldr	r2, [pc, #16]	@ (8005d80 <prvSampleTimeNow+0x3c>)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d74:	68fb      	ldr	r3, [r7, #12]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000d90 	.word	0x20000d90

08005d84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d92:	2300      	movs	r3, #0
 8005d94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d812      	bhi.n	8005dd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	1ad2      	subs	r2, r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d302      	bcc.n	8005dbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	e01b      	b.n	8005df6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005dbe:	4b10      	ldr	r3, [pc, #64]	@ (8005e00 <prvInsertTimerInActiveList+0x7c>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4610      	mov	r0, r2
 8005dca:	f7fe f9e6 	bl	800419a <vListInsert>
 8005dce:	e012      	b.n	8005df6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d206      	bcs.n	8005de6 <prvInsertTimerInActiveList+0x62>
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d302      	bcc.n	8005de6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005de0:	2301      	movs	r3, #1
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	e007      	b.n	8005df6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005de6:	4b07      	ldr	r3, [pc, #28]	@ (8005e04 <prvInsertTimerInActiveList+0x80>)
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3304      	adds	r3, #4
 8005dee:	4619      	mov	r1, r3
 8005df0:	4610      	mov	r0, r2
 8005df2:	f7fe f9d2 	bl	800419a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005df6:	697b      	ldr	r3, [r7, #20]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20000d84 	.word	0x20000d84
 8005e04:	20000d80 	.word	0x20000d80

08005e08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08e      	sub	sp, #56	@ 0x38
 8005e0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e0e:	e0ce      	b.n	8005fae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	da19      	bge.n	8005e4a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e16:	1d3b      	adds	r3, r7, #4
 8005e18:	3304      	adds	r3, #4
 8005e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10b      	bne.n	8005e3a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	61fb      	str	r3, [r7, #28]
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	e7fd      	b.n	8005e36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e40:	6850      	ldr	r0, [r2, #4]
 8005e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e44:	6892      	ldr	r2, [r2, #8]
 8005e46:	4611      	mov	r1, r2
 8005e48:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f2c0 80ae 	blt.w	8005fae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d004      	beq.n	8005e68 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e60:	3304      	adds	r3, #4
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fe f9d2 	bl	800420c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e68:	463b      	mov	r3, r7
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff ff6a 	bl	8005d44 <prvSampleTimeNow>
 8005e70:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b09      	cmp	r3, #9
 8005e76:	f200 8097 	bhi.w	8005fa8 <prvProcessReceivedCommands+0x1a0>
 8005e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e80 <prvProcessReceivedCommands+0x78>)
 8005e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e80:	08005ea9 	.word	0x08005ea9
 8005e84:	08005ea9 	.word	0x08005ea9
 8005e88:	08005ea9 	.word	0x08005ea9
 8005e8c:	08005f1f 	.word	0x08005f1f
 8005e90:	08005f33 	.word	0x08005f33
 8005e94:	08005f7f 	.word	0x08005f7f
 8005e98:	08005ea9 	.word	0x08005ea9
 8005e9c:	08005ea9 	.word	0x08005ea9
 8005ea0:	08005f1f 	.word	0x08005f1f
 8005ea4:	08005f33 	.word	0x08005f33
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005eae:	f043 0301 	orr.w	r3, r3, #1
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	18d1      	adds	r1, r2, r3
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ec6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ec8:	f7ff ff5c 	bl	8005d84 <prvInsertTimerInActiveList>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d06c      	beq.n	8005fac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ed8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005edc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d061      	beq.n	8005fac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	441a      	add	r2, r3
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005efa:	f7ff fe01 	bl	8005b00 <xTimerGenericCommand>
 8005efe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d152      	bne.n	8005fac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	61bb      	str	r3, [r7, #24]
}
 8005f18:	bf00      	nop
 8005f1a:	bf00      	nop
 8005f1c:	e7fd      	b.n	8005f1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f24:	f023 0301 	bic.w	r3, r3, #1
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005f30:	e03d      	b.n	8005fae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f38:	f043 0301 	orr.w	r3, r3, #1
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10b      	bne.n	8005f6a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	617b      	str	r3, [r7, #20]
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop
 8005f68:	e7fd      	b.n	8005f66 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	18d1      	adds	r1, r2, r3
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f78:	f7ff ff04 	bl	8005d84 <prvInsertTimerInActiveList>
					break;
 8005f7c:	e017      	b.n	8005fae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d103      	bne.n	8005f94 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005f8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f8e:	f000 fbeb 	bl	8006768 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f92:	e00c      	b.n	8005fae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f9a:	f023 0301 	bic.w	r3, r3, #1
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005fa6:	e002      	b.n	8005fae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005fa8:	bf00      	nop
 8005faa:	e000      	b.n	8005fae <prvProcessReceivedCommands+0x1a6>
					break;
 8005fac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fae:	4b08      	ldr	r3, [pc, #32]	@ (8005fd0 <prvProcessReceivedCommands+0x1c8>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	1d39      	adds	r1, r7, #4
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fe fbfc 	bl	80047b4 <xQueueReceive>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f47f af26 	bne.w	8005e10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	3730      	adds	r7, #48	@ 0x30
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000d88 	.word	0x20000d88

08005fd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fda:	e049      	b.n	8006070 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8006098 <prvSwitchTimerLists+0xc4>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8006098 <prvSwitchTimerLists+0xc4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fe f909 	bl	800420c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d02f      	beq.n	8006070 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4413      	add	r3, r2
 8006018:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	429a      	cmp	r2, r3
 8006020:	d90e      	bls.n	8006040 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800602e:	4b1a      	ldr	r3, [pc, #104]	@ (8006098 <prvSwitchTimerLists+0xc4>)
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3304      	adds	r3, #4
 8006036:	4619      	mov	r1, r3
 8006038:	4610      	mov	r0, r2
 800603a:	f7fe f8ae 	bl	800419a <vListInsert>
 800603e:	e017      	b.n	8006070 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006040:	2300      	movs	r3, #0
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	2300      	movs	r3, #0
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	2100      	movs	r1, #0
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7ff fd58 	bl	8005b00 <xTimerGenericCommand>
 8006050:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10b      	bne.n	8006070 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	603b      	str	r3, [r7, #0]
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	e7fd      	b.n	800606c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006070:	4b09      	ldr	r3, [pc, #36]	@ (8006098 <prvSwitchTimerLists+0xc4>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1b0      	bne.n	8005fdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800607a:	4b07      	ldr	r3, [pc, #28]	@ (8006098 <prvSwitchTimerLists+0xc4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006080:	4b06      	ldr	r3, [pc, #24]	@ (800609c <prvSwitchTimerLists+0xc8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a04      	ldr	r2, [pc, #16]	@ (8006098 <prvSwitchTimerLists+0xc4>)
 8006086:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006088:	4a04      	ldr	r2, [pc, #16]	@ (800609c <prvSwitchTimerLists+0xc8>)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	6013      	str	r3, [r2, #0]
}
 800608e:	bf00      	nop
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000d80 	.word	0x20000d80
 800609c:	20000d84 	.word	0x20000d84

080060a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80060a6:	f000 f96f 	bl	8006388 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80060aa:	4b15      	ldr	r3, [pc, #84]	@ (8006100 <prvCheckForValidListAndQueue+0x60>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d120      	bne.n	80060f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80060b2:	4814      	ldr	r0, [pc, #80]	@ (8006104 <prvCheckForValidListAndQueue+0x64>)
 80060b4:	f7fe f820 	bl	80040f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80060b8:	4813      	ldr	r0, [pc, #76]	@ (8006108 <prvCheckForValidListAndQueue+0x68>)
 80060ba:	f7fe f81d 	bl	80040f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80060be:	4b13      	ldr	r3, [pc, #76]	@ (800610c <prvCheckForValidListAndQueue+0x6c>)
 80060c0:	4a10      	ldr	r2, [pc, #64]	@ (8006104 <prvCheckForValidListAndQueue+0x64>)
 80060c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060c4:	4b12      	ldr	r3, [pc, #72]	@ (8006110 <prvCheckForValidListAndQueue+0x70>)
 80060c6:	4a10      	ldr	r2, [pc, #64]	@ (8006108 <prvCheckForValidListAndQueue+0x68>)
 80060c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060ca:	2300      	movs	r3, #0
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	4b11      	ldr	r3, [pc, #68]	@ (8006114 <prvCheckForValidListAndQueue+0x74>)
 80060d0:	4a11      	ldr	r2, [pc, #68]	@ (8006118 <prvCheckForValidListAndQueue+0x78>)
 80060d2:	2110      	movs	r1, #16
 80060d4:	200a      	movs	r0, #10
 80060d6:	f7fe f92d 	bl	8004334 <xQueueGenericCreateStatic>
 80060da:	4603      	mov	r3, r0
 80060dc:	4a08      	ldr	r2, [pc, #32]	@ (8006100 <prvCheckForValidListAndQueue+0x60>)
 80060de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060e0:	4b07      	ldr	r3, [pc, #28]	@ (8006100 <prvCheckForValidListAndQueue+0x60>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d005      	beq.n	80060f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060e8:	4b05      	ldr	r3, [pc, #20]	@ (8006100 <prvCheckForValidListAndQueue+0x60>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	490b      	ldr	r1, [pc, #44]	@ (800611c <prvCheckForValidListAndQueue+0x7c>)
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe fd52 	bl	8004b98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060f4:	f000 f97a 	bl	80063ec <vPortExitCritical>
}
 80060f8:	bf00      	nop
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000d88 	.word	0x20000d88
 8006104:	20000d58 	.word	0x20000d58
 8006108:	20000d6c 	.word	0x20000d6c
 800610c:	20000d80 	.word	0x20000d80
 8006110:	20000d84 	.word	0x20000d84
 8006114:	20000e34 	.word	0x20000e34
 8006118:	20000d94 	.word	0x20000d94
 800611c:	08006a64 	.word	0x08006a64

08006120 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3b04      	subs	r3, #4
 8006130:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3b04      	subs	r3, #4
 800613e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f023 0201 	bic.w	r2, r3, #1
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3b04      	subs	r3, #4
 800614e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006150:	4a0c      	ldr	r2, [pc, #48]	@ (8006184 <pxPortInitialiseStack+0x64>)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3b14      	subs	r3, #20
 800615a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3b04      	subs	r3, #4
 8006166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f06f 0202 	mvn.w	r2, #2
 800616e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3b20      	subs	r3, #32
 8006174:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006176:	68fb      	ldr	r3, [r7, #12]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	08006189 	.word	0x08006189

08006188 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006192:	4b13      	ldr	r3, [pc, #76]	@ (80061e0 <prvTaskExitError+0x58>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800619a:	d00b      	beq.n	80061b4 <prvTaskExitError+0x2c>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	60fb      	str	r3, [r7, #12]
}
 80061ae:	bf00      	nop
 80061b0:	bf00      	nop
 80061b2:	e7fd      	b.n	80061b0 <prvTaskExitError+0x28>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	60bb      	str	r3, [r7, #8]
}
 80061c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061c8:	bf00      	nop
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0fc      	beq.n	80061ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	2000000c 	.word	0x2000000c
	...

080061f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061f0:	4b07      	ldr	r3, [pc, #28]	@ (8006210 <pxCurrentTCBConst2>)
 80061f2:	6819      	ldr	r1, [r3, #0]
 80061f4:	6808      	ldr	r0, [r1, #0]
 80061f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fa:	f380 8809 	msr	PSP, r0
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f04f 0000 	mov.w	r0, #0
 8006206:	f380 8811 	msr	BASEPRI, r0
 800620a:	4770      	bx	lr
 800620c:	f3af 8000 	nop.w

08006210 <pxCurrentTCBConst2>:
 8006210:	20000858 	.word	0x20000858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop

08006218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006218:	4808      	ldr	r0, [pc, #32]	@ (800623c <prvPortStartFirstTask+0x24>)
 800621a:	6800      	ldr	r0, [r0, #0]
 800621c:	6800      	ldr	r0, [r0, #0]
 800621e:	f380 8808 	msr	MSP, r0
 8006222:	f04f 0000 	mov.w	r0, #0
 8006226:	f380 8814 	msr	CONTROL, r0
 800622a:	b662      	cpsie	i
 800622c:	b661      	cpsie	f
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	df00      	svc	0
 8006238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800623a:	bf00      	nop
 800623c:	e000ed08 	.word	0xe000ed08

08006240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006246:	4b47      	ldr	r3, [pc, #284]	@ (8006364 <xPortStartScheduler+0x124>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a47      	ldr	r2, [pc, #284]	@ (8006368 <xPortStartScheduler+0x128>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d10b      	bne.n	8006268 <xPortStartScheduler+0x28>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	613b      	str	r3, [r7, #16]
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	e7fd      	b.n	8006264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006268:	4b3e      	ldr	r3, [pc, #248]	@ (8006364 <xPortStartScheduler+0x124>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a3f      	ldr	r2, [pc, #252]	@ (800636c <xPortStartScheduler+0x12c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d10b      	bne.n	800628a <xPortStartScheduler+0x4a>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	60fb      	str	r3, [r7, #12]
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	e7fd      	b.n	8006286 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800628a:	4b39      	ldr	r3, [pc, #228]	@ (8006370 <xPortStartScheduler+0x130>)
 800628c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	22ff      	movs	r2, #255	@ 0xff
 800629a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	4b31      	ldr	r3, [pc, #196]	@ (8006374 <xPortStartScheduler+0x134>)
 80062b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062b2:	4b31      	ldr	r3, [pc, #196]	@ (8006378 <xPortStartScheduler+0x138>)
 80062b4:	2207      	movs	r2, #7
 80062b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062b8:	e009      	b.n	80062ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80062ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006378 <xPortStartScheduler+0x138>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3b01      	subs	r3, #1
 80062c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006378 <xPortStartScheduler+0x138>)
 80062c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d6:	2b80      	cmp	r3, #128	@ 0x80
 80062d8:	d0ef      	beq.n	80062ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062da:	4b27      	ldr	r3, [pc, #156]	@ (8006378 <xPortStartScheduler+0x138>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f1c3 0307 	rsb	r3, r3, #7
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d00b      	beq.n	80062fe <xPortStartScheduler+0xbe>
	__asm volatile
 80062e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	60bb      	str	r3, [r7, #8]
}
 80062f8:	bf00      	nop
 80062fa:	bf00      	nop
 80062fc:	e7fd      	b.n	80062fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006378 <xPortStartScheduler+0x138>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	4a1c      	ldr	r2, [pc, #112]	@ (8006378 <xPortStartScheduler+0x138>)
 8006306:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006308:	4b1b      	ldr	r3, [pc, #108]	@ (8006378 <xPortStartScheduler+0x138>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006310:	4a19      	ldr	r2, [pc, #100]	@ (8006378 <xPortStartScheduler+0x138>)
 8006312:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	b2da      	uxtb	r2, r3
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800631c:	4b17      	ldr	r3, [pc, #92]	@ (800637c <xPortStartScheduler+0x13c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a16      	ldr	r2, [pc, #88]	@ (800637c <xPortStartScheduler+0x13c>)
 8006322:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006326:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006328:	4b14      	ldr	r3, [pc, #80]	@ (800637c <xPortStartScheduler+0x13c>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a13      	ldr	r2, [pc, #76]	@ (800637c <xPortStartScheduler+0x13c>)
 800632e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006332:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006334:	f000 f8da 	bl	80064ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006338:	4b11      	ldr	r3, [pc, #68]	@ (8006380 <xPortStartScheduler+0x140>)
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800633e:	f000 f8f9 	bl	8006534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006342:	4b10      	ldr	r3, [pc, #64]	@ (8006384 <xPortStartScheduler+0x144>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a0f      	ldr	r2, [pc, #60]	@ (8006384 <xPortStartScheduler+0x144>)
 8006348:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800634c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800634e:	f7ff ff63 	bl	8006218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006352:	f7ff f839 	bl	80053c8 <vTaskSwitchContext>
	prvTaskExitError();
 8006356:	f7ff ff17 	bl	8006188 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	e000ed00 	.word	0xe000ed00
 8006368:	410fc271 	.word	0x410fc271
 800636c:	410fc270 	.word	0x410fc270
 8006370:	e000e400 	.word	0xe000e400
 8006374:	20000e84 	.word	0x20000e84
 8006378:	20000e88 	.word	0x20000e88
 800637c:	e000ed20 	.word	0xe000ed20
 8006380:	2000000c 	.word	0x2000000c
 8006384:	e000ef34 	.word	0xe000ef34

08006388 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	607b      	str	r3, [r7, #4]
}
 80063a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063a2:	4b10      	ldr	r3, [pc, #64]	@ (80063e4 <vPortEnterCritical+0x5c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3301      	adds	r3, #1
 80063a8:	4a0e      	ldr	r2, [pc, #56]	@ (80063e4 <vPortEnterCritical+0x5c>)
 80063aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80063ac:	4b0d      	ldr	r3, [pc, #52]	@ (80063e4 <vPortEnterCritical+0x5c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d110      	bne.n	80063d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063b4:	4b0c      	ldr	r3, [pc, #48]	@ (80063e8 <vPortEnterCritical+0x60>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00b      	beq.n	80063d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	603b      	str	r3, [r7, #0]
}
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop
 80063d4:	e7fd      	b.n	80063d2 <vPortEnterCritical+0x4a>
	}
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	2000000c 	.word	0x2000000c
 80063e8:	e000ed04 	.word	0xe000ed04

080063ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063f2:	4b12      	ldr	r3, [pc, #72]	@ (800643c <vPortExitCritical+0x50>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10b      	bne.n	8006412 <vPortExitCritical+0x26>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	607b      	str	r3, [r7, #4]
}
 800640c:	bf00      	nop
 800640e:	bf00      	nop
 8006410:	e7fd      	b.n	800640e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006412:	4b0a      	ldr	r3, [pc, #40]	@ (800643c <vPortExitCritical+0x50>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3b01      	subs	r3, #1
 8006418:	4a08      	ldr	r2, [pc, #32]	@ (800643c <vPortExitCritical+0x50>)
 800641a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800641c:	4b07      	ldr	r3, [pc, #28]	@ (800643c <vPortExitCritical+0x50>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d105      	bne.n	8006430 <vPortExitCritical+0x44>
 8006424:	2300      	movs	r3, #0
 8006426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	f383 8811 	msr	BASEPRI, r3
}
 800642e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	2000000c 	.word	0x2000000c

08006440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006440:	f3ef 8009 	mrs	r0, PSP
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	4b15      	ldr	r3, [pc, #84]	@ (80064a0 <pxCurrentTCBConst>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	f01e 0f10 	tst.w	lr, #16
 8006450:	bf08      	it	eq
 8006452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645a:	6010      	str	r0, [r2, #0]
 800645c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006460:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006464:	f380 8811 	msr	BASEPRI, r0
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f7fe ffaa 	bl	80053c8 <vTaskSwitchContext>
 8006474:	f04f 0000 	mov.w	r0, #0
 8006478:	f380 8811 	msr	BASEPRI, r0
 800647c:	bc09      	pop	{r0, r3}
 800647e:	6819      	ldr	r1, [r3, #0]
 8006480:	6808      	ldr	r0, [r1, #0]
 8006482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006486:	f01e 0f10 	tst.w	lr, #16
 800648a:	bf08      	it	eq
 800648c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006490:	f380 8809 	msr	PSP, r0
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	f3af 8000 	nop.w

080064a0 <pxCurrentTCBConst>:
 80064a0:	20000858 	.word	0x20000858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop

080064a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	607b      	str	r3, [r7, #4]
}
 80064c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064c2:	f7fe fec7 	bl	8005254 <xTaskIncrementTick>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064cc:	4b06      	ldr	r3, [pc, #24]	@ (80064e8 <xPortSysTickHandler+0x40>)
 80064ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	2300      	movs	r3, #0
 80064d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	f383 8811 	msr	BASEPRI, r3
}
 80064de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064e0:	bf00      	nop
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	e000ed04 	.word	0xe000ed04

080064ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006520 <vPortSetupTimerInterrupt+0x34>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006524 <vPortSetupTimerInterrupt+0x38>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006528 <vPortSetupTimerInterrupt+0x3c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a0a      	ldr	r2, [pc, #40]	@ (800652c <vPortSetupTimerInterrupt+0x40>)
 8006502:	fba2 2303 	umull	r2, r3, r2, r3
 8006506:	099b      	lsrs	r3, r3, #6
 8006508:	4a09      	ldr	r2, [pc, #36]	@ (8006530 <vPortSetupTimerInterrupt+0x44>)
 800650a:	3b01      	subs	r3, #1
 800650c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800650e:	4b04      	ldr	r3, [pc, #16]	@ (8006520 <vPortSetupTimerInterrupt+0x34>)
 8006510:	2207      	movs	r2, #7
 8006512:	601a      	str	r2, [r3, #0]
}
 8006514:	bf00      	nop
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	e000e010 	.word	0xe000e010
 8006524:	e000e018 	.word	0xe000e018
 8006528:	20000000 	.word	0x20000000
 800652c:	10624dd3 	.word	0x10624dd3
 8006530:	e000e014 	.word	0xe000e014

08006534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006534:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006544 <vPortEnableVFP+0x10>
 8006538:	6801      	ldr	r1, [r0, #0]
 800653a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800653e:	6001      	str	r1, [r0, #0]
 8006540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006542:	bf00      	nop
 8006544:	e000ed88 	.word	0xe000ed88

08006548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800654e:	f3ef 8305 	mrs	r3, IPSR
 8006552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b0f      	cmp	r3, #15
 8006558:	d915      	bls.n	8006586 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800655a:	4a18      	ldr	r2, [pc, #96]	@ (80065bc <vPortValidateInterruptPriority+0x74>)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006564:	4b16      	ldr	r3, [pc, #88]	@ (80065c0 <vPortValidateInterruptPriority+0x78>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	7afa      	ldrb	r2, [r7, #11]
 800656a:	429a      	cmp	r2, r3
 800656c:	d20b      	bcs.n	8006586 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	607b      	str	r3, [r7, #4]
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	e7fd      	b.n	8006582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006586:	4b0f      	ldr	r3, [pc, #60]	@ (80065c4 <vPortValidateInterruptPriority+0x7c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800658e:	4b0e      	ldr	r3, [pc, #56]	@ (80065c8 <vPortValidateInterruptPriority+0x80>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d90b      	bls.n	80065ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	603b      	str	r3, [r7, #0]
}
 80065a8:	bf00      	nop
 80065aa:	bf00      	nop
 80065ac:	e7fd      	b.n	80065aa <vPortValidateInterruptPriority+0x62>
	}
 80065ae:	bf00      	nop
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	e000e3f0 	.word	0xe000e3f0
 80065c0:	20000e84 	.word	0x20000e84
 80065c4:	e000ed0c 	.word	0xe000ed0c
 80065c8:	20000e88 	.word	0x20000e88

080065cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b08a      	sub	sp, #40	@ 0x28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065d4:	2300      	movs	r3, #0
 80065d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065d8:	f7fe fd80 	bl	80050dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006750 <pvPortMalloc+0x184>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065e4:	f000 f924 	bl	8006830 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006754 <pvPortMalloc+0x188>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4013      	ands	r3, r2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f040 8095 	bne.w	8006720 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01e      	beq.n	800663a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80065fc:	2208      	movs	r2, #8
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4413      	add	r3, r2
 8006602:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	2b00      	cmp	r3, #0
 800660c:	d015      	beq.n	800663a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f023 0307 	bic.w	r3, r3, #7
 8006614:	3308      	adds	r3, #8
 8006616:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00b      	beq.n	800663a <pvPortMalloc+0x6e>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	617b      	str	r3, [r7, #20]
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	e7fd      	b.n	8006636 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d06f      	beq.n	8006720 <pvPortMalloc+0x154>
 8006640:	4b45      	ldr	r3, [pc, #276]	@ (8006758 <pvPortMalloc+0x18c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	429a      	cmp	r2, r3
 8006648:	d86a      	bhi.n	8006720 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800664a:	4b44      	ldr	r3, [pc, #272]	@ (800675c <pvPortMalloc+0x190>)
 800664c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800664e:	4b43      	ldr	r3, [pc, #268]	@ (800675c <pvPortMalloc+0x190>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006654:	e004      	b.n	8006660 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	429a      	cmp	r2, r3
 8006668:	d903      	bls.n	8006672 <pvPortMalloc+0xa6>
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f1      	bne.n	8006656 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006672:	4b37      	ldr	r3, [pc, #220]	@ (8006750 <pvPortMalloc+0x184>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006678:	429a      	cmp	r2, r3
 800667a:	d051      	beq.n	8006720 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2208      	movs	r2, #8
 8006682:	4413      	add	r3, r2
 8006684:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	1ad2      	subs	r2, r2, r3
 8006696:	2308      	movs	r3, #8
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	429a      	cmp	r2, r3
 800669c:	d920      	bls.n	80066e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800669e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4413      	add	r3, r2
 80066a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <pvPortMalloc+0xfc>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	613b      	str	r3, [r7, #16]
}
 80066c2:	bf00      	nop
 80066c4:	bf00      	nop
 80066c6:	e7fd      	b.n	80066c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	1ad2      	subs	r2, r2, r3
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066da:	69b8      	ldr	r0, [r7, #24]
 80066dc:	f000 f90a 	bl	80068f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006758 <pvPortMalloc+0x18c>)
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006758 <pvPortMalloc+0x18c>)
 80066ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006758 <pvPortMalloc+0x18c>)
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006760 <pvPortMalloc+0x194>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d203      	bcs.n	8006702 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066fa:	4b17      	ldr	r3, [pc, #92]	@ (8006758 <pvPortMalloc+0x18c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a18      	ldr	r2, [pc, #96]	@ (8006760 <pvPortMalloc+0x194>)
 8006700:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	4b13      	ldr	r3, [pc, #76]	@ (8006754 <pvPortMalloc+0x188>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	431a      	orrs	r2, r3
 800670c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006716:	4b13      	ldr	r3, [pc, #76]	@ (8006764 <pvPortMalloc+0x198>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3301      	adds	r3, #1
 800671c:	4a11      	ldr	r2, [pc, #68]	@ (8006764 <pvPortMalloc+0x198>)
 800671e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006720:	f7fe fcea 	bl	80050f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00b      	beq.n	8006746 <pvPortMalloc+0x17a>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	60fb      	str	r3, [r7, #12]
}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	e7fd      	b.n	8006742 <pvPortMalloc+0x176>
	return pvReturn;
 8006746:	69fb      	ldr	r3, [r7, #28]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3728      	adds	r7, #40	@ 0x28
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	20004a94 	.word	0x20004a94
 8006754:	20004aa8 	.word	0x20004aa8
 8006758:	20004a98 	.word	0x20004a98
 800675c:	20004a8c 	.word	0x20004a8c
 8006760:	20004a9c 	.word	0x20004a9c
 8006764:	20004aa0 	.word	0x20004aa0

08006768 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d04f      	beq.n	800681a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800677a:	2308      	movs	r3, #8
 800677c:	425b      	negs	r3, r3
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4413      	add	r3, r2
 8006782:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	4b25      	ldr	r3, [pc, #148]	@ (8006824 <vPortFree+0xbc>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4013      	ands	r3, r2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10b      	bne.n	80067ae <vPortFree+0x46>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	60fb      	str	r3, [r7, #12]
}
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
 80067ac:	e7fd      	b.n	80067aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00b      	beq.n	80067ce <vPortFree+0x66>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	60bb      	str	r3, [r7, #8]
}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	e7fd      	b.n	80067ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	4b14      	ldr	r3, [pc, #80]	@ (8006824 <vPortFree+0xbc>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4013      	ands	r3, r2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01e      	beq.n	800681a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d11a      	bne.n	800681a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006824 <vPortFree+0xbc>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	43db      	mvns	r3, r3
 80067ee:	401a      	ands	r2, r3
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067f4:	f7fe fc72 	bl	80050dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006828 <vPortFree+0xc0>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4413      	add	r3, r2
 8006802:	4a09      	ldr	r2, [pc, #36]	@ (8006828 <vPortFree+0xc0>)
 8006804:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006806:	6938      	ldr	r0, [r7, #16]
 8006808:	f000 f874 	bl	80068f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800680c:	4b07      	ldr	r3, [pc, #28]	@ (800682c <vPortFree+0xc4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3301      	adds	r3, #1
 8006812:	4a06      	ldr	r2, [pc, #24]	@ (800682c <vPortFree+0xc4>)
 8006814:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006816:	f7fe fc6f 	bl	80050f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800681a:	bf00      	nop
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20004aa8 	.word	0x20004aa8
 8006828:	20004a98 	.word	0x20004a98
 800682c:	20004aa4 	.word	0x20004aa4

08006830 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006836:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800683a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800683c:	4b27      	ldr	r3, [pc, #156]	@ (80068dc <prvHeapInit+0xac>)
 800683e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00c      	beq.n	8006864 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3307      	adds	r3, #7
 800684e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0307 	bic.w	r3, r3, #7
 8006856:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	4a1f      	ldr	r2, [pc, #124]	@ (80068dc <prvHeapInit+0xac>)
 8006860:	4413      	add	r3, r2
 8006862:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006868:	4a1d      	ldr	r2, [pc, #116]	@ (80068e0 <prvHeapInit+0xb0>)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800686e:	4b1c      	ldr	r3, [pc, #112]	@ (80068e0 <prvHeapInit+0xb0>)
 8006870:	2200      	movs	r2, #0
 8006872:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	4413      	add	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800687c:	2208      	movs	r2, #8
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	1a9b      	subs	r3, r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0307 	bic.w	r3, r3, #7
 800688a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a15      	ldr	r2, [pc, #84]	@ (80068e4 <prvHeapInit+0xb4>)
 8006890:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006892:	4b14      	ldr	r3, [pc, #80]	@ (80068e4 <prvHeapInit+0xb4>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2200      	movs	r2, #0
 8006898:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800689a:	4b12      	ldr	r3, [pc, #72]	@ (80068e4 <prvHeapInit+0xb4>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2200      	movs	r2, #0
 80068a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	1ad2      	subs	r2, r2, r3
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068b0:	4b0c      	ldr	r3, [pc, #48]	@ (80068e4 <prvHeapInit+0xb4>)
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	4a0a      	ldr	r2, [pc, #40]	@ (80068e8 <prvHeapInit+0xb8>)
 80068be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	4a09      	ldr	r2, [pc, #36]	@ (80068ec <prvHeapInit+0xbc>)
 80068c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068c8:	4b09      	ldr	r3, [pc, #36]	@ (80068f0 <prvHeapInit+0xc0>)
 80068ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80068ce:	601a      	str	r2, [r3, #0]
}
 80068d0:	bf00      	nop
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	20000e8c 	.word	0x20000e8c
 80068e0:	20004a8c 	.word	0x20004a8c
 80068e4:	20004a94 	.word	0x20004a94
 80068e8:	20004a9c 	.word	0x20004a9c
 80068ec:	20004a98 	.word	0x20004a98
 80068f0:	20004aa8 	.word	0x20004aa8

080068f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068fc:	4b28      	ldr	r3, [pc, #160]	@ (80069a0 <prvInsertBlockIntoFreeList+0xac>)
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	e002      	b.n	8006908 <prvInsertBlockIntoFreeList+0x14>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	429a      	cmp	r2, r3
 8006910:	d8f7      	bhi.n	8006902 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	4413      	add	r3, r2
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	429a      	cmp	r2, r3
 8006922:	d108      	bne.n	8006936 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	441a      	add	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	441a      	add	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d118      	bne.n	800697c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	4b15      	ldr	r3, [pc, #84]	@ (80069a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d00d      	beq.n	8006972 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	441a      	add	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	e008      	b.n	8006984 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006972:	4b0c      	ldr	r3, [pc, #48]	@ (80069a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e003      	b.n	8006984 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	429a      	cmp	r2, r3
 800698a:	d002      	beq.n	8006992 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006992:	bf00      	nop
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	20004a8c 	.word	0x20004a8c
 80069a4:	20004a94 	.word	0x20004a94

080069a8 <memset>:
 80069a8:	4402      	add	r2, r0
 80069aa:	4603      	mov	r3, r0
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d100      	bne.n	80069b2 <memset+0xa>
 80069b0:	4770      	bx	lr
 80069b2:	f803 1b01 	strb.w	r1, [r3], #1
 80069b6:	e7f9      	b.n	80069ac <memset+0x4>

080069b8 <__libc_init_array>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	4d0d      	ldr	r5, [pc, #52]	@ (80069f0 <__libc_init_array+0x38>)
 80069bc:	4c0d      	ldr	r4, [pc, #52]	@ (80069f4 <__libc_init_array+0x3c>)
 80069be:	1b64      	subs	r4, r4, r5
 80069c0:	10a4      	asrs	r4, r4, #2
 80069c2:	2600      	movs	r6, #0
 80069c4:	42a6      	cmp	r6, r4
 80069c6:	d109      	bne.n	80069dc <__libc_init_array+0x24>
 80069c8:	4d0b      	ldr	r5, [pc, #44]	@ (80069f8 <__libc_init_array+0x40>)
 80069ca:	4c0c      	ldr	r4, [pc, #48]	@ (80069fc <__libc_init_array+0x44>)
 80069cc:	f000 f826 	bl	8006a1c <_init>
 80069d0:	1b64      	subs	r4, r4, r5
 80069d2:	10a4      	asrs	r4, r4, #2
 80069d4:	2600      	movs	r6, #0
 80069d6:	42a6      	cmp	r6, r4
 80069d8:	d105      	bne.n	80069e6 <__libc_init_array+0x2e>
 80069da:	bd70      	pop	{r4, r5, r6, pc}
 80069dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e0:	4798      	blx	r3
 80069e2:	3601      	adds	r6, #1
 80069e4:	e7ee      	b.n	80069c4 <__libc_init_array+0xc>
 80069e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ea:	4798      	blx	r3
 80069ec:	3601      	adds	r6, #1
 80069ee:	e7f2      	b.n	80069d6 <__libc_init_array+0x1e>
 80069f0:	08006af8 	.word	0x08006af8
 80069f4:	08006af8 	.word	0x08006af8
 80069f8:	08006af8 	.word	0x08006af8
 80069fc:	08006afc 	.word	0x08006afc

08006a00 <memcpy>:
 8006a00:	440a      	add	r2, r1
 8006a02:	4291      	cmp	r1, r2
 8006a04:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006a08:	d100      	bne.n	8006a0c <memcpy+0xc>
 8006a0a:	4770      	bx	lr
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a16:	4291      	cmp	r1, r2
 8006a18:	d1f9      	bne.n	8006a0e <memcpy+0xe>
 8006a1a:	bd10      	pop	{r4, pc}

08006a1c <_init>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	bf00      	nop
 8006a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a22:	bc08      	pop	{r3}
 8006a24:	469e      	mov	lr, r3
 8006a26:	4770      	bx	lr

08006a28 <_fini>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	bf00      	nop
 8006a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2e:	bc08      	pop	{r3}
 8006a30:	469e      	mov	lr, r3
 8006a32:	4770      	bx	lr
